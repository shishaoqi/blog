<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;

class ArticlesTableSeeder extends Seeder
{

    /**
     * Auto generated seed file
     *
     * @return void
     */
    public function run()
    {
        

        \DB::table('articles')->delete();
        
        \DB::table('articles')->insert(array (
            0 => 
            array (
                'id' => 1,
                'category_id' => 1,
                'collection_id' => 0,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'xbuix',
                'title' => '博客开篇',
                'subtitle' => 'Get busy living, or get busy dying',
            'content' => '{"raw":"\\u5f00\\u7bc7\\u4e4b\\u4f5c\\uff0c\\u8bf4\\u6765\\u771f\\u662f\\u60ed\\u6127\\uff0c\\u5de5\\u4f5c6\\u5e74\\u591a\\u540e\\uff0c\\u624d\\u4e0b\\u51b3\\u5fc3\\u5199\\u535a\\u5ba2\\u3002\\u5e94\\u4e00\\u53e5\\u529d\\u6d6a\\u5b50\\u5e38\\u9053\\u7684\\u8bdd--\\u4ece\\u4efb\\u4f55\\u65f6\\u523b\\u8d77\\u90fd\\u4e0d\\u7b97\\u665a\\u3002\\u4e0d\\u7b97\\u665a\\uff0c\\u665a\\u4e86\\u4ec0\\u4e48\\u5462\\uff0c\\u9752\\u6625\\u3001\\u6210\\u5c31\\u3001\\u672a\\u6765\\u7684\\u65b9\\u5411\\u4e00\\u65f6\\u5168\\u5411\\u6211\\u6d8c\\u6765...\\n\\n\\u6211\\u662f\\u5df230\\u5c81\\u7684\\u7a0b\\u5e8f\\u5458\\uff0c\\u4e00\\u4e2a\\u628a\\u4e00\\u5e74\\u7ecf\\u9a8c\\u6df7\\u4e866\\u5e74\\u996d\\u7684\\u5047\\u7a0b\\u5e8f\\u5458\\uff0c\\u66fe\\u4e8c\\u5341\\u51e0\\u65f6\\uff0c\\u662f\\u4e0d\\u5e26\\u672a\\u6765\\u8981\\u600e\\u4e48\\u53bb\\u53d1\\u5c55\\u7684\\u4e0a\\u73ed\\uff0c\\u4e00\\u604d5\\u30016\\u5e74\\u5c31\\u8fd9\\u4e48\\u8fc7\\u53bb\\uff0c\\u56de\\u60f3\\u8d77\\u4e0d\\u514d\\u771f\\u6709\\u6d51\\u6d51\\u5669\\u5669\\u4e4b\\u611f\\u3002\\n\\n\\u4ece\\u798f\\u5dde\\u6bd5\\u4e1a\\u540e\\uff0c\\u5728\\u798f\\u5dde\\u5de5\\u4f5c\\u4e00\\u5e74\\u540e\\uff0c\\u8f97\\u8f6c\\u53a6\\u95e8\\uff0c\\u5e94\\u8058\\u4e0a 43\\uff0c\\u8fd9\\u6bb5\\u65f6\\u95f4\\u9664\\u4e0a\\u73ed\\uff0c\\u4e0b\\u73ed\\u540e\\u51e0\\u672c\\u662f\\u73a9\\u6e38\\u620f\\uff0c\\u6709\\u65f6\\u8fd8\\u73a9\\u5230\\u5f71\\u54cd\\u4e0a\\u73ed\\u3002\\u53ea\\u5076\\u5c14\\u89c9\\u5f97\\u8981\\u5b66\\u4e60\\u4e0b\\uff0c\\u624d\\u53bb\\u94bb\\u4e86\\u94bb Laravel \\u7684\\u4f7f\\u7528\\u3002\\u4e00\\u526f\\u81ea\\u547d\\u4e0d\\u51e1\\u52a0\\u4e0a\\u4e0e\\u76f4\\u5c5e\\u4e0a\\u53f8\\u76f8\\u5904\\u4e0d\\u662f\\u5f88\\u5408\\u5f97\\u6765\\uff0c\\u4e0d\\u5230\\u4e00\\u5e74\\u65f6\\u957f\\u540e\\u9009\\u62e9\\u57282017\\u5e743\\u6708\\u79bb\\u804c\\u3002\\u4e00\\u4e2a\\u6ca1\\u6709\\u8d23\\u4efb\\u5728\\u8eab\\uff0c\\u8bf4\\u7684\\u662f\\u6ca1\\u5973\\u670b\\u53cb\\u4e5f\\u6ca1\\u6709\\u5bb6\\u5ead\\u7684\\u8d1f\\u62c5\\uff0c\\u4e8e\\u662f\\u4e4e\\u8fd9\\u4e48\\u88f8\\u8f9e\\uff0c\\u4e00\\u5207\\u90fd\\u662f\\u90a3\\u4e48\\u968f\\u5fc3\\u6240\\u6b32\\u3002\\n\\n\\u95f2\\u7740\\u7684\\u90a3\\u6bb5\\u65f6\\u95f4\\uff0c\\u95f2\\u7740\\u4e5f\\u662f\\u95f2\\u7740\\uff0c\\u4eb2\\u54e5\\u5728\\u521b\\u4e1a\\u7a7a\\u95f4\\u641e\\u521b\\u4e1a\\uff0c\\u4ed6\\u6709\\u9700\\u6c42\\u6211\\u5c31\\u8fd9\\u4e48\\u8fc7\\u53bb\\u641e\\u4e86\\u641e\\u3002\\u6211\\u662f\\u4e00\\u4e2a\\u4e0d\\u9002\\u5408\\u521b\\u4e1a\\u7684\\u4eba\\u5427\\uff0c\\u52a0\\u4e0a\\u90a3\\u6bb5\\u65f6\\u95f4\\u771f\\u662f\\u81ea\\u4f5c\\u81ea\\u53d7\\uff0c\\u7092\\u8d77\\u4e86\\u80a1\\u7968\\uff0c\\u671f\\u95f4\\u8fd8\\u88ab\\u53ef\\u6076\\u7684\\u5c0f\\u5077\\u5077\\u53bb\\u4e86\\u4e00\\u8f86\\u5c71\\u5730\\u8f66\\u3002\\u80a1\\u7968\\u4e0a\\u628a\\u94b1\\u5149\\u4e86\\uff0c\\u521b\\u4e1a\\u8def\\u4e5f\\u51e0\\u4e4e\\u5728\\u4e00\\u9ad8\\u4eba\\u7684\\u70b9\\u62e8\\u4e0b\\u8ba4\\u5b9a\\u8981\\u9000\\u51fa\\u3002\\u5728\\u5c06\\u8fd14\\u4e2a\\u6708\\u521b\\u4e1a\\u65f6\\u95f4\\u540e\\uff0c\\u6211\\u91cd\\u65b0\\u5f00\\u59cb\\u627e\\u5de5\\u4f5c\\uff0c\\u4e8e\\u662f\\u8fdb\\u5165\\u4e86\\u4e00\\u5bb6\\u505a\\u516c\\u6709\\u4e91\\u7684\\u4f01\\u4e1a\\u3002\\u65f6\\u95f4\\u70b9\\uff0c\\u6211\\u90fd\\u5f88\\u8bb0\\u5f97 2017\\u5e748\\u6708\\u591a\\u5165\\u804c\\u7684\\u3002\\u6ca1\\u6709\\u8d23\\u4efb\\u4e0e\\u62b1\\u8d1f\\u662f\\u53ef\\u6015\\u7684\\uff0c\\u73b0\\u5728\\u56de\\u60f3\\u8d77\\u8fd9\\u4e9b\\u4f3c\\u4e4e\\u8fd1\\u5728\\u6628\\u65e5\\u7684\\u65e5\\u5b50\\uff0c\\u5f80\\u5f80\\u6709\\u7740\\u60cb\\u60dc\\u4e0e\\u4f24\\u611f\\uff0c\\u600e\\u4e48\\u8fd9\\u4e48\\u65e0\\u77e5\\u5462\\uff0c\\u4e3a\\u4ec0\\u4e48\\u4e0d\\u4e0a\\u8fdb\\u70b9\\u5462\\uff0c\\u600e\\u4e48\\u4e0d\\u575a\\u6301\\u505a\\u597d\\u5b66\\u4e60\\u7684\\u4e8b\\u5462\\u3002\\u66f4\\u52a0\\u8ba9\\u81ea\\u5df1\\u5fc3\\u75db\\u7684\\u662f\\u4e3a\\u4ec0\\u4e48\\u4e0d\\u5438\\u53d6\\u4e0d\\u9002\\u5408\\u505a\\u80a1\\u7968\\u7684\\u6559\\u8bad--\\u56e0\\u4e3a\\u5b83\\u4f1a\\u4e25\\u91cd\\u7684\\u5f71\\u54cd\\u5f00\\u53d1\\u8005\\u5411\\u6280\\u672f\\u5c71\\u5cf0\\u6500\\u767b\\u7684\\u51b3\\u5fc3\\uff0c\\u66f4\\u5360\\u7528\\u8d70\\u8fd9\\u6761\\u8def\\u7684\\u5b9d\\u8d35\\u65f6\\u95f4\\u3002.....\\u6545\\u4e8b\\u592a\\u957f\\uff0c\\u6b64\\u5904\\u6709\\u7701\\u7565\\u53f7\\u6765\\u8868\\u793a\\u65f6\\u95f4\\u9f7f\\u8f6e\\u5230\\u8fbe\\u4e86\\u6b64\\u535a\\u6587\\u521b\\u5efa\\u65f6\\u95f4 2020-09-13\\u3002\\n\\n\\u6709\\u4e2a\\u5f88\\u5929\\u771f\\u7684\\u60f3\\u6cd5\\uff0c\\u5982\\u679c\\u4e0d\\u505a\\u7a0b\\u5e8f\\u5458\\u4e86\\uff0c\\u662f\\u5426\\u6211\\u53ef\\u4ee5\\u6210\\u4e3a\\u4e00\\u4e2a\\u4ea4\\u6613\\u5458\\u5462\\uff1f\\u6700\\u7ec8\\uff0c\\u5e26\\u7740\\u8fd9\\u4e2a\\u60f3\\u6cd5\\u7684\\u6211\\u4e00\\u6b65\\u6b65\\u8d70\\u5411\\u4e86\\u6094\\u6068\\u7684\\u6df1\\u6e0a\\uff0c\\u5728\\u8fd9\\u5c31\\u4e0d\\u900f\\u9732\\u8fc7\\u591a\\uff0c\\u4e5f\\u6ca1\\u8138\\u6765\\u8bf4\\uff0c\\u4f46\\u6211\\u8981\\u5728\\u516c\\u5f00\\u5ba3\\u8a93\\uff0c\\u6211\\u7edd\\u4e0d\\u4f1a\\u73b0\\u78b0\\u80a1\\u7968\\u4e0e\\u6570\\u5b57\\u8d27\\u5e01\\uff0c\\u4e5f\\u4e0d\\u53bb\\u5173\\u6ce8\\u5b83\\u4eec\\u3002\\u4ee5\\u540e\\u6211\\u7684\\u4eba\\u751f\\u8def\\u53ea\\u4e0e\\u6280\\u672f\\u4e3a\\u4f34\\uff0c\\u4e0d\\u53bb\\u8bba\\u6280\\u672f\\u53ef\\u4ee5\\u4e3a\\u6211\\u5e26\\u6765\\u591a\\u5927\\u7684\\u8d22\\u5bcc\\uff0c\\u6211\\u53ea\\u5e0c\\u671b\\u5b83\\u7684\\u5145\\u5b9e\\u6211\\u4ee5\\u540e\\u7684\\u4eba\\u751f\\uff0c\\u5982\\u679c\\u53ef\\u4ee5\\u8ba9\\u5b83\\u6765\\u5b9e\\u73b0\\u81ea\\u6211\\u7684\\u5f71\\u54cd\\u529b\\uff0c\\u8fdb\\u800c\\u8d70\\u51fa\\u53e6\\u4e00\\u756a\\u5929\\u5730\\u3002\\n\\n\\u5f00\\u7bc7\\u4e4b\\u4f5c\\uff0c\\u4e0d\\u77e5\\u4e0d\\u89c9\\u6210\\u4e86\\u5fcf\\u6094\\u4e4b\\u4f5c\\u4e86\\uff0c\\u89c1\\u7b11\\u4e86[\\u5c34\\u5c2c]\\u3002\\u6700\\u540e\\u7528\\u5927\\u90e8\\u5206\\u4eba\\u6700\\u559c\\u6b22\\u7684\\u7535\\u5f71\\u300a\\u8096\\u7533\\u514b\\u7684\\u6551\\u8d4e\\u300b\\u7684\\u53f0\\u8bcd\\u6765\\u7ed3\\u5c3e\\uff1a\\n\\nI look back on the way I was then a young stupid kid who committed that terrible crime. I want to talk to him. I want to try and talk some sense to him. Tell him the way things are. But I can\'t. That kid\'s long gone and this old man is all that\'s left. I got to live with that.\\n\\nbut:\\n\\nI guess it comes down to a simple choice.  Get busy living, or get busy dying.\\n\\nRemember, hope is a good thing, maybe the best of things. And no good thing ever dies.\\n\\n![\\u8096\\u7533\\u514b\\u7684\\u6551\\u8d4eBD\\u53cc\\u8bed\\u53cc\\u5b57\\u4fee\\u590d\\u7248[\\u7535\\u5f71\\u5929\\u5802www.dy2018.com]_20200914011110.JPG](http:\\/\\/shishao.320.io:8090\\/storage\\/article\\/2020\\/09\\/13\\/1ogHPR7ltFoO8MMlsnuQ6zfCZIWbRBfbH63qpiFO.jpg)","html":"<p>\\u5f00\\u7bc7\\u4e4b\\u4f5c\\uff0c\\u8bf4\\u6765\\u771f\\u662f\\u60ed\\u6127\\uff0c\\u5de5\\u4f5c6\\u5e74\\u591a\\u540e\\uff0c\\u624d\\u4e0b\\u51b3\\u5fc3\\u5199\\u535a\\u5ba2\\u3002\\u5e94\\u4e00\\u53e5\\u529d\\u6d6a\\u5b50\\u5e38\\u9053\\u7684\\u8bdd--\\u4ece\\u4efb\\u4f55\\u65f6\\u523b\\u8d77\\u90fd\\u4e0d\\u7b97\\u665a\\u3002\\u4e0d\\u7b97\\u665a\\uff0c\\u665a\\u4e86\\u4ec0\\u4e48\\u5462\\uff0c\\u9752\\u6625\\u3001\\u6210\\u5c31\\u3001\\u672a\\u6765\\u7684\\u65b9\\u5411\\u4e00\\u65f6\\u5168\\u5411\\u6211\\u6d8c\\u6765...<\\/p>\\n<p>\\u6211\\u662f\\u5df230\\u5c81\\u7684\\u7a0b\\u5e8f\\u5458\\uff0c\\u4e00\\u4e2a\\u628a\\u4e00\\u5e74\\u7ecf\\u9a8c\\u6df7\\u4e866\\u5e74\\u996d\\u7684\\u5047\\u7a0b\\u5e8f\\u5458\\uff0c\\u66fe\\u4e8c\\u5341\\u51e0\\u65f6\\uff0c\\u662f\\u4e0d\\u5e26\\u672a\\u6765\\u8981\\u600e\\u4e48\\u53bb\\u53d1\\u5c55\\u7684\\u4e0a\\u73ed\\uff0c\\u4e00\\u604d5\\u30016\\u5e74\\u5c31\\u8fd9\\u4e48\\u8fc7\\u53bb\\uff0c\\u56de\\u60f3\\u8d77\\u4e0d\\u514d\\u771f\\u6709\\u6d51\\u6d51\\u5669\\u5669\\u4e4b\\u611f\\u3002<\\/p>\\n<p>\\u4ece\\u798f\\u5dde\\u6bd5\\u4e1a\\u540e\\uff0c\\u5728\\u798f\\u5dde\\u5de5\\u4f5c\\u4e00\\u5e74\\u540e\\uff0c\\u8f97\\u8f6c\\u53a6\\u95e8\\uff0c\\u5e94\\u8058\\u4e0a 43\\uff0c\\u8fd9\\u6bb5\\u65f6\\u95f4\\u9664\\u4e0a\\u73ed\\uff0c\\u4e0b\\u73ed\\u540e\\u51e0\\u672c\\u662f\\u73a9\\u6e38\\u620f\\uff0c\\u6709\\u65f6\\u8fd8\\u73a9\\u5230\\u5f71\\u54cd\\u4e0a\\u73ed\\u3002\\u53ea\\u5076\\u5c14\\u89c9\\u5f97\\u8981\\u5b66\\u4e60\\u4e0b\\uff0c\\u624d\\u53bb\\u94bb\\u4e86\\u94bb Laravel \\u7684\\u4f7f\\u7528\\u3002\\u4e00\\u526f\\u81ea\\u547d\\u4e0d\\u51e1\\u52a0\\u4e0a\\u4e0e\\u76f4\\u5c5e\\u4e0a\\u53f8\\u76f8\\u5904\\u4e0d\\u662f\\u5f88\\u5408\\u5f97\\u6765\\uff0c\\u4e0d\\u5230\\u4e00\\u5e74\\u65f6\\u957f\\u540e\\u9009\\u62e9\\u57282017\\u5e743\\u6708\\u79bb\\u804c\\u3002\\u4e00\\u4e2a\\u6ca1\\u6709\\u8d23\\u4efb\\u5728\\u8eab\\uff0c\\u8bf4\\u7684\\u662f\\u6ca1\\u5973\\u670b\\u53cb\\u4e5f\\u6ca1\\u6709\\u5bb6\\u5ead\\u7684\\u8d1f\\u62c5\\uff0c\\u4e8e\\u662f\\u4e4e\\u8fd9\\u4e48\\u88f8\\u8f9e\\uff0c\\u4e00\\u5207\\u90fd\\u662f\\u90a3\\u4e48\\u968f\\u5fc3\\u6240\\u6b32\\u3002<\\/p>\\n<p>\\u95f2\\u7740\\u7684\\u90a3\\u6bb5\\u65f6\\u95f4\\uff0c\\u95f2\\u7740\\u4e5f\\u662f\\u95f2\\u7740\\uff0c\\u4eb2\\u54e5\\u5728\\u521b\\u4e1a\\u7a7a\\u95f4\\u641e\\u521b\\u4e1a\\uff0c\\u4ed6\\u6709\\u9700\\u6c42\\u6211\\u5c31\\u8fd9\\u4e48\\u8fc7\\u53bb\\u641e\\u4e86\\u641e\\u3002\\u6211\\u662f\\u4e00\\u4e2a\\u4e0d\\u9002\\u5408\\u521b\\u4e1a\\u7684\\u4eba\\u5427\\uff0c\\u52a0\\u4e0a\\u90a3\\u6bb5\\u65f6\\u95f4\\u771f\\u662f\\u81ea\\u4f5c\\u81ea\\u53d7\\uff0c\\u7092\\u8d77\\u4e86\\u80a1\\u7968\\uff0c\\u671f\\u95f4\\u8fd8\\u88ab\\u53ef\\u6076\\u7684\\u5c0f\\u5077\\u5077\\u53bb\\u4e86\\u4e00\\u8f86\\u5c71\\u5730\\u8f66\\u3002\\u80a1\\u7968\\u4e0a\\u628a\\u94b1\\u5149\\u4e86\\uff0c\\u521b\\u4e1a\\u8def\\u4e5f\\u51e0\\u4e4e\\u5728\\u4e00\\u9ad8\\u4eba\\u7684\\u70b9\\u62e8\\u4e0b\\u8ba4\\u5b9a\\u8981\\u9000\\u51fa\\u3002\\u5728\\u5c06\\u8fd14\\u4e2a\\u6708\\u521b\\u4e1a\\u65f6\\u95f4\\u540e\\uff0c\\u6211\\u91cd\\u65b0\\u5f00\\u59cb\\u627e\\u5de5\\u4f5c\\uff0c\\u4e8e\\u662f\\u8fdb\\u5165\\u4e86\\u4e00\\u5bb6\\u505a\\u516c\\u6709\\u4e91\\u7684\\u4f01\\u4e1a\\u3002\\u65f6\\u95f4\\u70b9\\uff0c\\u6211\\u90fd\\u5f88\\u8bb0\\u5f97 2017\\u5e748\\u6708\\u591a\\u5165\\u804c\\u7684\\u3002\\u6ca1\\u6709\\u8d23\\u4efb\\u4e0e\\u62b1\\u8d1f\\u662f\\u53ef\\u6015\\u7684\\uff0c\\u73b0\\u5728\\u56de\\u60f3\\u8d77\\u8fd9\\u4e9b\\u4f3c\\u4e4e\\u8fd1\\u5728\\u6628\\u65e5\\u7684\\u65e5\\u5b50\\uff0c\\u5f80\\u5f80\\u6709\\u7740\\u60cb\\u60dc\\u4e0e\\u4f24\\u611f\\uff0c\\u600e\\u4e48\\u8fd9\\u4e48\\u65e0\\u77e5\\u5462\\uff0c\\u4e3a\\u4ec0\\u4e48\\u4e0d\\u4e0a\\u8fdb\\u70b9\\u5462\\uff0c\\u600e\\u4e48\\u4e0d\\u575a\\u6301\\u505a\\u597d\\u5b66\\u4e60\\u7684\\u4e8b\\u5462\\u3002\\u66f4\\u52a0\\u8ba9\\u81ea\\u5df1\\u5fc3\\u75db\\u7684\\u662f\\u4e3a\\u4ec0\\u4e48\\u4e0d\\u5438\\u53d6\\u4e0d\\u9002\\u5408\\u505a\\u80a1\\u7968\\u7684\\u6559\\u8bad--\\u56e0\\u4e3a\\u5b83\\u4f1a\\u4e25\\u91cd\\u7684\\u5f71\\u54cd\\u5f00\\u53d1\\u8005\\u5411\\u6280\\u672f\\u5c71\\u5cf0\\u6500\\u767b\\u7684\\u51b3\\u5fc3\\uff0c\\u66f4\\u5360\\u7528\\u8d70\\u8fd9\\u6761\\u8def\\u7684\\u5b9d\\u8d35\\u65f6\\u95f4\\u3002.....\\u6545\\u4e8b\\u592a\\u957f\\uff0c\\u6b64\\u5904\\u6709\\u7701\\u7565\\u53f7\\u6765\\u8868\\u793a\\u65f6\\u95f4\\u9f7f\\u8f6e\\u5230\\u8fbe\\u4e86\\u6b64\\u535a\\u6587\\u521b\\u5efa\\u65f6\\u95f4 2020-09-13\\u3002<\\/p>\\n<p>\\u6709\\u4e2a\\u5f88\\u5929\\u771f\\u7684\\u60f3\\u6cd5\\uff0c\\u5982\\u679c\\u4e0d\\u505a\\u7a0b\\u5e8f\\u5458\\u4e86\\uff0c\\u662f\\u5426\\u6211\\u53ef\\u4ee5\\u6210\\u4e3a\\u4e00\\u4e2a\\u4ea4\\u6613\\u5458\\u5462\\uff1f\\u6700\\u7ec8\\uff0c\\u5e26\\u7740\\u8fd9\\u4e2a\\u60f3\\u6cd5\\u7684\\u6211\\u4e00\\u6b65\\u6b65\\u8d70\\u5411\\u4e86\\u6094\\u6068\\u7684\\u6df1\\u6e0a\\uff0c\\u5728\\u8fd9\\u5c31\\u4e0d\\u900f\\u9732\\u8fc7\\u591a\\uff0c\\u4e5f\\u6ca1\\u8138\\u6765\\u8bf4\\uff0c\\u4f46\\u6211\\u8981\\u5728\\u516c\\u5f00\\u5ba3\\u8a93\\uff0c\\u6211\\u7edd\\u4e0d\\u4f1a\\u73b0\\u78b0\\u80a1\\u7968\\u4e0e\\u6570\\u5b57\\u8d27\\u5e01\\uff0c\\u4e5f\\u4e0d\\u53bb\\u5173\\u6ce8\\u5b83\\u4eec\\u3002\\u4ee5\\u540e\\u6211\\u7684\\u4eba\\u751f\\u8def\\u53ea\\u4e0e\\u6280\\u672f\\u4e3a\\u4f34\\uff0c\\u4e0d\\u53bb\\u8bba\\u6280\\u672f\\u53ef\\u4ee5\\u4e3a\\u6211\\u5e26\\u6765\\u591a\\u5927\\u7684\\u8d22\\u5bcc\\uff0c\\u6211\\u53ea\\u5e0c\\u671b\\u5b83\\u7684\\u5145\\u5b9e\\u6211\\u4ee5\\u540e\\u7684\\u4eba\\u751f\\uff0c\\u5982\\u679c\\u53ef\\u4ee5\\u8ba9\\u5b83\\u6765\\u5b9e\\u73b0\\u81ea\\u6211\\u7684\\u5f71\\u54cd\\u529b\\uff0c\\u8fdb\\u800c\\u8d70\\u51fa\\u53e6\\u4e00\\u756a\\u5929\\u5730\\u3002<\\/p>\\n<p>\\u5f00\\u7bc7\\u4e4b\\u4f5c\\uff0c\\u4e0d\\u77e5\\u4e0d\\u89c9\\u6210\\u4e86\\u5fcf\\u6094\\u4e4b\\u4f5c\\u4e86\\uff0c\\u89c1\\u7b11\\u4e86[\\u5c34\\u5c2c]\\u3002\\u6700\\u540e\\u7528\\u5927\\u90e8\\u5206\\u4eba\\u6700\\u559c\\u6b22\\u7684\\u7535\\u5f71\\u300a\\u8096\\u7533\\u514b\\u7684\\u6551\\u8d4e\\u300b\\u7684\\u53f0\\u8bcd\\u6765\\u7ed3\\u5c3e\\uff1a<\\/p>\\n<p>I look back on the way I was then a young stupid kid who committed that terrible crime. I want to talk to him. I want to try and talk some sense to him. Tell him the way things are. But I can\'t. That kid\'s long gone and this old man is all that\'s left. I got to live with that.<\\/p>\\n<p>but:<\\/p>\\n<p>I guess it comes down to a simple choice.  Get busy living, or get busy dying.<\\/p>\\n<p>Remember, hope is a good thing, maybe the best of things. And no good thing ever dies.<\\/p>\\n<p><img src=\\"http:\\/\\/shishao.320.io:8090\\/storage\\/article\\/2020\\/09\\/13\\/1ogHPR7ltFoO8MMlsnuQ6zfCZIWbRBfbH63qpiFO.jpg\\" alt=\\"\\u8096\\u7533\\u514b\\u7684\\u6551\\u8d4eBD\\u53cc\\u8bed\\u53cc\\u5b57\\u4fee\\u590d\\u7248[\\u7535\\u5f71\\u5929\\u5802www.dy2018.com]_20200914011110.JPG\\" \\/><\\/p>"}',
                'page_image' => 'http://shishao.320.io:8090/storage/cover/2020/09/13/4QFKdGhOVZMen0cT4DvhqFqLt1O5ASFQv6xOFmrV.jpg',
                'meta_description' => '开篇之作，说来真是惭愧，工作6年多后，才下决心写博客。应一句劝浪子常道的话--从任何时刻起都不算晚。不算晚，晚了什么呢，青春、成就、未来的方向一时全向我涌来...',
                'is_original' => 1,
                'is_draft' => 1,
                'view_count' => 34,
                'published_at' => '2020-09-13 22:59:00',
                'created_at' => '2020-09-13 17:18:39',
                'updated_at' => '2021-07-10 09:30:17',
                'deleted_at' => NULL,
            ),
            1 => 
            array (
                'id' => 2,
                'category_id' => 5,
                'collection_id' => 2,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'redis-waagu',
                'title' => 'redis 源码讲解开篇',
                'subtitle' => '从数据结构及核心模块开始，一步一步分析 redis 的组成',
            'content' => '{"raw":"\\u55e8\\uff0c\\u7ec8\\u4e8e\\u5f00\\u59cb\\u300aredis\\u6e90\\u7801\\u89e3\\u8bfb\\u300b\\u7cfb\\u5217\\u6587\\u7ae0 -- \\u5f00\\u7bc7\\u3002\\u5de5\\u4f5c\\u4e2d\\u5199\\u7684\\u90fd\\u662fphp\\u4ee3\\u7801\\uff0c\\u7b97\\u662f\\u5b8c\\u5168\\u4e00\\u4e2aPHPer\\uff1b\\u4f46\\u5728\\u5927\\u5b66\\u65f6\\u5019\\u5b66\\u4e60\\u7f16\\u7a0b\\u7684\\u5165\\u95e8\\u662f C\\u8bed\\u8a00\\uff0c\\u5bf9C\\u8fd8\\u7b97\\u662f\\u559c\\u6b22\\u3002\\u8bf4\\u6765\\u60ed\\u6127\\uff0c\\u5de5\\u4f5c\\u4e2d\\u4e00\\u76f4\\u4ee5php\\u4e3a\\u4e3b\\uff0c\\u5165\\u95e8\\u7684\\u8bed\\u8a00\\u6e10\\u6e10\\u8352\\u5e9f\\u4e86\\uff0c\\u5de5\\u4f5c\\u4e2d\\u4f1a\\u9047\\u5230\\u8bb8\\u8bb8\\u591a\\u591a\\u7684\\u95ee\\u9898\\uff0c\\u4e00\\u4e2a\\u95ee\\u9898\\u8981\\u77e5\\u9053\\u5176\\u539f\\u56e0\\u5f80\\u5f80\\u4e0d\\u662f\\u4e00\\u4e24\\u4e2a\\u77e5\\u8bc6\\u70b9\\u80fd\\u5f97\\u4ee5\\u89e3\\u7b54\\uff0c\\u5b83\\u53ef\\u80fd\\u7275\\u8fde\\u7740\\u64cd\\u4f5c\\u7cfb\\u7edf\\u3001\\u7f51\\u7edc\\u534f\\u8bae\\u3001\\u8ba1\\u7b97\\u673a\\u539f\\u7406\\u3001\\u7f16\\u8bd1\\u6c47\\u7f16\\u7b49\\uff0c\\u4e0d\\u77e5\\u4e0d\\u89c9\\u8d8a\\u6765\\u4f53\\u4f1a\\u5230C\\u7684\\u91cd\\u8981\\u6027\\u3002\\u4f46\\u8fd8\\u597d\\uff0cC\\u8fd8\\u80fd\\u770b\\u61c2\\uff0c\\u987a\\u4fbf\\u628a\\u5fc3\\u4e2d\\u79ef\\u538b\\u5df2\\u4e45\\u7684\\u60f3\\u6cd5\\u53bb\\u6267\\u884c\\u4e0b\\uff0c\\u4e00\\u6765\\u53ef\\u4ee5\\u7ec3\\u4e60\\u67e5\\u770b\\u6e90\\u4ee3\\u7801\\u80fd\\u529b\\uff0c\\u8fd8\\u6709\\u5e0c\\u671b\\u53ef\\u4ee5\\u548c\\u60f3\\u6df1\\u5165\\u5b66\\u4e60redis\\u6e90\\u7801\\u7684\\u4f19\\u4f34\\u4e00\\u8d77\\u6210\\u957f\\uff0c\\u6216\\u8ba9\\u60f3\\u5b66\\u4e60\\u6570\\u636e\\u7ed3\\u6784\\u7684\\u540c\\u5b66\\u6709\\u4e2a\\u5f88\\u597d\\u7684\\u5b66\\u4e60\\u8d44\\u6599\\u3002\\n\\nredis\\u6e90\\u7801\\u884c\\u6570\\u4f17\\u591a\\uff0c\\u6211\\u4eec\\u7b2c\\u4e00\\u6b65\\u8981\\u80fd\\u6293\\u4f4f\\u770b\\u6e90\\u7801\\u7684\\u8981\\u9886\\uff0c\\u5f53\\u524d\\u7f51\\u7edc\\u4e0a\\u6709\\u5417\\uff0c\\u6682\\u65f6\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u90fd\\u662f\\u4e00\\u4e9b\\u96f6\\u6563\\u5206\\u6790\\u3002\\u5728\\u7f51\\u4e0a\\u67e5\\u9605\\u8d44\\u6599\\uff0c\\u4e0e\\u81ea\\u5df1\\u5b9e\\u8df5\\u770bRedis\\u6e90\\u7801\\u7ed3\\u679c\\uff0c\\u521d\\u6b65\\u77e5\\u9053\\u8981\\u5982\\u4f55\\u5927\\u4f53\\u4e86\\u89e3Redis\\u5168\\u8c8c\\u3002\\u800c\\u4f60\\u8ba1\\u5212\\u8981\\u8ba4\\u771f\\u7814\\u7a76\\u6e90\\u7801\\u524d\\uff0c\\u8bf7\\u786e\\u8ba4\\u4e00\\u4ef6\\u4e8b\\u60c5\\uff1a\\u628aredis\\u5e38\\u7528\\u547d\\u4ee4\\u8fc7\\u4e00\\u904d\\uff0c\\u6ca1\\u9519\\u53ea\\u9700\\u8981\\u8fc7\\u4e00\\u904d\\uff0c\\u4ece\\u800c\\u5bf9redis\\u7684\\u6709\\u54ea\\u4e9b\\u529f\\u80fd\\u6709\\u4e2a\\u6574\\u4f53\\u8ba4\\u77e5\\uff0c\\u4e3a\\u6e90\\u4ee3\\u7801\\u7684\\u5206\\u95e8\\u522b\\u7c7b\\u6253\\u597d\\u57fa\\u7840\\u3002\\n\\nredis\\u6e90\\u7801\\u5c42\\u6b21\\u662f\\u633a\\u5206\\u660e\\u7684\\u3002\\u6839\\u636e\\u8d44\\u6599\\uff0c\\u6211\\u4eec\\u5c06redis\\u505a\\u5982\\u4e0b\\u5206\\u89e3\\uff1a\\n1. \\u6570\\u636e\\u7ed3\\u6784\\n2. \\u5185\\u5b58\\u7f16\\u7801\\u6570\\u636e\\u7ed3\\u6784\\n3. \\u6570\\u636e\\u7c7b\\u578b\\uff08\\u5bf9\\u8c61\\uff09\\n4. \\u6570\\u636e\\u5e93\\n5. \\u5ba2\\u6237\\u7aef\\u548c\\u670d\\u52a1\\u5668\\n6. \\u591a\\u673a\\u529f\\u80fd\\n\\n![redis \\u5e95\\u5c42\\u6570\\u636e\\u7ed3\\u6784](http:\\/\\/www.shishao.site\\/storage\\/cover\\/2021\\/07\\/10\\/bUpx3Ce0eizgn03EGECx3qXhLYMxPVFWLElyG2Ek.png)\\n\\n\\u4e3a\\u4ec0\\u4e48\\u8fd9\\u4e48\\u8fdb\\u884c\\u5212\\u5206\\u7684\\u5462\\uff0c\\u8bf7\\u770b [\\u5982\\u4f55\\u9605\\u8bfb Redis \\u6e90\\u7801](http:\\/\\/blog.huangz.me\\/diary\\/2014\\/how-to-read-redis-source-code.html \\"\\u5982\\u4f55\\u9605\\u8bfb Redis \\u6e90\\u7801\\") \\u8fd9\\u7bc7\\u535a\\u6587\\uff0c\\u4f60\\u5c31\\u80fd\\u660e\\u767d\\u4e86\\u3002\\u5982\\u679c\\u8fd8\\u60f3\\u66f4\\u52a0\\u7cfb\\u7edf\\u7684\\u4e86\\u89e3 redis \\u5b9e\\u73b0\\u539f\\u7406\\uff0c\\u63a8\\u8350\\u770b<<Redis\\u8bbe\\u8ba1\\u4e0e\\u5b9e\\u73b0>>\\u3002\\n\\n### \\u5bf9\\u8c61\\u4e0e\\u6570\\u636e\\u7ed3\\u6784\\nRedis \\u662fKey\\/Value \\u6570\\u636e\\u5e93\\uff0c\\u800c Key \\u603b\\u662f String\\uff08\\u5b57\\u7b26\\u4e32\\uff09\\u5bf9\\u8c61\\uff0cValue \\u662f9\\u79cd\\u5bf9\\u8c61\\u4e2d\\u7684\\u4e00\\u79cd\\uff1b9\\u79cd\\u5bf9\\u8c61\\u5206\\u522b\\u662f\\uff1a\\n+ String\\uff08\\u5b57\\u7b26\\u4e32\\uff09\\n+  Hash\\uff08\\u5b57\\u5178 or \\u54c8\\u5e0c\\uff09\\n+  List\\uff08\\u5217\\u8868\\uff09\\n+  Set\\uff08\\u96c6\\u5408\\uff09\\n+  Sort Set\\uff08\\u6709\\u5e8f\\u96c6\\u5408\\uff09  \\n+  HyperLogLog \\n+  Bit arrays\\uff08\\u4f4d\\u96c6\\u5408\\uff09\\n+  Geospatial Indexes\\uff08\\u5730\\u7406\\u7a7a\\u95f4\\u7d22\\u5f15\\uff09\\n+  Streams\\uff08\\u6d41\\u4fe1\\u606f\\uff09\\n\\n\\u6211\\u4eec\\u5e73\\u65f6\\u6240\\u64cd\\u4f5c\\u547d\\u4ee4\\uff0c\\u5c31\\u662f\\u5bf9\\u4ee5\\u4e0a\\u5bf9\\u8c61\\u7684CRUD\\u3002\\n\\n\\u5982\\u679c\\u6211\\u4eec\\u4e0d\\u5c40\\u9650\\u4e8e\\u8868\\u5c42\\uff0c\\u53bb\\u4e86\\u89e3\\u6bcf\\u79cd\\u5bf9\\u8c61\\u7684\\u5b9e\\u73b0\\uff0c\\u5c31\\u4f1a\\u77e5\\u9053\\u6bcf\\u79cd\\u5bf9\\u8c61\\u662f\\u7531\\u4ec0\\u4e48\\u6570\\u636e\\u7ed3\\u6784\\u7ec4\\u5408\\u800c\\u6210\\u7684\\u3002\\u65e2\\u7136\\u5bf9\\u8c61\\u7ed3\\u6784\\u662f\\u7531\\u6570\\u636e\\u7ed3\\u6784\\u7ec4\\u6210\\uff0c\\u90a3\\u6570\\u636e\\u7ed3\\u6784\\u53ef\\u4ee5\\u662f\\u591a\\u6837\\u7684\\u3002\\u5c31\\u597d\\u6bd4\\uff0c\\u5bf9\\u8c61\\u662f\\u7c7b\\u63a5\\u53e3\\uff0c\\u800c\\u6570\\u636e\\u7ed3\\u6784\\u662f\\u7c7b\\u5b9e\\u73b0\\uff1b\\u5b9e\\u73b0\\u65b9\\u5f0f\\u53ef\\u4ee5\\u662f\\u4efb\\u610f\\u7684\\u3002\\n\\n\\u6bcf\\u4e2a\\u5bf9\\u8c61\\u4f1a\\u7528\\u5230\\u7684\\u7f16\\u7801\\u4ee5\\u53ca\\u5bf9\\u5e94\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u8be6\\u89c1\\u4e0b\\u8868\\uff1a\\n![image.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/08\\/21\\/AfVhSq5yrtEQUgS3rBpsAblWBkY9KawGzijIwfbl.png)  \\n\\n\\u5bf9\\u8c61    | \\u7f16\\u7801   | \\u6570\\u636e\\u7ed3\\u6784\\n------ | ------| ---------\\nstring\\uff08\\u5b57\\u7b26\\u4e32\\u5bf9\\u8c61\\uff09| int | \\u53ef\\u4ee5\\u5b58\\u50a8long\\u7c7b\\u578b\\u7684\\u6574\\u6570\\nstring\\uff08\\u5b57\\u7b26\\u4e32\\u5bf9\\u8c61\\uff09| embstr | embstr\\u7f16\\u7801\\u7684\\u7b80\\u5355\\u52a8\\u6001\\u5b57\\u7b26\\u4e32\\nstring\\uff08\\u5b57\\u7b26\\u4e32\\u5bf9\\u8c61\\uff09| raw | \\u7b80\\u5355\\u52a8\\u6001\\u5b57\\u7b26\\u4e32\\uff08SDS\\uff09\\nlist\\uff08\\u5217\\u8868\\u5bf9\\u8c61\\uff09        | ziplist | \\u538b\\u7f29\\u5217\\u8868\\nlist\\uff08\\u5217\\u8868\\u5bf9\\u8c61\\uff09        | linkedlist | \\u538b\\u7f29\\u5217\\u8868\\nhash\\uff08\\u54c8\\u5e0c\\u5bf9\\u8c61\\uff09      | ziplist | \\u538b\\u7f29\\u5217\\u8868 \\nhash\\uff08\\u54c8\\u5e0c\\u5bf9\\u8c61\\uff09      | hashtable | \\u5b57\\u5178\\nset\\uff08\\u96c6\\u5408\\u5bf9\\u8c61\\uff09         | intset | \\u6574\\u6570\\u96c6\\u5408\\nset\\uff08\\u96c6\\u5408\\u5bf9\\u8c61\\uff09         | hashtable | \\u5b57\\u5178\\nzset\\uff08\\u6709\\u5e8f\\u96c6\\u5408\\u5bf9\\u8c61\\uff09| ziplist | \\u538b\\u7f29\\u5217\\u8868\\nzset\\uff08\\u6709\\u5e8f\\u96c6\\u5408\\u5bf9\\u8c61\\uff09| skiplist | \\u5b57\\u5178 + \\u8df3\\u8dc3\\u8868\\n\\n\\n\\u4ece\\u4e0a\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4e86\\u89e3\\u5230\\u6bcf\\u79cd\\u5bf9\\u8c61\\u5bf9\\u5e94\\u4e24\\u5230\\u4e09\\u7f16\\u7801\\uff08\\u6570\\u636e\\u7ed3\\u6784\\uff09\\uff0c\\u540c\\u4e00\\u5bf9\\u8c61\\u7c7b\\u578b\\uff0c\\u5728\\u4e0d\\u540c\\u7684\\u573a\\u666f\\u4e0b\\u4f1a\\u4f7f\\u7528\\u4e0d\\u540c\\u7f16\\u7801\\uff08\\u6570\\u636e\\u7ed3\\u6784\\uff09\\u3002\\u5bf9\\u8c61\\uff08Ojects\\uff09\\u5b9a\\u4e49\\u5bf9\\u5e94\\u4ee3\\u7801 server.h \\u7b2c507~511 \\u884c\\u3002\\u7f16\\u7801\\uff08Objects encoding\\uff09 \\u5b9a\\u4e49\\u5bf9\\u5e94\\u4ee3\\u7801 server.h \\u7b2c 654~664 \\u884c\\uff08redis 6.2 \\u7248\\u672c\\uff09\\u3002\\n\\n\\n\\n\\n\\u4e0b\\u9762\\u662f\\u6570\\u636e\\u7ed3\\u6784\\u6240\\u5305\\u51fd\\u7684\\u6587\\u4ef6\\uff0c\\u53ca\\u6587\\u4ef6\\u7684\\u5185\\u5bb9\\uff1a\\n1. Redis \\u6e90\\u7801\\u4e2d\\uff0c \\u5404\\u4e2a\\u6570\\u636e\\u7ed3\\u6784\\u7684\\u5b9e\\u73b0\\u6587\\u4ef6\\uff1a\\n\\n\\u6587\\u4ef6  | \\u5185\\u5bb9\\n------------- | -------------\\nsds.h \\u548c sds.c  | \\u52a8\\u6001\\u5b57\\u7b26\\u4e32\\nadlist.h \\u548c adlist.c | \\u53cc\\u7aef\\u94fe\\u8868\\ndict.h \\u548c dict.c  | \\u5b57\\u5178\\nredis.h \\u4e2d\\u7684 zskiplist \\u7ed3\\u6784\\u548c zskiplistNode \\u7ed3\\u6784\\uff0c \\u4ee5\\u53ca t_zset.c \\u4e2d\\u6240\\u6709\\u4ee5 zsl \\u5f00\\u5934\\u7684\\u51fd\\u6570\\uff0c \\u6bd4\\u5982 zslCreate \\u3001 zslInsert \\u3001 zslDeleteNode \\uff0c\\u7b49\\u7b49  | \\u8df3\\u8dc3\\u8868\\nintset.h \\u548c intset.c | \\u6574\\u6570\\u96c6\\u5408\\nziplist.h \\u548c ziplist.c | \\u538b\\u7f29\\u5217\\u8868\\nhyperloglog.c \\u4e2d\\u7684 hllhdr \\u7ed3\\u6784\\uff0c \\u4ee5\\u53ca\\u6240\\u6709\\u4ee5 hll \\u5f00\\u5934\\u7684\\u51fd\\u6570  | HyperLogLog \\u5b9e\\u73b0\\n\\n\\n\\u6570\\u636e\\u7ed3\\u6784\\u662f\\u6211\\u4eec\\u4e86\\u89e3redis\\u5b9e\\u73b0\\u7684\\u7b2c\\u4e00\\u6b65\\uff0c\\u901a\\u8fc7\\u5265\\u79bb\\u51fa\\u5b83\\u4eec\\uff0c\\u5e76\\u8ba9\\u5176\\u5355\\u72ec\\u8fd0\\u884c\\u8d77\\u6765\\uff0c\\u4ece\\u800c\\u8ba9\\u6211\\u4eec\\u6709\\u4e2a\\u6bd4\\u8f83\\u771f\\u5b9e\\u7684\\u4f53\\u4f1a\\u3002\\n\\u6211\\u4f1a\\u5728\\u6b64\\u6587\\u7684\\u6700\\u540e\\u7f57\\u5217\\u51fa\\u6b64\\u7cfb\\u5217\\u7684\\u6587\\u7ae0\\u76ee\\u5f55\\u3002\\n\\n+ \\u6570\\u636e\\u7ed3\\u6784\\n\\t+ [\\u52a8\\u6001\\u5b57\\u7b26\\u4e32 -- SDS](http:\\/\\/www.shishao.site\\/sds-16h4f)\\n\\t+ [\\u53cc\\u94fe\\u8868 -- adlist](http:\\/\\/www.shishao.site\\/redis-spkfe)\\n\\t+ [\\u5b57\\u5178 -- dict]()\\n\\t+ [\\u8df3\\u8868 -- skiplist]()\\n\\t+ [\\u96c6\\u5408 -- set]()\\n\\t+ [\\u6709\\u5e8f\\u96c6\\u5408 -- ziplist]()","html":"<p>\\u55e8\\uff0c\\u7ec8\\u4e8e\\u5f00\\u59cb\\u300aredis\\u6e90\\u7801\\u89e3\\u8bfb\\u300b\\u7cfb\\u5217\\u6587\\u7ae0 -- \\u5f00\\u7bc7\\u3002\\u5de5\\u4f5c\\u4e2d\\u5199\\u7684\\u90fd\\u662fphp\\u4ee3\\u7801\\uff0c\\u7b97\\u662f\\u5b8c\\u5168\\u4e00\\u4e2aPHPer\\uff1b\\u4f46\\u5728\\u5927\\u5b66\\u65f6\\u5019\\u5b66\\u4e60\\u7f16\\u7a0b\\u7684\\u5165\\u95e8\\u662f C\\u8bed\\u8a00\\uff0c\\u5bf9C\\u8fd8\\u7b97\\u662f\\u559c\\u6b22\\u3002\\u8bf4\\u6765\\u60ed\\u6127\\uff0c\\u5de5\\u4f5c\\u4e2d\\u4e00\\u76f4\\u4ee5php\\u4e3a\\u4e3b\\uff0c\\u5165\\u95e8\\u7684\\u8bed\\u8a00\\u6e10\\u6e10\\u8352\\u5e9f\\u4e86\\uff0c\\u5de5\\u4f5c\\u4e2d\\u4f1a\\u9047\\u5230\\u8bb8\\u8bb8\\u591a\\u591a\\u7684\\u95ee\\u9898\\uff0c\\u4e00\\u4e2a\\u95ee\\u9898\\u8981\\u77e5\\u9053\\u5176\\u539f\\u56e0\\u5f80\\u5f80\\u4e0d\\u662f\\u4e00\\u4e24\\u4e2a\\u77e5\\u8bc6\\u70b9\\u80fd\\u5f97\\u4ee5\\u89e3\\u7b54\\uff0c\\u5b83\\u53ef\\u80fd\\u7275\\u8fde\\u7740\\u64cd\\u4f5c\\u7cfb\\u7edf\\u3001\\u7f51\\u7edc\\u534f\\u8bae\\u3001\\u8ba1\\u7b97\\u673a\\u539f\\u7406\\u3001\\u7f16\\u8bd1\\u6c47\\u7f16\\u7b49\\uff0c\\u4e0d\\u77e5\\u4e0d\\u89c9\\u8d8a\\u6765\\u4f53\\u4f1a\\u5230C\\u7684\\u91cd\\u8981\\u6027\\u3002\\u4f46\\u8fd8\\u597d\\uff0cC\\u8fd8\\u80fd\\u770b\\u61c2\\uff0c\\u987a\\u4fbf\\u628a\\u5fc3\\u4e2d\\u79ef\\u538b\\u5df2\\u4e45\\u7684\\u60f3\\u6cd5\\u53bb\\u6267\\u884c\\u4e0b\\uff0c\\u4e00\\u6765\\u53ef\\u4ee5\\u7ec3\\u4e60\\u67e5\\u770b\\u6e90\\u4ee3\\u7801\\u80fd\\u529b\\uff0c\\u8fd8\\u6709\\u5e0c\\u671b\\u53ef\\u4ee5\\u548c\\u60f3\\u6df1\\u5165\\u5b66\\u4e60redis\\u6e90\\u7801\\u7684\\u4f19\\u4f34\\u4e00\\u8d77\\u6210\\u957f\\uff0c\\u6216\\u8ba9\\u60f3\\u5b66\\u4e60\\u6570\\u636e\\u7ed3\\u6784\\u7684\\u540c\\u5b66\\u6709\\u4e2a\\u5f88\\u597d\\u7684\\u5b66\\u4e60\\u8d44\\u6599\\u3002<\\/p>\\n<p>redis\\u6e90\\u7801\\u884c\\u6570\\u4f17\\u591a\\uff0c\\u6211\\u4eec\\u7b2c\\u4e00\\u6b65\\u8981\\u80fd\\u6293\\u4f4f\\u770b\\u6e90\\u7801\\u7684\\u8981\\u9886\\uff0c\\u5f53\\u524d\\u7f51\\u7edc\\u4e0a\\u6709\\u5417\\uff0c\\u6682\\u65f6\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u90fd\\u662f\\u4e00\\u4e9b\\u96f6\\u6563\\u5206\\u6790\\u3002\\u5728\\u7f51\\u4e0a\\u67e5\\u9605\\u8d44\\u6599\\uff0c\\u4e0e\\u81ea\\u5df1\\u5b9e\\u8df5\\u770bRedis\\u6e90\\u7801\\u7ed3\\u679c\\uff0c\\u521d\\u6b65\\u77e5\\u9053\\u8981\\u5982\\u4f55\\u5927\\u4f53\\u4e86\\u89e3Redis\\u5168\\u8c8c\\u3002\\u800c\\u4f60\\u8ba1\\u5212\\u8981\\u8ba4\\u771f\\u7814\\u7a76\\u6e90\\u7801\\u524d\\uff0c\\u8bf7\\u786e\\u8ba4\\u4e00\\u4ef6\\u4e8b\\u60c5\\uff1a\\u628aredis\\u5e38\\u7528\\u547d\\u4ee4\\u8fc7\\u4e00\\u904d\\uff0c\\u6ca1\\u9519\\u53ea\\u9700\\u8981\\u8fc7\\u4e00\\u904d\\uff0c\\u4ece\\u800c\\u5bf9redis\\u7684\\u6709\\u54ea\\u4e9b\\u529f\\u80fd\\u6709\\u4e2a\\u6574\\u4f53\\u8ba4\\u77e5\\uff0c\\u4e3a\\u6e90\\u4ee3\\u7801\\u7684\\u5206\\u95e8\\u522b\\u7c7b\\u6253\\u597d\\u57fa\\u7840\\u3002<\\/p>\\n<p>redis\\u6e90\\u7801\\u5c42\\u6b21\\u662f\\u633a\\u5206\\u660e\\u7684\\u3002\\u6839\\u636e\\u8d44\\u6599\\uff0c\\u6211\\u4eec\\u5c06redis\\u505a\\u5982\\u4e0b\\u5206\\u89e3\\uff1a<\\/p>\\n<ol>\\n<li>\\u6570\\u636e\\u7ed3\\u6784<\\/li>\\n<li>\\u5185\\u5b58\\u7f16\\u7801\\u6570\\u636e\\u7ed3\\u6784<\\/li>\\n<li>\\u6570\\u636e\\u7c7b\\u578b\\uff08\\u5bf9\\u8c61\\uff09<\\/li>\\n<li>\\u6570\\u636e\\u5e93<\\/li>\\n<li>\\u5ba2\\u6237\\u7aef\\u548c\\u670d\\u52a1\\u5668<\\/li>\\n<li>\\u591a\\u673a\\u529f\\u80fd<\\/li>\\n<\\/ol>\\n<p><img src=\\"http:\\/\\/www.shishao.site\\/storage\\/cover\\/2021\\/07\\/10\\/bUpx3Ce0eizgn03EGECx3qXhLYMxPVFWLElyG2Ek.png\\" alt=\\"redis \\u5e95\\u5c42\\u6570\\u636e\\u7ed3\\u6784\\" \\/><\\/p>\\n<p>\\u4e3a\\u4ec0\\u4e48\\u8fd9\\u4e48\\u8fdb\\u884c\\u5212\\u5206\\u7684\\u5462\\uff0c\\u8bf7\\u770b <a href=\\"http:\\/\\/blog.huangz.me\\/diary\\/2014\\/how-to-read-redis-source-code.html\\" title=\\"\\u5982\\u4f55\\u9605\\u8bfb Redis \\u6e90\\u7801\\">\\u5982\\u4f55\\u9605\\u8bfb Redis \\u6e90\\u7801<\\/a> \\u8fd9\\u7bc7\\u535a\\u6587\\uff0c\\u4f60\\u5c31\\u80fd\\u660e\\u767d\\u4e86\\u3002\\u5982\\u679c\\u8fd8\\u60f3\\u66f4\\u52a0\\u7cfb\\u7edf\\u7684\\u4e86\\u89e3 redis \\u5b9e\\u73b0\\u539f\\u7406\\uff0c\\u63a8\\u8350\\u770b&lt;&lt;Redis\\u8bbe\\u8ba1\\u4e0e\\u5b9e\\u73b0&gt;&gt;\\u3002<\\/p>\\n<h3>\\u5bf9\\u8c61\\u4e0e\\u6570\\u636e\\u7ed3\\u6784<\\/h3>\\n<p>Redis \\u662fKey\\/Value \\u6570\\u636e\\u5e93\\uff0c\\u800c Key \\u603b\\u662f String\\uff08\\u5b57\\u7b26\\u4e32\\uff09\\u5bf9\\u8c61\\uff0cValue \\u662f9\\u79cd\\u5bf9\\u8c61\\u4e2d\\u7684\\u4e00\\u79cd\\uff1b9\\u79cd\\u5bf9\\u8c61\\u5206\\u522b\\u662f\\uff1a<\\/p>\\n<ul>\\n<li>String\\uff08\\u5b57\\u7b26\\u4e32\\uff09<\\/li>\\n<li>Hash\\uff08\\u5b57\\u5178 or \\u54c8\\u5e0c\\uff09<\\/li>\\n<li>List\\uff08\\u5217\\u8868\\uff09<\\/li>\\n<li>Set\\uff08\\u96c6\\u5408\\uff09<\\/li>\\n<li>Sort Set\\uff08\\u6709\\u5e8f\\u96c6\\u5408\\uff09  <\\/li>\\n<li>HyperLogLog <\\/li>\\n<li>Bit arrays\\uff08\\u4f4d\\u96c6\\u5408\\uff09<\\/li>\\n<li>Geospatial Indexes\\uff08\\u5730\\u7406\\u7a7a\\u95f4\\u7d22\\u5f15\\uff09<\\/li>\\n<li>Streams\\uff08\\u6d41\\u4fe1\\u606f\\uff09<\\/li>\\n<\\/ul>\\n<p>\\u6211\\u4eec\\u5e73\\u65f6\\u6240\\u64cd\\u4f5c\\u547d\\u4ee4\\uff0c\\u5c31\\u662f\\u5bf9\\u4ee5\\u4e0a\\u5bf9\\u8c61\\u7684CRUD\\u3002<\\/p>\\n<p>\\u5982\\u679c\\u6211\\u4eec\\u4e0d\\u5c40\\u9650\\u4e8e\\u8868\\u5c42\\uff0c\\u53bb\\u4e86\\u89e3\\u6bcf\\u79cd\\u5bf9\\u8c61\\u7684\\u5b9e\\u73b0\\uff0c\\u5c31\\u4f1a\\u77e5\\u9053\\u6bcf\\u79cd\\u5bf9\\u8c61\\u662f\\u7531\\u4ec0\\u4e48\\u6570\\u636e\\u7ed3\\u6784\\u7ec4\\u5408\\u800c\\u6210\\u7684\\u3002\\u65e2\\u7136\\u5bf9\\u8c61\\u7ed3\\u6784\\u662f\\u7531\\u6570\\u636e\\u7ed3\\u6784\\u7ec4\\u6210\\uff0c\\u90a3\\u6570\\u636e\\u7ed3\\u6784\\u53ef\\u4ee5\\u662f\\u591a\\u6837\\u7684\\u3002\\u5c31\\u597d\\u6bd4\\uff0c\\u5bf9\\u8c61\\u662f\\u7c7b\\u63a5\\u53e3\\uff0c\\u800c\\u6570\\u636e\\u7ed3\\u6784\\u662f\\u7c7b\\u5b9e\\u73b0\\uff1b\\u5b9e\\u73b0\\u65b9\\u5f0f\\u53ef\\u4ee5\\u662f\\u4efb\\u610f\\u7684\\u3002<\\/p>\\n<p>\\u6bcf\\u4e2a\\u5bf9\\u8c61\\u4f1a\\u7528\\u5230\\u7684\\u7f16\\u7801\\u4ee5\\u53ca\\u5bf9\\u5e94\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u8be6\\u89c1\\u4e0b\\u8868\\uff1a<br \\/>\\n<img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/08\\/21\\/AfVhSq5yrtEQUgS3rBpsAblWBkY9KawGzijIwfbl.png\\" alt=\\"image.png\\" \\/>  <\\/p>\\n<table>\\n<thead>\\n<tr>\\n<th>\\u5bf9\\u8c61<\\/th>\\n<th>\\u7f16\\u7801<\\/th>\\n<th>\\u6570\\u636e\\u7ed3\\u6784<\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td>string\\uff08\\u5b57\\u7b26\\u4e32\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>int<\\/td>\\n<td>\\u53ef\\u4ee5\\u5b58\\u50a8long\\u7c7b\\u578b\\u7684\\u6574\\u6570<\\/td>\\n<\\/tr>\\n<tr>\\n<td>string\\uff08\\u5b57\\u7b26\\u4e32\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>embstr<\\/td>\\n<td>embstr\\u7f16\\u7801\\u7684\\u7b80\\u5355\\u52a8\\u6001\\u5b57\\u7b26\\u4e32<\\/td>\\n<\\/tr>\\n<tr>\\n<td>string\\uff08\\u5b57\\u7b26\\u4e32\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>raw<\\/td>\\n<td>\\u7b80\\u5355\\u52a8\\u6001\\u5b57\\u7b26\\u4e32\\uff08SDS\\uff09<\\/td>\\n<\\/tr>\\n<tr>\\n<td>list\\uff08\\u5217\\u8868\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>ziplist<\\/td>\\n<td>\\u538b\\u7f29\\u5217\\u8868<\\/td>\\n<\\/tr>\\n<tr>\\n<td>list\\uff08\\u5217\\u8868\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>linkedlist<\\/td>\\n<td>\\u538b\\u7f29\\u5217\\u8868<\\/td>\\n<\\/tr>\\n<tr>\\n<td>hash\\uff08\\u54c8\\u5e0c\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>ziplist<\\/td>\\n<td>\\u538b\\u7f29\\u5217\\u8868<\\/td>\\n<\\/tr>\\n<tr>\\n<td>hash\\uff08\\u54c8\\u5e0c\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>hashtable<\\/td>\\n<td>\\u5b57\\u5178<\\/td>\\n<\\/tr>\\n<tr>\\n<td>set\\uff08\\u96c6\\u5408\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>intset<\\/td>\\n<td>\\u6574\\u6570\\u96c6\\u5408<\\/td>\\n<\\/tr>\\n<tr>\\n<td>set\\uff08\\u96c6\\u5408\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>hashtable<\\/td>\\n<td>\\u5b57\\u5178<\\/td>\\n<\\/tr>\\n<tr>\\n<td>zset\\uff08\\u6709\\u5e8f\\u96c6\\u5408\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>ziplist<\\/td>\\n<td>\\u538b\\u7f29\\u5217\\u8868<\\/td>\\n<\\/tr>\\n<tr>\\n<td>zset\\uff08\\u6709\\u5e8f\\u96c6\\u5408\\u5bf9\\u8c61\\uff09<\\/td>\\n<td>skiplist<\\/td>\\n<td>\\u5b57\\u5178 + \\u8df3\\u8dc3\\u8868<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<p>\\u4ece\\u4e0a\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4e86\\u89e3\\u5230\\u6bcf\\u79cd\\u5bf9\\u8c61\\u5bf9\\u5e94\\u4e24\\u5230\\u4e09\\u7f16\\u7801\\uff08\\u6570\\u636e\\u7ed3\\u6784\\uff09\\uff0c\\u540c\\u4e00\\u5bf9\\u8c61\\u7c7b\\u578b\\uff0c\\u5728\\u4e0d\\u540c\\u7684\\u573a\\u666f\\u4e0b\\u4f1a\\u4f7f\\u7528\\u4e0d\\u540c\\u7f16\\u7801\\uff08\\u6570\\u636e\\u7ed3\\u6784\\uff09\\u3002\\u5bf9\\u8c61\\uff08Ojects\\uff09\\u5b9a\\u4e49\\u5bf9\\u5e94\\u4ee3\\u7801 server.h \\u7b2c507~511 \\u884c\\u3002\\u7f16\\u7801\\uff08Objects encoding\\uff09 \\u5b9a\\u4e49\\u5bf9\\u5e94\\u4ee3\\u7801 server.h \\u7b2c 654~664 \\u884c\\uff08redis 6.2 \\u7248\\u672c\\uff09\\u3002<\\/p>\\n<p>\\u4e0b\\u9762\\u662f\\u6570\\u636e\\u7ed3\\u6784\\u6240\\u5305\\u51fd\\u7684\\u6587\\u4ef6\\uff0c\\u53ca\\u6587\\u4ef6\\u7684\\u5185\\u5bb9\\uff1a<\\/p>\\n<ol>\\n<li>Redis \\u6e90\\u7801\\u4e2d\\uff0c \\u5404\\u4e2a\\u6570\\u636e\\u7ed3\\u6784\\u7684\\u5b9e\\u73b0\\u6587\\u4ef6\\uff1a<\\/li>\\n<\\/ol>\\n<table>\\n<thead>\\n<tr>\\n<th>\\u6587\\u4ef6<\\/th>\\n<th>\\u5185\\u5bb9<\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td>sds.h \\u548c sds.c<\\/td>\\n<td>\\u52a8\\u6001\\u5b57\\u7b26\\u4e32<\\/td>\\n<\\/tr>\\n<tr>\\n<td>adlist.h \\u548c adlist.c<\\/td>\\n<td>\\u53cc\\u7aef\\u94fe\\u8868<\\/td>\\n<\\/tr>\\n<tr>\\n<td>dict.h \\u548c dict.c<\\/td>\\n<td>\\u5b57\\u5178<\\/td>\\n<\\/tr>\\n<tr>\\n<td>redis.h \\u4e2d\\u7684 zskiplist \\u7ed3\\u6784\\u548c zskiplistNode \\u7ed3\\u6784\\uff0c \\u4ee5\\u53ca t_zset.c \\u4e2d\\u6240\\u6709\\u4ee5 zsl \\u5f00\\u5934\\u7684\\u51fd\\u6570\\uff0c \\u6bd4\\u5982 zslCreate \\u3001 zslInsert \\u3001 zslDeleteNode \\uff0c\\u7b49\\u7b49<\\/td>\\n<td>\\u8df3\\u8dc3\\u8868<\\/td>\\n<\\/tr>\\n<tr>\\n<td>intset.h \\u548c intset.c<\\/td>\\n<td>\\u6574\\u6570\\u96c6\\u5408<\\/td>\\n<\\/tr>\\n<tr>\\n<td>ziplist.h \\u548c ziplist.c<\\/td>\\n<td>\\u538b\\u7f29\\u5217\\u8868<\\/td>\\n<\\/tr>\\n<tr>\\n<td>hyperloglog.c \\u4e2d\\u7684 hllhdr \\u7ed3\\u6784\\uff0c \\u4ee5\\u53ca\\u6240\\u6709\\u4ee5 hll \\u5f00\\u5934\\u7684\\u51fd\\u6570<\\/td>\\n<td>HyperLogLog \\u5b9e\\u73b0<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<p>\\u6570\\u636e\\u7ed3\\u6784\\u662f\\u6211\\u4eec\\u4e86\\u89e3redis\\u5b9e\\u73b0\\u7684\\u7b2c\\u4e00\\u6b65\\uff0c\\u901a\\u8fc7\\u5265\\u79bb\\u51fa\\u5b83\\u4eec\\uff0c\\u5e76\\u8ba9\\u5176\\u5355\\u72ec\\u8fd0\\u884c\\u8d77\\u6765\\uff0c\\u4ece\\u800c\\u8ba9\\u6211\\u4eec\\u6709\\u4e2a\\u6bd4\\u8f83\\u771f\\u5b9e\\u7684\\u4f53\\u4f1a\\u3002<br \\/>\\n\\u6211\\u4f1a\\u5728\\u6b64\\u6587\\u7684\\u6700\\u540e\\u7f57\\u5217\\u51fa\\u6b64\\u7cfb\\u5217\\u7684\\u6587\\u7ae0\\u76ee\\u5f55\\u3002<\\/p>\\n<ul>\\n<li>\\u6570\\u636e\\u7ed3\\u6784\\n<ul>\\n<li><a href=\\"http:\\/\\/www.shishao.site\\/sds-16h4f\\">\\u52a8\\u6001\\u5b57\\u7b26\\u4e32 -- SDS<\\/a><\\/li>\\n<li><a href=\\"http:\\/\\/www.shishao.site\\/redis-spkfe\\">\\u53cc\\u94fe\\u8868 -- adlist<\\/a><\\/li>\\n<li>[\\u5b57\\u5178 -- dict]()<\\/li>\\n<li>[\\u8df3\\u8868 -- skiplist]()<\\/li>\\n<li>[\\u96c6\\u5408 -- set]()<\\/li>\\n<li>[\\u6709\\u5e8f\\u96c6\\u5408 -- ziplist]()<\\/li>\\n<\\/ul><\\/li>\\n<\\/ul>"}',
                'page_image' => NULL,
                'meta_description' => '一来可以练习查看源代码能力，还有希望可以给想深入学习redis源码的伙伴一些独特的帮助，或让想学习数据结构的同学有个很好的学习资料。',
                'is_original' => 1,
                'is_draft' => 0,
                'view_count' => 84,
                'published_at' => '2020-09-19 21:55:00',
                'created_at' => '2020-09-19 14:00:27',
                'updated_at' => '2022-01-09 15:52:12',
                'deleted_at' => NULL,
            ),
            2 => 
            array (
                'id' => 3,
                'category_id' => 8,
                'collection_id' => 3,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'makefile-gqdzl',
                'title' => '跟我一起写 Makefile -- 概述、简介与入门',
                'subtitle' => 'makefile 概述、简介及入门',
            'content' => '{"raw":"\\u6765\\u81ea\\uff1a\\u9648\\u7693\\n\\n### \\u6982\\u8ff0\\n\\n\\u4ec0\\u4e48\\u662fmakefile\\uff1f\\u6216\\u8bb8\\u5f88\\u591aWinodws\\u7684\\u7a0b\\u5e8f\\u5458\\u90fd\\u4e0d\\u77e5\\u9053\\u8fd9\\u4e2a\\u4e1c\\u897f\\uff0c\\u56e0\\u4e3a\\u90a3\\u4e9bWindows\\u7684IDE\\u90fd\\u4e3a\\u4f60\\u505a\\u4e86\\u8fd9\\u4e2a\\u5de5\\u4f5c\\uff0c\\u4f46\\u6211\\u89c9\\u5f97\\u8981\\u4f5c\\u4e00\\u4e2a\\u597d\\u7684\\u548cprofessional\\u7684\\u7a0b\\u5e8f\\u5458\\uff0cmakefile\\u8fd8\\u662f\\u8981\\u61c2\\u3002\\u8fd9\\u5c31\\u597d\\u50cf\\u73b0\\u5728\\u6709\\u8fd9\\u4e48\\u591a\\u7684HTML\\u7684\\u7f16\\u8f91\\u5668\\uff0c\\u4f46\\u5982\\u679c\\u4f60\\u60f3\\u6210\\u4e3a\\u4e00\\u4e2a\\u4e13\\u4e1a\\u4eba\\u58eb\\uff0c\\u4f60\\u8fd8\\u662f\\u8981\\u4e86\\u89e3HTML\\u7684\\u6807\\u8bc6\\u7684\\u542b\\u4e49\\u3002\\u7279\\u522b\\u5728Unix\\u4e0b\\u7684\\u8f6f\\u4ef6\\u7f16\\u8bd1\\uff0c\\u4f60\\u5c31\\u4e0d\\u80fd\\u4e0d\\u81ea\\u5df1\\u5199makefile\\u4e86\\uff0c\\u4f1a\\u4e0d\\u4f1a\\u5199makefile\\uff0c\\u4ece\\u4e00\\u4e2a\\u4fa7\\u9762\\u8bf4\\u660e\\u4e86\\u4e00\\u4e2a\\u4eba\\u662f\\u5426\\u5177\\u5907\\u5b8c\\u6210\\u5927\\u578b\\u5de5\\u7a0b\\u7684\\u80fd\\u529b\\u3002\\n\\n\\u56e0\\u4e3a\\uff0cmakefile\\u5173\\u7cfb\\u5230\\u4e86\\u6574\\u4e2a\\u5de5\\u7a0b\\u7684\\u7f16\\u8bd1\\u89c4\\u5219\\u3002\\u4e00\\u4e2a\\u5de5\\u7a0b\\u4e2d\\u7684\\u6e90\\u6587\\u4ef6\\u4e0d\\u8ba1\\u6570\\uff0c\\u5176\\u6309\\u7c7b\\u578b\\u3001\\u529f\\u80fd\\u3001\\u6a21\\u5757\\u5206\\u522b\\u653e\\u5728\\u82e5\\u5e72\\u4e2a\\u76ee\\u5f55\\u4e2d\\uff0cmakefile\\u5b9a\\u4e49\\u4e86\\u4e00\\u7cfb\\u5217\\u7684\\u89c4\\u5219\\u6765\\u6307\\u5b9a\\uff0c\\u54ea\\u4e9b\\u6587\\u4ef6\\u9700\\u8981\\u5148\\u7f16\\u8bd1\\uff0c\\u54ea\\u4e9b\\u6587\\u4ef6\\u9700\\u8981\\u540e\\u7f16\\u8bd1\\uff0c\\u54ea\\u4e9b\\u6587\\u4ef6\\u9700\\u8981\\u91cd\\u65b0\\u7f16\\u8bd1\\uff0c\\u751a\\u81f3\\u4e8e\\u8fdb\\u884c\\u66f4\\u590d\\u6742\\u7684\\u529f\\u80fd\\u64cd\\u4f5c\\uff0c\\u56e0\\u4e3amakefile\\u5c31\\u50cf\\u4e00\\u4e2aShell\\u811a\\u672c\\u4e00\\u6837\\uff0c\\u5176\\u4e2d\\u4e5f\\u53ef\\u4ee5\\u6267\\u884c\\u64cd\\u4f5c\\u7cfb\\u7edf\\u7684\\u547d\\u4ee4\\u3002\\n\\nmakefile\\u5e26\\u6765\\u7684\\u597d\\u5904\\u5c31\\u662f\\u2014\\u2014\\u201c\\u81ea\\u52a8\\u5316\\u7f16\\u8bd1\\u201d\\uff0c\\u4e00\\u65e6\\u5199\\u597d\\uff0c\\u53ea\\u9700\\u8981\\u4e00\\u4e2amake\\u547d\\u4ee4\\uff0c\\u6574\\u4e2a\\u5de5\\u7a0b\\u5b8c\\u5168\\u81ea\\u52a8\\u7f16\\u8bd1\\uff0c\\u6781\\u5927\\u7684\\u63d0\\u9ad8\\u4e86\\u8f6f\\u4ef6\\u5f00\\u53d1\\u7684\\u6548\\u7387\\u3002make\\u662f\\u4e00\\u4e2a\\u547d\\u4ee4\\u5de5\\u5177\\uff0c\\u662f\\u4e00\\u4e2a\\u89e3\\u91camakefile\\u4e2d\\u6307\\u4ee4\\u7684\\u547d\\u4ee4\\u5de5\\u5177\\uff0c\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u5927\\u591a\\u6570\\u7684IDE\\u90fd\\u6709\\u8fd9\\u4e2a\\u547d\\u4ee4\\uff0c\\u6bd4\\u5982\\uff1aDelphi\\u7684make\\uff0cVisual C++\\u7684nmake\\uff0cLinux\\u4e0bGNU\\u7684make\\u3002\\u53ef\\u89c1\\uff0cmakefile\\u90fd\\u6210\\u4e3a\\u4e86\\u4e00\\u79cd\\u5728\\u5de5\\u7a0b\\u65b9\\u9762\\u7684\\u7f16\\u8bd1\\u65b9\\u6cd5\\u3002\\n\\n\\u73b0\\u5728\\u8bb2\\u8ff0\\u5982\\u4f55\\u5199makefile\\u7684\\u6587\\u7ae0\\u6bd4\\u8f83\\u5c11\\uff0c\\u8fd9\\u662f\\u6211\\u60f3\\u5199\\u8fd9\\u7bc7\\u6587\\u7ae0\\u7684\\u539f\\u56e0\\u3002\\u5f53\\u7136\\uff0c\\u4e0d\\u540c\\u4ea7\\u5546\\u7684make\\u5404\\u4e0d\\u76f8\\u540c\\uff0c\\u4e5f\\u6709\\u4e0d\\u540c\\u7684\\u8bed\\u6cd5\\uff0c\\u4f46\\u5176\\u672c\\u8d28\\u90fd\\u662f\\u5728\\u201c\\u6587\\u4ef6\\u4f9d\\u8d56\\u6027\\u201d\\u4e0a\\u505a\\u6587\\u7ae0\\uff0c\\u8fd9\\u91cc\\uff0c\\u6211\\u4ec5\\u5bf9GNU\\u7684make\\u8fdb\\u884c\\u8bb2\\u8ff0\\uff0c\\u6211\\u7684\\u73af\\u5883\\u662fRedHat Linux 8.0\\uff0cmake\\u7684\\u7248\\u672c\\u662f3.80\\u3002\\u5fc5\\u7adf\\uff0c\\u8fd9\\u4e2amake\\u662f\\u5e94\\u7528\\u6700\\u4e3a\\u5e7f\\u6cdb\\u7684\\uff0c\\u4e5f\\u662f\\u7528\\u5f97\\u6700\\u591a\\u7684\\u3002\\u800c\\u4e14\\u5176\\u8fd8\\u662f\\u6700\\u9075\\u5faa\\u4e8eIEEE 1003.2-1992 \\u6807\\u51c6\\u7684\\uff08POSIX.2\\uff09\\u3002\\n\\n\\u5728\\u8fd9\\u7bc7\\u6587\\u6863\\u4e2d\\uff0c\\u5c06\\u4ee5C\\/C++\\u7684\\u6e90\\u7801\\u4f5c\\u4e3a\\u6211\\u4eec\\u57fa\\u7840\\uff0c\\u6240\\u4ee5\\u5fc5\\u7136\\u6d89\\u53ca\\u4e00\\u4e9b\\u5173\\u4e8eC\\/C++\\u7684\\u7f16\\u8bd1\\u7684\\u77e5\\u8bc6\\uff0c\\u76f8\\u5173\\u4e8e\\u8fd9\\u65b9\\u9762\\u7684\\u5185\\u5bb9\\uff0c\\u8fd8\\u8bf7\\u5404\\u4f4d\\u67e5\\u770b\\u76f8\\u5173\\u7684\\u7f16\\u8bd1\\u5668\\u7684\\u6587\\u6863\\u3002\\u8fd9\\u91cc\\u6240\\u9ed8\\u8ba4\\u7684\\u7f16\\u8bd1\\u5668\\u662fUNIX\\u4e0b\\u7684GCC\\u548cCC\\u3002\\n\\n \\n\\n#### \\u5173\\u4e8e\\u7a0b\\u5e8f\\u7684\\u7f16\\u8bd1\\u548c\\u94fe\\u63a5\\n\\n\\u5728\\u6b64\\uff0c\\u6211\\u60f3\\u591a\\u8bf4\\u5173\\u4e8e\\u7a0b\\u5e8f\\u7f16\\u8bd1\\u7684\\u4e00\\u4e9b\\u89c4\\u8303\\u548c\\u65b9\\u6cd5\\uff0c\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u65e0\\u8bba\\u662fC\\u3001C++\\u3001\\u8fd8\\u662fpas\\uff0c\\u9996\\u5148\\u8981\\u628a\\u6e90\\u6587\\u4ef6\\u7f16\\u8bd1\\u6210\\u4e2d\\u95f4\\u4ee3\\u7801\\u6587\\u4ef6\\uff0c\\u5728Windows\\u4e0b\\u4e5f\\u5c31\\u662f .obj \\u6587\\u4ef6\\uff0cUNIX\\u4e0b\\u662f .o \\u6587\\u4ef6\\uff0c\\u5373 Object File\\uff0c\\u8fd9\\u4e2a\\u52a8\\u4f5c\\u53eb\\u505a\\u7f16\\u8bd1\\uff08compile\\uff09\\u3002\\u7136\\u540e\\u518d\\u628a\\u5927\\u91cf\\u7684Object File\\u5408\\u6210\\u6267\\u884c\\u6587\\u4ef6\\uff0c\\u8fd9\\u4e2a\\u52a8\\u4f5c\\u53eb\\u4f5c\\u94fe\\u63a5\\uff08link\\uff09\\u3002\\n\\n\\u7f16\\u8bd1\\u65f6\\uff0c\\u7f16\\u8bd1\\u5668\\u9700\\u8981\\u7684\\u662f\\u8bed\\u6cd5\\u7684\\u6b63\\u786e\\uff0c\\u51fd\\u6570\\u4e0e\\u53d8\\u91cf\\u7684\\u58f0\\u660e\\u7684\\u6b63\\u786e\\u3002\\u5bf9\\u4e8e\\u540e\\u8005\\uff0c\\u901a\\u5e38\\u662f\\u4f60\\u9700\\u8981\\u544a\\u8bc9\\u7f16\\u8bd1\\u5668\\u5934\\u6587\\u4ef6\\u7684\\u6240\\u5728\\u4f4d\\u7f6e\\uff08\\u5934\\u6587\\u4ef6\\u4e2d\\u5e94\\u8be5\\u53ea\\u662f\\u58f0\\u660e\\uff0c\\u800c\\u5b9a\\u4e49\\u5e94\\u8be5\\u653e\\u5728C\\/C++\\u6587\\u4ef6\\u4e2d\\uff09\\uff0c\\u53ea\\u8981\\u6240\\u6709\\u7684\\u8bed\\u6cd5\\u6b63\\u786e\\uff0c\\u7f16\\u8bd1\\u5668\\u5c31\\u53ef\\u4ee5\\u7f16\\u8bd1\\u51fa\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u6bcf\\u4e2a\\u6e90\\u6587\\u4ef6\\u90fd\\u5e94\\u8be5\\u5bf9\\u5e94\\u4e8e\\u4e00\\u4e2a\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff08O\\u6587\\u4ef6\\u6216\\u662fOBJ\\u6587\\u4ef6\\uff09\\u3002\\n\\n\\u94fe\\u63a5\\u65f6\\uff0c\\u4e3b\\u8981\\u662f\\u94fe\\u63a5\\u51fd\\u6570\\u548c\\u5168\\u5c40\\u53d8\\u91cf\\uff0c\\u6240\\u4ee5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u8fd9\\u4e9b\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff08O\\u6587\\u4ef6\\u6216\\u662fOBJ\\u6587\\u4ef6\\uff09\\u6765\\u94fe\\u63a5\\u6211\\u4eec\\u7684\\u5e94\\u7528\\u7a0b\\u5e8f\\u3002\\u94fe\\u63a5\\u5668\\u5e76\\u4e0d\\u7ba1\\u51fd\\u6570\\u6240\\u5728\\u7684\\u6e90\\u6587\\u4ef6\\uff0c\\u53ea\\u7ba1\\u51fd\\u6570\\u7684\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff08Object File\\uff09\\uff0c\\u5728\\u5927\\u591a\\u6570\\u65f6\\u5019\\uff0c\\u7531\\u4e8e\\u6e90\\u6587\\u4ef6\\u592a\\u591a\\uff0c\\u7f16\\u8bd1\\u751f\\u6210\\u7684\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u592a\\u591a\\uff0c\\u800c\\u5728\\u94fe\\u63a5\\u65f6\\u9700\\u8981\\u660e\\u663e\\u5730\\u6307\\u51fa\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u540d\\uff0c\\u8fd9\\u5bf9\\u4e8e\\u7f16\\u8bd1\\u5f88\\u4e0d\\u65b9\\u4fbf\\uff0c\\u6240\\u4ee5\\uff0c\\u6211\\u4eec\\u8981\\u7ed9\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u6253\\u4e2a\\u5305\\uff0c\\u5728Windows\\u4e0b\\u8fd9\\u79cd\\u5305\\u53eb\\u201c\\u5e93\\u6587\\u4ef6\\u201d\\uff08Library File)\\uff0c\\u4e5f\\u5c31\\u662f .lib \\u6587\\u4ef6\\uff0c\\u5728UNIX\\u4e0b\\uff0c\\u662fArchive File\\uff0c\\u4e5f\\u5c31\\u662f .a \\u6587\\u4ef6\\u3002\\n\\n\\u603b\\u7ed3\\u4e00\\u4e0b\\uff0c\\u6e90\\u6587\\u4ef6\\u9996\\u5148\\u4f1a\\u751f\\u6210\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u518d\\u7531\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u751f\\u6210\\u6267\\u884c\\u6587\\u4ef6\\u3002\\u5728\\u7f16\\u8bd1\\u65f6\\uff0c\\u7f16\\u8bd1\\u5668\\u53ea\\u68c0\\u6d4b\\u7a0b\\u5e8f\\u8bed\\u6cd5\\uff0c\\u548c\\u51fd\\u6570\\u3001\\u53d8\\u91cf\\u662f\\u5426\\u88ab\\u58f0\\u660e\\u3002\\u5982\\u679c\\u51fd\\u6570\\u672a\\u88ab\\u58f0\\u660e\\uff0c\\u7f16\\u8bd1\\u5668\\u4f1a\\u7ed9\\u51fa\\u4e00\\u4e2a\\u8b66\\u544a\\uff0c\\u4f46\\u53ef\\u4ee5\\u751f\\u6210Object File\\u3002\\u800c\\u5728\\u94fe\\u63a5\\u7a0b\\u5e8f\\u65f6\\uff0c\\u94fe\\u63a5\\u5668\\u4f1a\\u5728\\u6240\\u6709\\u7684Object File\\u4e2d\\u627e\\u5bfb\\u51fd\\u6570\\u7684\\u5b9e\\u73b0\\uff0c\\u5982\\u679c\\u627e\\u4e0d\\u5230\\uff0c\\u90a3\\u5230\\u5c31\\u4f1a\\u62a5\\u94fe\\u63a5\\u9519\\u8bef\\u7801\\uff08Linker Error\\uff09\\uff0c\\u5728VC\\u4e0b\\uff0c\\u8fd9\\u79cd\\u9519\\u8bef\\u4e00\\u822c\\u662f\\uff1aLink 2001\\u9519\\u8bef\\uff0c\\u610f\\u601d\\u8bf4\\u662f\\u8bf4\\uff0c\\u94fe\\u63a5\\u5668\\u672a\\u80fd\\u627e\\u5230\\u51fd\\u6570\\u7684\\u5b9e\\u73b0\\u3002\\u4f60\\u9700\\u8981\\u6307\\u5b9a\\u51fd\\u6570\\u7684Object File.\\n\\n\\n### Makefile \\u4ecb\\u7ecd\\n\\nmake\\u547d\\u4ee4\\u6267\\u884c\\u65f6\\uff0c\\u9700\\u8981\\u4e00\\u4e2a Makefile \\u6587\\u4ef6\\uff0c\\u4ee5\\u544a\\u8bc9make\\u547d\\u4ee4\\u9700\\u8981\\u600e\\u4e48\\u6837\\u7684\\u53bb\\u7f16\\u8bd1\\u548c\\u94fe\\u63a5\\u7a0b\\u5e8f\\u3002\\n\\n\\u9996\\u5148\\uff0c\\u6211\\u4eec\\u7528\\u4e00\\u4e2a\\u793a\\u4f8b\\u6765\\u8bf4\\u660eMakefile\\u7684\\u4e66\\u5199\\u89c4\\u5219\\u3002\\u4ee5\\u4fbf\\u7ed9\\u5927\\u5bb6\\u4e00\\u4e2a\\u611f\\u5174\\u8ba4\\u8bc6\\u3002\\u8fd9\\u4e2a\\u793a\\u4f8b\\u6765\\u6e90\\u4e8eGNU\\u7684make\\u4f7f\\u7528\\u624b\\u518c\\uff0c\\u5728\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c\\u6211\\u4eec\\u7684\\u5de5\\u7a0b\\u67098\\u4e2aC\\u6587\\u4ef6\\uff0c\\u548c3\\u4e2a\\u5934\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u8981\\u5199\\u4e00\\u4e2aMakefile\\u6765\\u544a\\u8bc9make\\u547d\\u4ee4\\u5982\\u4f55\\u7f16\\u8bd1\\u548c\\u94fe\\u63a5\\u8fd9\\u51e0\\u4e2a\\u6587\\u4ef6\\u3002\\u6211\\u4eec\\u7684\\u89c4\\u5219\\u662f\\uff1a\\n1.  \\u5982\\u679c\\u8fd9\\u4e2a\\u5de5\\u7a0b\\u6ca1\\u6709\\u7f16\\u8bd1\\u8fc7\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u7684\\u6240\\u6709C\\u6587\\u4ef6\\u90fd\\u8981\\u7f16\\u8bd1\\u5e76\\u88ab\\u94fe\\u63a5\\u3002\\n1.  \\u5982\\u679c\\u8fd9\\u4e2a\\u5de5\\u7a0b\\u7684\\u67d0\\u51e0\\u4e2aC\\u6587\\u4ef6\\u88ab\\u4fee\\u6539\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u53ea\\u7f16\\u8bd1\\u88ab\\u4fee\\u6539\\u7684C\\u6587\\u4ef6\\uff0c\\u5e76\\u94fe\\u63a5\\u76ee\\u6807\\u7a0b\\u5e8f\\u3002\\n1.  \\u5982\\u679c\\u8fd9\\u4e2a\\u5de5\\u7a0b\\u7684\\u5934\\u6587\\u4ef6\\u88ab\\u6539\\u53d8\\u4e86\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u9700\\u8981\\u7f16\\u8bd1\\u5f15\\u7528\\u4e86\\u8fd9\\u51e0\\u4e2a\\u5934\\u6587\\u4ef6\\u7684C\\u6587\\u4ef6\\uff0c\\u5e76\\u94fe\\u63a5\\u76ee\\u6807\\u7a0b\\u5e8f\\u3002\\n\\n\\u53ea\\u8981\\u6211\\u4eec\\u7684Makefile\\u5199\\u5f97\\u591f\\u597d\\uff0c\\u6240\\u6709\\u7684\\u8fd9\\u4e00\\u5207\\uff0c\\u6211\\u4eec\\u53ea\\u7528\\u4e00\\u4e2amake\\u547d\\u4ee4\\u5c31\\u53ef\\u4ee5\\u5b8c\\u6210\\uff0cmake\\u547d\\u4ee4\\u4f1a\\u81ea\\u52a8\\u667a\\u80fd\\u5730\\u6839\\u636e\\u5f53\\u524d\\u7684\\u6587\\u4ef6\\u4fee\\u6539\\u7684\\u60c5\\u51b5\\u6765\\u786e\\u5b9a\\u54ea\\u4e9b\\u6587\\u4ef6\\u9700\\u8981\\u91cd\\u7f16\\u8bd1\\uff0c\\u4ece\\u800c\\u81ea\\u5df1\\u7f16\\u8bd1\\u6240\\u9700\\u8981\\u7684\\u6587\\u4ef6\\u548c\\u94fe\\u63a5\\u76ee\\u6807\\u7a0b\\u5e8f\\u3002\\n\\n\\n##### \\u4e00\\u3001Makefile\\u7684\\u89c4\\u5219\\n\\n\\u5728\\u8bb2\\u8ff0\\u8fd9\\u4e2aMakefile\\u4e4b\\u524d\\uff0c\\u8fd8\\u662f\\u8ba9\\u6211\\u4eec\\u5148\\u6765\\u7c97\\u7565\\u5730\\u770b\\u4e00\\u770bMakefile\\u7684\\u89c4\\u5219\\u3002\\n```\\ntarget ... : prerequisites ...\\n\\tcommand\\n\\t...\\n\\t...\\n```\\t\\ntarget\\u4e5f\\u5c31\\u662f\\u4e00\\u4e2a\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u53ef\\u4ee5\\u662fObject File\\uff0c\\u4e5f\\u53ef\\u4ee5\\u662f\\u6267\\u884c\\u6587\\u4ef6\\u3002\\u8fd8\\u53ef\\u4ee5\\u662f\\u4e00\\u4e2a\\u6807\\u7b7e\\uff08Label\\uff09\\uff0c\\u5bf9\\u4e8e\\u6807\\u7b7e\\u8fd9\\u79cd\\u7279\\u6027\\uff0c\\u5728\\u540e\\u7eed\\u7684\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u7ae0\\u8282\\u4e2d\\u4f1a\\u6709\\u53d9\\u8ff0\\u3002\\nprerequisites\\u5c31\\u662f\\uff0c\\u8981\\u751f\\u6210\\u90a3\\u4e2atarget\\u6240\\u9700\\u8981\\u7684\\u6587\\u4ef6\\u6216\\u662f\\u76ee\\u6807\\u3002command\\u4e5f\\u5c31\\u662fmake\\u9700\\u8981\\u6267\\u884c\\u7684\\u547d\\u4ee4\\u3002\\uff08\\u4efb\\u610f\\u7684Shell\\u547d\\u4ee4\\uff09\\n\\n\\u8fd9\\u662f\\u4e00\\u4e2a\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u4e5f\\u5c31\\u662f\\u8bf4\\uff0ctarget\\u8fd9\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u4f9d\\u8d56\\u4e8eprerequisites\\u4e2d\\u7684\\u6587\\u4ef6\\uff0c\\u5176\\u751f\\u6210\\u89c4\\u5219\\u5b9a\\u4e49\\u5728command\\u4e2d\\u3002\\u8bf4\\u767d\\u4e00\\u70b9\\u5c31\\u662f\\u8bf4\\uff0cprerequisites\\u4e2d\\u5982\\u679c\\u6709\\u4e00\\u4e2a\\u4ee5\\u4e0a\\u7684\\u6587\\u4ef6\\u6bd4target\\u6587\\u4ef6\\u8981\\u65b0\\u7684\\u8bdd\\uff0ccommand\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u5c31\\u4f1a\\u88ab\\u6267\\u884c\\u3002\\u8fd9\\u5c31\\u662fMakefile\\u7684\\u89c4\\u5219\\u3002\\u4e5f\\u5c31\\u662fMakefile\\u4e2d\\u6700\\u6838\\u5fc3\\u7684\\u5185\\u5bb9\\u3002\\n\\n\\u8bf4\\u5230\\u5e95\\uff0cMakefile\\u7684\\u4e1c\\u897f\\u5c31\\u662f\\u8fd9\\u6837\\u4e00\\u70b9\\uff0c\\u597d\\u50cf\\u6211\\u7684\\u8fd9\\u7bc7\\u6587\\u6863\\u4e5f\\u8be5\\u7ed3\\u675f\\u4e86\\u3002\\u5475\\u5475\\u3002\\u8fd8\\u4e0d\\u5c3d\\u7136\\uff0c\\u8fd9\\u662fMakefile\\u7684\\u4e3b\\u7ebf\\u548c\\u6838\\u5fc3\\uff0c\\u4f46\\u8981\\u5199\\u597d\\u4e00\\u4e2aMakefile\\u8fd8\\u4e0d\\u591f\\uff0c\\u6211\\u4f1a\\u4ee5\\u540e\\u9762\\u4e00\\u70b9\\u4e00\\u70b9\\u5730\\u7ed3\\u5408\\u6211\\u7684\\u5de5\\u4f5c\\u7ecf\\u9a8c\\u7ed9\\u4f60\\u6162\\u6162\\u5230\\u6765\\u3002\\u5185\\u5bb9\\u8fd8\\u591a\\u7740\\u5462\\u3002\\uff1a\\uff09\\n\\n\\n##### \\u4e8c\\u3001\\u4e00\\u4e2a\\u793a\\u4f8b\\n\\n\\u6b63\\u5982\\u524d\\u9762\\u6240\\u8bf4\\u7684\\uff0c\\u5982\\u679c\\u4e00\\u4e2a\\u5de5\\u7a0b\\u67093\\u4e2a\\u5934\\u6587\\u4ef6\\uff0c\\u548c8\\u4e2aC\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u4e3a\\u4e86\\u5b8c\\u6210\\u524d\\u9762\\u6240\\u8ff0\\u7684\\u90a3\\u4e09\\u4e2a\\u89c4\\u5219\\uff0c\\u6211\\u4eec\\u7684Makefile\\u5e94\\u8be5\\u662f\\u4e0b\\u9762\\u7684\\u8fd9\\u4e2a\\u6837\\u5b50\\u7684\\u3002\\n```\\nedit : main.o kbd.o command.o display.o \\\\\\n\\t\\tinsert.o search.o files.o utils.o\\n\\tcc -o edit main.o kbd.o command.o display.o \\\\\\n\\t\\tinsert.o search.o files.o utils.o\\n\\nmain.o : main.c defs.h\\n\\tcc -c main.c\\nkbd.o : kbd.c defs.h command.h\\n\\tcc -c kbd.c\\ncommand.o : command.c defs.h command.h\\n\\tcc -c command.c\\ndisplay.o : display.c defs.h buffer.h\\n\\tcc -c display.c\\ninsert.o : insert.c defs.h buffer.h\\n\\tcc -c insert.c\\nsearch.o : search.c defs.h buffer.h\\n\\tcc -c search.c\\nfiles.o : files.c defs.h buffer.h command.h\\n\\tcc -c files.c\\nutils.o : utils.c defs.h\\n\\tcc -c utils.c\\nclean :\\n\\trm edit main.o kbd.o command.o display.o \\\\\\n\\t\\t insert.o search.o files.o utils.o\\n```\\n\\u53cd\\u659c\\u6760\\uff08\\\\\\uff09\\u662f\\u6362\\u884c\\u7b26\\u7684\\u610f\\u601d\\u3002\\u8fd9\\u6837\\u6bd4\\u8f83\\u4fbf\\u4e8eMakefile\\u7684\\u6613\\u8bfb\\u3002\\u6211\\u4eec\\u53ef\\u4ee5\\u628a\\u8fd9\\u4e2a\\u5185\\u5bb9\\u4fdd\\u5b58\\u5728\\u6587\\u4ef6\\u4e3a\\u201cMakefile\\u201d\\u6216\\u201cmakefile\\u201d\\u7684\\u6587\\u4ef6\\u4e2d\\uff0c\\u7136\\u540e\\u5728\\u8be5\\u76ee\\u5f55\\u4e0b\\u76f4\\u63a5\\u8f93\\u5165\\u547d\\u4ee4\\u201cmake\\u201d\\u5c31\\u53ef\\u4ee5\\u751f\\u6210\\u6267\\u884c\\u6587\\u4ef6edit\\u3002\\u5982\\u679c\\u8981\\u5220\\u9664\\u6267\\u884c\\u6587\\u4ef6\\u548c\\u6240\\u6709\\u7684\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u90a3\\u4e48\\uff0c\\u53ea\\u8981\\u7b80\\u5355\\u5730\\u6267\\u884c\\u4e00\\u4e0b\\u201cmake clean\\u201d\\u5c31\\u53ef\\u4ee5\\u4e86\\u3002\\n\\n\\u5728\\u8fd9\\u4e2amakefile\\u4e2d\\uff0c\\u76ee\\u6807\\u6587\\u4ef6\\uff08target\\uff09\\u5305\\u542b\\uff1a\\u6267\\u884c\\u6587\\u4ef6edit\\u548c\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff08*.o\\uff09\\uff0c\\u4f9d\\u8d56\\u6587\\u4ef6\\uff08prerequisites\\uff09\\u5c31\\u662f\\u5192\\u53f7\\u540e\\u9762\\u7684\\u90a3\\u4e9b .c \\u6587\\u4ef6\\u548c .h\\u6587\\u4ef6\\u3002\\u6bcf\\u4e00\\u4e2a .o \\u6587\\u4ef6\\u90fd\\u6709\\u4e00\\u7ec4\\u4f9d\\u8d56\\u6587\\u4ef6\\uff0c\\u800c\\u8fd9\\u4e9b .o \\u6587\\u4ef6\\u53c8\\u662f\\u6267\\u884c\\u6587\\u4ef6 edit \\u7684\\u4f9d\\u8d56\\u6587\\u4ef6\\u3002\\u4f9d\\u8d56\\u5173\\u7cfb\\u7684\\u5b9e\\u8d28\\u4e0a\\u5c31\\u662f\\u8bf4\\u660e\\u4e86\\u76ee\\u6807\\u6587\\u4ef6\\u662f\\u7531\\u54ea\\u4e9b\\u6587\\u4ef6\\u751f\\u6210\\u7684\\uff0c\\u6362\\u8a00\\u4e4b\\uff0c\\u76ee\\u6807\\u6587\\u4ef6\\u662f\\u54ea\\u4e9b\\u6587\\u4ef6\\u66f4\\u65b0\\u7684\\u3002\\n\\n\\u5728\\u5b9a\\u4e49\\u597d\\u4f9d\\u8d56\\u5173\\u7cfb\\u540e\\uff0c\\u540e\\u7eed\\u7684\\u90a3\\u4e00\\u884c\\u5b9a\\u4e49\\u4e86\\u5982\\u4f55\\u751f\\u6210\\u76ee\\u6807\\u6587\\u4ef6\\u7684\\u64cd\\u4f5c\\u7cfb\\u7edf\\u547d\\u4ee4\\uff0c\\u4e00\\u5b9a\\u8981\\u4ee5\\u4e00\\u4e2aTab\\u952e\\u4f5c\\u4e3a\\u5f00\\u5934\\u3002\\u8bb0\\u4f4f\\uff0cmake\\u5e76\\u4e0d\\u7ba1\\u547d\\u4ee4\\u662f\\u600e\\u4e48\\u5de5\\u4f5c\\u7684\\uff0c\\u4ed6\\u53ea\\u7ba1\\u6267\\u884c\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u3002make\\u4f1a\\u6bd4\\u8f83targets\\u6587\\u4ef6\\u548cprerequisites\\u6587\\u4ef6\\u7684\\u4fee\\u6539\\u65e5\\u671f\\uff0c\\u5982\\u679cprerequisites\\u6587\\u4ef6\\u7684\\u65e5\\u671f\\u8981\\u6bd4targets\\u6587\\u4ef6\\u7684\\u65e5\\u671f\\u8981\\u65b0\\uff0c\\u6216\\u8005target\\u4e0d\\u5b58\\u5728\\u7684\\u8bdd\\uff0c\\u90a3\\u4e48\\uff0cmake\\u5c31\\u4f1a\\u6267\\u884c\\u540e\\u7eed\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u3002\\n\\n\\u8fd9\\u91cc\\u8981\\u8bf4\\u660e\\u4e00\\u70b9\\u7684\\u662f\\uff0cclean\\u4e0d\\u662f\\u4e00\\u4e2a\\u6587\\u4ef6\\uff0c\\u5b83\\u53ea\\u4e0d\\u8fc7\\u662f\\u4e00\\u4e2a\\u52a8\\u4f5c\\u540d\\u5b57\\uff0c\\u6709\\u70b9\\u50cfC\\u8bed\\u8a00\\u4e2d\\u7684lable\\u4e00\\u6837\\uff0c\\u5176\\u5192\\u53f7\\u540e\\u4ec0\\u4e48\\u4e5f\\u6ca1\\u6709\\uff0c\\u90a3\\u4e48\\uff0cmake\\u5c31\\u4e0d\\u4f1a\\u81ea\\u52a8\\u53bb\\u627e\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u6027\\uff0c\\u4e5f\\u5c31\\u4e0d\\u4f1a\\u81ea\\u52a8\\u6267\\u884c\\u5176\\u540e\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u3002\\u8981\\u6267\\u884c\\u5176\\u540e\\u7684\\u547d\\u4ee4\\uff0c\\u5c31\\u8981\\u5728make\\u547d\\u4ee4\\u540e\\u660e\\u663e\\u5f97\\u6307\\u51fa\\u8fd9\\u4e2alable\\u7684\\u540d\\u5b57\\u3002\\u8fd9\\u6837\\u7684\\u65b9\\u6cd5\\u975e\\u5e38\\u6709\\u7528\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5728\\u4e00\\u4e2amakefile\\u4e2d\\u5b9a\\u4e49\\u4e0d\\u7528\\u7684\\u7f16\\u8bd1\\u6216\\u662f\\u548c\\u7f16\\u8bd1\\u65e0\\u5173\\u7684\\u547d\\u4ee4\\uff0c\\u6bd4\\u5982\\u7a0b\\u5e8f\\u7684\\u6253\\u5305\\uff0c\\u7a0b\\u5e8f\\u7684\\u5907\\u4efd\\uff0c\\u7b49\\u7b49\\u3002\\n\\n\\n##### \\u4e09\\u3001make\\u662f\\u5982\\u4f55\\u5de5\\u4f5c\\u7684\\n\\n\\u5728\\u9ed8\\u8ba4\\u7684\\u65b9\\u5f0f\\u4e0b\\uff0c\\u4e5f\\u5c31\\u662f\\u6211\\u4eec\\u53ea\\u8f93\\u5165make\\u547d\\u4ee4\\u3002\\u90a3\\u4e48\\uff0c\\n\\n1. make\\u4f1a\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u627e\\u540d\\u5b57\\u53eb\\u201cMakefile\\u201d\\u6216\\u201cmakefile\\u201d\\u7684\\u6587\\u4ef6\\u3002\\n1. \\u5982\\u679c\\u627e\\u5230\\uff0c\\u5b83\\u4f1a\\u627e\\u6587\\u4ef6\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u6587\\u4ef6\\uff08target\\uff09\\uff0c\\u5728\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u4e2d\\uff0c\\u4ed6\\u4f1a\\u627e\\u5230\\u201cedit\\u201d\\u8fd9\\u4e2a\\u6587\\u4ef6\\uff0c\\u5e76\\u628a\\u8fd9\\u4e2a\\u6587\\u4ef6\\u4f5c\\u4e3a\\u6700\\u7ec8\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\n1. \\u5982\\u679cedit\\u6587\\u4ef6\\u4e0d\\u5b58\\u5728\\uff0c\\u6216\\u662fedit\\u6240\\u4f9d\\u8d56\\u7684\\u540e\\u9762\\u7684 .o \\u6587\\u4ef6\\u7684\\u6587\\u4ef6\\u4fee\\u6539\\u65f6\\u95f4\\u8981\\u6bd4edit\\u8fd9\\u4e2a\\u6587\\u4ef6\\u65b0\\uff0c\\u90a3\\u4e48\\uff0c\\u4ed6\\u5c31\\u4f1a\\u6267\\u884c\\u540e\\u9762\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u6765\\u751f\\u6210edit\\u8fd9\\u4e2a\\u6587\\u4ef6\\u3002\\n1. \\u5982\\u679cedit\\u6240\\u4f9d\\u8d56\\u7684.o\\u6587\\u4ef6\\u4e5f\\u5b58\\u5728\\uff0c\\u90a3\\u4e48make\\u4f1a\\u5728\\u5f53\\u524d\\u6587\\u4ef6\\u4e2d\\u627e\\u76ee\\u6807\\u4e3a.o\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u6027\\uff0c\\u5982\\u679c\\u627e\\u5230\\u5219\\u518d\\u6839\\u636e\\u90a3\\u4e00\\u4e2a\\u89c4\\u5219\\u751f\\u6210.o\\u6587\\u4ef6\\u3002\\uff08\\u8fd9\\u6709\\u70b9\\u50cf\\u4e00\\u4e2a\\u5806\\u6808\\u7684\\u8fc7\\u7a0b\\uff09\\n1. \\u5f53\\u7136\\uff0c\\u4f60\\u7684C\\u6587\\u4ef6\\u548cH\\u6587\\u4ef6\\u662f\\u5b58\\u5728\\u7684\\u5566\\uff0c\\u4e8e\\u662fmake\\u4f1a\\u751f\\u6210 .o \\u6587\\u4ef6\\uff0c\\u7136\\u540e\\u518d\\u7528 .o \\u6587\\u4ef6\\u751f\\u547dmake\\u7684\\u7ec8\\u6781\\u4efb\\u52a1\\uff0c\\u4e5f\\u5c31\\u662f\\u6267\\u884c\\u6587\\u4ef6edit\\u4e86\\u3002\\n\\n\\u8fd9\\u5c31\\u662f\\u6574\\u4e2amake\\u7684\\u4f9d\\u8d56\\u6027\\uff0cmake\\u4f1a\\u4e00\\u5c42\\u53c8\\u4e00\\u5c42\\u5730\\u53bb\\u627e\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u76f4\\u5230\\u6700\\u7ec8\\u7f16\\u8bd1\\u51fa\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\u5728\\u627e\\u5bfb\\u7684\\u8fc7\\u7a0b\\u4e2d\\uff0c\\u5982\\u679c\\u51fa\\u73b0\\u9519\\u8bef\\uff0c\\u6bd4\\u5982\\u6700\\u540e\\u88ab\\u4f9d\\u8d56\\u7684\\u6587\\u4ef6\\u627e\\u4e0d\\u5230\\uff0c\\u90a3\\u4e48make\\u5c31\\u4f1a\\u76f4\\u63a5\\u9000\\u51fa\\uff0c\\u5e76\\u62a5\\u9519\\uff0c\\u800c\\u5bf9\\u4e8e\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u7684\\u9519\\u8bef\\uff0c\\u6216\\u662f\\u7f16\\u8bd1\\u4e0d\\u6210\\u529f\\uff0cmake\\u6839\\u672c\\u4e0d\\u7406\\u3002make\\u53ea\\u7ba1\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u6027\\uff0c\\u5373\\uff0c\\u5982\\u679c\\u5728\\u6211\\u627e\\u4e86\\u4f9d\\u8d56\\u5173\\u7cfb\\u4e4b\\u540e\\uff0c\\u5192\\u53f7\\u540e\\u9762\\u7684\\u6587\\u4ef6\\u8fd8\\u662f\\u4e0d\\u5728\\uff0c\\u90a3\\u4e48\\u5bf9\\u4e0d\\u8d77\\uff0c\\u6211\\u5c31\\u4e0d\\u5de5\\u4f5c\\u5566\\u3002\\n\\n\\u901a\\u8fc7\\u4e0a\\u8ff0\\u5206\\u6790\\uff0c\\u6211\\u4eec\\u77e5\\u9053\\uff0c\\u50cfclean\\u8fd9\\u79cd\\uff0c\\u6ca1\\u6709\\u88ab\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u6587\\u4ef6\\u76f4\\u63a5\\u6216\\u95f4\\u63a5\\u5173\\u8054\\uff0c\\u90a3\\u4e48\\u5b83\\u540e\\u9762\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u5c06\\u4e0d\\u4f1a\\u88ab\\u81ea\\u52a8\\u6267\\u884c\\uff0c\\u4e0d\\u8fc7\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u663e\\u793a\\u8981make\\u6267\\u884c\\u3002\\u5373\\u547d\\u4ee4\\u2014\\u2014\\u201cmake clean\\u201d\\uff0c\\u4ee5\\u6b64\\u6765\\u6e05\\u9664\\u6240\\u6709\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u4ee5\\u4fbf\\u91cd\\u7f16\\u8bd1\\u3002\\n\\n\\u4e8e\\u662f\\u5728\\u6211\\u4eec\\u7f16\\u7a0b\\u4e2d\\uff0c\\u5982\\u679c\\u8fd9\\u4e2a\\u5de5\\u7a0b\\u5df2\\u88ab\\u7f16\\u8bd1\\u8fc7\\u4e86\\uff0c\\u5f53\\u6211\\u4eec\\u4fee\\u6539\\u4e86\\u5176\\u4e2d\\u4e00\\u4e2a\\u6e90\\u6587\\u4ef6\\uff0c\\u6bd4\\u5982file.c\\uff0c\\u90a3\\u4e48\\u6839\\u636e\\u6211\\u4eec\\u7684\\u4f9d\\u8d56\\u6027\\uff0c\\u6211\\u4eec\\u7684\\u76ee\\u6807file.o\\u4f1a\\u88ab\\u91cd\\u7f16\\u8bd1\\uff08\\u4e5f\\u5c31\\u662f\\u5728\\u8fd9\\u4e2a\\u4f9d\\u6027\\u5173\\u7cfb\\u540e\\u9762\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\uff09\\uff0c\\u4e8e\\u662ffile.o\\u7684\\u6587\\u4ef6\\u4e5f\\u662f\\u6700\\u65b0\\u7684\\u5566\\uff0c\\u4e8e\\u662ffile.o\\u7684\\u6587\\u4ef6\\u4fee\\u6539\\u65f6\\u95f4\\u8981\\u6bd4edit\\u8981\\u65b0\\uff0c\\u6240\\u4ee5edit\\u4e5f\\u4f1a\\u88ab\\u91cd\\u65b0\\u94fe\\u63a5\\u4e86\\uff08\\u8be6\\u89c1edit\\u76ee\\u6807\\u6587\\u4ef6\\u540e\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\uff09\\u3002\\n\\n\\u800c\\u5982\\u679c\\u6211\\u4eec\\u6539\\u53d8\\u4e86\\u201ccommand.h\\u201d\\uff0c\\u90a3\\u4e48\\uff0ckdb.o\\u3001command.o\\u548cfiles.o\\u90fd\\u4f1a\\u88ab\\u91cd\\u7f16\\u8bd1\\uff0c\\u5e76\\u4e14\\uff0cedit\\u4f1a\\u88ab\\u91cd\\u94fe\\u63a5\\u3002\\n\\n\\n##### \\u56db\\u3001makefile\\u4e2d\\u4f7f\\u7528\\u53d8\\u91cf\\n\\n\\u5728\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u4e2d\\uff0c\\u5148\\u8ba9\\u6211\\u4eec\\u770b\\u770bedit\\u7684\\u89c4\\u5219\\uff1a\\n```\\nedit : main.o kbd.o command.o display.o \\\\\\n\\t\\t\\t\\tinsert.o search.o files.o utils.o\\n\\tcc -o edit main.o kbd.o command.o display.o \\\\\\n\\t\\t\\t\\t\\t\\t insert.o search.o files.o utils.o\\n```\\n\\u6211\\u4eec\\u53ef\\u4ee5\\u770b\\u5230[.o]\\u6587\\u4ef6\\u7684\\u5b57\\u7b26\\u4e32\\u88ab\\u91cd\\u590d\\u4e86\\u4e24\\u6b21\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684\\u5de5\\u7a0b\\u9700\\u8981\\u52a0\\u5165\\u4e00\\u4e2a\\u65b0\\u7684[.o]\\u6587\\u4ef6\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u9700\\u8981\\u5728\\u4e24\\u4e2a\\u5730\\u65b9\\u52a0\\uff08\\u5e94\\u8be5\\u662f\\u4e09\\u4e2a\\u5730\\u65b9\\uff0c\\u8fd8\\u6709\\u4e00\\u4e2a\\u5730\\u65b9\\u5728clean\\u4e2d\\uff09\\u3002\\u5f53\\u7136\\uff0c\\u6211\\u4eec\\u7684makefile\\u5e76\\u4e0d\\u590d\\u6742\\uff0c\\u6240\\u4ee5\\u5728\\u4e24\\u4e2a\\u5730\\u65b9\\u52a0\\u4e5f\\u4e0d\\u7d2f\\uff0c\\u4f46\\u5982\\u679cmakefile\\u53d8\\u5f97\\u590d\\u6742\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u5c31\\u6709\\u53ef\\u80fd\\u4f1a\\u5fd8\\u6389\\u4e00\\u4e2a\\u9700\\u8981\\u52a0\\u5165\\u7684\\u5730\\u65b9\\uff0c\\u800c\\u5bfc\\u81f4\\u7f16\\u8bd1\\u5931\\u8d25\\u3002\\u6240\\u4ee5\\uff0c\\u4e3a\\u4e86makefile\\u7684\\u6613\\u7ef4\\u62a4\\uff0c\\u5728makefile\\u4e2d\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u53d8\\u91cf\\u3002makefile\\u7684\\u53d8\\u91cf\\u4e5f\\u5c31\\u662f\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\uff0c\\u7406\\u89e3\\u6210C\\u8bed\\u8a00\\u4e2d\\u7684\\u5b8f\\u53ef\\u80fd\\u4f1a\\u66f4\\u597d\\u3002\\n\\n\\u6bd4\\u5982\\uff0c\\u6211\\u4eec\\u58f0\\u660e\\u4e00\\u4e2a\\u53d8\\u91cf\\uff0c\\u53ebobjects, OBJECTS, objs, OBJS, obj, \\u6216\\u662f OBJ\\uff0c\\u53cd\\u6b63\\u4e0d\\u7ba1\\u4ec0\\u4e48\\u5566\\uff0c\\u53ea\\u8981\\u80fd\\u591f\\u8868\\u793aobj\\u6587\\u4ef6\\u5c31\\u884c\\u4e86\\u3002\\u6211\\u4eec\\u5728makefile\\u4e00\\u5f00\\u59cb\\u5c31\\u8fd9\\u6837\\u5b9a\\u4e49\\uff1a\\n\\n     objects = main.o kbd.o command.o display.o \\\\\\n              insert.o search.o files.o utils.o\\n\\n\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u5c31\\u53ef\\u4ee5\\u5f88\\u65b9\\u4fbf\\u5730\\u5728\\u6211\\u4eec\\u7684makefile\\u4e2d\\u4ee5\\u201c$(objects)\\u201d\\u7684\\u65b9\\u5f0f\\u6765\\u4f7f\\u7528\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e86\\uff0c\\u4e8e\\u662f\\u6211\\u4eec\\u7684\\u6539\\u826f\\u7248makefile\\u5c31\\u53d8\\u6210\\u4e0b\\u9762\\u8fd9\\u4e2a\\u6837\\u5b50\\uff1a\\n```\\nobjects = main.o kbd.o command.o display.o \\\\\\n\\t\\tinsert.o search.o files.o utils.o\\n\\nedit : $(objects)\\n\\tcc -o edit $(objects)\\nmain.o : main.c defs.h\\n\\tcc -c main.c\\nkbd.o : kbd.c defs.h command.h\\n\\tcc -c kbd.c\\ncommand.o : command.c defs.h command.h\\n\\tcc -c command.c\\ndisplay.o : display.c defs.h buffer.h\\n\\tcc -c display.c\\ninsert.o : insert.c defs.h buffer.h\\n\\tcc -c insert.c\\nsearch.o : search.c defs.h buffer.h\\n\\tcc -c search.c\\nfiles.o : files.c defs.h buffer.h command.h\\n\\tcc -c files.c\\nutils.o : utils.c defs.h\\n\\tcc -c utils.c\\nclean :\\n\\trm edit $(objects)\\n```\\n\\n\\u4e8e\\u662f\\u5982\\u679c\\u6709\\u65b0\\u7684 .o \\u6587\\u4ef6\\u52a0\\u5165\\uff0c\\u6211\\u4eec\\u53ea\\u9700\\u7b80\\u5355\\u5730\\u4fee\\u6539\\u4e00\\u4e0b objects \\u53d8\\u91cf\\u5c31\\u53ef\\u4ee5\\u4e86\\u3002\\n\\n\\u5173\\u4e8e\\u53d8\\u91cf\\u66f4\\u591a\\u7684\\u8bdd\\u9898\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u7eed\\u7ed9\\u4f60\\u4e00\\u4e00\\u9053\\u6765\\u3002\\n\\n\\n##### \\u4e94\\u3001\\u8ba9make\\u81ea\\u52a8\\u63a8\\u5bfc\\n\\nGNU\\u7684make\\u5f88\\u5f3a\\u5927\\uff0c\\u5b83\\u53ef\\u4ee5\\u81ea\\u52a8\\u63a8\\u5bfc\\u6587\\u4ef6\\u4ee5\\u53ca\\u6587\\u4ef6\\u4f9d\\u8d56\\u5173\\u7cfb\\u540e\\u9762\\u7684\\u547d\\u4ee4\\uff0c\\u4e8e\\u662f\\u6211\\u4eec\\u5c31\\u6ca1\\u5fc5\\u8981\\u53bb\\u5728\\u6bcf\\u4e00\\u4e2a[.o]\\u6587\\u4ef6\\u540e\\u90fd\\u5199\\u4e0a\\u7c7b\\u4f3c\\u7684\\u547d\\u4ee4\\uff0c\\u56e0\\u4e3a\\uff0c\\u6211\\u4eec\\u7684make\\u4f1a\\u81ea\\u52a8\\u8bc6\\u522b\\uff0c\\u5e76\\u81ea\\u5df1\\u63a8\\u5bfc\\u547d\\u4ee4\\u3002\\n\\n\\u53ea\\u8981make\\u770b\\u5230\\u4e00\\u4e2a[.o]\\u6587\\u4ef6\\uff0c\\u5b83\\u5c31\\u4f1a\\u81ea\\u52a8\\u7684\\u628a[.c]\\u6587\\u4ef6\\u52a0\\u5728\\u4f9d\\u8d56\\u5173\\u7cfb\\u4e2d\\uff0c\\u5982\\u679cmake\\u627e\\u5230\\u4e00\\u4e2awhatever.o\\uff0c\\u90a3\\u4e48whatever.c\\uff0c\\u5c31\\u4f1a\\u662fwhatever.o\\u7684\\u4f9d\\u8d56\\u6587\\u4ef6\\u3002\\u5e76\\u4e14 **cc -c whatever.c \\u4e5f\\u4f1a\\u88ab\\u63a8\\u5bfc\\u51fa\\u6765**\\uff0c\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u7684makefile\\u518d\\u4e5f\\u4e0d\\u7528\\u5199\\u5f97\\u8fd9\\u4e48\\u590d\\u6742\\u3002\\u6211\\u4eec\\u65b0\\u7684makefile\\u53c8\\u51fa\\u7089\\u4e86\\u3002\\n\\n```\\nobjects = main.o kbd.o command.o display.o \\\\\\n\\t\\tinsert.o search.o files.o utils.o\\n\\nedit : $(objects)\\n\\tcc -o edit $(objects)\\n\\nmain.o : defs.h\\nkbd.o : defs.h command.h\\ncommand.o : defs.h command.h\\ndisplay.o : defs.h buffer.h\\ninsert.o : defs.h buffer.h\\nsearch.o : defs.h buffer.h\\nfiles.o : defs.h buffer.h command.h\\nutils.o : defs.h\\n\\n.PHONY : clean\\nclean :\\n\\trm edit $(objects)\\n```\\n\\u8fd9\\u79cd\\u65b9\\u6cd5\\uff0c\\u4e5f\\u5c31\\u662fmake\\u7684\\u201c\\u9690\\u6666\\u89c4\\u5219\\u201d\\u3002\\u4e0a\\u9762\\u6587\\u4ef6\\u5185\\u5bb9\\u4e2d\\uff0c\\u201c.PHONY\\u201d\\u8868\\u793a\\uff0cclean\\u662f\\u4e2a\\u4f2a\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\n\\n\\u5173\\u4e8e\\u66f4\\u4e3a\\u8be6\\u7ec6\\u7684\\u201c\\u9690\\u6666\\u89c4\\u5219\\u201d\\u548c\\u201c\\u4f2a\\u76ee\\u6807\\u6587\\u4ef6\\u201d\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u7eed\\u7ed9\\u4f60\\u4e00\\u4e00\\u9053\\u6765\\u3002\\n\\n\\n##### \\u516d\\u3001\\u53e6\\u7c7b\\u98ce\\u683c\\u7684makefile\\n\\n\\u5373\\u7136\\u6211\\u4eec\\u7684make\\u53ef\\u4ee5\\u81ea\\u52a8\\u63a8\\u5bfc\\u547d\\u4ee4\\uff0c\\u90a3\\u4e48\\u6211\\u770b\\u5230\\u90a3\\u5806[.o]\\u548c[.h]\\u7684\\u4f9d\\u8d56\\u5c31\\u6709\\u70b9\\u4e0d\\u723d\\uff0c\\u90a3\\u4e48\\u591a\\u7684\\u91cd\\u590d\\u7684[.h]\\uff0c\\u80fd\\u4e0d\\u80fd\\u628a\\u5176\\u6536\\u62e2\\u8d77\\u6765\\uff0c\\u597d\\u5427\\uff0c\\u6ca1\\u6709\\u95ee\\u9898\\uff0c\\u8fd9\\u4e2a\\u5bf9\\u4e8emake\\u6765\\u8bf4\\u5f88\\u5bb9\\u6613\\uff0c\\u8c01\\u53eb\\u5b83\\u63d0\\u4f9b\\u4e86\\u81ea\\u52a8\\u63a8\\u5bfc\\u547d\\u4ee4\\u548c\\u6587\\u4ef6\\u7684\\u529f\\u80fd\\u5462\\uff1f\\u6765\\u770b\\u770b\\u6700\\u65b0\\u98ce\\u683c\\u7684makefile\\u5427\\u3002\\n```\\nobjects = main.o kbd.o command.o display.o \\\\\\n\\t\\tinsert.o search.o files.o utils.o\\n\\nedit : $(objects)\\n\\tcc -o edit $(objects)\\n\\n$(objects) : defs.h\\nkbd.o command.o files.o : command.h\\ndisplay.o insert.o search.o files.o : buffer.h\\n\\n.PHONY : clean\\nclean :\\n\\trm edit $(objects)\\n```\\n\\u8fd9\\u79cd\\u98ce\\u683c\\uff0c\\u8ba9\\u6211\\u4eec\\u7684makefile\\u53d8\\u5f97\\u5f88\\u7b80\\u5355\\uff0c\\u4f46\\u6211\\u4eec\\u7684\\u6587\\u4ef6\\u4f9d\\u8d56\\u5173\\u7cfb\\u5c31\\u663e\\u5f97\\u6709\\u70b9\\u51cc\\u4e71\\u4e86\\u3002\\u9c7c\\u548c\\u718a\\u638c\\u4e0d\\u53ef\\u517c\\u5f97\\u3002\\u8fd8\\u770b\\u4f60\\u7684\\u559c\\u597d\\u4e86\\u3002\\u6211\\u662f\\u4e0d\\u559c\\u6b22\\u8fd9\\u79cd\\u98ce\\u683c\\u7684\\uff0c\\u4e00\\u662f\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u770b\\u4e0d\\u6e05\\u695a\\uff0c\\u4e8c\\u662f\\u5982\\u679c\\u6587\\u4ef6\\u4e00\\u591a\\uff0c\\u8981\\u52a0\\u5165\\u51e0\\u4e2a\\u65b0\\u7684.o\\u6587\\u4ef6\\uff0c\\u90a3\\u5c31\\u7406\\u4e0d\\u6e05\\u695a\\u4e86\\u3002\\n\\n\\n##### \\u4e03\\u3001\\u6e05\\u7a7a\\u76ee\\u6807\\u6587\\u4ef6\\u7684\\u89c4\\u5219\\n\\n\\u6bcf\\u4e2aMakefile\\u4e2d\\u90fd\\u5e94\\u8be5\\u5199\\u4e00\\u4e2a\\u6e05\\u7a7a\\u76ee\\u6807\\u6587\\u4ef6\\uff08.o\\u548c\\u6267\\u884c\\u6587\\u4ef6\\uff09\\u7684\\u89c4\\u5219\\uff0c\\u8fd9\\u4e0d\\u4ec5\\u4fbf\\u4e8e\\u91cd\\u7f16\\u8bd1\\uff0c\\u4e5f\\u5f88\\u5229\\u4e8e\\u4fdd\\u6301\\u6587\\u4ef6\\u7684\\u6e05\\u6d01\\u3002\\u8fd9\\u662f\\u4e00\\u4e2a\\u201c\\u4fee\\u517b\\u201d\\uff08\\u5475\\u5475\\uff0c\\u8fd8\\u8bb0\\u5f97\\u6211\\u7684\\u300a\\u7f16\\u7a0b\\u4fee\\u517b\\u300b\\u5417\\uff09\\u3002\\u4e00\\u822c\\u7684\\u98ce\\u683c\\u90fd\\u662f\\uff1a\\n```\\nclean:\\n\\trm edit $(objects)\\n```\\n\\u66f4\\u4e3a\\u7a33\\u5065\\u7684\\u505a\\u6cd5\\u662f\\uff1a\\n```\\n.PHONY : clean\\nclean :\\n\\t-rm edit $(objects)\\n```\\n\\u524d\\u9762\\u8bf4\\u8fc7\\uff0c.PHONY\\u610f\\u601d\\u8868\\u793aclean\\u662f\\u4e00\\u4e2a\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\uff0c\\u3002\\u800c\\u5728rm\\u547d\\u4ee4\\u524d\\u9762\\u52a0\\u4e86\\u4e00\\u4e2a\\u5c0f\\u51cf\\u53f7\\u7684\\u610f\\u601d\\u5c31\\u662f\\uff0c\\u4e5f\\u8bb8\\u67d0\\u4e9b\\u6587\\u4ef6\\u51fa\\u73b0\\u95ee\\u9898\\uff0c\\u4f46\\u4e0d\\u8981\\u7ba1\\uff0c\\u7ee7\\u7eed\\u505a\\u540e\\u9762\\u7684\\u4e8b\\u3002\\u5f53\\u7136\\uff0cclean\\u7684\\u89c4\\u5219\\u4e0d\\u8981\\u653e\\u5728\\u6587\\u4ef6\\u7684\\u5f00\\u5934\\uff0c\\u4e0d\\u7136\\uff0c\\u8fd9\\u5c31\\u4f1a\\u53d8\\u6210make\\u7684\\u9ed8\\u8ba4\\u76ee\\u6807\\uff0c\\u76f8\\u4fe1\\u8c01\\u4e5f\\u4e0d\\u613f\\u610f\\u8fd9\\u6837\\u3002\\u4e0d\\u6210\\u6587\\u7684\\u89c4\\u77e9\\u662f\\u2014\\u2014\\u201cclean\\u4ece\\u6765\\u90fd\\u662f\\u653e\\u5728\\u6587\\u4ef6\\u7684\\u6700\\u540e\\u201d\\u3002\\n\\n\\u4e0a\\u9762\\u5c31\\u662f\\u4e00\\u4e2amakefile\\u7684\\u6982\\u8c8c\\uff0c\\u4e5f\\u662fmakefile\\u7684\\u57fa\\u7840\\uff0c\\u4e0b\\u9762\\u8fd8\\u6709\\u5f88\\u591amakefile\\u7684\\u76f8\\u5173\\u7ec6\\u8282\\uff0c\\u51c6\\u5907\\u597d\\u4e86\\u5417\\uff1f\\u51c6\\u5907\\u597d\\u4e86\\u5c31\\u6765\\u3002\\n\\n\\n### \\u603b\\u8282\\n\\n##### \\u4e00\\u3001Makefile\\u91cc\\u6709\\u4ec0\\u4e48\\uff1f\\n\\nMakefile\\u91cc\\u4e3b\\u8981\\u5305\\u542b\\u4e86\\u4e94\\u4e2a\\u4e1c\\u897f\\uff1a\\u663e\\u5f0f\\u89c4\\u5219\\u3001\\u9690\\u6666\\u89c4\\u5219\\u3001\\u53d8\\u91cf\\u5b9a\\u4e49\\u3001\\u6587\\u4ef6\\u6307\\u793a\\u548c\\u6ce8\\u91ca\\u3002\\n\\n1. \\u663e\\u5f0f\\u89c4\\u5219\\u3002\\u663e\\u5f0f\\u89c4\\u5219\\u8bf4\\u660e\\u4e86\\uff0c\\u5982\\u4f55\\u751f\\u6210\\u4e00\\u4e2a\\u6216\\u591a\\u7684\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\u8fd9\\u662f\\u7531Makefile\\u7684\\u4e66\\u5199\\u8005\\u660e\\u663e\\u6307\\u51fa\\uff0c\\u8981\\u751f\\u6210\\u7684\\u6587\\u4ef6\\uff0c\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u6587\\u4ef6\\uff0c\\u751f\\u6210\\u7684\\u547d\\u4ee4\\u3002\\n\\n1. \\u9690\\u6666\\u89c4\\u5219\\u3002\\u7531\\u4e8e\\u6211\\u4eec\\u7684make\\u6709\\u81ea\\u52a8\\u63a8\\u5bfc\\u7684\\u529f\\u80fd\\uff0c\\u6240\\u4ee5\\u9690\\u6666\\u7684\\u89c4\\u5219\\u53ef\\u4ee5\\u8ba9\\u6211\\u4eec\\u6bd4\\u8f83\\u7c97\\u7cd9\\u5730\\u7b80\\u7565\\u5730\\u4e66\\u5199Makefile\\uff0c\\u8fd9\\u662f\\u7531make\\u6240\\u652f\\u6301\\u7684\\u3002\\n\\n1. \\u53d8\\u91cf\\u7684\\u5b9a\\u4e49\\u3002\\u5728Makefile\\u4e2d\\u6211\\u4eec\\u8981\\u5b9a\\u4e49\\u4e00\\u7cfb\\u5217\\u7684\\u53d8\\u91cf\\uff0c\\u53d8\\u91cf\\u4e00\\u822c\\u90fd\\u662f\\u5b57\\u7b26\\u4e32\\uff0c\\u8fd9\\u4e2a\\u6709\\u70b9\\u50cfC\\u8bed\\u8a00\\u4e2d\\u7684\\u5b8f\\uff0c\\u5f53Makefile\\u88ab\\u6267\\u884c\\u65f6\\uff0c\\u5176\\u4e2d\\u7684\\u53d8\\u91cf\\u90fd\\u4f1a\\u88ab\\u6269\\u5c55\\u5230\\u76f8\\u5e94\\u7684\\u5f15\\u7528\\u4f4d\\u7f6e\\u4e0a\\u3002\\n\\n1. \\u6587\\u4ef6\\u6307\\u793a\\u3002\\u5176\\u5305\\u62ec\\u4e86\\u4e09\\u4e2a\\u90e8\\u5206\\uff0c\\u4e00\\u4e2a\\u662f\\u5728\\u4e00\\u4e2aMakefile\\u4e2d\\u5f15\\u7528\\u53e6\\u4e00\\u4e2aMakefile\\uff0c\\u5c31\\u50cfC\\u8bed\\u8a00\\u4e2d\\u7684include\\u4e00\\u6837\\uff1b\\u53e6\\u4e00\\u4e2a\\u662f\\u6307\\u6839\\u636e\\u67d0\\u4e9b\\u60c5\\u51b5\\u6307\\u5b9aMakefile\\u4e2d\\u7684\\u6709\\u6548\\u90e8\\u5206\\uff0c\\u5c31\\u50cfC\\u8bed\\u8a00\\u4e2d\\u7684\\u9884\\u7f16\\u8bd1#if\\u4e00\\u6837\\uff1b\\u8fd8\\u6709\\u5c31\\u662f\\u5b9a\\u4e49\\u4e00\\u4e2a\\u591a\\u884c\\u7684\\u547d\\u4ee4\\u3002\\u6709\\u5173\\u8fd9\\u4e00\\u90e8\\u5206\\u7684\\u5185\\u5bb9\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u7eed\\u7684\\u90e8\\u5206\\u4e2d\\u8bb2\\u8ff0\\u3002\\n\\n1. \\u6ce8\\u91ca\\u3002Makefile\\u4e2d\\u53ea\\u6709\\u884c\\u6ce8\\u91ca\\uff0c\\u548cUNIX\\u7684Shell\\u811a\\u672c\\u4e00\\u6837\\uff0c\\u5176\\u6ce8\\u91ca\\u662f\\u7528\\u201c#\\u201d\\u5b57\\u7b26\\uff0c\\u8fd9\\u4e2a\\u5c31\\u50cfC\\/C++\\u4e2d\\u7684\\u201c\\/\\/\\u201d\\u4e00\\u6837\\u3002\\u5982\\u679c\\u4f60\\u8981\\u5728\\u4f60\\u7684Makefile\\u4e2d\\u4f7f\\u7528\\u201c#\\u201d\\u5b57\\u7b26\\uff0c\\u53ef\\u4ee5\\u7528\\u53cd\\u659c\\u6846\\u8fdb\\u884c\\u8f6c\\u4e49\\uff0c\\u5982\\uff1a\\u201c\\\\#\\u201d\\u3002\\n\\n\\u6700\\u540e\\uff0c\\u8fd8\\u503c\\u5f97\\u4e00\\u63d0\\u7684\\u662f\\uff0c\\u5728Makefile\\u4e2d\\u7684\\u547d\\u4ee4\\uff0c\\u5fc5\\u987b\\u8981\\u4ee5[Tab]\\u952e\\u5f00\\u59cb\\u3002\\n\\n\\n##### \\u4e8c\\u3001Makefile\\u7684\\u6587\\u4ef6\\u540d\\n\\n\\u9ed8\\u8ba4\\u7684\\u60c5\\u51b5\\u4e0b\\uff0cmake\\u547d\\u4ee4\\u4f1a\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u6309\\u987a\\u5e8f\\u627e\\u5bfb\\u6587\\u4ef6\\u540d\\u4e3a\\u201cGNUmakefile\\u201d\\u3001\\u201cmakefile\\u201d\\u3001\\u201cMakefile\\u201d\\u7684\\u6587\\u4ef6\\uff0c\\u627e\\u5230\\u4e86\\u89e3\\u91ca\\u8fd9\\u4e2a\\u6587\\u4ef6\\u3002\\u5728\\u8fd9\\u4e09\\u4e2a\\u6587\\u4ef6\\u540d\\u4e2d\\uff0c\\u6700\\u597d\\u4f7f\\u7528\\u201cMakefile\\u201d\\u8fd9\\u4e2a\\u6587\\u4ef6\\u540d\\uff0c\\u56e0\\u4e3a\\uff0c\\u8fd9\\u4e2a\\u6587\\u4ef6\\u540d\\u7b2c\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e3a\\u5927\\u5199\\uff0c\\u8fd9\\u6837\\u6709\\u4e00\\u79cd\\u663e\\u76ee\\u7684\\u611f\\u89c9\\u3002\\u6700\\u597d\\u4e0d\\u8981\\u7528\\u201cGNUmakefile\\u201d\\uff0c\\u8fd9\\u4e2a\\u6587\\u4ef6\\u662fGNU\\u7684make\\u8bc6\\u522b\\u7684\\u3002\\u6709\\u53e6\\u5916\\u4e00\\u4e9bmake\\u53ea\\u5bf9\\u5168\\u5c0f\\u5199\\u7684\\u201cmakefile\\u201d\\u6587\\u4ef6\\u540d\\u654f\\u611f\\uff0c\\u4f46\\u662f\\u57fa\\u672c\\u4e0a\\u6765\\u8bf4\\uff0c\\u5927\\u591a\\u6570\\u7684make\\u90fd\\u652f\\u6301\\u201cmakefile\\u201d\\u548c\\u201cMakefile\\u201d\\u8fd9\\u4e24\\u79cd\\u9ed8\\u8ba4\\u6587\\u4ef6\\u540d\\u3002\\n\\n\\u5f53\\u7136\\uff0c\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u522b\\u7684\\u6587\\u4ef6\\u540d\\u6765\\u4e66\\u5199Makefile\\uff0c\\u6bd4\\u5982\\uff1a\\u201cMake.Linux\\u201d\\uff0c\\u201cMake.Solaris\\u201d\\uff0c\\u201cMake.AIX\\u201d\\u7b49\\uff0c\\u5982\\u679c\\u8981\\u6307\\u5b9a\\u7279\\u5b9a\\u7684Makefile\\uff0c\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528make\\u7684\\u201c-f\\u201d\\u548c\\u201c--file\\u201d\\u53c2\\u6570\\uff0c\\u5982\\uff1amake -f Make.Linux\\u6216make --file Make.AIX\\u3002\\n\\n\\n##### \\u4e09\\u3001\\u5f15\\u7528\\u5176\\u5b83\\u7684Makefile\\n\\n\\u5728Makefile\\u4f7f\\u7528include\\u5173\\u952e\\u5b57\\u53ef\\u4ee5\\u628a\\u522b\\u7684Makefile\\u5305\\u542b\\u8fdb\\u6765\\uff0c\\u8fd9\\u5f88\\u50cfC\\u8bed\\u8a00\\u7684#include\\uff0c\\u88ab\\u5305\\u542b\\u7684\\u6587\\u4ef6\\u4f1a\\u539f\\u6a21\\u539f\\u6837\\u7684\\u653e\\u5728\\u5f53\\u524d\\u6587\\u4ef6\\u7684\\u5305\\u542b\\u4f4d\\u7f6e\\u3002include\\u7684\\u8bed\\u6cd5\\u662f\\uff1a\\n\\n    include <filename>;\\n\\n    filename\\u53ef\\u4ee5\\u662f\\u5f53\\u524d\\u64cd\\u4f5c\\u7cfb\\u7edfShell\\u7684\\u6587\\u4ef6\\u6a21\\u5f0f\\uff08\\u53ef\\u4ee5\\u4fdd\\u542b\\u8def\\u5f84\\u548c\\u901a\\u914d\\u7b26\\uff09\\n\\n\\u5728include\\u524d\\u9762\\u53ef\\u4ee5\\u6709\\u4e00\\u4e9b\\u7a7a\\u5b57\\u7b26\\uff0c\\u4f46\\u662f\\u7edd\\u4e0d\\u80fd\\u662f[Tab]\\u952e\\u5f00\\u59cb\\u3002include\\u548c<filename>;\\u53ef\\u4ee5\\u7528\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u7a7a\\u683c\\u9694\\u5f00\\u3002\\u4e3e\\u4e2a\\u4f8b\\u5b50\\uff0c\\u4f60\\u6709\\u8fd9\\u6837\\u51e0\\u4e2aMakefile\\uff1aa.mk\\u3001b.mk\\u3001c.mk\\uff0c\\u8fd8\\u6709\\u4e00\\u4e2a\\u6587\\u4ef6\\u53ebfoo.make\\uff0c\\u4ee5\\u53ca\\u4e00\\u4e2a\\u53d8\\u91cf$(bar)\\uff0c\\u5176\\u5305\\u542b\\u4e86e.mk\\u548cf.mk\\uff0c\\u90a3\\u4e48\\uff0c\\u4e0b\\u9762\\u7684\\u8bed\\u53e5\\uff1a\\n\\n    include foo.make *.mk $(bar)\\n\\n    \\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\n    include foo.make a.mk b.mk c.mk e.mk f.mk\\n\\nmake\\u547d\\u4ee4\\u5f00\\u59cb\\u65f6\\uff0c\\u4f1a\\u628a\\u627e\\u5bfbinclude\\u6240\\u6307\\u51fa\\u7684\\u5176\\u5b83Makefile\\uff0c\\u5e76\\u628a\\u5176\\u5185\\u5bb9\\u5b89\\u7f6e\\u5728\\u5f53\\u524d\\u7684\\u4f4d\\u7f6e\\u3002\\u5c31\\u597d\\u50cfC\\/C++\\u7684#include\\u6307\\u4ee4\\u4e00\\u6837\\u3002\\u5982\\u679c\\u6587\\u4ef6\\u90fd\\u6ca1\\u6709\\u6307\\u5b9a\\u7edd\\u5bf9\\u8def\\u5f84\\u6216\\u662f\\u76f8\\u5bf9\\u8def\\u5f84\\u7684\\u8bdd\\uff0cmake\\u4f1a\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u9996\\u5148\\u5bfb\\u627e\\uff0c\\u5982\\u679c\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u90a3\\u4e48\\uff0cmake\\u8fd8\\u4f1a\\u5728\\u4e0b\\u9762\\u7684\\u51e0\\u4e2a\\u76ee\\u5f55\\u4e0b\\u627e\\uff1a\\n1. \\u5982\\u679cmake\\u6267\\u884c\\u65f6\\uff0c\\u6709\\u201c-I\\u201d\\u6216\\u201c--include-dir\\u201d\\u53c2\\u6570\\uff0c\\u90a3\\u4e48make\\u5c31\\u4f1a\\u5728\\u8fd9\\u4e2a\\u53c2\\u6570\\u6240\\u6307\\u5b9a\\u7684\\u76ee\\u5f55\\u4e0b\\u53bb\\u5bfb\\u627e\\u3002\\n1. \\u5982\\u679c\\u76ee\\u5f55<prefix>;\\/include\\uff08\\u4e00\\u822c\\u662f\\uff1a\\/usr\\/local\\/bin\\u6216\\/usr\\/include\\uff09\\u5b58\\u5728\\u7684\\u8bdd\\uff0cmake\\u4e5f\\u4f1a\\u53bb\\u627e\\u3002\\n\\n\\u5982\\u679c\\u6709\\u6587\\u4ef6\\u6ca1\\u6709\\u627e\\u5230\\u7684\\u8bdd\\uff0cmake\\u4f1a\\u751f\\u6210\\u4e00\\u6761\\u8b66\\u544a\\u4fe1\\u606f\\uff0c\\u4f46\\u4e0d\\u4f1a\\u9a6c\\u4e0a\\u51fa\\u73b0\\u81f4\\u547d\\u9519\\u8bef\\u3002\\u5b83\\u4f1a\\u7ee7\\u7eed\\u8f7d\\u5165\\u5176\\u5b83\\u7684\\u6587\\u4ef6\\uff0c\\u4e00\\u65e6\\u5b8c\\u6210makefile\\u7684\\u8bfb\\u53d6\\uff0cmake\\u4f1a\\u518d\\u91cd\\u8bd5\\u8fd9\\u4e9b\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u6216\\u662f\\u4e0d\\u80fd\\u8bfb\\u53d6\\u7684\\u6587\\u4ef6\\uff0c\\u5982\\u679c\\u8fd8\\u662f\\u4e0d\\u884c\\uff0cmake\\u624d\\u4f1a\\u51fa\\u73b0\\u4e00\\u6761\\u81f4\\u547d\\u4fe1\\u606f\\u3002\\u5982\\u679c\\u4f60\\u60f3\\u8ba9make\\u4e0d\\u7406\\u90a3\\u4e9b\\u65e0\\u6cd5\\u8bfb\\u53d6\\u7684\\u6587\\u4ef6\\uff0c\\u800c\\u7ee7\\u7eed\\u6267\\u884c\\uff0c\\u4f60\\u53ef\\u4ee5\\u5728include\\u524d\\u52a0\\u4e00\\u4e2a\\u51cf\\u53f7\\u201c-\\u201d\\u3002\\u5982\\uff1a\\n\\n    -include <filename>;\\n    \\u5176\\u8868\\u793a\\uff0c\\u65e0\\u8bbainclude\\u8fc7\\u7a0b\\u4e2d\\u51fa\\u73b0\\u4ec0\\u4e48\\u9519\\u8bef\\uff0c\\u90fd\\u4e0d\\u8981\\u62a5\\u9519\\u7ee7\\u7eed\\u6267\\u884c\\u3002\\u548c\\u5176\\u5b83\\u7248\\u672cmake\\u517c\\u5bb9\\u7684\\u76f8\\u5173\\u547d\\u4ee4\\u662fsinclude\\uff0c\\u5176\\u4f5c\\u7528\\u548c\\u8fd9\\u4e00\\u4e2a\\u662f\\u4e00\\u6837\\u7684\\u3002\\n\\n\\n##### \\u56db\\u3001\\u73af\\u5883\\u53d8\\u91cf MAKEFILES \\n\\n\\u5982\\u679c\\u4f60\\u7684\\u5f53\\u524d\\u73af\\u5883\\u4e2d\\u5b9a\\u4e49\\u4e86\\u73af\\u5883\\u53d8\\u91cfMAKEFILES\\uff0c\\u90a3\\u4e48\\uff0cmake\\u4f1a\\u628a\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e2d\\u7684\\u503c\\u505a\\u4e00\\u4e2a\\u7c7b\\u4f3c\\u4e8einclude\\u7684\\u52a8\\u4f5c\\u3002\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e2d\\u7684\\u503c\\u662f\\u5176\\u5b83\\u7684Makefile\\uff0c\\u7528\\u7a7a\\u683c\\u5206\\u9694\\u3002\\u53ea\\u662f\\uff0c\\u5b83\\u548cinclude\\u4e0d\\u540c\\u7684\\u662f\\uff0c\\u4ece\\u8fd9\\u4e2a\\u73af\\u5883\\u53d8\\u4e2d\\u5f15\\u5165\\u7684Makefile\\u7684\\u201c\\u76ee\\u6807\\u201d\\u4e0d\\u4f1a\\u8d77\\u4f5c\\u7528\\uff0c\\u5982\\u679c\\u73af\\u5883\\u53d8\\u91cf\\u4e2d\\u5b9a\\u4e49\\u7684\\u6587\\u4ef6\\u53d1\\u73b0\\u9519\\u8bef\\uff0cmake\\u4e5f\\u4f1a\\u4e0d\\u7406\\u3002\\n\\n\\u4f46\\u662f\\u5728\\u8fd9\\u91cc\\u6211\\u8fd8\\u662f\\u5efa\\u8bae\\u4e0d\\u8981\\u4f7f\\u7528\\u8fd9\\u4e2a\\u73af\\u5883\\u53d8\\u91cf\\uff0c\\u56e0\\u4e3a\\u53ea\\u8981\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e00\\u88ab\\u5b9a\\u4e49\\uff0c\\u90a3\\u4e48\\u5f53\\u4f60\\u4f7f\\u7528make\\u65f6\\uff0c\\u6240\\u6709\\u7684Makefile\\u90fd\\u4f1a\\u53d7\\u5230\\u5b83\\u7684\\u5f71\\u54cd\\uff0c\\u8fd9\\u7edd\\u4e0d\\u662f\\u4f60\\u60f3\\u770b\\u5230\\u7684\\u3002\\u5728\\u8fd9\\u91cc\\u63d0\\u8fd9\\u4e2a\\u4e8b\\uff0c\\u53ea\\u662f\\u4e3a\\u4e86\\u544a\\u8bc9\\u5927\\u5bb6\\uff0c\\u4e5f\\u8bb8\\u6709\\u65f6\\u5019\\u4f60\\u7684Makefile\\u51fa\\u73b0\\u4e86\\u602a\\u4e8b\\uff0c\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u770b\\u770b\\u5f53\\u524d\\u73af\\u5883\\u4e2d\\u6709\\u6ca1\\u6709\\u5b9a\\u4e49\\u8fd9\\u4e2a\\u53d8\\u91cf\\u3002\\n\\n\\n##### \\u4e94\\u3001make\\u7684\\u5de5\\u4f5c\\u65b9\\u5f0f\\n\\nGNU\\u7684make\\u5de5\\u4f5c\\u65f6\\u7684\\u6267\\u884c\\u6b65\\u9aa4\\u5165\\u4e0b\\uff1a\\uff08\\u60f3\\u6765\\u5176\\u5b83\\u7684make\\u4e5f\\u662f\\u7c7b\\u4f3c\\uff09\\n\\n1. \\u8bfb\\u5165\\u6240\\u6709\\u7684Makefile\\u3002\\n1. \\u8bfb\\u5165\\u88abinclude\\u7684\\u5176\\u5b83Makefile\\u3002\\n1. \\u521d\\u59cb\\u5316\\u6587\\u4ef6\\u4e2d\\u7684\\u53d8\\u91cf\\u3002\\n1. \\u63a8\\u5bfc\\u9690\\u6666\\u89c4\\u5219\\uff0c\\u5e76\\u5206\\u6790\\u6240\\u6709\\u89c4\\u5219\\u3002\\n1. \\u4e3a\\u6240\\u6709\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u521b\\u5efa\\u4f9d\\u8d56\\u5173\\u7cfb\\u94fe\\u3002\\n1. \\u6839\\u636e\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u51b3\\u5b9a\\u54ea\\u4e9b\\u76ee\\u6807\\u8981\\u91cd\\u65b0\\u751f\\u6210\\u3002\\n1. \\u6267\\u884c\\u751f\\u6210\\u547d\\u4ee4\\u3002\\n\\n1-5\\u6b65\\u4e3a\\u7b2c\\u4e00\\u4e2a\\u9636\\u6bb5\\uff0c6-7\\u4e3a\\u7b2c\\u4e8c\\u4e2a\\u9636\\u6bb5\\u3002\\u7b2c\\u4e00\\u4e2a\\u9636\\u6bb5\\u4e2d\\uff0c\\u5982\\u679c\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\u88ab\\u4f7f\\u7528\\u4e86\\uff0c\\u90a3\\u4e48\\uff0cmake\\u4f1a\\u628a\\u5176\\u5c55\\u5f00\\u5728\\u4f7f\\u7528\\u7684\\u4f4d\\u7f6e\\u3002\\u4f46make\\u5e76\\u4e0d\\u4f1a\\u5b8c\\u5168\\u9a6c\\u4e0a\\u5c55\\u5f00\\uff0cmake\\u4f7f\\u7528\\u7684\\u662f\\u62d6\\u5ef6\\u6218\\u672f\\uff0c\\u5982\\u679c\\u53d8\\u91cf\\u51fa\\u73b0\\u5728\\u4f9d\\u8d56\\u5173\\u7cfb\\u7684\\u89c4\\u5219\\u4e2d\\uff0c\\u90a3\\u4e48\\u4ec5\\u5f53\\u8fd9\\u6761\\u4f9d\\u8d56\\u88ab\\u51b3\\u5b9a\\u8981\\u4f7f\\u7528\\u4e86\\uff0c\\u53d8\\u91cf\\u624d\\u4f1a\\u5728\\u5176\\u5185\\u90e8\\u5c55\\u5f00\\u3002\\n\\n\\u5f53\\u7136\\uff0c\\u8fd9\\u4e2a\\u5de5\\u4f5c\\u65b9\\u5f0f\\u4f60\\u4e0d\\u4e00\\u5b9a\\u8981\\u6e05\\u695a\\uff0c\\u4f46\\u662f\\u77e5\\u9053\\u8fd9\\u4e2a\\u65b9\\u5f0f\\u4f60\\u4e5f\\u4f1a\\u5bf9make\\u66f4\\u4e3a\\u719f\\u6089\\u3002\\u6709\\u4e86\\u8fd9\\u4e2a\\u57fa\\u7840\\uff0c\\u540e\\u7eed\\u90e8\\u5206\\u4e5f\\u5c31\\u5bb9\\u6613\\u770b\\u61c2\\u4e86\\u3002","html":"<p>\\u6765\\u81ea\\uff1a\\u9648\\u7693<\\/p>\\n<h3>\\u6982\\u8ff0<\\/h3>\\n<p>\\u4ec0\\u4e48\\u662fmakefile\\uff1f\\u6216\\u8bb8\\u5f88\\u591aWinodws\\u7684\\u7a0b\\u5e8f\\u5458\\u90fd\\u4e0d\\u77e5\\u9053\\u8fd9\\u4e2a\\u4e1c\\u897f\\uff0c\\u56e0\\u4e3a\\u90a3\\u4e9bWindows\\u7684IDE\\u90fd\\u4e3a\\u4f60\\u505a\\u4e86\\u8fd9\\u4e2a\\u5de5\\u4f5c\\uff0c\\u4f46\\u6211\\u89c9\\u5f97\\u8981\\u4f5c\\u4e00\\u4e2a\\u597d\\u7684\\u548cprofessional\\u7684\\u7a0b\\u5e8f\\u5458\\uff0cmakefile\\u8fd8\\u662f\\u8981\\u61c2\\u3002\\u8fd9\\u5c31\\u597d\\u50cf\\u73b0\\u5728\\u6709\\u8fd9\\u4e48\\u591a\\u7684HTML\\u7684\\u7f16\\u8f91\\u5668\\uff0c\\u4f46\\u5982\\u679c\\u4f60\\u60f3\\u6210\\u4e3a\\u4e00\\u4e2a\\u4e13\\u4e1a\\u4eba\\u58eb\\uff0c\\u4f60\\u8fd8\\u662f\\u8981\\u4e86\\u89e3HTML\\u7684\\u6807\\u8bc6\\u7684\\u542b\\u4e49\\u3002\\u7279\\u522b\\u5728Unix\\u4e0b\\u7684\\u8f6f\\u4ef6\\u7f16\\u8bd1\\uff0c\\u4f60\\u5c31\\u4e0d\\u80fd\\u4e0d\\u81ea\\u5df1\\u5199makefile\\u4e86\\uff0c\\u4f1a\\u4e0d\\u4f1a\\u5199makefile\\uff0c\\u4ece\\u4e00\\u4e2a\\u4fa7\\u9762\\u8bf4\\u660e\\u4e86\\u4e00\\u4e2a\\u4eba\\u662f\\u5426\\u5177\\u5907\\u5b8c\\u6210\\u5927\\u578b\\u5de5\\u7a0b\\u7684\\u80fd\\u529b\\u3002<\\/p>\\n<p>\\u56e0\\u4e3a\\uff0cmakefile\\u5173\\u7cfb\\u5230\\u4e86\\u6574\\u4e2a\\u5de5\\u7a0b\\u7684\\u7f16\\u8bd1\\u89c4\\u5219\\u3002\\u4e00\\u4e2a\\u5de5\\u7a0b\\u4e2d\\u7684\\u6e90\\u6587\\u4ef6\\u4e0d\\u8ba1\\u6570\\uff0c\\u5176\\u6309\\u7c7b\\u578b\\u3001\\u529f\\u80fd\\u3001\\u6a21\\u5757\\u5206\\u522b\\u653e\\u5728\\u82e5\\u5e72\\u4e2a\\u76ee\\u5f55\\u4e2d\\uff0cmakefile\\u5b9a\\u4e49\\u4e86\\u4e00\\u7cfb\\u5217\\u7684\\u89c4\\u5219\\u6765\\u6307\\u5b9a\\uff0c\\u54ea\\u4e9b\\u6587\\u4ef6\\u9700\\u8981\\u5148\\u7f16\\u8bd1\\uff0c\\u54ea\\u4e9b\\u6587\\u4ef6\\u9700\\u8981\\u540e\\u7f16\\u8bd1\\uff0c\\u54ea\\u4e9b\\u6587\\u4ef6\\u9700\\u8981\\u91cd\\u65b0\\u7f16\\u8bd1\\uff0c\\u751a\\u81f3\\u4e8e\\u8fdb\\u884c\\u66f4\\u590d\\u6742\\u7684\\u529f\\u80fd\\u64cd\\u4f5c\\uff0c\\u56e0\\u4e3amakefile\\u5c31\\u50cf\\u4e00\\u4e2aShell\\u811a\\u672c\\u4e00\\u6837\\uff0c\\u5176\\u4e2d\\u4e5f\\u53ef\\u4ee5\\u6267\\u884c\\u64cd\\u4f5c\\u7cfb\\u7edf\\u7684\\u547d\\u4ee4\\u3002<\\/p>\\n<p>makefile\\u5e26\\u6765\\u7684\\u597d\\u5904\\u5c31\\u662f\\u2014\\u2014\\u201c\\u81ea\\u52a8\\u5316\\u7f16\\u8bd1\\u201d\\uff0c\\u4e00\\u65e6\\u5199\\u597d\\uff0c\\u53ea\\u9700\\u8981\\u4e00\\u4e2amake\\u547d\\u4ee4\\uff0c\\u6574\\u4e2a\\u5de5\\u7a0b\\u5b8c\\u5168\\u81ea\\u52a8\\u7f16\\u8bd1\\uff0c\\u6781\\u5927\\u7684\\u63d0\\u9ad8\\u4e86\\u8f6f\\u4ef6\\u5f00\\u53d1\\u7684\\u6548\\u7387\\u3002make\\u662f\\u4e00\\u4e2a\\u547d\\u4ee4\\u5de5\\u5177\\uff0c\\u662f\\u4e00\\u4e2a\\u89e3\\u91camakefile\\u4e2d\\u6307\\u4ee4\\u7684\\u547d\\u4ee4\\u5de5\\u5177\\uff0c\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u5927\\u591a\\u6570\\u7684IDE\\u90fd\\u6709\\u8fd9\\u4e2a\\u547d\\u4ee4\\uff0c\\u6bd4\\u5982\\uff1aDelphi\\u7684make\\uff0cVisual C++\\u7684nmake\\uff0cLinux\\u4e0bGNU\\u7684make\\u3002\\u53ef\\u89c1\\uff0cmakefile\\u90fd\\u6210\\u4e3a\\u4e86\\u4e00\\u79cd\\u5728\\u5de5\\u7a0b\\u65b9\\u9762\\u7684\\u7f16\\u8bd1\\u65b9\\u6cd5\\u3002<\\/p>\\n<p>\\u73b0\\u5728\\u8bb2\\u8ff0\\u5982\\u4f55\\u5199makefile\\u7684\\u6587\\u7ae0\\u6bd4\\u8f83\\u5c11\\uff0c\\u8fd9\\u662f\\u6211\\u60f3\\u5199\\u8fd9\\u7bc7\\u6587\\u7ae0\\u7684\\u539f\\u56e0\\u3002\\u5f53\\u7136\\uff0c\\u4e0d\\u540c\\u4ea7\\u5546\\u7684make\\u5404\\u4e0d\\u76f8\\u540c\\uff0c\\u4e5f\\u6709\\u4e0d\\u540c\\u7684\\u8bed\\u6cd5\\uff0c\\u4f46\\u5176\\u672c\\u8d28\\u90fd\\u662f\\u5728\\u201c\\u6587\\u4ef6\\u4f9d\\u8d56\\u6027\\u201d\\u4e0a\\u505a\\u6587\\u7ae0\\uff0c\\u8fd9\\u91cc\\uff0c\\u6211\\u4ec5\\u5bf9GNU\\u7684make\\u8fdb\\u884c\\u8bb2\\u8ff0\\uff0c\\u6211\\u7684\\u73af\\u5883\\u662fRedHat Linux 8.0\\uff0cmake\\u7684\\u7248\\u672c\\u662f3.80\\u3002\\u5fc5\\u7adf\\uff0c\\u8fd9\\u4e2amake\\u662f\\u5e94\\u7528\\u6700\\u4e3a\\u5e7f\\u6cdb\\u7684\\uff0c\\u4e5f\\u662f\\u7528\\u5f97\\u6700\\u591a\\u7684\\u3002\\u800c\\u4e14\\u5176\\u8fd8\\u662f\\u6700\\u9075\\u5faa\\u4e8eIEEE 1003.2-1992 \\u6807\\u51c6\\u7684\\uff08POSIX.2\\uff09\\u3002<\\/p>\\n<p>\\u5728\\u8fd9\\u7bc7\\u6587\\u6863\\u4e2d\\uff0c\\u5c06\\u4ee5C\\/C++\\u7684\\u6e90\\u7801\\u4f5c\\u4e3a\\u6211\\u4eec\\u57fa\\u7840\\uff0c\\u6240\\u4ee5\\u5fc5\\u7136\\u6d89\\u53ca\\u4e00\\u4e9b\\u5173\\u4e8eC\\/C++\\u7684\\u7f16\\u8bd1\\u7684\\u77e5\\u8bc6\\uff0c\\u76f8\\u5173\\u4e8e\\u8fd9\\u65b9\\u9762\\u7684\\u5185\\u5bb9\\uff0c\\u8fd8\\u8bf7\\u5404\\u4f4d\\u67e5\\u770b\\u76f8\\u5173\\u7684\\u7f16\\u8bd1\\u5668\\u7684\\u6587\\u6863\\u3002\\u8fd9\\u91cc\\u6240\\u9ed8\\u8ba4\\u7684\\u7f16\\u8bd1\\u5668\\u662fUNIX\\u4e0b\\u7684GCC\\u548cCC\\u3002<\\/p>\\n<h4>\\u5173\\u4e8e\\u7a0b\\u5e8f\\u7684\\u7f16\\u8bd1\\u548c\\u94fe\\u63a5<\\/h4>\\n<p>\\u5728\\u6b64\\uff0c\\u6211\\u60f3\\u591a\\u8bf4\\u5173\\u4e8e\\u7a0b\\u5e8f\\u7f16\\u8bd1\\u7684\\u4e00\\u4e9b\\u89c4\\u8303\\u548c\\u65b9\\u6cd5\\uff0c\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u65e0\\u8bba\\u662fC\\u3001C++\\u3001\\u8fd8\\u662fpas\\uff0c\\u9996\\u5148\\u8981\\u628a\\u6e90\\u6587\\u4ef6\\u7f16\\u8bd1\\u6210\\u4e2d\\u95f4\\u4ee3\\u7801\\u6587\\u4ef6\\uff0c\\u5728Windows\\u4e0b\\u4e5f\\u5c31\\u662f .obj \\u6587\\u4ef6\\uff0cUNIX\\u4e0b\\u662f .o \\u6587\\u4ef6\\uff0c\\u5373 Object File\\uff0c\\u8fd9\\u4e2a\\u52a8\\u4f5c\\u53eb\\u505a\\u7f16\\u8bd1\\uff08compile\\uff09\\u3002\\u7136\\u540e\\u518d\\u628a\\u5927\\u91cf\\u7684Object File\\u5408\\u6210\\u6267\\u884c\\u6587\\u4ef6\\uff0c\\u8fd9\\u4e2a\\u52a8\\u4f5c\\u53eb\\u4f5c\\u94fe\\u63a5\\uff08link\\uff09\\u3002<\\/p>\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u7f16\\u8bd1\\u5668\\u9700\\u8981\\u7684\\u662f\\u8bed\\u6cd5\\u7684\\u6b63\\u786e\\uff0c\\u51fd\\u6570\\u4e0e\\u53d8\\u91cf\\u7684\\u58f0\\u660e\\u7684\\u6b63\\u786e\\u3002\\u5bf9\\u4e8e\\u540e\\u8005\\uff0c\\u901a\\u5e38\\u662f\\u4f60\\u9700\\u8981\\u544a\\u8bc9\\u7f16\\u8bd1\\u5668\\u5934\\u6587\\u4ef6\\u7684\\u6240\\u5728\\u4f4d\\u7f6e\\uff08\\u5934\\u6587\\u4ef6\\u4e2d\\u5e94\\u8be5\\u53ea\\u662f\\u58f0\\u660e\\uff0c\\u800c\\u5b9a\\u4e49\\u5e94\\u8be5\\u653e\\u5728C\\/C++\\u6587\\u4ef6\\u4e2d\\uff09\\uff0c\\u53ea\\u8981\\u6240\\u6709\\u7684\\u8bed\\u6cd5\\u6b63\\u786e\\uff0c\\u7f16\\u8bd1\\u5668\\u5c31\\u53ef\\u4ee5\\u7f16\\u8bd1\\u51fa\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u6bcf\\u4e2a\\u6e90\\u6587\\u4ef6\\u90fd\\u5e94\\u8be5\\u5bf9\\u5e94\\u4e8e\\u4e00\\u4e2a\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff08O\\u6587\\u4ef6\\u6216\\u662fOBJ\\u6587\\u4ef6\\uff09\\u3002<\\/p>\\n<p>\\u94fe\\u63a5\\u65f6\\uff0c\\u4e3b\\u8981\\u662f\\u94fe\\u63a5\\u51fd\\u6570\\u548c\\u5168\\u5c40\\u53d8\\u91cf\\uff0c\\u6240\\u4ee5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u8fd9\\u4e9b\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff08O\\u6587\\u4ef6\\u6216\\u662fOBJ\\u6587\\u4ef6\\uff09\\u6765\\u94fe\\u63a5\\u6211\\u4eec\\u7684\\u5e94\\u7528\\u7a0b\\u5e8f\\u3002\\u94fe\\u63a5\\u5668\\u5e76\\u4e0d\\u7ba1\\u51fd\\u6570\\u6240\\u5728\\u7684\\u6e90\\u6587\\u4ef6\\uff0c\\u53ea\\u7ba1\\u51fd\\u6570\\u7684\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff08Object File\\uff09\\uff0c\\u5728\\u5927\\u591a\\u6570\\u65f6\\u5019\\uff0c\\u7531\\u4e8e\\u6e90\\u6587\\u4ef6\\u592a\\u591a\\uff0c\\u7f16\\u8bd1\\u751f\\u6210\\u7684\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u592a\\u591a\\uff0c\\u800c\\u5728\\u94fe\\u63a5\\u65f6\\u9700\\u8981\\u660e\\u663e\\u5730\\u6307\\u51fa\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u540d\\uff0c\\u8fd9\\u5bf9\\u4e8e\\u7f16\\u8bd1\\u5f88\\u4e0d\\u65b9\\u4fbf\\uff0c\\u6240\\u4ee5\\uff0c\\u6211\\u4eec\\u8981\\u7ed9\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u6253\\u4e2a\\u5305\\uff0c\\u5728Windows\\u4e0b\\u8fd9\\u79cd\\u5305\\u53eb\\u201c\\u5e93\\u6587\\u4ef6\\u201d\\uff08Library File)\\uff0c\\u4e5f\\u5c31\\u662f .lib \\u6587\\u4ef6\\uff0c\\u5728UNIX\\u4e0b\\uff0c\\u662fArchive File\\uff0c\\u4e5f\\u5c31\\u662f .a \\u6587\\u4ef6\\u3002<\\/p>\\n<p>\\u603b\\u7ed3\\u4e00\\u4e0b\\uff0c\\u6e90\\u6587\\u4ef6\\u9996\\u5148\\u4f1a\\u751f\\u6210\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u518d\\u7531\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\u751f\\u6210\\u6267\\u884c\\u6587\\u4ef6\\u3002\\u5728\\u7f16\\u8bd1\\u65f6\\uff0c\\u7f16\\u8bd1\\u5668\\u53ea\\u68c0\\u6d4b\\u7a0b\\u5e8f\\u8bed\\u6cd5\\uff0c\\u548c\\u51fd\\u6570\\u3001\\u53d8\\u91cf\\u662f\\u5426\\u88ab\\u58f0\\u660e\\u3002\\u5982\\u679c\\u51fd\\u6570\\u672a\\u88ab\\u58f0\\u660e\\uff0c\\u7f16\\u8bd1\\u5668\\u4f1a\\u7ed9\\u51fa\\u4e00\\u4e2a\\u8b66\\u544a\\uff0c\\u4f46\\u53ef\\u4ee5\\u751f\\u6210Object File\\u3002\\u800c\\u5728\\u94fe\\u63a5\\u7a0b\\u5e8f\\u65f6\\uff0c\\u94fe\\u63a5\\u5668\\u4f1a\\u5728\\u6240\\u6709\\u7684Object File\\u4e2d\\u627e\\u5bfb\\u51fd\\u6570\\u7684\\u5b9e\\u73b0\\uff0c\\u5982\\u679c\\u627e\\u4e0d\\u5230\\uff0c\\u90a3\\u5230\\u5c31\\u4f1a\\u62a5\\u94fe\\u63a5\\u9519\\u8bef\\u7801\\uff08Linker Error\\uff09\\uff0c\\u5728VC\\u4e0b\\uff0c\\u8fd9\\u79cd\\u9519\\u8bef\\u4e00\\u822c\\u662f\\uff1aLink 2001\\u9519\\u8bef\\uff0c\\u610f\\u601d\\u8bf4\\u662f\\u8bf4\\uff0c\\u94fe\\u63a5\\u5668\\u672a\\u80fd\\u627e\\u5230\\u51fd\\u6570\\u7684\\u5b9e\\u73b0\\u3002\\u4f60\\u9700\\u8981\\u6307\\u5b9a\\u51fd\\u6570\\u7684Object File.<\\/p>\\n<h3>Makefile \\u4ecb\\u7ecd<\\/h3>\\n<p>make\\u547d\\u4ee4\\u6267\\u884c\\u65f6\\uff0c\\u9700\\u8981\\u4e00\\u4e2a Makefile \\u6587\\u4ef6\\uff0c\\u4ee5\\u544a\\u8bc9make\\u547d\\u4ee4\\u9700\\u8981\\u600e\\u4e48\\u6837\\u7684\\u53bb\\u7f16\\u8bd1\\u548c\\u94fe\\u63a5\\u7a0b\\u5e8f\\u3002<\\/p>\\n<p>\\u9996\\u5148\\uff0c\\u6211\\u4eec\\u7528\\u4e00\\u4e2a\\u793a\\u4f8b\\u6765\\u8bf4\\u660eMakefile\\u7684\\u4e66\\u5199\\u89c4\\u5219\\u3002\\u4ee5\\u4fbf\\u7ed9\\u5927\\u5bb6\\u4e00\\u4e2a\\u611f\\u5174\\u8ba4\\u8bc6\\u3002\\u8fd9\\u4e2a\\u793a\\u4f8b\\u6765\\u6e90\\u4e8eGNU\\u7684make\\u4f7f\\u7528\\u624b\\u518c\\uff0c\\u5728\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c\\u6211\\u4eec\\u7684\\u5de5\\u7a0b\\u67098\\u4e2aC\\u6587\\u4ef6\\uff0c\\u548c3\\u4e2a\\u5934\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u8981\\u5199\\u4e00\\u4e2aMakefile\\u6765\\u544a\\u8bc9make\\u547d\\u4ee4\\u5982\\u4f55\\u7f16\\u8bd1\\u548c\\u94fe\\u63a5\\u8fd9\\u51e0\\u4e2a\\u6587\\u4ef6\\u3002\\u6211\\u4eec\\u7684\\u89c4\\u5219\\u662f\\uff1a<\\/p>\\n<ol>\\n<li>\\u5982\\u679c\\u8fd9\\u4e2a\\u5de5\\u7a0b\\u6ca1\\u6709\\u7f16\\u8bd1\\u8fc7\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u7684\\u6240\\u6709C\\u6587\\u4ef6\\u90fd\\u8981\\u7f16\\u8bd1\\u5e76\\u88ab\\u94fe\\u63a5\\u3002<\\/li>\\n<li>\\u5982\\u679c\\u8fd9\\u4e2a\\u5de5\\u7a0b\\u7684\\u67d0\\u51e0\\u4e2aC\\u6587\\u4ef6\\u88ab\\u4fee\\u6539\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u53ea\\u7f16\\u8bd1\\u88ab\\u4fee\\u6539\\u7684C\\u6587\\u4ef6\\uff0c\\u5e76\\u94fe\\u63a5\\u76ee\\u6807\\u7a0b\\u5e8f\\u3002<\\/li>\\n<li>\\u5982\\u679c\\u8fd9\\u4e2a\\u5de5\\u7a0b\\u7684\\u5934\\u6587\\u4ef6\\u88ab\\u6539\\u53d8\\u4e86\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u9700\\u8981\\u7f16\\u8bd1\\u5f15\\u7528\\u4e86\\u8fd9\\u51e0\\u4e2a\\u5934\\u6587\\u4ef6\\u7684C\\u6587\\u4ef6\\uff0c\\u5e76\\u94fe\\u63a5\\u76ee\\u6807\\u7a0b\\u5e8f\\u3002<\\/li>\\n<\\/ol>\\n<p>\\u53ea\\u8981\\u6211\\u4eec\\u7684Makefile\\u5199\\u5f97\\u591f\\u597d\\uff0c\\u6240\\u6709\\u7684\\u8fd9\\u4e00\\u5207\\uff0c\\u6211\\u4eec\\u53ea\\u7528\\u4e00\\u4e2amake\\u547d\\u4ee4\\u5c31\\u53ef\\u4ee5\\u5b8c\\u6210\\uff0cmake\\u547d\\u4ee4\\u4f1a\\u81ea\\u52a8\\u667a\\u80fd\\u5730\\u6839\\u636e\\u5f53\\u524d\\u7684\\u6587\\u4ef6\\u4fee\\u6539\\u7684\\u60c5\\u51b5\\u6765\\u786e\\u5b9a\\u54ea\\u4e9b\\u6587\\u4ef6\\u9700\\u8981\\u91cd\\u7f16\\u8bd1\\uff0c\\u4ece\\u800c\\u81ea\\u5df1\\u7f16\\u8bd1\\u6240\\u9700\\u8981\\u7684\\u6587\\u4ef6\\u548c\\u94fe\\u63a5\\u76ee\\u6807\\u7a0b\\u5e8f\\u3002<\\/p>\\n<h5>\\u4e00\\u3001Makefile\\u7684\\u89c4\\u5219<\\/h5>\\n<p>\\u5728\\u8bb2\\u8ff0\\u8fd9\\u4e2aMakefile\\u4e4b\\u524d\\uff0c\\u8fd8\\u662f\\u8ba9\\u6211\\u4eec\\u5148\\u6765\\u7c97\\u7565\\u5730\\u770b\\u4e00\\u770bMakefile\\u7684\\u89c4\\u5219\\u3002<\\/p>\\n<pre><code>target ... : prerequisites ...\\n    command\\n    ...\\n    ...<\\/code><\\/pre>\\n<p>target\\u4e5f\\u5c31\\u662f\\u4e00\\u4e2a\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u53ef\\u4ee5\\u662fObject File\\uff0c\\u4e5f\\u53ef\\u4ee5\\u662f\\u6267\\u884c\\u6587\\u4ef6\\u3002\\u8fd8\\u53ef\\u4ee5\\u662f\\u4e00\\u4e2a\\u6807\\u7b7e\\uff08Label\\uff09\\uff0c\\u5bf9\\u4e8e\\u6807\\u7b7e\\u8fd9\\u79cd\\u7279\\u6027\\uff0c\\u5728\\u540e\\u7eed\\u7684\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u7ae0\\u8282\\u4e2d\\u4f1a\\u6709\\u53d9\\u8ff0\\u3002<br \\/>\\nprerequisites\\u5c31\\u662f\\uff0c\\u8981\\u751f\\u6210\\u90a3\\u4e2atarget\\u6240\\u9700\\u8981\\u7684\\u6587\\u4ef6\\u6216\\u662f\\u76ee\\u6807\\u3002command\\u4e5f\\u5c31\\u662fmake\\u9700\\u8981\\u6267\\u884c\\u7684\\u547d\\u4ee4\\u3002\\uff08\\u4efb\\u610f\\u7684Shell\\u547d\\u4ee4\\uff09<\\/p>\\n<p>\\u8fd9\\u662f\\u4e00\\u4e2a\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u4e5f\\u5c31\\u662f\\u8bf4\\uff0ctarget\\u8fd9\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u4f9d\\u8d56\\u4e8eprerequisites\\u4e2d\\u7684\\u6587\\u4ef6\\uff0c\\u5176\\u751f\\u6210\\u89c4\\u5219\\u5b9a\\u4e49\\u5728command\\u4e2d\\u3002\\u8bf4\\u767d\\u4e00\\u70b9\\u5c31\\u662f\\u8bf4\\uff0cprerequisites\\u4e2d\\u5982\\u679c\\u6709\\u4e00\\u4e2a\\u4ee5\\u4e0a\\u7684\\u6587\\u4ef6\\u6bd4target\\u6587\\u4ef6\\u8981\\u65b0\\u7684\\u8bdd\\uff0ccommand\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u5c31\\u4f1a\\u88ab\\u6267\\u884c\\u3002\\u8fd9\\u5c31\\u662fMakefile\\u7684\\u89c4\\u5219\\u3002\\u4e5f\\u5c31\\u662fMakefile\\u4e2d\\u6700\\u6838\\u5fc3\\u7684\\u5185\\u5bb9\\u3002<\\/p>\\n<p>\\u8bf4\\u5230\\u5e95\\uff0cMakefile\\u7684\\u4e1c\\u897f\\u5c31\\u662f\\u8fd9\\u6837\\u4e00\\u70b9\\uff0c\\u597d\\u50cf\\u6211\\u7684\\u8fd9\\u7bc7\\u6587\\u6863\\u4e5f\\u8be5\\u7ed3\\u675f\\u4e86\\u3002\\u5475\\u5475\\u3002\\u8fd8\\u4e0d\\u5c3d\\u7136\\uff0c\\u8fd9\\u662fMakefile\\u7684\\u4e3b\\u7ebf\\u548c\\u6838\\u5fc3\\uff0c\\u4f46\\u8981\\u5199\\u597d\\u4e00\\u4e2aMakefile\\u8fd8\\u4e0d\\u591f\\uff0c\\u6211\\u4f1a\\u4ee5\\u540e\\u9762\\u4e00\\u70b9\\u4e00\\u70b9\\u5730\\u7ed3\\u5408\\u6211\\u7684\\u5de5\\u4f5c\\u7ecf\\u9a8c\\u7ed9\\u4f60\\u6162\\u6162\\u5230\\u6765\\u3002\\u5185\\u5bb9\\u8fd8\\u591a\\u7740\\u5462\\u3002\\uff1a\\uff09<\\/p>\\n<h5>\\u4e8c\\u3001\\u4e00\\u4e2a\\u793a\\u4f8b<\\/h5>\\n<p>\\u6b63\\u5982\\u524d\\u9762\\u6240\\u8bf4\\u7684\\uff0c\\u5982\\u679c\\u4e00\\u4e2a\\u5de5\\u7a0b\\u67093\\u4e2a\\u5934\\u6587\\u4ef6\\uff0c\\u548c8\\u4e2aC\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u4e3a\\u4e86\\u5b8c\\u6210\\u524d\\u9762\\u6240\\u8ff0\\u7684\\u90a3\\u4e09\\u4e2a\\u89c4\\u5219\\uff0c\\u6211\\u4eec\\u7684Makefile\\u5e94\\u8be5\\u662f\\u4e0b\\u9762\\u7684\\u8fd9\\u4e2a\\u6837\\u5b50\\u7684\\u3002<\\/p>\\n<pre><code>edit : main.o kbd.o command.o display.o \\\\\\n        insert.o search.o files.o utils.o\\n    cc -o edit main.o kbd.o command.o display.o \\\\\\n        insert.o search.o files.o utils.o\\n\\nmain.o : main.c defs.h\\n    cc -c main.c\\nkbd.o : kbd.c defs.h command.h\\n    cc -c kbd.c\\ncommand.o : command.c defs.h command.h\\n    cc -c command.c\\ndisplay.o : display.c defs.h buffer.h\\n    cc -c display.c\\ninsert.o : insert.c defs.h buffer.h\\n    cc -c insert.c\\nsearch.o : search.c defs.h buffer.h\\n    cc -c search.c\\nfiles.o : files.c defs.h buffer.h command.h\\n    cc -c files.c\\nutils.o : utils.c defs.h\\n    cc -c utils.c\\nclean :\\n    rm edit main.o kbd.o command.o display.o \\\\\\n         insert.o search.o files.o utils.o<\\/code><\\/pre>\\n<p>\\u53cd\\u659c\\u6760\\uff08\\\\\\uff09\\u662f\\u6362\\u884c\\u7b26\\u7684\\u610f\\u601d\\u3002\\u8fd9\\u6837\\u6bd4\\u8f83\\u4fbf\\u4e8eMakefile\\u7684\\u6613\\u8bfb\\u3002\\u6211\\u4eec\\u53ef\\u4ee5\\u628a\\u8fd9\\u4e2a\\u5185\\u5bb9\\u4fdd\\u5b58\\u5728\\u6587\\u4ef6\\u4e3a\\u201cMakefile\\u201d\\u6216\\u201cmakefile\\u201d\\u7684\\u6587\\u4ef6\\u4e2d\\uff0c\\u7136\\u540e\\u5728\\u8be5\\u76ee\\u5f55\\u4e0b\\u76f4\\u63a5\\u8f93\\u5165\\u547d\\u4ee4\\u201cmake\\u201d\\u5c31\\u53ef\\u4ee5\\u751f\\u6210\\u6267\\u884c\\u6587\\u4ef6edit\\u3002\\u5982\\u679c\\u8981\\u5220\\u9664\\u6267\\u884c\\u6587\\u4ef6\\u548c\\u6240\\u6709\\u7684\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u90a3\\u4e48\\uff0c\\u53ea\\u8981\\u7b80\\u5355\\u5730\\u6267\\u884c\\u4e00\\u4e0b\\u201cmake clean\\u201d\\u5c31\\u53ef\\u4ee5\\u4e86\\u3002<\\/p>\\n<p>\\u5728\\u8fd9\\u4e2amakefile\\u4e2d\\uff0c\\u76ee\\u6807\\u6587\\u4ef6\\uff08target\\uff09\\u5305\\u542b\\uff1a\\u6267\\u884c\\u6587\\u4ef6edit\\u548c\\u4e2d\\u95f4\\u76ee\\u6807\\u6587\\u4ef6\\uff08*.o\\uff09\\uff0c\\u4f9d\\u8d56\\u6587\\u4ef6\\uff08prerequisites\\uff09\\u5c31\\u662f\\u5192\\u53f7\\u540e\\u9762\\u7684\\u90a3\\u4e9b .c \\u6587\\u4ef6\\u548c .h\\u6587\\u4ef6\\u3002\\u6bcf\\u4e00\\u4e2a .o \\u6587\\u4ef6\\u90fd\\u6709\\u4e00\\u7ec4\\u4f9d\\u8d56\\u6587\\u4ef6\\uff0c\\u800c\\u8fd9\\u4e9b .o \\u6587\\u4ef6\\u53c8\\u662f\\u6267\\u884c\\u6587\\u4ef6 edit \\u7684\\u4f9d\\u8d56\\u6587\\u4ef6\\u3002\\u4f9d\\u8d56\\u5173\\u7cfb\\u7684\\u5b9e\\u8d28\\u4e0a\\u5c31\\u662f\\u8bf4\\u660e\\u4e86\\u76ee\\u6807\\u6587\\u4ef6\\u662f\\u7531\\u54ea\\u4e9b\\u6587\\u4ef6\\u751f\\u6210\\u7684\\uff0c\\u6362\\u8a00\\u4e4b\\uff0c\\u76ee\\u6807\\u6587\\u4ef6\\u662f\\u54ea\\u4e9b\\u6587\\u4ef6\\u66f4\\u65b0\\u7684\\u3002<\\/p>\\n<p>\\u5728\\u5b9a\\u4e49\\u597d\\u4f9d\\u8d56\\u5173\\u7cfb\\u540e\\uff0c\\u540e\\u7eed\\u7684\\u90a3\\u4e00\\u884c\\u5b9a\\u4e49\\u4e86\\u5982\\u4f55\\u751f\\u6210\\u76ee\\u6807\\u6587\\u4ef6\\u7684\\u64cd\\u4f5c\\u7cfb\\u7edf\\u547d\\u4ee4\\uff0c\\u4e00\\u5b9a\\u8981\\u4ee5\\u4e00\\u4e2aTab\\u952e\\u4f5c\\u4e3a\\u5f00\\u5934\\u3002\\u8bb0\\u4f4f\\uff0cmake\\u5e76\\u4e0d\\u7ba1\\u547d\\u4ee4\\u662f\\u600e\\u4e48\\u5de5\\u4f5c\\u7684\\uff0c\\u4ed6\\u53ea\\u7ba1\\u6267\\u884c\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u3002make\\u4f1a\\u6bd4\\u8f83targets\\u6587\\u4ef6\\u548cprerequisites\\u6587\\u4ef6\\u7684\\u4fee\\u6539\\u65e5\\u671f\\uff0c\\u5982\\u679cprerequisites\\u6587\\u4ef6\\u7684\\u65e5\\u671f\\u8981\\u6bd4targets\\u6587\\u4ef6\\u7684\\u65e5\\u671f\\u8981\\u65b0\\uff0c\\u6216\\u8005target\\u4e0d\\u5b58\\u5728\\u7684\\u8bdd\\uff0c\\u90a3\\u4e48\\uff0cmake\\u5c31\\u4f1a\\u6267\\u884c\\u540e\\u7eed\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u3002<\\/p>\\n<p>\\u8fd9\\u91cc\\u8981\\u8bf4\\u660e\\u4e00\\u70b9\\u7684\\u662f\\uff0cclean\\u4e0d\\u662f\\u4e00\\u4e2a\\u6587\\u4ef6\\uff0c\\u5b83\\u53ea\\u4e0d\\u8fc7\\u662f\\u4e00\\u4e2a\\u52a8\\u4f5c\\u540d\\u5b57\\uff0c\\u6709\\u70b9\\u50cfC\\u8bed\\u8a00\\u4e2d\\u7684lable\\u4e00\\u6837\\uff0c\\u5176\\u5192\\u53f7\\u540e\\u4ec0\\u4e48\\u4e5f\\u6ca1\\u6709\\uff0c\\u90a3\\u4e48\\uff0cmake\\u5c31\\u4e0d\\u4f1a\\u81ea\\u52a8\\u53bb\\u627e\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u6027\\uff0c\\u4e5f\\u5c31\\u4e0d\\u4f1a\\u81ea\\u52a8\\u6267\\u884c\\u5176\\u540e\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u3002\\u8981\\u6267\\u884c\\u5176\\u540e\\u7684\\u547d\\u4ee4\\uff0c\\u5c31\\u8981\\u5728make\\u547d\\u4ee4\\u540e\\u660e\\u663e\\u5f97\\u6307\\u51fa\\u8fd9\\u4e2alable\\u7684\\u540d\\u5b57\\u3002\\u8fd9\\u6837\\u7684\\u65b9\\u6cd5\\u975e\\u5e38\\u6709\\u7528\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5728\\u4e00\\u4e2amakefile\\u4e2d\\u5b9a\\u4e49\\u4e0d\\u7528\\u7684\\u7f16\\u8bd1\\u6216\\u662f\\u548c\\u7f16\\u8bd1\\u65e0\\u5173\\u7684\\u547d\\u4ee4\\uff0c\\u6bd4\\u5982\\u7a0b\\u5e8f\\u7684\\u6253\\u5305\\uff0c\\u7a0b\\u5e8f\\u7684\\u5907\\u4efd\\uff0c\\u7b49\\u7b49\\u3002<\\/p>\\n<h5>\\u4e09\\u3001make\\u662f\\u5982\\u4f55\\u5de5\\u4f5c\\u7684<\\/h5>\\n<p>\\u5728\\u9ed8\\u8ba4\\u7684\\u65b9\\u5f0f\\u4e0b\\uff0c\\u4e5f\\u5c31\\u662f\\u6211\\u4eec\\u53ea\\u8f93\\u5165make\\u547d\\u4ee4\\u3002\\u90a3\\u4e48\\uff0c<\\/p>\\n<ol>\\n<li>make\\u4f1a\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u627e\\u540d\\u5b57\\u53eb\\u201cMakefile\\u201d\\u6216\\u201cmakefile\\u201d\\u7684\\u6587\\u4ef6\\u3002<\\/li>\\n<li>\\u5982\\u679c\\u627e\\u5230\\uff0c\\u5b83\\u4f1a\\u627e\\u6587\\u4ef6\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u6587\\u4ef6\\uff08target\\uff09\\uff0c\\u5728\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u4e2d\\uff0c\\u4ed6\\u4f1a\\u627e\\u5230\\u201cedit\\u201d\\u8fd9\\u4e2a\\u6587\\u4ef6\\uff0c\\u5e76\\u628a\\u8fd9\\u4e2a\\u6587\\u4ef6\\u4f5c\\u4e3a\\u6700\\u7ec8\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u3002<\\/li>\\n<li>\\u5982\\u679cedit\\u6587\\u4ef6\\u4e0d\\u5b58\\u5728\\uff0c\\u6216\\u662fedit\\u6240\\u4f9d\\u8d56\\u7684\\u540e\\u9762\\u7684 .o \\u6587\\u4ef6\\u7684\\u6587\\u4ef6\\u4fee\\u6539\\u65f6\\u95f4\\u8981\\u6bd4edit\\u8fd9\\u4e2a\\u6587\\u4ef6\\u65b0\\uff0c\\u90a3\\u4e48\\uff0c\\u4ed6\\u5c31\\u4f1a\\u6267\\u884c\\u540e\\u9762\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u6765\\u751f\\u6210edit\\u8fd9\\u4e2a\\u6587\\u4ef6\\u3002<\\/li>\\n<li>\\u5982\\u679cedit\\u6240\\u4f9d\\u8d56\\u7684.o\\u6587\\u4ef6\\u4e5f\\u5b58\\u5728\\uff0c\\u90a3\\u4e48make\\u4f1a\\u5728\\u5f53\\u524d\\u6587\\u4ef6\\u4e2d\\u627e\\u76ee\\u6807\\u4e3a.o\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u6027\\uff0c\\u5982\\u679c\\u627e\\u5230\\u5219\\u518d\\u6839\\u636e\\u90a3\\u4e00\\u4e2a\\u89c4\\u5219\\u751f\\u6210.o\\u6587\\u4ef6\\u3002\\uff08\\u8fd9\\u6709\\u70b9\\u50cf\\u4e00\\u4e2a\\u5806\\u6808\\u7684\\u8fc7\\u7a0b\\uff09<\\/li>\\n<li>\\u5f53\\u7136\\uff0c\\u4f60\\u7684C\\u6587\\u4ef6\\u548cH\\u6587\\u4ef6\\u662f\\u5b58\\u5728\\u7684\\u5566\\uff0c\\u4e8e\\u662fmake\\u4f1a\\u751f\\u6210 .o \\u6587\\u4ef6\\uff0c\\u7136\\u540e\\u518d\\u7528 .o \\u6587\\u4ef6\\u751f\\u547dmake\\u7684\\u7ec8\\u6781\\u4efb\\u52a1\\uff0c\\u4e5f\\u5c31\\u662f\\u6267\\u884c\\u6587\\u4ef6edit\\u4e86\\u3002<\\/li>\\n<\\/ol>\\n<p>\\u8fd9\\u5c31\\u662f\\u6574\\u4e2amake\\u7684\\u4f9d\\u8d56\\u6027\\uff0cmake\\u4f1a\\u4e00\\u5c42\\u53c8\\u4e00\\u5c42\\u5730\\u53bb\\u627e\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u76f4\\u5230\\u6700\\u7ec8\\u7f16\\u8bd1\\u51fa\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\u5728\\u627e\\u5bfb\\u7684\\u8fc7\\u7a0b\\u4e2d\\uff0c\\u5982\\u679c\\u51fa\\u73b0\\u9519\\u8bef\\uff0c\\u6bd4\\u5982\\u6700\\u540e\\u88ab\\u4f9d\\u8d56\\u7684\\u6587\\u4ef6\\u627e\\u4e0d\\u5230\\uff0c\\u90a3\\u4e48make\\u5c31\\u4f1a\\u76f4\\u63a5\\u9000\\u51fa\\uff0c\\u5e76\\u62a5\\u9519\\uff0c\\u800c\\u5bf9\\u4e8e\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u7684\\u9519\\u8bef\\uff0c\\u6216\\u662f\\u7f16\\u8bd1\\u4e0d\\u6210\\u529f\\uff0cmake\\u6839\\u672c\\u4e0d\\u7406\\u3002make\\u53ea\\u7ba1\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u6027\\uff0c\\u5373\\uff0c\\u5982\\u679c\\u5728\\u6211\\u627e\\u4e86\\u4f9d\\u8d56\\u5173\\u7cfb\\u4e4b\\u540e\\uff0c\\u5192\\u53f7\\u540e\\u9762\\u7684\\u6587\\u4ef6\\u8fd8\\u662f\\u4e0d\\u5728\\uff0c\\u90a3\\u4e48\\u5bf9\\u4e0d\\u8d77\\uff0c\\u6211\\u5c31\\u4e0d\\u5de5\\u4f5c\\u5566\\u3002<\\/p>\\n<p>\\u901a\\u8fc7\\u4e0a\\u8ff0\\u5206\\u6790\\uff0c\\u6211\\u4eec\\u77e5\\u9053\\uff0c\\u50cfclean\\u8fd9\\u79cd\\uff0c\\u6ca1\\u6709\\u88ab\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u6587\\u4ef6\\u76f4\\u63a5\\u6216\\u95f4\\u63a5\\u5173\\u8054\\uff0c\\u90a3\\u4e48\\u5b83\\u540e\\u9762\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u5c06\\u4e0d\\u4f1a\\u88ab\\u81ea\\u52a8\\u6267\\u884c\\uff0c\\u4e0d\\u8fc7\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u663e\\u793a\\u8981make\\u6267\\u884c\\u3002\\u5373\\u547d\\u4ee4\\u2014\\u2014\\u201cmake clean\\u201d\\uff0c\\u4ee5\\u6b64\\u6765\\u6e05\\u9664\\u6240\\u6709\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u4ee5\\u4fbf\\u91cd\\u7f16\\u8bd1\\u3002<\\/p>\\n<p>\\u4e8e\\u662f\\u5728\\u6211\\u4eec\\u7f16\\u7a0b\\u4e2d\\uff0c\\u5982\\u679c\\u8fd9\\u4e2a\\u5de5\\u7a0b\\u5df2\\u88ab\\u7f16\\u8bd1\\u8fc7\\u4e86\\uff0c\\u5f53\\u6211\\u4eec\\u4fee\\u6539\\u4e86\\u5176\\u4e2d\\u4e00\\u4e2a\\u6e90\\u6587\\u4ef6\\uff0c\\u6bd4\\u5982file.c\\uff0c\\u90a3\\u4e48\\u6839\\u636e\\u6211\\u4eec\\u7684\\u4f9d\\u8d56\\u6027\\uff0c\\u6211\\u4eec\\u7684\\u76ee\\u6807file.o\\u4f1a\\u88ab\\u91cd\\u7f16\\u8bd1\\uff08\\u4e5f\\u5c31\\u662f\\u5728\\u8fd9\\u4e2a\\u4f9d\\u6027\\u5173\\u7cfb\\u540e\\u9762\\u6240\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\uff09\\uff0c\\u4e8e\\u662ffile.o\\u7684\\u6587\\u4ef6\\u4e5f\\u662f\\u6700\\u65b0\\u7684\\u5566\\uff0c\\u4e8e\\u662ffile.o\\u7684\\u6587\\u4ef6\\u4fee\\u6539\\u65f6\\u95f4\\u8981\\u6bd4edit\\u8981\\u65b0\\uff0c\\u6240\\u4ee5edit\\u4e5f\\u4f1a\\u88ab\\u91cd\\u65b0\\u94fe\\u63a5\\u4e86\\uff08\\u8be6\\u89c1edit\\u76ee\\u6807\\u6587\\u4ef6\\u540e\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\uff09\\u3002<\\/p>\\n<p>\\u800c\\u5982\\u679c\\u6211\\u4eec\\u6539\\u53d8\\u4e86\\u201ccommand.h\\u201d\\uff0c\\u90a3\\u4e48\\uff0ckdb.o\\u3001command.o\\u548cfiles.o\\u90fd\\u4f1a\\u88ab\\u91cd\\u7f16\\u8bd1\\uff0c\\u5e76\\u4e14\\uff0cedit\\u4f1a\\u88ab\\u91cd\\u94fe\\u63a5\\u3002<\\/p>\\n<h5>\\u56db\\u3001makefile\\u4e2d\\u4f7f\\u7528\\u53d8\\u91cf<\\/h5>\\n<p>\\u5728\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u4e2d\\uff0c\\u5148\\u8ba9\\u6211\\u4eec\\u770b\\u770bedit\\u7684\\u89c4\\u5219\\uff1a<\\/p>\\n<pre><code>edit : main.o kbd.o command.o display.o \\\\\\n                insert.o search.o files.o utils.o\\n    cc -o edit main.o kbd.o command.o display.o \\\\\\n                         insert.o search.o files.o utils.o<\\/code><\\/pre>\\n<p>\\u6211\\u4eec\\u53ef\\u4ee5\\u770b\\u5230[.o]\\u6587\\u4ef6\\u7684\\u5b57\\u7b26\\u4e32\\u88ab\\u91cd\\u590d\\u4e86\\u4e24\\u6b21\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684\\u5de5\\u7a0b\\u9700\\u8981\\u52a0\\u5165\\u4e00\\u4e2a\\u65b0\\u7684[.o]\\u6587\\u4ef6\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u9700\\u8981\\u5728\\u4e24\\u4e2a\\u5730\\u65b9\\u52a0\\uff08\\u5e94\\u8be5\\u662f\\u4e09\\u4e2a\\u5730\\u65b9\\uff0c\\u8fd8\\u6709\\u4e00\\u4e2a\\u5730\\u65b9\\u5728clean\\u4e2d\\uff09\\u3002\\u5f53\\u7136\\uff0c\\u6211\\u4eec\\u7684makefile\\u5e76\\u4e0d\\u590d\\u6742\\uff0c\\u6240\\u4ee5\\u5728\\u4e24\\u4e2a\\u5730\\u65b9\\u52a0\\u4e5f\\u4e0d\\u7d2f\\uff0c\\u4f46\\u5982\\u679cmakefile\\u53d8\\u5f97\\u590d\\u6742\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u5c31\\u6709\\u53ef\\u80fd\\u4f1a\\u5fd8\\u6389\\u4e00\\u4e2a\\u9700\\u8981\\u52a0\\u5165\\u7684\\u5730\\u65b9\\uff0c\\u800c\\u5bfc\\u81f4\\u7f16\\u8bd1\\u5931\\u8d25\\u3002\\u6240\\u4ee5\\uff0c\\u4e3a\\u4e86makefile\\u7684\\u6613\\u7ef4\\u62a4\\uff0c\\u5728makefile\\u4e2d\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u53d8\\u91cf\\u3002makefile\\u7684\\u53d8\\u91cf\\u4e5f\\u5c31\\u662f\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\uff0c\\u7406\\u89e3\\u6210C\\u8bed\\u8a00\\u4e2d\\u7684\\u5b8f\\u53ef\\u80fd\\u4f1a\\u66f4\\u597d\\u3002<\\/p>\\n<p>\\u6bd4\\u5982\\uff0c\\u6211\\u4eec\\u58f0\\u660e\\u4e00\\u4e2a\\u53d8\\u91cf\\uff0c\\u53ebobjects, OBJECTS, objs, OBJS, obj, \\u6216\\u662f OBJ\\uff0c\\u53cd\\u6b63\\u4e0d\\u7ba1\\u4ec0\\u4e48\\u5566\\uff0c\\u53ea\\u8981\\u80fd\\u591f\\u8868\\u793aobj\\u6587\\u4ef6\\u5c31\\u884c\\u4e86\\u3002\\u6211\\u4eec\\u5728makefile\\u4e00\\u5f00\\u59cb\\u5c31\\u8fd9\\u6837\\u5b9a\\u4e49\\uff1a<\\/p>\\n<pre><code> objects = main.o kbd.o command.o display.o \\\\\\n          insert.o search.o files.o utils.o<\\/code><\\/pre>\\n<p>\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u5c31\\u53ef\\u4ee5\\u5f88\\u65b9\\u4fbf\\u5730\\u5728\\u6211\\u4eec\\u7684makefile\\u4e2d\\u4ee5\\u201c$(objects)\\u201d\\u7684\\u65b9\\u5f0f\\u6765\\u4f7f\\u7528\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e86\\uff0c\\u4e8e\\u662f\\u6211\\u4eec\\u7684\\u6539\\u826f\\u7248makefile\\u5c31\\u53d8\\u6210\\u4e0b\\u9762\\u8fd9\\u4e2a\\u6837\\u5b50\\uff1a<\\/p>\\n<pre><code>objects = main.o kbd.o command.o display.o \\\\\\n        insert.o search.o files.o utils.o\\n\\nedit : $(objects)\\n    cc -o edit $(objects)\\nmain.o : main.c defs.h\\n    cc -c main.c\\nkbd.o : kbd.c defs.h command.h\\n    cc -c kbd.c\\ncommand.o : command.c defs.h command.h\\n    cc -c command.c\\ndisplay.o : display.c defs.h buffer.h\\n    cc -c display.c\\ninsert.o : insert.c defs.h buffer.h\\n    cc -c insert.c\\nsearch.o : search.c defs.h buffer.h\\n    cc -c search.c\\nfiles.o : files.c defs.h buffer.h command.h\\n    cc -c files.c\\nutils.o : utils.c defs.h\\n    cc -c utils.c\\nclean :\\n    rm edit $(objects)<\\/code><\\/pre>\\n<p>\\u4e8e\\u662f\\u5982\\u679c\\u6709\\u65b0\\u7684 .o \\u6587\\u4ef6\\u52a0\\u5165\\uff0c\\u6211\\u4eec\\u53ea\\u9700\\u7b80\\u5355\\u5730\\u4fee\\u6539\\u4e00\\u4e0b objects \\u53d8\\u91cf\\u5c31\\u53ef\\u4ee5\\u4e86\\u3002<\\/p>\\n<p>\\u5173\\u4e8e\\u53d8\\u91cf\\u66f4\\u591a\\u7684\\u8bdd\\u9898\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u7eed\\u7ed9\\u4f60\\u4e00\\u4e00\\u9053\\u6765\\u3002<\\/p>\\n<h5>\\u4e94\\u3001\\u8ba9make\\u81ea\\u52a8\\u63a8\\u5bfc<\\/h5>\\n<p>GNU\\u7684make\\u5f88\\u5f3a\\u5927\\uff0c\\u5b83\\u53ef\\u4ee5\\u81ea\\u52a8\\u63a8\\u5bfc\\u6587\\u4ef6\\u4ee5\\u53ca\\u6587\\u4ef6\\u4f9d\\u8d56\\u5173\\u7cfb\\u540e\\u9762\\u7684\\u547d\\u4ee4\\uff0c\\u4e8e\\u662f\\u6211\\u4eec\\u5c31\\u6ca1\\u5fc5\\u8981\\u53bb\\u5728\\u6bcf\\u4e00\\u4e2a[.o]\\u6587\\u4ef6\\u540e\\u90fd\\u5199\\u4e0a\\u7c7b\\u4f3c\\u7684\\u547d\\u4ee4\\uff0c\\u56e0\\u4e3a\\uff0c\\u6211\\u4eec\\u7684make\\u4f1a\\u81ea\\u52a8\\u8bc6\\u522b\\uff0c\\u5e76\\u81ea\\u5df1\\u63a8\\u5bfc\\u547d\\u4ee4\\u3002<\\/p>\\n<p>\\u53ea\\u8981make\\u770b\\u5230\\u4e00\\u4e2a[.o]\\u6587\\u4ef6\\uff0c\\u5b83\\u5c31\\u4f1a\\u81ea\\u52a8\\u7684\\u628a[.c]\\u6587\\u4ef6\\u52a0\\u5728\\u4f9d\\u8d56\\u5173\\u7cfb\\u4e2d\\uff0c\\u5982\\u679cmake\\u627e\\u5230\\u4e00\\u4e2awhatever.o\\uff0c\\u90a3\\u4e48whatever.c\\uff0c\\u5c31\\u4f1a\\u662fwhatever.o\\u7684\\u4f9d\\u8d56\\u6587\\u4ef6\\u3002\\u5e76\\u4e14 <strong>cc -c whatever.c \\u4e5f\\u4f1a\\u88ab\\u63a8\\u5bfc\\u51fa\\u6765<\\/strong>\\uff0c\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u7684makefile\\u518d\\u4e5f\\u4e0d\\u7528\\u5199\\u5f97\\u8fd9\\u4e48\\u590d\\u6742\\u3002\\u6211\\u4eec\\u65b0\\u7684makefile\\u53c8\\u51fa\\u7089\\u4e86\\u3002<\\/p>\\n<pre><code>objects = main.o kbd.o command.o display.o \\\\\\n        insert.o search.o files.o utils.o\\n\\nedit : $(objects)\\n    cc -o edit $(objects)\\n\\nmain.o : defs.h\\nkbd.o : defs.h command.h\\ncommand.o : defs.h command.h\\ndisplay.o : defs.h buffer.h\\ninsert.o : defs.h buffer.h\\nsearch.o : defs.h buffer.h\\nfiles.o : defs.h buffer.h command.h\\nutils.o : defs.h\\n\\n.PHONY : clean\\nclean :\\n    rm edit $(objects)<\\/code><\\/pre>\\n<p>\\u8fd9\\u79cd\\u65b9\\u6cd5\\uff0c\\u4e5f\\u5c31\\u662fmake\\u7684\\u201c\\u9690\\u6666\\u89c4\\u5219\\u201d\\u3002\\u4e0a\\u9762\\u6587\\u4ef6\\u5185\\u5bb9\\u4e2d\\uff0c\\u201c.PHONY\\u201d\\u8868\\u793a\\uff0cclean\\u662f\\u4e2a\\u4f2a\\u76ee\\u6807\\u6587\\u4ef6\\u3002<\\/p>\\n<p>\\u5173\\u4e8e\\u66f4\\u4e3a\\u8be6\\u7ec6\\u7684\\u201c\\u9690\\u6666\\u89c4\\u5219\\u201d\\u548c\\u201c\\u4f2a\\u76ee\\u6807\\u6587\\u4ef6\\u201d\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u7eed\\u7ed9\\u4f60\\u4e00\\u4e00\\u9053\\u6765\\u3002<\\/p>\\n<h5>\\u516d\\u3001\\u53e6\\u7c7b\\u98ce\\u683c\\u7684makefile<\\/h5>\\n<p>\\u5373\\u7136\\u6211\\u4eec\\u7684make\\u53ef\\u4ee5\\u81ea\\u52a8\\u63a8\\u5bfc\\u547d\\u4ee4\\uff0c\\u90a3\\u4e48\\u6211\\u770b\\u5230\\u90a3\\u5806[.o]\\u548c[.h]\\u7684\\u4f9d\\u8d56\\u5c31\\u6709\\u70b9\\u4e0d\\u723d\\uff0c\\u90a3\\u4e48\\u591a\\u7684\\u91cd\\u590d\\u7684[.h]\\uff0c\\u80fd\\u4e0d\\u80fd\\u628a\\u5176\\u6536\\u62e2\\u8d77\\u6765\\uff0c\\u597d\\u5427\\uff0c\\u6ca1\\u6709\\u95ee\\u9898\\uff0c\\u8fd9\\u4e2a\\u5bf9\\u4e8emake\\u6765\\u8bf4\\u5f88\\u5bb9\\u6613\\uff0c\\u8c01\\u53eb\\u5b83\\u63d0\\u4f9b\\u4e86\\u81ea\\u52a8\\u63a8\\u5bfc\\u547d\\u4ee4\\u548c\\u6587\\u4ef6\\u7684\\u529f\\u80fd\\u5462\\uff1f\\u6765\\u770b\\u770b\\u6700\\u65b0\\u98ce\\u683c\\u7684makefile\\u5427\\u3002<\\/p>\\n<pre><code>objects = main.o kbd.o command.o display.o \\\\\\n        insert.o search.o files.o utils.o\\n\\nedit : $(objects)\\n    cc -o edit $(objects)\\n\\n$(objects) : defs.h\\nkbd.o command.o files.o : command.h\\ndisplay.o insert.o search.o files.o : buffer.h\\n\\n.PHONY : clean\\nclean :\\n    rm edit $(objects)<\\/code><\\/pre>\\n<p>\\u8fd9\\u79cd\\u98ce\\u683c\\uff0c\\u8ba9\\u6211\\u4eec\\u7684makefile\\u53d8\\u5f97\\u5f88\\u7b80\\u5355\\uff0c\\u4f46\\u6211\\u4eec\\u7684\\u6587\\u4ef6\\u4f9d\\u8d56\\u5173\\u7cfb\\u5c31\\u663e\\u5f97\\u6709\\u70b9\\u51cc\\u4e71\\u4e86\\u3002\\u9c7c\\u548c\\u718a\\u638c\\u4e0d\\u53ef\\u517c\\u5f97\\u3002\\u8fd8\\u770b\\u4f60\\u7684\\u559c\\u597d\\u4e86\\u3002\\u6211\\u662f\\u4e0d\\u559c\\u6b22\\u8fd9\\u79cd\\u98ce\\u683c\\u7684\\uff0c\\u4e00\\u662f\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u770b\\u4e0d\\u6e05\\u695a\\uff0c\\u4e8c\\u662f\\u5982\\u679c\\u6587\\u4ef6\\u4e00\\u591a\\uff0c\\u8981\\u52a0\\u5165\\u51e0\\u4e2a\\u65b0\\u7684.o\\u6587\\u4ef6\\uff0c\\u90a3\\u5c31\\u7406\\u4e0d\\u6e05\\u695a\\u4e86\\u3002<\\/p>\\n<h5>\\u4e03\\u3001\\u6e05\\u7a7a\\u76ee\\u6807\\u6587\\u4ef6\\u7684\\u89c4\\u5219<\\/h5>\\n<p>\\u6bcf\\u4e2aMakefile\\u4e2d\\u90fd\\u5e94\\u8be5\\u5199\\u4e00\\u4e2a\\u6e05\\u7a7a\\u76ee\\u6807\\u6587\\u4ef6\\uff08.o\\u548c\\u6267\\u884c\\u6587\\u4ef6\\uff09\\u7684\\u89c4\\u5219\\uff0c\\u8fd9\\u4e0d\\u4ec5\\u4fbf\\u4e8e\\u91cd\\u7f16\\u8bd1\\uff0c\\u4e5f\\u5f88\\u5229\\u4e8e\\u4fdd\\u6301\\u6587\\u4ef6\\u7684\\u6e05\\u6d01\\u3002\\u8fd9\\u662f\\u4e00\\u4e2a\\u201c\\u4fee\\u517b\\u201d\\uff08\\u5475\\u5475\\uff0c\\u8fd8\\u8bb0\\u5f97\\u6211\\u7684\\u300a\\u7f16\\u7a0b\\u4fee\\u517b\\u300b\\u5417\\uff09\\u3002\\u4e00\\u822c\\u7684\\u98ce\\u683c\\u90fd\\u662f\\uff1a<\\/p>\\n<pre><code>clean:\\n    rm edit $(objects)<\\/code><\\/pre>\\n<p>\\u66f4\\u4e3a\\u7a33\\u5065\\u7684\\u505a\\u6cd5\\u662f\\uff1a<\\/p>\\n<pre><code>.PHONY : clean\\nclean :\\n    -rm edit $(objects)<\\/code><\\/pre>\\n<p>\\u524d\\u9762\\u8bf4\\u8fc7\\uff0c.PHONY\\u610f\\u601d\\u8868\\u793aclean\\u662f\\u4e00\\u4e2a\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\uff0c\\u3002\\u800c\\u5728rm\\u547d\\u4ee4\\u524d\\u9762\\u52a0\\u4e86\\u4e00\\u4e2a\\u5c0f\\u51cf\\u53f7\\u7684\\u610f\\u601d\\u5c31\\u662f\\uff0c\\u4e5f\\u8bb8\\u67d0\\u4e9b\\u6587\\u4ef6\\u51fa\\u73b0\\u95ee\\u9898\\uff0c\\u4f46\\u4e0d\\u8981\\u7ba1\\uff0c\\u7ee7\\u7eed\\u505a\\u540e\\u9762\\u7684\\u4e8b\\u3002\\u5f53\\u7136\\uff0cclean\\u7684\\u89c4\\u5219\\u4e0d\\u8981\\u653e\\u5728\\u6587\\u4ef6\\u7684\\u5f00\\u5934\\uff0c\\u4e0d\\u7136\\uff0c\\u8fd9\\u5c31\\u4f1a\\u53d8\\u6210make\\u7684\\u9ed8\\u8ba4\\u76ee\\u6807\\uff0c\\u76f8\\u4fe1\\u8c01\\u4e5f\\u4e0d\\u613f\\u610f\\u8fd9\\u6837\\u3002\\u4e0d\\u6210\\u6587\\u7684\\u89c4\\u77e9\\u662f\\u2014\\u2014\\u201cclean\\u4ece\\u6765\\u90fd\\u662f\\u653e\\u5728\\u6587\\u4ef6\\u7684\\u6700\\u540e\\u201d\\u3002<\\/p>\\n<p>\\u4e0a\\u9762\\u5c31\\u662f\\u4e00\\u4e2amakefile\\u7684\\u6982\\u8c8c\\uff0c\\u4e5f\\u662fmakefile\\u7684\\u57fa\\u7840\\uff0c\\u4e0b\\u9762\\u8fd8\\u6709\\u5f88\\u591amakefile\\u7684\\u76f8\\u5173\\u7ec6\\u8282\\uff0c\\u51c6\\u5907\\u597d\\u4e86\\u5417\\uff1f\\u51c6\\u5907\\u597d\\u4e86\\u5c31\\u6765\\u3002<\\/p>\\n<h3>\\u603b\\u8282<\\/h3>\\n<h5>\\u4e00\\u3001Makefile\\u91cc\\u6709\\u4ec0\\u4e48\\uff1f<\\/h5>\\n<p>Makefile\\u91cc\\u4e3b\\u8981\\u5305\\u542b\\u4e86\\u4e94\\u4e2a\\u4e1c\\u897f\\uff1a\\u663e\\u5f0f\\u89c4\\u5219\\u3001\\u9690\\u6666\\u89c4\\u5219\\u3001\\u53d8\\u91cf\\u5b9a\\u4e49\\u3001\\u6587\\u4ef6\\u6307\\u793a\\u548c\\u6ce8\\u91ca\\u3002<\\/p>\\n<ol>\\n<li>\\n<p>\\u663e\\u5f0f\\u89c4\\u5219\\u3002\\u663e\\u5f0f\\u89c4\\u5219\\u8bf4\\u660e\\u4e86\\uff0c\\u5982\\u4f55\\u751f\\u6210\\u4e00\\u4e2a\\u6216\\u591a\\u7684\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\u8fd9\\u662f\\u7531Makefile\\u7684\\u4e66\\u5199\\u8005\\u660e\\u663e\\u6307\\u51fa\\uff0c\\u8981\\u751f\\u6210\\u7684\\u6587\\u4ef6\\uff0c\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u6587\\u4ef6\\uff0c\\u751f\\u6210\\u7684\\u547d\\u4ee4\\u3002<\\/p>\\n<\\/li>\\n<li>\\n<p>\\u9690\\u6666\\u89c4\\u5219\\u3002\\u7531\\u4e8e\\u6211\\u4eec\\u7684make\\u6709\\u81ea\\u52a8\\u63a8\\u5bfc\\u7684\\u529f\\u80fd\\uff0c\\u6240\\u4ee5\\u9690\\u6666\\u7684\\u89c4\\u5219\\u53ef\\u4ee5\\u8ba9\\u6211\\u4eec\\u6bd4\\u8f83\\u7c97\\u7cd9\\u5730\\u7b80\\u7565\\u5730\\u4e66\\u5199Makefile\\uff0c\\u8fd9\\u662f\\u7531make\\u6240\\u652f\\u6301\\u7684\\u3002<\\/p>\\n<\\/li>\\n<li>\\n<p>\\u53d8\\u91cf\\u7684\\u5b9a\\u4e49\\u3002\\u5728Makefile\\u4e2d\\u6211\\u4eec\\u8981\\u5b9a\\u4e49\\u4e00\\u7cfb\\u5217\\u7684\\u53d8\\u91cf\\uff0c\\u53d8\\u91cf\\u4e00\\u822c\\u90fd\\u662f\\u5b57\\u7b26\\u4e32\\uff0c\\u8fd9\\u4e2a\\u6709\\u70b9\\u50cfC\\u8bed\\u8a00\\u4e2d\\u7684\\u5b8f\\uff0c\\u5f53Makefile\\u88ab\\u6267\\u884c\\u65f6\\uff0c\\u5176\\u4e2d\\u7684\\u53d8\\u91cf\\u90fd\\u4f1a\\u88ab\\u6269\\u5c55\\u5230\\u76f8\\u5e94\\u7684\\u5f15\\u7528\\u4f4d\\u7f6e\\u4e0a\\u3002<\\/p>\\n<\\/li>\\n<li>\\n<p>\\u6587\\u4ef6\\u6307\\u793a\\u3002\\u5176\\u5305\\u62ec\\u4e86\\u4e09\\u4e2a\\u90e8\\u5206\\uff0c\\u4e00\\u4e2a\\u662f\\u5728\\u4e00\\u4e2aMakefile\\u4e2d\\u5f15\\u7528\\u53e6\\u4e00\\u4e2aMakefile\\uff0c\\u5c31\\u50cfC\\u8bed\\u8a00\\u4e2d\\u7684include\\u4e00\\u6837\\uff1b\\u53e6\\u4e00\\u4e2a\\u662f\\u6307\\u6839\\u636e\\u67d0\\u4e9b\\u60c5\\u51b5\\u6307\\u5b9aMakefile\\u4e2d\\u7684\\u6709\\u6548\\u90e8\\u5206\\uff0c\\u5c31\\u50cfC\\u8bed\\u8a00\\u4e2d\\u7684\\u9884\\u7f16\\u8bd1#if\\u4e00\\u6837\\uff1b\\u8fd8\\u6709\\u5c31\\u662f\\u5b9a\\u4e49\\u4e00\\u4e2a\\u591a\\u884c\\u7684\\u547d\\u4ee4\\u3002\\u6709\\u5173\\u8fd9\\u4e00\\u90e8\\u5206\\u7684\\u5185\\u5bb9\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u7eed\\u7684\\u90e8\\u5206\\u4e2d\\u8bb2\\u8ff0\\u3002<\\/p>\\n<\\/li>\\n<li>\\n<p>\\u6ce8\\u91ca\\u3002Makefile\\u4e2d\\u53ea\\u6709\\u884c\\u6ce8\\u91ca\\uff0c\\u548cUNIX\\u7684Shell\\u811a\\u672c\\u4e00\\u6837\\uff0c\\u5176\\u6ce8\\u91ca\\u662f\\u7528\\u201c#\\u201d\\u5b57\\u7b26\\uff0c\\u8fd9\\u4e2a\\u5c31\\u50cfC\\/C++\\u4e2d\\u7684\\u201c\\/\\/\\u201d\\u4e00\\u6837\\u3002\\u5982\\u679c\\u4f60\\u8981\\u5728\\u4f60\\u7684Makefile\\u4e2d\\u4f7f\\u7528\\u201c#\\u201d\\u5b57\\u7b26\\uff0c\\u53ef\\u4ee5\\u7528\\u53cd\\u659c\\u6846\\u8fdb\\u884c\\u8f6c\\u4e49\\uff0c\\u5982\\uff1a\\u201c#\\u201d\\u3002<\\/p>\\n<\\/li>\\n<\\/ol>\\n<p>\\u6700\\u540e\\uff0c\\u8fd8\\u503c\\u5f97\\u4e00\\u63d0\\u7684\\u662f\\uff0c\\u5728Makefile\\u4e2d\\u7684\\u547d\\u4ee4\\uff0c\\u5fc5\\u987b\\u8981\\u4ee5[Tab]\\u952e\\u5f00\\u59cb\\u3002<\\/p>\\n<h5>\\u4e8c\\u3001Makefile\\u7684\\u6587\\u4ef6\\u540d<\\/h5>\\n<p>\\u9ed8\\u8ba4\\u7684\\u60c5\\u51b5\\u4e0b\\uff0cmake\\u547d\\u4ee4\\u4f1a\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u6309\\u987a\\u5e8f\\u627e\\u5bfb\\u6587\\u4ef6\\u540d\\u4e3a\\u201cGNUmakefile\\u201d\\u3001\\u201cmakefile\\u201d\\u3001\\u201cMakefile\\u201d\\u7684\\u6587\\u4ef6\\uff0c\\u627e\\u5230\\u4e86\\u89e3\\u91ca\\u8fd9\\u4e2a\\u6587\\u4ef6\\u3002\\u5728\\u8fd9\\u4e09\\u4e2a\\u6587\\u4ef6\\u540d\\u4e2d\\uff0c\\u6700\\u597d\\u4f7f\\u7528\\u201cMakefile\\u201d\\u8fd9\\u4e2a\\u6587\\u4ef6\\u540d\\uff0c\\u56e0\\u4e3a\\uff0c\\u8fd9\\u4e2a\\u6587\\u4ef6\\u540d\\u7b2c\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e3a\\u5927\\u5199\\uff0c\\u8fd9\\u6837\\u6709\\u4e00\\u79cd\\u663e\\u76ee\\u7684\\u611f\\u89c9\\u3002\\u6700\\u597d\\u4e0d\\u8981\\u7528\\u201cGNUmakefile\\u201d\\uff0c\\u8fd9\\u4e2a\\u6587\\u4ef6\\u662fGNU\\u7684make\\u8bc6\\u522b\\u7684\\u3002\\u6709\\u53e6\\u5916\\u4e00\\u4e9bmake\\u53ea\\u5bf9\\u5168\\u5c0f\\u5199\\u7684\\u201cmakefile\\u201d\\u6587\\u4ef6\\u540d\\u654f\\u611f\\uff0c\\u4f46\\u662f\\u57fa\\u672c\\u4e0a\\u6765\\u8bf4\\uff0c\\u5927\\u591a\\u6570\\u7684make\\u90fd\\u652f\\u6301\\u201cmakefile\\u201d\\u548c\\u201cMakefile\\u201d\\u8fd9\\u4e24\\u79cd\\u9ed8\\u8ba4\\u6587\\u4ef6\\u540d\\u3002<\\/p>\\n<p>\\u5f53\\u7136\\uff0c\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u522b\\u7684\\u6587\\u4ef6\\u540d\\u6765\\u4e66\\u5199Makefile\\uff0c\\u6bd4\\u5982\\uff1a\\u201cMake.Linux\\u201d\\uff0c\\u201cMake.Solaris\\u201d\\uff0c\\u201cMake.AIX\\u201d\\u7b49\\uff0c\\u5982\\u679c\\u8981\\u6307\\u5b9a\\u7279\\u5b9a\\u7684Makefile\\uff0c\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528make\\u7684\\u201c-f\\u201d\\u548c\\u201c--file\\u201d\\u53c2\\u6570\\uff0c\\u5982\\uff1amake -f Make.Linux\\u6216make --file Make.AIX\\u3002<\\/p>\\n<h5>\\u4e09\\u3001\\u5f15\\u7528\\u5176\\u5b83\\u7684Makefile<\\/h5>\\n<p>\\u5728Makefile\\u4f7f\\u7528include\\u5173\\u952e\\u5b57\\u53ef\\u4ee5\\u628a\\u522b\\u7684Makefile\\u5305\\u542b\\u8fdb\\u6765\\uff0c\\u8fd9\\u5f88\\u50cfC\\u8bed\\u8a00\\u7684#include\\uff0c\\u88ab\\u5305\\u542b\\u7684\\u6587\\u4ef6\\u4f1a\\u539f\\u6a21\\u539f\\u6837\\u7684\\u653e\\u5728\\u5f53\\u524d\\u6587\\u4ef6\\u7684\\u5305\\u542b\\u4f4d\\u7f6e\\u3002include\\u7684\\u8bed\\u6cd5\\u662f\\uff1a<\\/p>\\n<pre><code>include &lt;filename&gt;;\\n\\nfilename\\u53ef\\u4ee5\\u662f\\u5f53\\u524d\\u64cd\\u4f5c\\u7cfb\\u7edfShell\\u7684\\u6587\\u4ef6\\u6a21\\u5f0f\\uff08\\u53ef\\u4ee5\\u4fdd\\u542b\\u8def\\u5f84\\u548c\\u901a\\u914d\\u7b26\\uff09<\\/code><\\/pre>\\n<p>\\u5728include\\u524d\\u9762\\u53ef\\u4ee5\\u6709\\u4e00\\u4e9b\\u7a7a\\u5b57\\u7b26\\uff0c\\u4f46\\u662f\\u7edd\\u4e0d\\u80fd\\u662f[Tab]\\u952e\\u5f00\\u59cb\\u3002include\\u548c<filename>;\\u53ef\\u4ee5\\u7528\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u7a7a\\u683c\\u9694\\u5f00\\u3002\\u4e3e\\u4e2a\\u4f8b\\u5b50\\uff0c\\u4f60\\u6709\\u8fd9\\u6837\\u51e0\\u4e2aMakefile\\uff1aa.mk\\u3001b.mk\\u3001c.mk\\uff0c\\u8fd8\\u6709\\u4e00\\u4e2a\\u6587\\u4ef6\\u53ebfoo.make\\uff0c\\u4ee5\\u53ca\\u4e00\\u4e2a\\u53d8\\u91cf$(bar)\\uff0c\\u5176\\u5305\\u542b\\u4e86e.mk\\u548cf.mk\\uff0c\\u90a3\\u4e48\\uff0c\\u4e0b\\u9762\\u7684\\u8bed\\u53e5\\uff1a<\\/p>\\n<pre><code>include foo.make *.mk $(bar)\\n\\n\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\ninclude foo.make a.mk b.mk c.mk e.mk f.mk<\\/code><\\/pre>\\n<p>make\\u547d\\u4ee4\\u5f00\\u59cb\\u65f6\\uff0c\\u4f1a\\u628a\\u627e\\u5bfbinclude\\u6240\\u6307\\u51fa\\u7684\\u5176\\u5b83Makefile\\uff0c\\u5e76\\u628a\\u5176\\u5185\\u5bb9\\u5b89\\u7f6e\\u5728\\u5f53\\u524d\\u7684\\u4f4d\\u7f6e\\u3002\\u5c31\\u597d\\u50cfC\\/C++\\u7684#include\\u6307\\u4ee4\\u4e00\\u6837\\u3002\\u5982\\u679c\\u6587\\u4ef6\\u90fd\\u6ca1\\u6709\\u6307\\u5b9a\\u7edd\\u5bf9\\u8def\\u5f84\\u6216\\u662f\\u76f8\\u5bf9\\u8def\\u5f84\\u7684\\u8bdd\\uff0cmake\\u4f1a\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u9996\\u5148\\u5bfb\\u627e\\uff0c\\u5982\\u679c\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u90a3\\u4e48\\uff0cmake\\u8fd8\\u4f1a\\u5728\\u4e0b\\u9762\\u7684\\u51e0\\u4e2a\\u76ee\\u5f55\\u4e0b\\u627e\\uff1a<\\/p>\\n<ol>\\n<li>\\u5982\\u679cmake\\u6267\\u884c\\u65f6\\uff0c\\u6709\\u201c-I\\u201d\\u6216\\u201c--include-dir\\u201d\\u53c2\\u6570\\uff0c\\u90a3\\u4e48make\\u5c31\\u4f1a\\u5728\\u8fd9\\u4e2a\\u53c2\\u6570\\u6240\\u6307\\u5b9a\\u7684\\u76ee\\u5f55\\u4e0b\\u53bb\\u5bfb\\u627e\\u3002<\\/li>\\n<li>\\u5982\\u679c\\u76ee\\u5f55<prefix>;\\/include\\uff08\\u4e00\\u822c\\u662f\\uff1a\\/usr\\/local\\/bin\\u6216\\/usr\\/include\\uff09\\u5b58\\u5728\\u7684\\u8bdd\\uff0cmake\\u4e5f\\u4f1a\\u53bb\\u627e\\u3002<\\/li>\\n<\\/ol>\\n<p>\\u5982\\u679c\\u6709\\u6587\\u4ef6\\u6ca1\\u6709\\u627e\\u5230\\u7684\\u8bdd\\uff0cmake\\u4f1a\\u751f\\u6210\\u4e00\\u6761\\u8b66\\u544a\\u4fe1\\u606f\\uff0c\\u4f46\\u4e0d\\u4f1a\\u9a6c\\u4e0a\\u51fa\\u73b0\\u81f4\\u547d\\u9519\\u8bef\\u3002\\u5b83\\u4f1a\\u7ee7\\u7eed\\u8f7d\\u5165\\u5176\\u5b83\\u7684\\u6587\\u4ef6\\uff0c\\u4e00\\u65e6\\u5b8c\\u6210makefile\\u7684\\u8bfb\\u53d6\\uff0cmake\\u4f1a\\u518d\\u91cd\\u8bd5\\u8fd9\\u4e9b\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u6216\\u662f\\u4e0d\\u80fd\\u8bfb\\u53d6\\u7684\\u6587\\u4ef6\\uff0c\\u5982\\u679c\\u8fd8\\u662f\\u4e0d\\u884c\\uff0cmake\\u624d\\u4f1a\\u51fa\\u73b0\\u4e00\\u6761\\u81f4\\u547d\\u4fe1\\u606f\\u3002\\u5982\\u679c\\u4f60\\u60f3\\u8ba9make\\u4e0d\\u7406\\u90a3\\u4e9b\\u65e0\\u6cd5\\u8bfb\\u53d6\\u7684\\u6587\\u4ef6\\uff0c\\u800c\\u7ee7\\u7eed\\u6267\\u884c\\uff0c\\u4f60\\u53ef\\u4ee5\\u5728include\\u524d\\u52a0\\u4e00\\u4e2a\\u51cf\\u53f7\\u201c-\\u201d\\u3002\\u5982\\uff1a<\\/p>\\n<pre><code>-include &lt;filename&gt;;\\n\\u5176\\u8868\\u793a\\uff0c\\u65e0\\u8bbainclude\\u8fc7\\u7a0b\\u4e2d\\u51fa\\u73b0\\u4ec0\\u4e48\\u9519\\u8bef\\uff0c\\u90fd\\u4e0d\\u8981\\u62a5\\u9519\\u7ee7\\u7eed\\u6267\\u884c\\u3002\\u548c\\u5176\\u5b83\\u7248\\u672cmake\\u517c\\u5bb9\\u7684\\u76f8\\u5173\\u547d\\u4ee4\\u662fsinclude\\uff0c\\u5176\\u4f5c\\u7528\\u548c\\u8fd9\\u4e00\\u4e2a\\u662f\\u4e00\\u6837\\u7684\\u3002<\\/code><\\/pre>\\n<h5>\\u56db\\u3001\\u73af\\u5883\\u53d8\\u91cf MAKEFILES<\\/h5>\\n<p>\\u5982\\u679c\\u4f60\\u7684\\u5f53\\u524d\\u73af\\u5883\\u4e2d\\u5b9a\\u4e49\\u4e86\\u73af\\u5883\\u53d8\\u91cfMAKEFILES\\uff0c\\u90a3\\u4e48\\uff0cmake\\u4f1a\\u628a\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e2d\\u7684\\u503c\\u505a\\u4e00\\u4e2a\\u7c7b\\u4f3c\\u4e8einclude\\u7684\\u52a8\\u4f5c\\u3002\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e2d\\u7684\\u503c\\u662f\\u5176\\u5b83\\u7684Makefile\\uff0c\\u7528\\u7a7a\\u683c\\u5206\\u9694\\u3002\\u53ea\\u662f\\uff0c\\u5b83\\u548cinclude\\u4e0d\\u540c\\u7684\\u662f\\uff0c\\u4ece\\u8fd9\\u4e2a\\u73af\\u5883\\u53d8\\u4e2d\\u5f15\\u5165\\u7684Makefile\\u7684\\u201c\\u76ee\\u6807\\u201d\\u4e0d\\u4f1a\\u8d77\\u4f5c\\u7528\\uff0c\\u5982\\u679c\\u73af\\u5883\\u53d8\\u91cf\\u4e2d\\u5b9a\\u4e49\\u7684\\u6587\\u4ef6\\u53d1\\u73b0\\u9519\\u8bef\\uff0cmake\\u4e5f\\u4f1a\\u4e0d\\u7406\\u3002<\\/p>\\n<p>\\u4f46\\u662f\\u5728\\u8fd9\\u91cc\\u6211\\u8fd8\\u662f\\u5efa\\u8bae\\u4e0d\\u8981\\u4f7f\\u7528\\u8fd9\\u4e2a\\u73af\\u5883\\u53d8\\u91cf\\uff0c\\u56e0\\u4e3a\\u53ea\\u8981\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e00\\u88ab\\u5b9a\\u4e49\\uff0c\\u90a3\\u4e48\\u5f53\\u4f60\\u4f7f\\u7528make\\u65f6\\uff0c\\u6240\\u6709\\u7684Makefile\\u90fd\\u4f1a\\u53d7\\u5230\\u5b83\\u7684\\u5f71\\u54cd\\uff0c\\u8fd9\\u7edd\\u4e0d\\u662f\\u4f60\\u60f3\\u770b\\u5230\\u7684\\u3002\\u5728\\u8fd9\\u91cc\\u63d0\\u8fd9\\u4e2a\\u4e8b\\uff0c\\u53ea\\u662f\\u4e3a\\u4e86\\u544a\\u8bc9\\u5927\\u5bb6\\uff0c\\u4e5f\\u8bb8\\u6709\\u65f6\\u5019\\u4f60\\u7684Makefile\\u51fa\\u73b0\\u4e86\\u602a\\u4e8b\\uff0c\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u770b\\u770b\\u5f53\\u524d\\u73af\\u5883\\u4e2d\\u6709\\u6ca1\\u6709\\u5b9a\\u4e49\\u8fd9\\u4e2a\\u53d8\\u91cf\\u3002<\\/p>\\n<h5>\\u4e94\\u3001make\\u7684\\u5de5\\u4f5c\\u65b9\\u5f0f<\\/h5>\\n<p>GNU\\u7684make\\u5de5\\u4f5c\\u65f6\\u7684\\u6267\\u884c\\u6b65\\u9aa4\\u5165\\u4e0b\\uff1a\\uff08\\u60f3\\u6765\\u5176\\u5b83\\u7684make\\u4e5f\\u662f\\u7c7b\\u4f3c\\uff09<\\/p>\\n<ol>\\n<li>\\u8bfb\\u5165\\u6240\\u6709\\u7684Makefile\\u3002<\\/li>\\n<li>\\u8bfb\\u5165\\u88abinclude\\u7684\\u5176\\u5b83Makefile\\u3002<\\/li>\\n<li>\\u521d\\u59cb\\u5316\\u6587\\u4ef6\\u4e2d\\u7684\\u53d8\\u91cf\\u3002<\\/li>\\n<li>\\u63a8\\u5bfc\\u9690\\u6666\\u89c4\\u5219\\uff0c\\u5e76\\u5206\\u6790\\u6240\\u6709\\u89c4\\u5219\\u3002<\\/li>\\n<li>\\u4e3a\\u6240\\u6709\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u521b\\u5efa\\u4f9d\\u8d56\\u5173\\u7cfb\\u94fe\\u3002<\\/li>\\n<li>\\u6839\\u636e\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u51b3\\u5b9a\\u54ea\\u4e9b\\u76ee\\u6807\\u8981\\u91cd\\u65b0\\u751f\\u6210\\u3002<\\/li>\\n<li>\\u6267\\u884c\\u751f\\u6210\\u547d\\u4ee4\\u3002<\\/li>\\n<\\/ol>\\n<p>1-5\\u6b65\\u4e3a\\u7b2c\\u4e00\\u4e2a\\u9636\\u6bb5\\uff0c6-7\\u4e3a\\u7b2c\\u4e8c\\u4e2a\\u9636\\u6bb5\\u3002\\u7b2c\\u4e00\\u4e2a\\u9636\\u6bb5\\u4e2d\\uff0c\\u5982\\u679c\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\u88ab\\u4f7f\\u7528\\u4e86\\uff0c\\u90a3\\u4e48\\uff0cmake\\u4f1a\\u628a\\u5176\\u5c55\\u5f00\\u5728\\u4f7f\\u7528\\u7684\\u4f4d\\u7f6e\\u3002\\u4f46make\\u5e76\\u4e0d\\u4f1a\\u5b8c\\u5168\\u9a6c\\u4e0a\\u5c55\\u5f00\\uff0cmake\\u4f7f\\u7528\\u7684\\u662f\\u62d6\\u5ef6\\u6218\\u672f\\uff0c\\u5982\\u679c\\u53d8\\u91cf\\u51fa\\u73b0\\u5728\\u4f9d\\u8d56\\u5173\\u7cfb\\u7684\\u89c4\\u5219\\u4e2d\\uff0c\\u90a3\\u4e48\\u4ec5\\u5f53\\u8fd9\\u6761\\u4f9d\\u8d56\\u88ab\\u51b3\\u5b9a\\u8981\\u4f7f\\u7528\\u4e86\\uff0c\\u53d8\\u91cf\\u624d\\u4f1a\\u5728\\u5176\\u5185\\u90e8\\u5c55\\u5f00\\u3002<\\/p>\\n<p>\\u5f53\\u7136\\uff0c\\u8fd9\\u4e2a\\u5de5\\u4f5c\\u65b9\\u5f0f\\u4f60\\u4e0d\\u4e00\\u5b9a\\u8981\\u6e05\\u695a\\uff0c\\u4f46\\u662f\\u77e5\\u9053\\u8fd9\\u4e2a\\u65b9\\u5f0f\\u4f60\\u4e5f\\u4f1a\\u5bf9make\\u66f4\\u4e3a\\u719f\\u6089\\u3002\\u6709\\u4e86\\u8fd9\\u4e2a\\u57fa\\u7840\\uff0c\\u540e\\u7eed\\u90e8\\u5206\\u4e5f\\u5c31\\u5bb9\\u6613\\u770b\\u61c2\\u4e86\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '什么是makefile？或许很多Winodws的程序员都不知道这个东西，因为那些Windows的IDE都为你做了这个工作，但我觉得要作一个好的和professional的程序员，makefile还是要懂。这就好像现在有这么多的HTML的编辑器，但如果你想成为一个专业人士，你还是要了解HTML的标识的含义。特别在Unix下的软件编译，你就不能不自己写makefile了',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 53,
                'published_at' => '2020-09-20 13:57:00',
                'created_at' => '2020-09-20 05:45:01',
                'updated_at' => '2022-01-09 13:11:04',
                'deleted_at' => NULL,
            ),
            3 => 
            array (
                'id' => 4,
                'category_id' => 8,
                'collection_id' => 3,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'makefile-uzvay',
                'title' => '跟我一起写 Makefile -- 书写规则',
                'subtitle' => '书写规则',
            'content' => '{"raw":"\\u7ee7\\u7eed \\u9648\\u7693\\u201c\\u8ddf\\u6211\\u4e00\\u8d77\\u5199 Makefile\\"\\u4e4b**\\u4e66\\u5199\\u89c4\\u5219**\\n\\n\\u89c4\\u5219\\u5305\\u542b\\u4e24\\u4e2a\\u90e8\\u5206\\uff0c\\u4e00\\u4e2a\\u662f\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u4e00\\u4e2a\\u662f\\u751f\\u6210\\u76ee\\u6807\\u7684\\u65b9\\u6cd5\\u3002\\n\\n\\u5728Makefile\\u4e2d\\uff0c\\u89c4\\u5219\\u7684\\u987a\\u5e8f\\u662f\\u5f88\\u91cd\\u8981\\u7684\\uff0c\\u56e0\\u4e3a\\uff0cMakefile\\u4e2d\\u53ea\\u5e94\\u8be5\\u6709\\u4e00\\u4e2a\\u6700\\u7ec8\\u76ee\\u6807\\uff0c\\u5176\\u5b83\\u7684\\u76ee\\u6807\\u90fd\\u662f\\u88ab\\u8fd9\\u4e2a\\u76ee\\u6807\\u6240\\u8fde\\u5e26\\u51fa\\u6765\\u7684\\uff0c\\u6240\\u4ee5\\u4e00\\u5b9a\\u8981\\u8ba9make\\u77e5\\u9053\\u4f60\\u7684\\u6700\\u7ec8\\u76ee\\u6807\\u662f\\u4ec0\\u4e48\\u3002\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u5b9a\\u4e49\\u5728Makefile\\u4e2d\\u7684\\u76ee\\u6807\\u53ef\\u80fd\\u4f1a\\u6709\\u5f88\\u591a\\uff0c\\u4f46\\u662f\\u7b2c\\u4e00\\u6761\\u89c4\\u5219\\u4e2d\\u7684\\u76ee\\u6807\\u5c06\\u88ab\\u786e\\u7acb\\u4e3a\\u6700\\u7ec8\\u7684\\u76ee\\u6807\\u3002\\u5982\\u679c\\u7b2c\\u4e00\\u6761\\u89c4\\u5219\\u4e2d\\u7684\\u76ee\\u6807\\u6709\\u5f88\\u591a\\u4e2a\\uff0c\\u90a3\\u4e48\\uff0c\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u4f1a\\u6210\\u4e3a\\u6700\\u7ec8\\u7684\\u76ee\\u6807\\u3002make\\u6240\\u5b8c\\u6210\\u7684\\u4e5f\\u5c31\\u662f\\u8fd9\\u4e2a\\u76ee\\u6807\\u3002\\n\\n\\u597d\\u4e86\\uff0c\\u8fd8\\u662f\\u8ba9\\u6211\\u4eec\\u6765\\u770b\\u4e00\\u770b\\u5982\\u4f55\\u4e66\\u5199\\u89c4\\u5219\\u3002\\n\\n\\n##### \\u4e00\\u3001\\u89c4\\u5219\\u4e3e\\u4f8b\\n```\\nfoo.o : foo.c defs.h       # foo\\u6a21\\u5757\\n\\tcc -c -g foo.c\\n```\\n\\u770b\\u5230\\u8fd9\\u4e2a\\u4f8b\\u5b50\\uff0c\\u5404\\u4f4d\\u5e94\\u8be5\\u4e0d\\u662f\\u5f88\\u964c\\u751f\\u4e86\\uff0c\\u524d\\u9762\\u4e5f\\u5df2\\u8bf4\\u8fc7\\uff0cfoo.o\\u662f\\u6211\\u4eec\\u7684\\u76ee\\u6807\\uff0cfoo.c\\u548cdefs.h\\u662f\\u76ee\\u6807\\u6240\\u4f9d\\u8d56\\u7684\\u6e90\\u6587\\u4ef6\\uff0c\\u800c\\u53ea\\u6709\\u4e00\\u4e2a\\u547d\\u4ee4\\u201ccc -c -g foo.c\\u201d\\uff08\\u4ee5Tab\\u952e\\u5f00\\u5934\\uff09\\u3002\\u8fd9\\u4e2a\\u89c4\\u5219\\u544a\\u8bc9\\u6211\\u4eec\\u4e24\\u4ef6\\u4e8b\\uff1a\\n\\n1. \\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0cfoo.o\\u4f9d\\u8d56\\u4e8efoo.c\\u548cdefs.h\\u7684\\u6587\\u4ef6\\uff0c\\u5982\\u679cfoo.c\\u548cdefs.h\\u7684\\u6587\\u4ef6\\u65e5\\u671f\\u8981\\u6bd4foo.o\\u6587\\u4ef6\\u65e5\\u671f\\u8981\\u65b0\\uff0c\\u6216\\u662ffoo.o\\u4e0d\\u5b58\\u5728\\uff0c\\u90a3\\u4e48\\u4f9d\\u8d56\\u5173\\u7cfb\\u53d1\\u751f\\u3002\\n1. \\u5982\\u679c\\u751f\\u6210\\uff08\\u6216\\u66f4\\u65b0\\uff09foo.o\\u6587\\u4ef6\\u3002\\u4e5f\\u5c31\\u662f\\u90a3\\u4e2acc\\u547d\\u4ee4\\uff0c\\u5176\\u8bf4\\u660e\\u4e86\\uff0c\\u5982\\u4f55\\u751f\\u6210foo.o\\u8fd9\\u4e2a\\u6587\\u4ef6\\u3002\\uff08\\u5f53\\u7136foo.c\\u6587\\u4ef6include\\u4e86defs.h\\u6587\\u4ef6\\uff09\\n\\n\\n##### \\u4e8c\\u3001\\u89c4\\u5219\\u7684\\u8bed\\u6cd5\\n```\\ntargets : prerequisites\\n\\tcommand\\n\\t...\\n\\n\\u6216\\u662f\\u8fd9\\u6837\\uff1a \\n\\ntargets : prerequisites ; command\\n\\tcommand\\n\\t...\\n```\\ntargets\\u662f\\u6587\\u4ef6\\u540d\\uff0c\\u4ee5\\u7a7a\\u683c\\u5206\\u5f00\\uff0c\\u53ef\\u4ee5\\u4f7f\\u7528\\u901a\\u914d\\u7b26\\u3002\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u6211\\u4eec\\u7684\\u76ee\\u6807\\u57fa\\u672c\\u4e0a\\u662f\\u4e00\\u4e2a\\u6587\\u4ef6\\uff0c\\u4f46\\u4e5f\\u6709\\u53ef\\u80fd\\u662f\\u591a\\u4e2a\\u6587\\u4ef6\\u3002\\n\\ncommand\\u662f\\u547d\\u4ee4\\u884c\\uff0c\\u5982\\u679c\\u5176\\u4e0d\\u4e0e\\u201ctarget:prerequisites\\u201d\\u5728\\u4e00\\u884c\\uff0c\\u90a3\\u4e48\\uff0c\\u5fc5\\u987b\\u4ee5[Tab\\u952e]\\u5f00\\u5934\\uff0c\\u5982\\u679c\\u548cprerequisites\\u5728\\u4e00\\u884c\\uff0c\\u90a3\\u4e48\\u53ef\\u4ee5\\u7528\\u5206\\u53f7\\u505a\\u4e3a\\u5206\\u9694\\u3002\\uff08\\u89c1\\u4e0a\\uff09\\n\\nprerequisites\\u4e5f\\u5c31\\u662f\\u76ee\\u6807\\u6240\\u4f9d\\u8d56\\u7684\\u6587\\u4ef6\\uff08\\u6216\\u4f9d\\u8d56\\u76ee\\u6807\\uff09\\u3002\\u5982\\u679c\\u5176\\u4e2d\\u7684\\u67d0\\u4e2a\\u6587\\u4ef6\\u8981\\u6bd4\\u76ee\\u6807\\u6587\\u4ef6\\u8981\\u65b0\\uff0c\\u90a3\\u4e48\\uff0c\\u76ee\\u6807\\u5c31\\u88ab\\u8ba4\\u4e3a\\u662f\\u201c\\u8fc7\\u65f6\\u7684\\u201d\\uff0c\\u88ab\\u8ba4\\u4e3a\\u662f\\u9700\\u8981\\u91cd\\u751f\\u6210\\u7684\\u3002\\u8fd9\\u4e2a\\u5728\\u524d\\u9762\\u5df2\\u7ecf\\u8bb2\\u8fc7\\u4e86\\u3002\\n\\n\\u5982\\u679c\\u547d\\u4ee4\\u592a\\u957f\\uff0c\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u53cd\\u659c\\u6846`\\\\`\\u4f5c\\u4e3a\\u6362\\u884c\\u7b26\\u3002make\\u5bf9\\u4e00\\u884c\\u4e0a\\u6709\\u591a\\u5c11\\u4e2a\\u5b57\\u7b26\\u6ca1\\u6709\\u9650\\u5236\\u3002\\u89c4\\u5219\\u544a\\u8bc9make\\u4e24\\u4ef6\\u4e8b\\uff0c\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u548c\\u5982\\u4f55\\u6210\\u6210\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\n\\n\\u4e00\\u822c\\u6765\\u8bf4\\uff0cmake\\u4f1a\\u4ee5UNIX\\u7684\\u6807\\u51c6Shell\\uff0c\\u4e5f\\u5c31\\u662f\\/bin\\/sh\\u6765\\u6267\\u884c\\u547d\\u4ee4\\u3002\\n\\n\\n##### \\u4e09\\u3001\\u5728\\u89c4\\u5219\\u4e2d\\u4f7f\\u7528\\u901a\\u914d\\u7b26\\n\\n\\u5982\\u679c\\u6211\\u4eec\\u60f3\\u5b9a\\u4e49\\u4e00\\u7cfb\\u5217\\u6bd4\\u8f83\\u7c7b\\u4f3c\\u7684\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u5f88\\u81ea\\u7136\\u5730\\u5c31\\u60f3\\u8d77\\u4f7f\\u7528\\u901a\\u914d\\u7b26\\u3002make\\u652f\\u6301\\u4e09\\u5404\\u901a\\u914d\\u7b26\\uff1a`*`\\uff0c`?`\\u548c`[...]`\\u3002\\u8fd9\\u662f\\u548cUnix\\u7684B-Shell\\u662f\\u76f8\\u540c\\u7684\\u3002\\n\\n\\u6ce2\\u6d6a\\u53f7`~`\\u5b57\\u7b26\\u5728\\u6587\\u4ef6\\u540d\\u4e2d\\u4e5f\\u6709\\u6bd4\\u8f83\\u7279\\u6b8a\\u7684\\u7528\\u9014\\u3002\\u5982\\u679c\\u662f\\u201c~\\/test\\u201d\\uff0c\\u8fd9\\u5c31\\u8868\\u793a\\u5f53\\u524d\\u7528\\u6237\\u7684$HOME\\u76ee\\u5f55\\u4e0b\\u7684test\\u76ee\\u5f55\\u3002\\u800c\\u201c~hchen\\/test\\u201d\\u5219\\u8868\\u793a\\u7528\\u6237hchen\\u7684\\u5bbf\\u4e3b\\u76ee\\u5f55\\u4e0b\\u7684test\\u76ee\\u5f55\\u3002\\uff08\\u8fd9\\u4e9b\\u90fd\\u662fUnix\\u4e0b\\u7684\\u5c0f\\u77e5\\u8bc6\\u4e86\\uff0cmake\\u4e5f\\u652f\\u6301\\uff09\\u800c\\u5728Windows\\u6216\\u662fMS-DOS\\u4e0b\\uff0c\\u7528\\u6237\\u6ca1\\u6709\\u5bbf\\u4e3b\\u76ee\\u5f55\\uff0c\\u90a3\\u4e48\\u6ce2\\u6d6a\\u53f7\\u6240\\u6307\\u7684\\u76ee\\u5f55\\u5219\\u6839\\u636e\\u73af\\u5883\\u53d8\\u91cf\\u201cHOME\\u201d\\u800c\\u5b9a\\u3002\\n\\n\\u901a\\u914d\\u7b26\\u4ee3\\u66ff\\u4e86\\u4e00\\u7cfb\\u5217\\u7684\\u6587\\u4ef6\\uff0c\\u5982\\u201c*.c\\u201d\\u8868\\u793a\\u6240\\u4ee5\\u540e\\u7f00\\u4e3ac\\u7684\\u6587\\u4ef6\\u3002\\u4e00\\u4e2a\\u9700\\u8981\\u6211\\u4eec\\u6ce8\\u610f\\u7684\\u662f\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684\\u6587\\u4ef6\\u540d\\u4e2d\\u6709\\u901a\\u914d\\u7b26\\uff0c\\u5982\\uff1a`*`\\uff0c\\u90a3\\u4e48\\u53ef\\u4ee5\\u7528\\u8f6c\\u4e49\\u5b57\\u7b26`\\\\`\\uff0c\\u5982`\\\\*`\\u6765\\u8868\\u793a\\u771f\\u5b9e\\u7684`*\\u5b57\\u7b26\\uff0c\\u800c\\u4e0d\\u662f\\u4efb\\u610f\\u957f\\u5ea6\\u7684\\u5b57\\u7b26\\u4e32\\u3002\\n\\n\\u597d\\u5427\\uff0c\\u8fd8\\u662f\\u5148\\u6765\\u770b\\u51e0\\u4e2a\\u4f8b\\u5b50\\u5427\\uff1a\\n```\\nclean:\\n\\trm -f *.o\\n```\\n\\u4e0a\\u9762\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u6211\\u4e0d\\u4e0d\\u591a\\u8bf4\\u4e86\\uff0c\\u8fd9\\u662f\\u64cd\\u4f5c\\u7cfb\\u7edfShell\\u6240\\u652f\\u6301\\u7684\\u901a\\u914d\\u7b26\\u3002\\u8fd9\\u662f\\u5728\\u547d\\u4ee4\\u4e2d\\u7684\\u901a\\u914d\\u7b26\\u3002\\n```\\nprint: *.c\\n\\tlpr -p $?\\n\\ttouch print\\n```\\n\\u4e0a\\u9762\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u8bf4\\u660e\\u4e86\\u901a\\u914d\\u7b26\\u4e5f\\u53ef\\u4ee5\\u5728\\u6211\\u4eec\\u7684\\u89c4\\u5219\\u4e2d\\uff0c\\u76ee\\u6807print\\u4f9d\\u8d56\\u4e8e\\u6240\\u6709\\u7684[.c]\\u6587\\u4ef6\\u3002\\u5176\\u4e2d\\u7684`$?`\\u662f\\u4e00\\u4e2a\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u9762\\u7ed9\\u4f60\\u8bb2\\u8ff0\\u3002\\n```\\nobjects = *.o\\n```\\n\\u4e0a\\u9762\\u8fd9\\u4e2a\\u4f8b\\u5b50\\uff0c\\u8868\\u793a\\u4e86\\uff0c\\u901a\\u7b26\\u540c\\u6837\\u53ef\\u4ee5\\u7528\\u5728\\u53d8\\u91cf\\u4e2d\\u3002\\u5e76\\u4e0d\\u662f\\u8bf4`*.o`\\u4f1a\\u5c55\\u5f00\\uff0c\\u4e0d\\uff01objects\\u7684\\u503c\\u5c31\\u662f`*.o`\\u3002Makefile\\u4e2d\\u7684\\u53d8\\u91cf\\u5176\\u5b9e\\u5c31\\u662fC\\/C++\\u4e2d\\u7684\\u5b8f\\u3002**\\u5982\\u679c\\u4f60\\u8981\\u8ba9\\u901a\\u914d\\u7b26\\u5728\\u53d8\\u91cf\\u4e2d\\u5c55\\u5f00\\uff0c\\u4e5f\\u5c31\\u662f\\u8ba9objects\\u7684\\u503c\\u662f\\u6240\\u6709[.o]\\u7684\\u6587\\u4ef6\\u540d\\u7684\\u96c6\\u5408\\uff0c\\u90a3\\u4e48\\uff0c\\u4f60\\u53ef\\u4ee5\\u8fd9\\u6837\\uff1a**\\n```\\nobjects := $(wildcard *.o)\\n```\\n\\u8fd9\\u79cd\\u7528\\u6cd5\\u7531\\u5173\\u952e\\u5b57`wildcard`\\u6307\\u51fa\\uff0c\\u5173\\u4e8eMakefile\\u7684\\u5173\\u952e\\u5b57\\uff0c\\u6211\\u4eec\\u5c06\\u5728\\u540e\\u9762\\u8ba8\\u8bba\\u3002\\n\\n\\n##### \\u56db\\u3001\\u6587\\u4ef6\\u641c\\u5bfb\\n\\n\\u5728\\u4e00\\u4e9b\\u5927\\u7684\\u5de5\\u7a0b\\u4e2d\\uff0c\\u6709\\u5927\\u91cf\\u7684\\u6e90\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u901a\\u5e38\\u7684\\u505a\\u6cd5\\u662f\\u628a\\u8fd9\\u8bb8\\u591a\\u7684\\u6e90\\u6587\\u4ef6\\u5206\\u7c7b\\uff0c\\u5e76\\u5b58\\u653e\\u5728\\u4e0d\\u540c\\u7684\\u76ee\\u5f55\\u4e2d\\u3002\\u6240\\u4ee5\\uff0c\\u5f53 make \\u9700\\u8981\\u53bb\\u627e\\u5bfb\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u65f6\\uff0c\\u4f60\\u53ef\\u4ee5\\u5728\\u6587\\u4ef6\\u524d\\u52a0\\u4e0a\\u8def\\u5f84\\uff0c\\u4f46\\u6700\\u597d\\u7684\\u65b9\\u6cd5\\u662f\\u628a\\u4e00\\u4e2a\\u8def\\u5f84\\u544a\\u8bc9 make\\uff0c\\u8ba9 make \\u5728\\u81ea\\u52a8\\u53bb\\u627e\\u3002\\n\\nMakefile \\u6587\\u4ef6\\u4e2d\\u7684\\u7279\\u6b8a\\u53d8\\u91cf`VPATH`\\u5c31\\u662f\\u5b8c\\u6210\\u8fd9\\u4e2a\\u529f\\u80fd\\u7684\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u6307\\u660e\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0cmake \\u53ea\\u4f1a\\u5728\\u5f53\\u524d\\u7684\\u76ee\\u5f55\\u4e2d\\u53bb\\u627e\\u5bfb\\u4f9d\\u8d56\\u6587\\u4ef6\\u548c\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\u5982\\u679c\\u5b9a\\u4e49\\u4e86\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u90a3\\u4e48\\uff0cmake \\u5c31\\u4f1a\\u5728\\u5f53\\u5f53\\u524d\\u76ee\\u5f55\\u627e\\u4e0d\\u5230\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u5230\\u6240\\u6307\\u5b9a\\u7684\\u76ee\\u5f55\\u4e2d\\u53bb\\u627e\\u5bfb\\u6587\\u4ef6\\u4e86\\u3002\\n\\n    VPATH = src:..\\/headers\\n\\n\\u4e0a\\u9762\\u7684\\u7684\\u5b9a\\u4e49\\u6307\\u5b9a\\u4e24\\u4e2a\\u76ee\\u5f55\\uff0c`src`\\u548c`..\\/headers`\\uff0cmake \\u4f1a\\u6309\\u7167\\u8fd9\\u4e2a\\u987a\\u5e8f\\u8fdb\\u884c\\u641c\\u7d22\\u3002\\u76ee\\u5f55\\u7531\\u201c\\u5192\\u53f7\\u201d\\u5206\\u9694\\u3002\\uff08\\u5f53\\u7136\\uff0c\\u5f53\\u524d\\u76ee\\u5f55\\u6c38\\u8fdc\\u662f\\u6700\\u9ad8\\u4f18\\u5148\\u641c\\u7d22\\u7684\\u5730\\u65b9\\uff09\\n\\n\\u53e6\\u4e00\\u4e2a\\u8bbe\\u7f6e\\u6587\\u4ef6\\u641c\\u7d22\\u8def\\u5f84\\u7684\\u65b9\\u6cd5\\u662f\\u4f7f\\u7528 make \\u7684`vpath`\\u5173\\u952e\\u5b57\\uff08\\u6ce8\\u610f\\uff0c\\u5b83\\u662f\\u5168\\u5c0f\\u5199\\u7684\\uff09\\uff0c\\u8fd9\\u4e0d\\u662f\\u53d8\\u91cf\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2amake\\u7684\\u5173\\u952e\\u5b57\\uff0c\\u8fd9\\u548c\\u4e0a\\u9762\\u63d0\\u5230\\u7684\\u90a3\\u4e2a`VPATH`\\u53d8\\u91cf\\u5f88\\u7c7b\\u4f3c\\uff0c\\u4f46\\u662f\\u5b83\\u66f4\\u4e3a\\u7075\\u6d3b\\u3002\\u5b83\\u53ef\\u4ee5\\u6307\\u5b9a\\u4e0d\\u540c\\u7684\\u6587\\u4ef6\\u5728\\u4e0d\\u540c\\u7684\\u641c\\u7d22\\u76ee\\u5f55\\u4e2d\\u3002\\u8fd9\\u662f\\u4e00\\u4e2a\\u5f88\\u7075\\u6d3b\\u7684\\u529f\\u80fd\\u3002\\u5b83\\u7684\\u4f7f\\u7528\\u65b9\\u6cd5\\u6709\\u4e09\\u79cd\\uff1a\\n\\n1. vpath <pattern>; <directories>;\\n\\n\\t\\u4e3a\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u6587\\u4ef6\\u6307\\u5b9a\\u641c\\u7d22\\u76ee\\u5f55<directories>;\\u3002\\n\\n1. vpath <pattern>;\\n\\n\\t\\u6e05\\u9664\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u6587\\u4ef6\\u7684\\u641c\\u7d22\\u76ee\\u5f55\\u3002\\n\\n1. vpath\\n\\n\\t\\u6e05\\u9664\\u6240\\u6709\\u5df2\\u88ab\\u8bbe\\u7f6e\\u597d\\u4e86\\u7684\\u6587\\u4ef6\\u641c\\u7d22\\u76ee\\u5f55\\u3002\\n\\nvapth \\u4f7f\\u7528\\u65b9\\u6cd5\\u4e2d\\u7684<pattern>;\\u9700\\u8981\\u5305\\u542b\\u201c%\\u201d\\u5b57\\u7b26\\u3002\\u201c%\\u201d\\u7684\\u610f\\u601d\\u662f\\u5339\\u914d\\u96f6\\u6216\\u82e5\\u5e72\\u5b57\\u7b26\\uff0c\\u4f8b\\u5982\\uff0c\\u201c%.h\\u201d\\u8868\\u793a\\u6240\\u6709\\u4ee5\\u201c.h\\u201d\\u7ed3\\u5c3e\\u7684\\u6587\\u4ef6\\u3002<pattern>;\\u6307\\u5b9a\\u4e86\\u8981\\u641c\\u7d22\\u7684\\u6587\\u4ef6\\u96c6\\uff0c\\u800c<directories>;\\u5219\\u6307\\u5b9a\\u4e86<pattern>;\\u7684\\u6587\\u4ef6\\u96c6\\u7684\\u641c\\u7d22\\u7684\\u76ee\\u5f55\\u3002\\u4f8b\\u5982\\uff1a\\n\\n    vpath %.h ..\\/headers\\n\\n\\u8be5\\u8bed\\u53e5\\u8868\\u793a\\uff0c\\u8981\\u6c42make\\u5728\\u201c..\\/headers\\u201d\\u76ee\\u5f55\\u4e0b\\u641c\\u7d22\\u6240\\u6709\\u4ee5\\u201c.h\\u201d\\u7ed3\\u5c3e\\u7684\\u6587\\u4ef6\\u3002\\uff08\\u5982\\u679c\\u67d0\\u6587\\u4ef6\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u6ca1\\u6709\\u627e\\u5230\\u7684\\u8bdd\\uff09\\n\\n\\u6211\\u4eec\\u53ef\\u4ee5\\u8fde\\u7eed\\u5730\\u4f7f\\u7528vpath\\u8bed\\u53e5\\uff0c\\u4ee5\\u6307\\u5b9a\\u4e0d\\u540c\\u641c\\u7d22\\u7b56\\u7565\\u3002\\u5982\\u679c\\u8fde\\u7eed\\u7684vpath\\u8bed\\u53e5\\u4e2d\\u51fa\\u73b0\\u4e86\\u76f8\\u540c\\u7684<pattern>;\\uff0c\\u6216\\u662f\\u88ab\\u91cd\\u590d\\u4e86\\u7684<pattern>;\\uff0c\\u90a3\\u4e48\\uff0cmake\\u4f1a\\u6309\\u7167vpath\\u8bed\\u53e5\\u7684\\u5148\\u540e\\u987a\\u5e8f\\u6765\\u6267\\u884c\\u641c\\u7d22\\u3002\\u5982\\uff1a\\n\\n    vpath %.c foo\\n    vpath %   blish\\n    vpath %.c bar\\n\\n\\u5176\\u8868\\u793a\\u201c.c\\u201d\\u7ed3\\u5c3e\\u7684\\u6587\\u4ef6\\uff0c\\u5148\\u5728\\u201cfoo\\u201d\\u76ee\\u5f55\\uff0c\\u7136\\u540e\\u662f\\u201cblish\\u201d\\uff0c\\u6700\\u540e\\u662f\\u201cbar\\u201d\\u76ee\\u5f55\\u3002\\n\\n    vpath %.c foo:bar\\n    vpath %   blish\\n\\n\\u800c\\u4e0a\\u9762\\u7684\\u8bed\\u53e5\\u5219\\u8868\\u793a\\u201c.c\\u201d\\u7ed3\\u5c3e\\u7684\\u6587\\u4ef6\\uff0c\\u5148\\u5728\\u201cfoo\\u201d\\u76ee\\u5f55\\uff0c\\u7136\\u540e\\u662f\\u201cbar\\u201d\\u76ee\\u5f55\\uff0c\\u6700\\u540e\\u624d\\u662f\\u201cblish\\u201d\\u76ee\\u5f55\\u3002\\n\\n\\n##### \\u4e94\\u3001\\u4f2a\\u76ee\\u6807\\n\\n\\u6700\\u65e9\\u5148\\u7684\\u4e00\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c\\u6211\\u4eec\\u63d0\\u5230\\u8fc7\\u4e00\\u4e2a\\u201cclean\\u201d\\u7684\\u76ee\\u6807\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\uff0c\\n```\\nclean:\\n\\trm *.o temp\\n```\\n\\u6b63\\u50cf\\u6211\\u4eec\\u524d\\u9762\\u4f8b\\u5b50\\u4e2d\\u7684\\u201cclean\\u201d\\u4e00\\u6837\\uff0c\\u5373\\u7136\\u6211\\u4eec\\u751f\\u6210\\u4e86\\u8bb8\\u591a\\u6587\\u4ef6\\u7f16\\u8bd1\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u4e5f\\u5e94\\u8be5\\u63d0\\u4f9b\\u4e00\\u4e2a\\u6e05\\u9664\\u5b83\\u4eec\\u7684\\u201c\\u76ee\\u6807\\u201d\\u4ee5\\u5907\\u5b8c\\u6574\\u5730\\u91cd\\u7f16\\u8bd1\\u800c\\u7528\\u3002 \\uff08\\u4ee5\\u201cmake clean\\u201d\\u6765\\u4f7f\\u7528\\u8be5\\u76ee\\u6807\\uff09\\n\\n\\u56e0\\u4e3a\\uff0c\\u6211\\u4eec\\u5e76\\u4e0d\\u751f\\u6210\\u201cclean\\u201d\\u8fd9\\u4e2a\\u6587\\u4ef6\\u3002\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u5e76\\u4e0d\\u662f\\u4e00\\u4e2a\\u6587\\u4ef6\\uff0c\\u53ea\\u662f\\u4e00\\u4e2a\\u6807\\u7b7e\\uff0c\\u7531\\u4e8e\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u4e0d\\u662f\\u6587\\u4ef6\\uff0c\\u6240\\u4ee5make\\u65e0\\u6cd5\\u751f\\u6210\\u5b83\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u548c\\u51b3\\u5b9a\\u5b83\\u662f\\u5426\\u8981\\u6267\\u884c\\u3002\\u6211\\u4eec\\u53ea\\u6709\\u901a\\u8fc7\\u663e\\u793a\\u5730\\u6307\\u660e\\u8fd9\\u4e2a\\u201c\\u76ee\\u6807\\u201d\\u624d\\u80fd\\u8ba9\\u5176\\u751f\\u6548\\u3002\\u5f53\\u7136\\uff0c\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u7684\\u53d6\\u540d\\u4e0d\\u80fd\\u548c\\u6587\\u4ef6\\u540d\\u91cd\\u540d\\uff0c\\u4e0d\\u7136\\u5176\\u5c31\\u5931\\u53bb\\u4e86\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u7684\\u610f\\u4e49\\u4e86\\u3002\\n\\n\\u5f53\\u7136\\uff0c\\u4e3a\\u4e86\\u907f\\u514d\\u548c\\u6587\\u4ef6\\u91cd\\u540d\\u7684\\u8fd9\\u79cd\\u60c5\\u51b5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u4e00\\u4e2a\\u7279\\u6b8a\\u7684\\u6807\\u8bb0\\u201c.PHONY\\u201d\\u6765\\u663e\\u793a\\u5730\\u6307\\u660e\\u4e00\\u4e2a\\u76ee\\u6807\\u662f\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\uff0c\\u5411make\\u8bf4\\u660e\\uff0c\\u4e0d\\u7ba1\\u662f\\u5426\\u6709\\u8fd9\\u4e2a\\u6587\\u4ef6\\uff0c\\u8fd9\\u4e2a\\u76ee\\u6807\\u5c31\\u662f\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u3002\\n```\\n.PHONY : clean\\n```\\n\\u53ea\\u8981\\u6709\\u8fd9\\u4e2a\\u58f0\\u660e\\uff0c\\u4e0d\\u7ba1\\u662f\\u5426\\u6709\\u201cclean\\u201d\\u6587\\u4ef6\\uff0c\\u8981\\u8fd0\\u884c\\u201cclean\\u201d\\u8fd9\\u4e2a\\u76ee\\u6807\\uff0c\\u53ea\\u6709`make clean`\\u8fd9\\u6837\\u3002\\u4e8e\\u662f\\u6574\\u4e2a\\u8fc7\\u7a0b\\u53ef\\u4ee5\\u8fd9\\u6837\\u5199\\uff1a\\n```\\n.PHONY: clean\\nclean:\\n\\trm *.o temp\\n```\\n\\u4f2a\\u76ee\\u6807\\u4e00\\u822c\\u6ca1\\u6709\\u4f9d\\u8d56\\u7684\\u6587\\u4ef6\\u3002\\u4f46\\u662f\\uff0c\\u6211\\u4eec\\u4e5f\\u53ef\\u4ee5\\u4e3a\\u4f2a\\u76ee\\u6807\\u6307\\u5b9a\\u6240\\u4f9d\\u8d56\\u7684\\u6587\\u4ef6\\u3002\\u4f2a\\u76ee\\u6807\\u540c\\u6837\\u53ef\\u4ee5\\u4f5c\\u4e3a\\u201c\\u9ed8\\u8ba4\\u76ee\\u6807\\u201d\\uff0c\\u53ea\\u8981\\u5c06\\u5176\\u653e\\u5728\\u7b2c\\u4e00\\u4e2a\\u3002\\u4e00\\u4e2a\\u793a\\u4f8b\\u5c31\\u662f\\uff0c\\u5982\\u679c\\u4f60\\u7684Makefile\\u9700\\u8981\\u4e00\\u53e3\\u6c14\\u751f\\u6210\\u82e5\\u5e72\\u4e2a\\u53ef\\u6267\\u884c\\u6587\\u4ef6\\uff0c\\u4f46\\u4f60\\u53ea\\u60f3\\u7b80\\u5355\\u5730\\u6572\\u4e00\\u4e2amake\\u5b8c\\u4e8b\\uff0c\\u5e76\\u4e14\\uff0c\\u6240\\u6709\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u90fd\\u5199\\u5728\\u4e00\\u4e2aMakefile\\u4e2d\\uff0c\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u8fd9\\u4e2a\\u7279\\u6027\\uff1a\\n```\\nall : prog1 prog2 prog3\\n.PHONY : all\\n\\nprog1 : prog1.o utils.o\\n\\tcc -o prog1 prog1.o utils.o\\n\\nprog2 : prog2.o\\n\\tcc -o prog2 prog2.o\\n\\nprog3 : prog3.o sort.o utils.o\\n\\tcc -o prog3 prog3.o sort.o utils.o\\n```\\n\\u6211\\u4eec\\u77e5\\u9053\\uff0cMakefile\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u4f1a\\u88ab\\u4f5c\\u4e3a\\u5176\\u9ed8\\u8ba4\\u76ee\\u6807\\u3002\\u6211\\u4eec\\u58f0\\u660e\\u4e86\\u4e00\\u4e2a\\u201call\\u201d\\u7684\\u4f2a\\u76ee\\u6807\\uff0c\\u5176\\u4f9d\\u8d56\\u4e8e\\u5176\\u5b83\\u4e09\\u4e2a\\u76ee\\u6807\\u3002\\u7531\\u4e8e\\u4f2a\\u76ee\\u6807\\u7684\\u7279\\u6027\\u662f\\uff0c\\u603b\\u662f\\u88ab\\u6267\\u884c\\u7684\\uff0c\\u6240\\u4ee5\\u5176\\u4f9d\\u8d56\\u7684\\u90a3\\u4e09\\u4e2a\\u76ee\\u6807\\u5c31\\u603b\\u662f\\u4e0d\\u5982\\u201call\\u201d\\u8fd9\\u4e2a\\u76ee\\u6807\\u65b0\\u3002\\u6240\\u4ee5\\uff0c\\u5176\\u5b83\\u4e09\\u4e2a\\u76ee\\u6807\\u7684\\u89c4\\u5219\\u603b\\u662f\\u4f1a\\u88ab\\u51b3\\u8bae\\u3002\\u4e5f\\u5c31\\u8fbe\\u5230\\u4e86\\u6211\\u4eec\\u4e00\\u53e3\\u6c14\\u751f\\u6210\\u591a\\u4e2a\\u76ee\\u6807\\u7684\\u76ee\\u7684\\u3002\\u201c.PHONY : all\\u201d\\u58f0\\u660e\\u4e86\\u201call\\u201d\\u8fd9\\u4e2a\\u76ee\\u6807\\u4e3a\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u3002\\n\\n\\u968f\\u4fbf\\u63d0\\u4e00\\u53e5\\uff0c\\u4ece\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u6211\\u4eec\\u53ef\\u4ee5\\u770b\\u51fa\\uff0c\\u76ee\\u6807\\u4e5f\\u53ef\\u4ee5\\u6210\\u4e3a\\u4f9d\\u8d56\\u3002\\u6240\\u4ee5\\uff0c\\u4f2a\\u76ee\\u6807\\u540c\\u6837\\u4e5f\\u53ef\\u6210\\u4e3a\\u4f9d\\u8d56\\u3002\\u770b\\u4e0b\\u9762\\u7684\\u4f8b\\u5b50\\uff1a\\n```\\n.PHONY: cleanall cleanobj cleandiff\\n\\ncleanall : cleanobj cleandiff\\n\\trm program\\n\\ncleanobj :\\n\\trm *.o\\n\\ncleandiff :\\n\\trm *.diff\\n```\\n\\u201cmake clean\\u201d\\u5c06\\u6e05\\u9664\\u6240\\u6709\\u8981\\u88ab\\u6e05\\u9664\\u7684\\u6587\\u4ef6\\u3002\\u201ccleanobj\\u201d\\u548c\\u201ccleandiff\\u201d\\u8fd9\\u4e24\\u4e2a\\u4f2a\\u76ee\\u6807\\u6709\\u70b9\\u50cf\\u201c\\u5b50\\u7a0b\\u5e8f\\u201d\\u7684\\u610f\\u601d\\u3002\\u6211\\u4eec\\u53ef\\u4ee5\\u8f93\\u5165\\u201cmake cleanall\\u201d\\u548c\\u201cmake cleanobj\\u201d\\u548c\\u201cmake cleandiff\\u201d\\u547d\\u4ee4\\u6765\\u8fbe\\u5230\\u6e05\\u9664\\u4e0d\\u540c\\u79cd\\u7c7b\\u6587\\u4ef6\\u7684\\u76ee\\u7684\\u3002\\n\\n\\n##### \\u516d\\u3001\\u591a\\u76ee\\u6807\\n\\nMakefile\\u7684\\u89c4\\u5219\\u4e2d\\u7684\\u76ee\\u6807\\u53ef\\u4ee5\\u4e0d\\u6b62\\u4e00\\u4e2a\\uff0c\\u5176\\u652f\\u6301\\u591a\\u76ee\\u6807\\uff0c\\u6709\\u53ef\\u80fd\\u6211\\u4eec\\u7684\\u591a\\u4e2a\\u76ee\\u6807\\u540c\\u65f6\\u4f9d\\u8d56\\u4e8e\\u4e00\\u4e2a\\u6587\\u4ef6\\uff0c\\u5e76\\u4e14\\u5176\\u751f\\u6210\\u7684\\u547d\\u4ee4\\u5927\\u4f53\\u7c7b\\u4f3c\\u3002\\u4e8e\\u662f\\u6211\\u4eec\\u5c31\\u80fd\\u628a\\u5176\\u5408\\u5e76\\u8d77\\u6765\\u3002\\u5f53\\u7136\\uff0c\\u591a\\u4e2a\\u76ee\\u6807\\u7684\\u751f\\u6210\\u89c4\\u5219\\u7684\\u6267\\u884c\\u547d\\u4ee4\\u662f\\u540c\\u4e00\\u4e2a\\uff0c\\u8fd9\\u53ef\\u80fd\\u4f1a\\u53ef\\u6211\\u4eec\\u5e26\\u6765\\u9ebb\\u70e6\\uff0c\\u4e0d\\u8fc7\\u597d\\u5728\\u6211\\u4eec\\u7684\\u53ef\\u4ee5\\u4f7f\\u7528\\u4e00\\u4e2a\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\u201c$@\\u201d\\uff08\\u5173\\u4e8e\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff0c\\u5c06\\u5728\\u540e\\u9762\\u8bb2\\u8ff0\\uff09\\uff0c\\u8fd9\\u4e2a\\u53d8\\u91cf\\u8868\\u793a\\u7740\\u76ee\\u524d\\u89c4\\u5219\\u4e2d\\u6240\\u6709\\u7684\\u76ee\\u6807\\u7684\\u96c6\\u5408\\uff0c\\u8fd9\\u6837\\u8bf4\\u53ef\\u80fd\\u5f88\\u62bd\\u8c61\\uff0c\\u8fd8\\u662f\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\u5427\\u3002\\n```\\nbigoutput littleoutput : text.g\\n\\tgenerate text.g -$(subst output,,$@) >; $@\\n\\n\\u4e0a\\u8ff0\\u89c4\\u5219\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\nbigoutput : text.g\\n\\tgenerate text.g -big >; bigoutput\\nlittleoutput : text.g\\n\\tgenerate text.g -little >; littleoutput\\n```\\n\\u5176\\u4e2d\\uff0c-$(subst output,,$@)\\u4e2d\\u7684\\u201c$\\u201d\\u8868\\u793a\\u6267\\u884c\\u4e00\\u4e2aMakefile\\u7684\\u51fd\\u6570\\uff0c\\u51fd\\u6570\\u540d\\u4e3asubst\\uff0c\\u540e\\u9762\\u7684\\u4e3a\\u53c2\\u6570\\u3002\\u5173\\u4e8e\\u51fd\\u6570\\uff0c\\u5c06\\u5728\\u540e\\u9762\\u8bb2\\u8ff0\\u3002\\u8fd9\\u91cc\\u7684\\u8fd9\\u4e2a\\u51fd\\u6570\\u662f\\u622a\\u53d6\\u5b57\\u7b26\\u4e32\\u7684\\u610f\\u601d\\uff0c\\u201c$@\\u201d\\u8868\\u793a\\u76ee\\u6807\\u7684\\u96c6\\u5408\\uff0c\\u5c31\\u50cf\\u4e00\\u4e2a\\u6570\\u7ec4\\uff0c\\u201c$@\\u201d\\u4f9d\\u6b21\\u53d6\\u51fa\\u76ee\\u6807\\uff0c\\u5e76\\u6267\\u4e8e\\u547d\\u4ee4\\u3002\\n\\n\\n##### \\u4e03\\u3001\\u9759\\u6001\\u6a21\\u5f0f\\n\\n\\u9759\\u6001\\u6a21\\u5f0f\\u53ef\\u4ee5\\u66f4\\u52a0\\u5bb9\\u6613\\u5730\\u5b9a\\u4e49\\u591a\\u76ee\\u6807\\u7684\\u89c4\\u5219\\uff0c\\u53ef\\u4ee5\\u8ba9\\u6211\\u4eec\\u7684\\u89c4\\u5219\\u53d8\\u5f97\\u66f4\\u52a0\\u7684\\u6709\\u5f39\\u6027\\u548c\\u7075\\u6d3b\\u3002\\u6211\\u4eec\\u8fd8\\u662f\\u5148\\u6765\\u770b\\u4e00\\u4e0b\\u8bed\\u6cd5\\uff1a\\n```\\n<targets ...>;: <target-pattern>;: <prereq-patterns ...>;\\n\\t<commands>;\\n\\t...\\n```\\n\\n**targets\\u5b9a\\u4e49\\u4e86\\u4e00\\u7cfb\\u5217\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u53ef\\u4ee5\\u6709\\u901a\\u914d\\u7b26\\u3002\\u662f\\u76ee\\u6807\\u7684\\u4e00\\u4e2a\\u96c6\\u5408\\u3002\\n\\ntarget-parrtern\\u662f\\u6307\\u660e\\u4e86targets\\u7684\\u6a21\\u5f0f\\uff0c\\u4e5f\\u5c31\\u662f\\u7684\\u76ee\\u6807\\u96c6\\u6a21\\u5f0f\\u3002\\n\\nprereq-parrterns\\u662f\\u76ee\\u6807\\u7684\\u4f9d\\u8d56\\u6a21\\u5f0f\\uff0c\\u5b83\\u5bf9target-parrtern\\u5f62\\u6210\\u7684\\u6a21\\u5f0f\\u518d\\u8fdb\\u884c\\u4e00\\u6b21\\u4f9d\\u8d56\\u76ee\\u6807\\u7684\\u5b9a\\u4e49\\u3002**\\n\\n\\u8fd9\\u6837\\u63cf\\u8ff0\\u8fd9\\u4e09\\u4e2a\\u4e1c\\u897f\\uff0c\\u53ef\\u80fd\\u8fd8\\u662f\\u6ca1\\u6709\\u8bf4\\u6e05\\u695a\\uff0c\\u8fd8\\u662f\\u4e3e\\u4e2a\\u4f8b\\u5b50\\u6765\\u8bf4\\u660e\\u4e00\\u4e0b\\u5427\\u3002\\u5982\\u679c\\u6211\\u4eec\\u7684<target-parrtern>;\\u5b9a\\u4e49\\u6210\\u201c%.o\\u201d\\uff0c\\u610f\\u601d\\u662f\\u6211\\u4eec\\u7684<target>;\\u96c6\\u5408\\u4e2d\\u90fd\\u662f\\u4ee5\\u201c.o\\u201d\\u7ed3\\u5c3e\\u7684\\uff0c\\u800c\\u5982\\u679c\\u6211\\u4eec\\u7684<prereq-parrterns>;\\u5b9a\\u4e49\\u6210\\u201c%.c\\u201d\\uff0c\\u610f\\u601d\\u662f\\u5bf9<target-parrtern>;\\u6240\\u5f62\\u6210\\u7684\\u76ee\\u6807\\u96c6\\u8fdb\\u884c\\u4e8c\\u6b21\\u5b9a\\u4e49\\uff0c\\u5176\\u8ba1\\u7b97\\u65b9\\u6cd5\\u662f\\uff0c\\u53d6<target-parrtern>;\\u6a21\\u5f0f\\u4e2d\\u7684\\u201c%\\u201d\\uff08\\u4e5f\\u5c31\\u662f\\u53bb\\u6389\\u4e86[.o]\\u8fd9\\u4e2a\\u7ed3\\u5c3e\\uff09\\uff0c\\u5e76\\u4e3a\\u5176\\u52a0\\u4e0a[.c]\\u8fd9\\u4e2a\\u7ed3\\u5c3e\\uff0c\\u5f62\\u6210\\u7684\\u65b0\\u96c6\\u5408\\u3002\\n\\n\\u6240\\u4ee5\\uff0c\\u6211\\u4eec\\u7684\\u201c\\u76ee\\u6807\\u6a21\\u5f0f\\u201d\\u6216\\u662f\\u201c\\u4f9d\\u8d56\\u6a21\\u5f0f\\u201d\\u4e2d\\u90fd\\u5e94\\u8be5\\u6709\\u201c%\\u201d\\u8fd9\\u4e2a\\u5b57\\u7b26\\uff0c\\u5982\\u679c\\u4f60\\u7684\\u6587\\u4ef6\\u540d\\u4e2d\\u6709\\u201c%\\u201d\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u53cd\\u659c\\u6760\\u201c\\\\\\u201d\\u8fdb\\u884c\\u8f6c\\u4e49\\uff0c\\u6765\\u6807\\u660e\\u771f\\u5b9e\\u7684\\u201c%\\u201d\\u5b57\\u7b26\\u3002\\n\\n\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a\\n```\\nobjects = foo.o bar.o\\n\\nall: $(objects)\\n\\n$(objects): %.o: %.c\\n\\t$(CC) -c $(CFLAGS) $< -o $@\\n```\\n\\n\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u4e2d\\uff0c\\u6307\\u660e\\u4e86\\u6211\\u4eec\\u7684\\u76ee\\u6807\\u4ece$object\\u4e2d\\u83b7\\u53d6\\uff0c\\u201c%.o\\u201d\\u8868\\u660e\\u8981\\u6240\\u6709\\u4ee5\\u201c.o\\u201d\\u7ed3\\u5c3e\\u7684\\u76ee\\u6807\\uff0c\\u4e5f\\u5c31\\u662f\\u201cfoo.o bar.o\\u201d\\uff0c\\u4e5f\\u5c31\\u662f\\u53d8\\u91cf$object\\u96c6\\u5408\\u7684\\u6a21\\u5f0f\\uff0c\\u800c\\u4f9d\\u8d56\\u6a21\\u5f0f\\u201c%.c\\u201d\\u5219\\u53d6\\u6a21\\u5f0f\\u201c%.o\\u201d\\u7684\\u201c%\\u201d\\uff0c\\u4e5f\\u5c31\\u662f\\u201cfoo bar\\u201d\\uff0c\\u5e76\\u4e3a\\u5176\\u52a0\\u4e0b\\u201c.c\\u201d\\u7684\\u540e\\u7f00\\uff0c\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u7684\\u4f9d\\u8d56\\u76ee\\u6807\\u5c31\\u662f\\u201cfoo.c bar.c\\u201d\\u3002\\u800c\\u547d\\u4ee4\\u4e2d\\u7684\\u201c$<\\u201d\\u548c\\u201c$@\\u201d\\u5219\\u662f\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff0c\\u201c$<\\u201d\\u8868\\u793a\\u6240\\u6709\\u7684\\u4f9d\\u8d56\\u76ee\\u6807\\u96c6\\uff08\\u4e5f\\u5c31\\u662f\\u201cfoo.c bar.c\\u201d\\uff09\\uff0c\\u201c$@\\u201d\\u8868\\u793a\\u76ee\\u6807\\u96c6\\uff08\\u4e5f\\u5c31\\u662f\\u201cfoo.o bar.o\\u201d\\uff09\\u3002\\u4e8e\\u662f\\uff0c\\u4e0a\\u9762\\u7684\\u89c4\\u5219\\u5c55\\u5f00\\u540e\\u7b49\\u4ef7\\u4e8e\\u4e0b\\u9762\\u7684\\u89c4\\u5219\\uff1a\\n\\n    foo.o : foo.c\\n            $(CC) -c $(CFLAGS) foo.c -o foo.o\\n    bar.o : bar.c\\n            $(CC) -c $(CFLAGS) bar.c -o bar.o\\n\\n\\u8bd5\\u60f3\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684\\u201c%.o\\u201d\\u6709\\u51e0\\u767e\\u4e2a\\uff0c\\u90a3\\u79cd\\u6211\\u4eec\\u53ea\\u8981\\u7528\\u8fd9\\u79cd\\u5f88\\u7b80\\u5355\\u7684\\u201c\\u9759\\u6001\\u6a21\\u5f0f\\u89c4\\u5219\\u201d\\u5c31\\u53ef\\u4ee5\\u5199\\u5b8c\\u4e00\\u5806\\u89c4\\u5219\\uff0c\\u5b9e\\u5728\\u662f\\u592a\\u6709\\u6548\\u7387\\u4e86\\u3002\\u201c\\u9759\\u6001\\u6a21\\u5f0f\\u89c4\\u5219\\u201d\\u7684\\u7528\\u6cd5\\u5f88\\u7075\\u6d3b\\uff0c\\u5982\\u679c\\u7528\\u5f97\\u597d\\uff0c\\u90a3\\u4f1a\\u4e00\\u4e2a\\u5f88\\u5f3a\\u5927\\u7684\\u529f\\u80fd\\u3002\\u518d\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a\\n\\n\\n    files = foo.elc bar.o lose.o\\n\\n    $(filter %.o,$(files)): %.o: %.c\\n            $(CC) -c $(CFLAGS) $< -o $@\\n    $(filter %.elc,$(files)): %.elc: %.el\\n            emacs -f batch-byte-compile $<\\n\\n\\n$(filter %.o,$(files))\\u8868\\u793a\\u8c03\\u7528Makefile\\u7684filter\\u51fd\\u6570\\uff0c\\u8fc7\\u6ee4\\u201c$filter\\u201d\\u96c6\\uff0c\\u53ea\\u8981\\u5176\\u4e2d\\u6a21\\u5f0f\\u4e3a\\u201c%.o\\u201d\\u7684\\u5185\\u5bb9\\u3002\\u5176\\u7684\\u5b83\\u5185\\u5bb9\\uff0c\\u6211\\u5c31\\u4e0d\\u7528\\u591a\\u8bf4\\u4e86\\u5427\\u3002\\u8fd9\\u4e2a\\u4f8b\\u5b57\\u5c55\\u793a\\u4e86Makefile\\u4e2d\\u66f4\\u5927\\u7684\\u5f39\\u6027\\u3002\\n\\n\\n##### \\u516b\\u3001\\u81ea\\u52a8\\u751f\\u6210\\u4f9d\\u8d56\\u6027\\n\\n\\u5728Makefile\\u4e2d\\uff0c\\u6211\\u4eec\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u53ef\\u80fd\\u4f1a\\u9700\\u8981\\u5305\\u542b\\u4e00\\u7cfb\\u5217\\u7684\\u5934\\u6587\\u4ef6\\uff0c\\u6bd4\\u5982\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684main.c\\u4e2d\\u6709\\u4e00\\u53e5\\u201c#include \\"defs.h\\"\\u201d\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u5e94\\u8be5\\u662f\\uff1a\\n\\n    main.o : main.c defs.h\\n\\n\\u4f46\\u662f\\uff0c\\u5982\\u679c\\u662f\\u4e00\\u4e2a\\u6bd4\\u8f83\\u5927\\u578b\\u7684\\u5de5\\u7a0b\\uff0c\\u4f60\\u5fc5\\u9700\\u6e05\\u695a\\u54ea\\u4e9bC\\u6587\\u4ef6\\u5305\\u542b\\u4e86\\u54ea\\u4e9b\\u5934\\u6587\\u4ef6\\uff0c\\u5e76\\u4e14\\uff0c\\u4f60\\u5728\\u52a0\\u5165\\u6216\\u5220\\u9664\\u5934\\u6587\\u4ef6\\u65f6\\uff0c\\u4e5f\\u9700\\u8981\\u5c0f\\u5fc3\\u5730\\u4fee\\u6539Makefile\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u5f88\\u6ca1\\u6709\\u7ef4\\u62a4\\u6027\\u7684\\u5de5\\u4f5c\\u3002**\\u4e3a\\u4e86\\u907f\\u514d\\u8fd9\\u79cd\\u7e41\\u91cd\\u800c\\u53c8\\u5bb9\\u6613\\u51fa\\u9519\\u7684\\u4e8b\\u60c5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528C\\/C++\\u7f16\\u8bd1\\u7684\\u4e00\\u4e2a\\u529f\\u80fd\\u3002\\u5927\\u591a\\u6570\\u7684C\\/C++\\u7f16\\u8bd1\\u5668\\u90fd\\u652f\\u6301\\u4e00\\u4e2a\\u201c-M\\u201d\\u7684\\u9009\\u9879\\uff0c\\u5373\\u81ea\\u52a8\\u627e\\u5bfb\\u6e90\\u6587\\u4ef6\\u4e2d\\u5305\\u542b\\u7684\\u5934\\u6587\\u4ef6\\uff0c\\u5e76\\u751f\\u6210\\u4e00\\u4e2a\\u4f9d\\u8d56\\u5173\\u7cfb\\u3002**\\u4f8b\\u5982\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u6267\\u884c\\u4e0b\\u9762\\u7684\\u547d\\u4ee4\\uff1a\\n\\n    cc -M main.c\\n\\n\\u5176\\u8f93\\u51fa\\u662f\\uff1a\\n\\n    main.o : main.c defs.h\\n\\n\\u4e8e\\u662f\\u7531\\u7f16\\u8bd1\\u5668\\u81ea\\u52a8\\u751f\\u6210\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u8fd9\\u6837\\u4e00\\u6765\\uff0c\\u4f60\\u5c31\\u4e0d\\u5fc5\\u518d\\u624b\\u52a8\\u4e66\\u5199\\u82e5\\u5e72\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u800c\\u7531\\u7f16\\u8bd1\\u5668\\u81ea\\u52a8\\u751f\\u6210\\u4e86\\u3002\\u9700\\u8981\\u63d0\\u9192\\u4e00\\u53e5\\u7684\\u662f\\uff0c**\\u5982\\u679c\\u4f60\\u4f7f\\u7528GNU\\u7684C\\/C++\\u7f16\\u8bd1\\u5668\\uff0c\\u4f60\\u5f97\\u7528\\u201c-MM\\u201d\\u53c2\\u6570**\\uff0c\\u4e0d\\u7136\\uff0c\\u201c-M\\u201d\\u53c2\\u6570\\u4f1a\\u628a\\u4e00\\u4e9b\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u4e5f\\u5305\\u542b\\u8fdb\\u6765\\u3002\\n\\ngcc -M main.c\\u7684\\u8f93\\u51fa\\u662f\\uff1a\\n```\\nmain.o: main.c defs.h \\/usr\\/include\\/stdio.h \\/usr\\/include\\/features.h \\\\\\n\\t\\/usr\\/include\\/sys\\/cdefs.h \\/usr\\/include\\/gnu\\/stubs.h \\\\\\n\\t\\/usr\\/lib\\/gcc-lib\\/i486-suse-linux\\/2.95.3\\/include\\/stddef.h \\\\\\n\\t\\/usr\\/include\\/bits\\/types.h \\/usr\\/include\\/bits\\/pthreadtypes.h \\\\\\n\\t\\/usr\\/include\\/bits\\/sched.h \\/usr\\/include\\/libio.h \\\\\\n\\t\\/usr\\/include\\/_G_config.h \\/usr\\/include\\/wchar.h \\\\\\n\\t\\/usr\\/include\\/bits\\/wchar.h \\/usr\\/include\\/gconv.h \\\\\\n\\t\\/usr\\/lib\\/gcc-lib\\/i486-suse-linux\\/2.95.3\\/include\\/stdarg.h \\\\\\n\\t\\/usr\\/include\\/bits\\/stdio_lim.h\\n```\\ngcc -MM main.c\\u7684\\u8f93\\u51fa\\u5219\\u662f\\uff1a\\n```\\nmain.o: main.c defs.h\\n```\\n\\u90a3\\u4e48\\uff0c\\u7f16\\u8bd1\\u5668\\u7684\\u8fd9\\u4e2a\\u529f\\u80fd\\u5982\\u4f55\\u4e0e\\u6211\\u4eec\\u7684Makefile\\u8054\\u7cfb\\u5728\\u4e00\\u8d77\\u5462\\u3002\\u56e0\\u4e3a\\u8fd9\\u6837\\u4e00\\u6765\\uff0c\\u6211\\u4eec\\u7684Makefile\\u4e5f\\u8981\\u6839\\u636e\\u8fd9\\u4e9b\\u6e90\\u6587\\u4ef6\\u91cd\\u65b0\\u751f\\u6210\\uff0c\\u8ba9Makefile\\u81ea\\u5df2\\u4f9d\\u8d56\\u4e8e\\u6e90\\u6587\\u4ef6\\uff1f\\u8fd9\\u4e2a\\u529f\\u80fd\\u5e76\\u4e0d\\u73b0\\u5b9e\\uff0c\\u4e0d\\u8fc7\\u6211\\u4eec\\u53ef\\u4ee5\\u6709\\u5176\\u5b83\\u624b\\u6bb5\\u6765\\u8fc2\\u56de\\u5730\\u5b9e\\u73b0\\u8fd9\\u4e00\\u529f\\u80fd\\u3002GNU\\u7ec4\\u7ec7\\u5efa\\u8bae\\u628a\\u7f16\\u8bd1\\u5668\\u4e3a\\u6bcf\\u4e00\\u4e2a\\u6e90\\u6587\\u4ef6\\u7684\\u81ea\\u52a8\\u751f\\u6210\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u653e\\u5230\\u4e00\\u4e2a\\u6587\\u4ef6\\u4e2d\\uff0c\\u4e3a\\u6bcf\\u4e00\\u4e2a\\u201cname.c\\u201d\\u7684\\u6587\\u4ef6\\u90fd\\u751f\\u6210\\u4e00\\u4e2a\\u201cname.d\\u201d\\u7684Makefile\\u6587\\u4ef6\\uff0c[.d]\\u6587\\u4ef6\\u4e2d\\u5c31\\u5b58\\u653e\\u5bf9\\u5e94[.c]\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u3002\\n\\n\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5199\\u51fa[.c]\\u6587\\u4ef6\\u548c[.d]\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u5e76\\u8ba9make\\u81ea\\u52a8\\u66f4\\u65b0\\u6216\\u81ea\\u6210[.d]\\u6587\\u4ef6\\uff0c\\u5e76\\u628a\\u5176\\u5305\\u542b\\u5728\\u6211\\u4eec\\u7684\\u4e3bMakefile\\u4e2d\\uff0c\\u8fd9\\u6837\\uff0c\\u6211\\u4eec\\u5c31\\u53ef\\u4ee5\\u81ea\\u52a8\\u5316\\u5730\\u751f\\u6210\\u6bcf\\u4e2a\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u4e86\\u3002\\n\\n\\u8fd9\\u91cc\\uff0c\\u6211\\u4eec\\u7ed9\\u51fa\\u4e86\\u4e00\\u4e2a\\u6a21\\u5f0f\\u89c4\\u5219\\u6765\\u4ea7\\u751f[.d]\\u6587\\u4ef6\\uff1a\\n```\\n%.d: %.c\\n\\t@set -e; rm -f $@; \\\\\\n\\t$(CC) -M $(CPPFLAGS) $< >; $@.$$$$; \\\\\\n\\tsed \'s,\\\\($*\\\\)\\\\.o[ :]*,\\\\1.o $@ : ,g\' < $@.$$$$ >; $@; \\\\\\n\\trm -f $@.$$$$\\n```\\n\\n\\u8fd9\\u4e2a\\u89c4\\u5219\\u7684\\u610f\\u601d\\u662f\\uff0c\\u6240\\u6709\\u7684[.d]\\u6587\\u4ef6\\u4f9d\\u8d56\\u4e8e[.c]\\u6587\\u4ef6\\uff0c\\u201crm -f $@\\u201d\\u7684\\u610f\\u601d\\u662f\\u5220\\u9664\\u6240\\u6709\\u7684\\u76ee\\u6807\\uff0c\\u4e5f\\u5c31\\u662f[.d]\\u6587\\u4ef6\\uff0c\\u7b2c\\u4e8c\\u884c\\u7684\\u610f\\u601d\\u662f\\uff0c\\u4e3a\\u6bcf\\u4e2a\\u4f9d\\u8d56\\u6587\\u4ef6\\u201c$<\\u201d\\uff0c\\u4e5f\\u5c31\\u662f[.c]\\u6587\\u4ef6\\u751f\\u6210\\u4f9d\\u8d56\\u6587\\u4ef6\\uff0c\\u201c$@\\u201d\\u8868\\u793a\\u6a21\\u5f0f\\u201c%.d\\u201d\\u6587\\u4ef6\\uff0c\\u5982\\u679c\\u6709\\u4e00\\u4e2aC\\u6587\\u4ef6\\u662fname.c\\uff0c\\u90a3\\u4e48\\u201c%\\u201d\\u5c31\\u662f\\u201cname\\u201d\\uff0c\\u201c$$$$\\u201d\\u610f\\u4e3a\\u4e00\\u4e2a\\u968f\\u673a\\u7f16\\u53f7\\uff0c\\u7b2c\\u4e8c\\u884c\\u751f\\u6210\\u7684\\u6587\\u4ef6\\u6709\\u53ef\\u80fd\\u662f\\u201cname.d.12345\\u201d\\uff0c\\u7b2c\\u4e09\\u884c\\u4f7f\\u7528sed\\u547d\\u4ee4\\u505a\\u4e86\\u4e00\\u4e2a\\u66ff\\u6362\\uff0c\\u5173\\u4e8esed\\u547d\\u4ee4\\u7684\\u7528\\u6cd5\\u8bf7\\u53c2\\u770b\\u76f8\\u5173\\u7684\\u4f7f\\u7528\\u6587\\u6863\\u3002\\u7b2c\\u56db\\u884c\\u5c31\\u662f\\u5220\\u9664\\u4e34\\u65f6\\u6587\\u4ef6\\u3002\\n\\n\\u603b\\u800c\\u8a00\\u4e4b\\uff0c\\u8fd9\\u4e2a\\u6a21\\u5f0f\\u8981\\u505a\\u7684\\u4e8b\\u5c31\\u662f\\u5728\\u7f16\\u8bd1\\u5668\\u751f\\u6210\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u4e2d\\u52a0\\u5165[.d]\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\uff0c\\u5373\\u628a\\u4f9d\\u8d56\\u5173\\u7cfb\\uff1a\\n\\n    main.o : main.c defs.h\\n\\n\\u8f6c\\u6210\\uff1a\\n\\n    main.o main.d : main.c defs.h\\n\\n\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u7684[.d]\\u6587\\u4ef6\\u4e5f\\u4f1a\\u81ea\\u52a8\\u66f4\\u65b0\\u4e86\\uff0c\\u5e76\\u4f1a\\u81ea\\u52a8\\u751f\\u6210\\u4e86\\uff0c\\u5f53\\u7136\\uff0c\\u4f60\\u8fd8\\u53ef\\u4ee5\\u5728\\u8fd9\\u4e2a[.d]\\u6587\\u4ef6\\u4e2d\\u52a0\\u5165\\u7684\\u4e0d\\u53ea\\u662f\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u5305\\u62ec\\u751f\\u6210\\u7684\\u547d\\u4ee4\\u4e5f\\u53ef\\u4e00\\u5e76\\u52a0\\u5165\\uff0c\\u8ba9\\u6bcf\\u4e2a[.d]\\u6587\\u4ef6\\u90fd\\u5305\\u542b\\u4e00\\u4e2a\\u5b8c\\u8d56\\u7684\\u89c4\\u5219\\u3002\\u4e00\\u65e6\\u6211\\u4eec\\u5b8c\\u6210\\u8fd9\\u4e2a\\u5de5\\u4f5c\\uff0c\\u63a5\\u4e0b\\u6765\\uff0c\\u6211\\u4eec\\u5c31\\u8981\\u628a\\u8fd9\\u4e9b\\u81ea\\u52a8\\u751f\\u6210\\u7684\\u89c4\\u5219\\u653e\\u8fdb\\u6211\\u4eec\\u7684\\u4e3bMakefile\\u4e2d\\u3002\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528Makefile\\u7684\\u201cinclude\\u201d\\u547d\\u4ee4\\uff0c\\u6765\\u5f15\\u5165\\u522b\\u7684Makefile\\u6587\\u4ef6\\uff08\\u524d\\u9762\\u8bb2\\u8fc7\\uff09\\uff0c\\u4f8b\\u5982\\uff1a\\n\\n    sources = foo.c bar.c\\n\\n    include $(sources:.c=.d)\\n\\n\\u4e0a\\u8ff0\\u8bed\\u53e5\\u4e2d\\u7684\\u201c$(sources:.c=.d)\\u201d\\u4e2d\\u7684\\u201c.c=.d\\u201d\\u7684\\u610f\\u601d\\u662f\\u505a\\u4e00\\u4e2a\\u66ff\\u6362\\uff0c\\u628a\\u53d8\\u91cf$(sources)\\u6240\\u6709[.c]\\u7684\\u5b57\\u4e32\\u90fd\\u66ff\\u6362\\u6210[.d]\\uff0c\\u5173\\u4e8e\\u8fd9\\u4e2a\\u201c\\u66ff\\u6362\\u201d\\u7684\\u5185\\u5bb9\\uff0c\\u5728\\u540e\\u9762\\u6211\\u4f1a\\u6709\\u66f4\\u4e3a\\u8be6\\u7ec6\\u7684\\u8bb2\\u8ff0\\u3002\\u5f53\\u7136\\uff0c\\u4f60\\u5f97\\u6ce8\\u610f\\u6b21\\u5e8f\\uff0c\\u56e0\\u4e3ainclude\\u662f\\u6309\\u6b21\\u6765\\u8f7d\\u5165\\u6587\\u4ef6\\uff0c\\u6700\\u5148\\u8f7d\\u5165\\u7684[.d]\\u6587\\u4ef6\\u4e2d\\u7684\\u76ee\\u6807\\u4f1a\\u6210\\u4e3a\\u9ed8\\u8ba4\\u76ee\\u6807\\u3002","html":"<p>\\u7ee7\\u7eed \\u9648\\u7693\\u201c\\u8ddf\\u6211\\u4e00\\u8d77\\u5199 Makefile&quot;\\u4e4b<strong>\\u4e66\\u5199\\u89c4\\u5219<\\/strong><\\/p>\\n<p>\\u89c4\\u5219\\u5305\\u542b\\u4e24\\u4e2a\\u90e8\\u5206\\uff0c\\u4e00\\u4e2a\\u662f\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u4e00\\u4e2a\\u662f\\u751f\\u6210\\u76ee\\u6807\\u7684\\u65b9\\u6cd5\\u3002<\\/p>\\n<p>\\u5728Makefile\\u4e2d\\uff0c\\u89c4\\u5219\\u7684\\u987a\\u5e8f\\u662f\\u5f88\\u91cd\\u8981\\u7684\\uff0c\\u56e0\\u4e3a\\uff0cMakefile\\u4e2d\\u53ea\\u5e94\\u8be5\\u6709\\u4e00\\u4e2a\\u6700\\u7ec8\\u76ee\\u6807\\uff0c\\u5176\\u5b83\\u7684\\u76ee\\u6807\\u90fd\\u662f\\u88ab\\u8fd9\\u4e2a\\u76ee\\u6807\\u6240\\u8fde\\u5e26\\u51fa\\u6765\\u7684\\uff0c\\u6240\\u4ee5\\u4e00\\u5b9a\\u8981\\u8ba9make\\u77e5\\u9053\\u4f60\\u7684\\u6700\\u7ec8\\u76ee\\u6807\\u662f\\u4ec0\\u4e48\\u3002\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u5b9a\\u4e49\\u5728Makefile\\u4e2d\\u7684\\u76ee\\u6807\\u53ef\\u80fd\\u4f1a\\u6709\\u5f88\\u591a\\uff0c\\u4f46\\u662f\\u7b2c\\u4e00\\u6761\\u89c4\\u5219\\u4e2d\\u7684\\u76ee\\u6807\\u5c06\\u88ab\\u786e\\u7acb\\u4e3a\\u6700\\u7ec8\\u7684\\u76ee\\u6807\\u3002\\u5982\\u679c\\u7b2c\\u4e00\\u6761\\u89c4\\u5219\\u4e2d\\u7684\\u76ee\\u6807\\u6709\\u5f88\\u591a\\u4e2a\\uff0c\\u90a3\\u4e48\\uff0c\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u4f1a\\u6210\\u4e3a\\u6700\\u7ec8\\u7684\\u76ee\\u6807\\u3002make\\u6240\\u5b8c\\u6210\\u7684\\u4e5f\\u5c31\\u662f\\u8fd9\\u4e2a\\u76ee\\u6807\\u3002<\\/p>\\n<p>\\u597d\\u4e86\\uff0c\\u8fd8\\u662f\\u8ba9\\u6211\\u4eec\\u6765\\u770b\\u4e00\\u770b\\u5982\\u4f55\\u4e66\\u5199\\u89c4\\u5219\\u3002<\\/p>\\n<h5>\\u4e00\\u3001\\u89c4\\u5219\\u4e3e\\u4f8b<\\/h5>\\n<pre><code>foo.o : foo.c defs.h       # foo\\u6a21\\u5757\\n    cc -c -g foo.c<\\/code><\\/pre>\\n<p>\\u770b\\u5230\\u8fd9\\u4e2a\\u4f8b\\u5b50\\uff0c\\u5404\\u4f4d\\u5e94\\u8be5\\u4e0d\\u662f\\u5f88\\u964c\\u751f\\u4e86\\uff0c\\u524d\\u9762\\u4e5f\\u5df2\\u8bf4\\u8fc7\\uff0cfoo.o\\u662f\\u6211\\u4eec\\u7684\\u76ee\\u6807\\uff0cfoo.c\\u548cdefs.h\\u662f\\u76ee\\u6807\\u6240\\u4f9d\\u8d56\\u7684\\u6e90\\u6587\\u4ef6\\uff0c\\u800c\\u53ea\\u6709\\u4e00\\u4e2a\\u547d\\u4ee4\\u201ccc -c -g foo.c\\u201d\\uff08\\u4ee5Tab\\u952e\\u5f00\\u5934\\uff09\\u3002\\u8fd9\\u4e2a\\u89c4\\u5219\\u544a\\u8bc9\\u6211\\u4eec\\u4e24\\u4ef6\\u4e8b\\uff1a<\\/p>\\n<ol>\\n<li>\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0cfoo.o\\u4f9d\\u8d56\\u4e8efoo.c\\u548cdefs.h\\u7684\\u6587\\u4ef6\\uff0c\\u5982\\u679cfoo.c\\u548cdefs.h\\u7684\\u6587\\u4ef6\\u65e5\\u671f\\u8981\\u6bd4foo.o\\u6587\\u4ef6\\u65e5\\u671f\\u8981\\u65b0\\uff0c\\u6216\\u662ffoo.o\\u4e0d\\u5b58\\u5728\\uff0c\\u90a3\\u4e48\\u4f9d\\u8d56\\u5173\\u7cfb\\u53d1\\u751f\\u3002<\\/li>\\n<li>\\u5982\\u679c\\u751f\\u6210\\uff08\\u6216\\u66f4\\u65b0\\uff09foo.o\\u6587\\u4ef6\\u3002\\u4e5f\\u5c31\\u662f\\u90a3\\u4e2acc\\u547d\\u4ee4\\uff0c\\u5176\\u8bf4\\u660e\\u4e86\\uff0c\\u5982\\u4f55\\u751f\\u6210foo.o\\u8fd9\\u4e2a\\u6587\\u4ef6\\u3002\\uff08\\u5f53\\u7136foo.c\\u6587\\u4ef6include\\u4e86defs.h\\u6587\\u4ef6\\uff09<\\/li>\\n<\\/ol>\\n<h5>\\u4e8c\\u3001\\u89c4\\u5219\\u7684\\u8bed\\u6cd5<\\/h5>\\n<pre><code>targets : prerequisites\\n    command\\n    ...\\n\\n\\u6216\\u662f\\u8fd9\\u6837\\uff1a \\n\\ntargets : prerequisites ; command\\n    command\\n    ...<\\/code><\\/pre>\\n<p>targets\\u662f\\u6587\\u4ef6\\u540d\\uff0c\\u4ee5\\u7a7a\\u683c\\u5206\\u5f00\\uff0c\\u53ef\\u4ee5\\u4f7f\\u7528\\u901a\\u914d\\u7b26\\u3002\\u4e00\\u822c\\u6765\\u8bf4\\uff0c\\u6211\\u4eec\\u7684\\u76ee\\u6807\\u57fa\\u672c\\u4e0a\\u662f\\u4e00\\u4e2a\\u6587\\u4ef6\\uff0c\\u4f46\\u4e5f\\u6709\\u53ef\\u80fd\\u662f\\u591a\\u4e2a\\u6587\\u4ef6\\u3002<\\/p>\\n<p>command\\u662f\\u547d\\u4ee4\\u884c\\uff0c\\u5982\\u679c\\u5176\\u4e0d\\u4e0e\\u201ctarget:prerequisites\\u201d\\u5728\\u4e00\\u884c\\uff0c\\u90a3\\u4e48\\uff0c\\u5fc5\\u987b\\u4ee5[Tab\\u952e]\\u5f00\\u5934\\uff0c\\u5982\\u679c\\u548cprerequisites\\u5728\\u4e00\\u884c\\uff0c\\u90a3\\u4e48\\u53ef\\u4ee5\\u7528\\u5206\\u53f7\\u505a\\u4e3a\\u5206\\u9694\\u3002\\uff08\\u89c1\\u4e0a\\uff09<\\/p>\\n<p>prerequisites\\u4e5f\\u5c31\\u662f\\u76ee\\u6807\\u6240\\u4f9d\\u8d56\\u7684\\u6587\\u4ef6\\uff08\\u6216\\u4f9d\\u8d56\\u76ee\\u6807\\uff09\\u3002\\u5982\\u679c\\u5176\\u4e2d\\u7684\\u67d0\\u4e2a\\u6587\\u4ef6\\u8981\\u6bd4\\u76ee\\u6807\\u6587\\u4ef6\\u8981\\u65b0\\uff0c\\u90a3\\u4e48\\uff0c\\u76ee\\u6807\\u5c31\\u88ab\\u8ba4\\u4e3a\\u662f\\u201c\\u8fc7\\u65f6\\u7684\\u201d\\uff0c\\u88ab\\u8ba4\\u4e3a\\u662f\\u9700\\u8981\\u91cd\\u751f\\u6210\\u7684\\u3002\\u8fd9\\u4e2a\\u5728\\u524d\\u9762\\u5df2\\u7ecf\\u8bb2\\u8fc7\\u4e86\\u3002<\\/p>\\n<p>\\u5982\\u679c\\u547d\\u4ee4\\u592a\\u957f\\uff0c\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u53cd\\u659c\\u6846<code>\\\\<\\/code>\\u4f5c\\u4e3a\\u6362\\u884c\\u7b26\\u3002make\\u5bf9\\u4e00\\u884c\\u4e0a\\u6709\\u591a\\u5c11\\u4e2a\\u5b57\\u7b26\\u6ca1\\u6709\\u9650\\u5236\\u3002\\u89c4\\u5219\\u544a\\u8bc9make\\u4e24\\u4ef6\\u4e8b\\uff0c\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u548c\\u5982\\u4f55\\u6210\\u6210\\u76ee\\u6807\\u6587\\u4ef6\\u3002<\\/p>\\n<p>\\u4e00\\u822c\\u6765\\u8bf4\\uff0cmake\\u4f1a\\u4ee5UNIX\\u7684\\u6807\\u51c6Shell\\uff0c\\u4e5f\\u5c31\\u662f\\/bin\\/sh\\u6765\\u6267\\u884c\\u547d\\u4ee4\\u3002<\\/p>\\n<h5>\\u4e09\\u3001\\u5728\\u89c4\\u5219\\u4e2d\\u4f7f\\u7528\\u901a\\u914d\\u7b26<\\/h5>\\n<p>\\u5982\\u679c\\u6211\\u4eec\\u60f3\\u5b9a\\u4e49\\u4e00\\u7cfb\\u5217\\u6bd4\\u8f83\\u7c7b\\u4f3c\\u7684\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u5f88\\u81ea\\u7136\\u5730\\u5c31\\u60f3\\u8d77\\u4f7f\\u7528\\u901a\\u914d\\u7b26\\u3002make\\u652f\\u6301\\u4e09\\u5404\\u901a\\u914d\\u7b26\\uff1a<code>*<\\/code>\\uff0c<code>?<\\/code>\\u548c<code>[...]<\\/code>\\u3002\\u8fd9\\u662f\\u548cUnix\\u7684B-Shell\\u662f\\u76f8\\u540c\\u7684\\u3002<\\/p>\\n<p>\\u6ce2\\u6d6a\\u53f7<code>~<\\/code>\\u5b57\\u7b26\\u5728\\u6587\\u4ef6\\u540d\\u4e2d\\u4e5f\\u6709\\u6bd4\\u8f83\\u7279\\u6b8a\\u7684\\u7528\\u9014\\u3002\\u5982\\u679c\\u662f\\u201c~\\/test\\u201d\\uff0c\\u8fd9\\u5c31\\u8868\\u793a\\u5f53\\u524d\\u7528\\u6237\\u7684$HOME\\u76ee\\u5f55\\u4e0b\\u7684test\\u76ee\\u5f55\\u3002\\u800c\\u201c~hchen\\/test\\u201d\\u5219\\u8868\\u793a\\u7528\\u6237hchen\\u7684\\u5bbf\\u4e3b\\u76ee\\u5f55\\u4e0b\\u7684test\\u76ee\\u5f55\\u3002\\uff08\\u8fd9\\u4e9b\\u90fd\\u662fUnix\\u4e0b\\u7684\\u5c0f\\u77e5\\u8bc6\\u4e86\\uff0cmake\\u4e5f\\u652f\\u6301\\uff09\\u800c\\u5728Windows\\u6216\\u662fMS-DOS\\u4e0b\\uff0c\\u7528\\u6237\\u6ca1\\u6709\\u5bbf\\u4e3b\\u76ee\\u5f55\\uff0c\\u90a3\\u4e48\\u6ce2\\u6d6a\\u53f7\\u6240\\u6307\\u7684\\u76ee\\u5f55\\u5219\\u6839\\u636e\\u73af\\u5883\\u53d8\\u91cf\\u201cHOME\\u201d\\u800c\\u5b9a\\u3002<\\/p>\\n<p>\\u901a\\u914d\\u7b26\\u4ee3\\u66ff\\u4e86\\u4e00\\u7cfb\\u5217\\u7684\\u6587\\u4ef6\\uff0c\\u5982\\u201c<em>.c\\u201d\\u8868\\u793a\\u6240\\u4ee5\\u540e\\u7f00\\u4e3ac\\u7684\\u6587\\u4ef6\\u3002\\u4e00\\u4e2a\\u9700\\u8981\\u6211\\u4eec\\u6ce8\\u610f\\u7684\\u662f\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684\\u6587\\u4ef6\\u540d\\u4e2d\\u6709\\u901a\\u914d\\u7b26\\uff0c\\u5982\\uff1a`<\\/em><code>\\uff0c\\u90a3\\u4e48\\u53ef\\u4ee5\\u7528\\u8f6c\\u4e49\\u5b57\\u7b26<\\/code>`\\uff0c\\u5982<code>\\\\*<\\/code>\\u6765\\u8868\\u793a\\u771f\\u5b9e\\u7684`*\\u5b57\\u7b26\\uff0c\\u800c\\u4e0d\\u662f\\u4efb\\u610f\\u957f\\u5ea6\\u7684\\u5b57\\u7b26\\u4e32\\u3002<\\/p>\\n<p>\\u597d\\u5427\\uff0c\\u8fd8\\u662f\\u5148\\u6765\\u770b\\u51e0\\u4e2a\\u4f8b\\u5b50\\u5427\\uff1a<\\/p>\\n<pre><code>clean:\\n    rm -f *.o<\\/code><\\/pre>\\n<p>\\u4e0a\\u9762\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u6211\\u4e0d\\u4e0d\\u591a\\u8bf4\\u4e86\\uff0c\\u8fd9\\u662f\\u64cd\\u4f5c\\u7cfb\\u7edfShell\\u6240\\u652f\\u6301\\u7684\\u901a\\u914d\\u7b26\\u3002\\u8fd9\\u662f\\u5728\\u547d\\u4ee4\\u4e2d\\u7684\\u901a\\u914d\\u7b26\\u3002<\\/p>\\n<pre><code>print: *.c\\n    lpr -p $?\\n    touch print<\\/code><\\/pre>\\n<p>\\u4e0a\\u9762\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u8bf4\\u660e\\u4e86\\u901a\\u914d\\u7b26\\u4e5f\\u53ef\\u4ee5\\u5728\\u6211\\u4eec\\u7684\\u89c4\\u5219\\u4e2d\\uff0c\\u76ee\\u6807print\\u4f9d\\u8d56\\u4e8e\\u6240\\u6709\\u7684[.c]\\u6587\\u4ef6\\u3002\\u5176\\u4e2d\\u7684<code>$?<\\/code>\\u662f\\u4e00\\u4e2a\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u9762\\u7ed9\\u4f60\\u8bb2\\u8ff0\\u3002<\\/p>\\n<pre><code>objects = *.o<\\/code><\\/pre>\\n<p>\\u4e0a\\u9762\\u8fd9\\u4e2a\\u4f8b\\u5b50\\uff0c\\u8868\\u793a\\u4e86\\uff0c\\u901a\\u7b26\\u540c\\u6837\\u53ef\\u4ee5\\u7528\\u5728\\u53d8\\u91cf\\u4e2d\\u3002\\u5e76\\u4e0d\\u662f\\u8bf4<code>*.o<\\/code>\\u4f1a\\u5c55\\u5f00\\uff0c\\u4e0d\\uff01objects\\u7684\\u503c\\u5c31\\u662f<code>*.o<\\/code>\\u3002Makefile\\u4e2d\\u7684\\u53d8\\u91cf\\u5176\\u5b9e\\u5c31\\u662fC\\/C++\\u4e2d\\u7684\\u5b8f\\u3002<strong>\\u5982\\u679c\\u4f60\\u8981\\u8ba9\\u901a\\u914d\\u7b26\\u5728\\u53d8\\u91cf\\u4e2d\\u5c55\\u5f00\\uff0c\\u4e5f\\u5c31\\u662f\\u8ba9objects\\u7684\\u503c\\u662f\\u6240\\u6709[.o]\\u7684\\u6587\\u4ef6\\u540d\\u7684\\u96c6\\u5408\\uff0c\\u90a3\\u4e48\\uff0c\\u4f60\\u53ef\\u4ee5\\u8fd9\\u6837\\uff1a<\\/strong><\\/p>\\n<pre><code>objects := $(wildcard *.o)<\\/code><\\/pre>\\n<p>\\u8fd9\\u79cd\\u7528\\u6cd5\\u7531\\u5173\\u952e\\u5b57<code>wildcard<\\/code>\\u6307\\u51fa\\uff0c\\u5173\\u4e8eMakefile\\u7684\\u5173\\u952e\\u5b57\\uff0c\\u6211\\u4eec\\u5c06\\u5728\\u540e\\u9762\\u8ba8\\u8bba\\u3002<\\/p>\\n<h5>\\u56db\\u3001\\u6587\\u4ef6\\u641c\\u5bfb<\\/h5>\\n<p>\\u5728\\u4e00\\u4e9b\\u5927\\u7684\\u5de5\\u7a0b\\u4e2d\\uff0c\\u6709\\u5927\\u91cf\\u7684\\u6e90\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u901a\\u5e38\\u7684\\u505a\\u6cd5\\u662f\\u628a\\u8fd9\\u8bb8\\u591a\\u7684\\u6e90\\u6587\\u4ef6\\u5206\\u7c7b\\uff0c\\u5e76\\u5b58\\u653e\\u5728\\u4e0d\\u540c\\u7684\\u76ee\\u5f55\\u4e2d\\u3002\\u6240\\u4ee5\\uff0c\\u5f53 make \\u9700\\u8981\\u53bb\\u627e\\u5bfb\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u65f6\\uff0c\\u4f60\\u53ef\\u4ee5\\u5728\\u6587\\u4ef6\\u524d\\u52a0\\u4e0a\\u8def\\u5f84\\uff0c\\u4f46\\u6700\\u597d\\u7684\\u65b9\\u6cd5\\u662f\\u628a\\u4e00\\u4e2a\\u8def\\u5f84\\u544a\\u8bc9 make\\uff0c\\u8ba9 make \\u5728\\u81ea\\u52a8\\u53bb\\u627e\\u3002<\\/p>\\n<p>Makefile \\u6587\\u4ef6\\u4e2d\\u7684\\u7279\\u6b8a\\u53d8\\u91cf<code>VPATH<\\/code>\\u5c31\\u662f\\u5b8c\\u6210\\u8fd9\\u4e2a\\u529f\\u80fd\\u7684\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u6307\\u660e\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0cmake \\u53ea\\u4f1a\\u5728\\u5f53\\u524d\\u7684\\u76ee\\u5f55\\u4e2d\\u53bb\\u627e\\u5bfb\\u4f9d\\u8d56\\u6587\\u4ef6\\u548c\\u76ee\\u6807\\u6587\\u4ef6\\u3002\\u5982\\u679c\\u5b9a\\u4e49\\u4e86\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u90a3\\u4e48\\uff0cmake \\u5c31\\u4f1a\\u5728\\u5f53\\u5f53\\u524d\\u76ee\\u5f55\\u627e\\u4e0d\\u5230\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u5230\\u6240\\u6307\\u5b9a\\u7684\\u76ee\\u5f55\\u4e2d\\u53bb\\u627e\\u5bfb\\u6587\\u4ef6\\u4e86\\u3002<\\/p>\\n<pre><code>VPATH = src:..\\/headers<\\/code><\\/pre>\\n<p>\\u4e0a\\u9762\\u7684\\u7684\\u5b9a\\u4e49\\u6307\\u5b9a\\u4e24\\u4e2a\\u76ee\\u5f55\\uff0c<code>src<\\/code>\\u548c<code>..\\/headers<\\/code>\\uff0cmake \\u4f1a\\u6309\\u7167\\u8fd9\\u4e2a\\u987a\\u5e8f\\u8fdb\\u884c\\u641c\\u7d22\\u3002\\u76ee\\u5f55\\u7531\\u201c\\u5192\\u53f7\\u201d\\u5206\\u9694\\u3002\\uff08\\u5f53\\u7136\\uff0c\\u5f53\\u524d\\u76ee\\u5f55\\u6c38\\u8fdc\\u662f\\u6700\\u9ad8\\u4f18\\u5148\\u641c\\u7d22\\u7684\\u5730\\u65b9\\uff09<\\/p>\\n<p>\\u53e6\\u4e00\\u4e2a\\u8bbe\\u7f6e\\u6587\\u4ef6\\u641c\\u7d22\\u8def\\u5f84\\u7684\\u65b9\\u6cd5\\u662f\\u4f7f\\u7528 make \\u7684<code>vpath<\\/code>\\u5173\\u952e\\u5b57\\uff08\\u6ce8\\u610f\\uff0c\\u5b83\\u662f\\u5168\\u5c0f\\u5199\\u7684\\uff09\\uff0c\\u8fd9\\u4e0d\\u662f\\u53d8\\u91cf\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2amake\\u7684\\u5173\\u952e\\u5b57\\uff0c\\u8fd9\\u548c\\u4e0a\\u9762\\u63d0\\u5230\\u7684\\u90a3\\u4e2a<code>VPATH<\\/code>\\u53d8\\u91cf\\u5f88\\u7c7b\\u4f3c\\uff0c\\u4f46\\u662f\\u5b83\\u66f4\\u4e3a\\u7075\\u6d3b\\u3002\\u5b83\\u53ef\\u4ee5\\u6307\\u5b9a\\u4e0d\\u540c\\u7684\\u6587\\u4ef6\\u5728\\u4e0d\\u540c\\u7684\\u641c\\u7d22\\u76ee\\u5f55\\u4e2d\\u3002\\u8fd9\\u662f\\u4e00\\u4e2a\\u5f88\\u7075\\u6d3b\\u7684\\u529f\\u80fd\\u3002\\u5b83\\u7684\\u4f7f\\u7528\\u65b9\\u6cd5\\u6709\\u4e09\\u79cd\\uff1a<\\/p>\\n<ol>\\n<li>\\n<p>vpath <pattern>; <directories>;<\\/p>\\n<p>\\u4e3a\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u6587\\u4ef6\\u6307\\u5b9a\\u641c\\u7d22\\u76ee\\u5f55<directories>;\\u3002<\\/p>\\n<\\/li>\\n<li>\\n<p>vpath <pattern>;<\\/p>\\n<p>\\u6e05\\u9664\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u6587\\u4ef6\\u7684\\u641c\\u7d22\\u76ee\\u5f55\\u3002<\\/p>\\n<\\/li>\\n<li>\\n<p>vpath<\\/p>\\n<p>\\u6e05\\u9664\\u6240\\u6709\\u5df2\\u88ab\\u8bbe\\u7f6e\\u597d\\u4e86\\u7684\\u6587\\u4ef6\\u641c\\u7d22\\u76ee\\u5f55\\u3002<\\/p>\\n<\\/li>\\n<\\/ol>\\n<p>vapth \\u4f7f\\u7528\\u65b9\\u6cd5\\u4e2d\\u7684<pattern>;\\u9700\\u8981\\u5305\\u542b\\u201c%\\u201d\\u5b57\\u7b26\\u3002\\u201c%\\u201d\\u7684\\u610f\\u601d\\u662f\\u5339\\u914d\\u96f6\\u6216\\u82e5\\u5e72\\u5b57\\u7b26\\uff0c\\u4f8b\\u5982\\uff0c\\u201c%.h\\u201d\\u8868\\u793a\\u6240\\u6709\\u4ee5\\u201c.h\\u201d\\u7ed3\\u5c3e\\u7684\\u6587\\u4ef6\\u3002<pattern>;\\u6307\\u5b9a\\u4e86\\u8981\\u641c\\u7d22\\u7684\\u6587\\u4ef6\\u96c6\\uff0c\\u800c<directories>;\\u5219\\u6307\\u5b9a\\u4e86<pattern>;\\u7684\\u6587\\u4ef6\\u96c6\\u7684\\u641c\\u7d22\\u7684\\u76ee\\u5f55\\u3002\\u4f8b\\u5982\\uff1a<\\/p>\\n<pre><code>vpath %.h ..\\/headers<\\/code><\\/pre>\\n<p>\\u8be5\\u8bed\\u53e5\\u8868\\u793a\\uff0c\\u8981\\u6c42make\\u5728\\u201c..\\/headers\\u201d\\u76ee\\u5f55\\u4e0b\\u641c\\u7d22\\u6240\\u6709\\u4ee5\\u201c.h\\u201d\\u7ed3\\u5c3e\\u7684\\u6587\\u4ef6\\u3002\\uff08\\u5982\\u679c\\u67d0\\u6587\\u4ef6\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u6ca1\\u6709\\u627e\\u5230\\u7684\\u8bdd\\uff09<\\/p>\\n<p>\\u6211\\u4eec\\u53ef\\u4ee5\\u8fde\\u7eed\\u5730\\u4f7f\\u7528vpath\\u8bed\\u53e5\\uff0c\\u4ee5\\u6307\\u5b9a\\u4e0d\\u540c\\u641c\\u7d22\\u7b56\\u7565\\u3002\\u5982\\u679c\\u8fde\\u7eed\\u7684vpath\\u8bed\\u53e5\\u4e2d\\u51fa\\u73b0\\u4e86\\u76f8\\u540c\\u7684<pattern>;\\uff0c\\u6216\\u662f\\u88ab\\u91cd\\u590d\\u4e86\\u7684<pattern>;\\uff0c\\u90a3\\u4e48\\uff0cmake\\u4f1a\\u6309\\u7167vpath\\u8bed\\u53e5\\u7684\\u5148\\u540e\\u987a\\u5e8f\\u6765\\u6267\\u884c\\u641c\\u7d22\\u3002\\u5982\\uff1a<\\/p>\\n<pre><code>vpath %.c foo\\nvpath %   blish\\nvpath %.c bar<\\/code><\\/pre>\\n<p>\\u5176\\u8868\\u793a\\u201c.c\\u201d\\u7ed3\\u5c3e\\u7684\\u6587\\u4ef6\\uff0c\\u5148\\u5728\\u201cfoo\\u201d\\u76ee\\u5f55\\uff0c\\u7136\\u540e\\u662f\\u201cblish\\u201d\\uff0c\\u6700\\u540e\\u662f\\u201cbar\\u201d\\u76ee\\u5f55\\u3002<\\/p>\\n<pre><code>vpath %.c foo:bar\\nvpath %   blish<\\/code><\\/pre>\\n<p>\\u800c\\u4e0a\\u9762\\u7684\\u8bed\\u53e5\\u5219\\u8868\\u793a\\u201c.c\\u201d\\u7ed3\\u5c3e\\u7684\\u6587\\u4ef6\\uff0c\\u5148\\u5728\\u201cfoo\\u201d\\u76ee\\u5f55\\uff0c\\u7136\\u540e\\u662f\\u201cbar\\u201d\\u76ee\\u5f55\\uff0c\\u6700\\u540e\\u624d\\u662f\\u201cblish\\u201d\\u76ee\\u5f55\\u3002<\\/p>\\n<h5>\\u4e94\\u3001\\u4f2a\\u76ee\\u6807<\\/h5>\\n<p>\\u6700\\u65e9\\u5148\\u7684\\u4e00\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c\\u6211\\u4eec\\u63d0\\u5230\\u8fc7\\u4e00\\u4e2a\\u201cclean\\u201d\\u7684\\u76ee\\u6807\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\uff0c<\\/p>\\n<pre><code>clean:\\n    rm *.o temp<\\/code><\\/pre>\\n<p>\\u6b63\\u50cf\\u6211\\u4eec\\u524d\\u9762\\u4f8b\\u5b50\\u4e2d\\u7684\\u201cclean\\u201d\\u4e00\\u6837\\uff0c\\u5373\\u7136\\u6211\\u4eec\\u751f\\u6210\\u4e86\\u8bb8\\u591a\\u6587\\u4ef6\\u7f16\\u8bd1\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u4e5f\\u5e94\\u8be5\\u63d0\\u4f9b\\u4e00\\u4e2a\\u6e05\\u9664\\u5b83\\u4eec\\u7684\\u201c\\u76ee\\u6807\\u201d\\u4ee5\\u5907\\u5b8c\\u6574\\u5730\\u91cd\\u7f16\\u8bd1\\u800c\\u7528\\u3002 \\uff08\\u4ee5\\u201cmake clean\\u201d\\u6765\\u4f7f\\u7528\\u8be5\\u76ee\\u6807\\uff09<\\/p>\\n<p>\\u56e0\\u4e3a\\uff0c\\u6211\\u4eec\\u5e76\\u4e0d\\u751f\\u6210\\u201cclean\\u201d\\u8fd9\\u4e2a\\u6587\\u4ef6\\u3002\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u5e76\\u4e0d\\u662f\\u4e00\\u4e2a\\u6587\\u4ef6\\uff0c\\u53ea\\u662f\\u4e00\\u4e2a\\u6807\\u7b7e\\uff0c\\u7531\\u4e8e\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u4e0d\\u662f\\u6587\\u4ef6\\uff0c\\u6240\\u4ee5make\\u65e0\\u6cd5\\u751f\\u6210\\u5b83\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u548c\\u51b3\\u5b9a\\u5b83\\u662f\\u5426\\u8981\\u6267\\u884c\\u3002\\u6211\\u4eec\\u53ea\\u6709\\u901a\\u8fc7\\u663e\\u793a\\u5730\\u6307\\u660e\\u8fd9\\u4e2a\\u201c\\u76ee\\u6807\\u201d\\u624d\\u80fd\\u8ba9\\u5176\\u751f\\u6548\\u3002\\u5f53\\u7136\\uff0c\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u7684\\u53d6\\u540d\\u4e0d\\u80fd\\u548c\\u6587\\u4ef6\\u540d\\u91cd\\u540d\\uff0c\\u4e0d\\u7136\\u5176\\u5c31\\u5931\\u53bb\\u4e86\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u7684\\u610f\\u4e49\\u4e86\\u3002<\\/p>\\n<p>\\u5f53\\u7136\\uff0c\\u4e3a\\u4e86\\u907f\\u514d\\u548c\\u6587\\u4ef6\\u91cd\\u540d\\u7684\\u8fd9\\u79cd\\u60c5\\u51b5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u4e00\\u4e2a\\u7279\\u6b8a\\u7684\\u6807\\u8bb0\\u201c.PHONY\\u201d\\u6765\\u663e\\u793a\\u5730\\u6307\\u660e\\u4e00\\u4e2a\\u76ee\\u6807\\u662f\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\uff0c\\u5411make\\u8bf4\\u660e\\uff0c\\u4e0d\\u7ba1\\u662f\\u5426\\u6709\\u8fd9\\u4e2a\\u6587\\u4ef6\\uff0c\\u8fd9\\u4e2a\\u76ee\\u6807\\u5c31\\u662f\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u3002<\\/p>\\n<pre><code>.PHONY : clean<\\/code><\\/pre>\\n<p>\\u53ea\\u8981\\u6709\\u8fd9\\u4e2a\\u58f0\\u660e\\uff0c\\u4e0d\\u7ba1\\u662f\\u5426\\u6709\\u201cclean\\u201d\\u6587\\u4ef6\\uff0c\\u8981\\u8fd0\\u884c\\u201cclean\\u201d\\u8fd9\\u4e2a\\u76ee\\u6807\\uff0c\\u53ea\\u6709<code>make clean<\\/code>\\u8fd9\\u6837\\u3002\\u4e8e\\u662f\\u6574\\u4e2a\\u8fc7\\u7a0b\\u53ef\\u4ee5\\u8fd9\\u6837\\u5199\\uff1a<\\/p>\\n<pre><code>.PHONY: clean\\nclean:\\n    rm *.o temp<\\/code><\\/pre>\\n<p>\\u4f2a\\u76ee\\u6807\\u4e00\\u822c\\u6ca1\\u6709\\u4f9d\\u8d56\\u7684\\u6587\\u4ef6\\u3002\\u4f46\\u662f\\uff0c\\u6211\\u4eec\\u4e5f\\u53ef\\u4ee5\\u4e3a\\u4f2a\\u76ee\\u6807\\u6307\\u5b9a\\u6240\\u4f9d\\u8d56\\u7684\\u6587\\u4ef6\\u3002\\u4f2a\\u76ee\\u6807\\u540c\\u6837\\u53ef\\u4ee5\\u4f5c\\u4e3a\\u201c\\u9ed8\\u8ba4\\u76ee\\u6807\\u201d\\uff0c\\u53ea\\u8981\\u5c06\\u5176\\u653e\\u5728\\u7b2c\\u4e00\\u4e2a\\u3002\\u4e00\\u4e2a\\u793a\\u4f8b\\u5c31\\u662f\\uff0c\\u5982\\u679c\\u4f60\\u7684Makefile\\u9700\\u8981\\u4e00\\u53e3\\u6c14\\u751f\\u6210\\u82e5\\u5e72\\u4e2a\\u53ef\\u6267\\u884c\\u6587\\u4ef6\\uff0c\\u4f46\\u4f60\\u53ea\\u60f3\\u7b80\\u5355\\u5730\\u6572\\u4e00\\u4e2amake\\u5b8c\\u4e8b\\uff0c\\u5e76\\u4e14\\uff0c\\u6240\\u6709\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\u90fd\\u5199\\u5728\\u4e00\\u4e2aMakefile\\u4e2d\\uff0c\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u8fd9\\u4e2a\\u7279\\u6027\\uff1a<\\/p>\\n<pre><code>all : prog1 prog2 prog3\\n.PHONY : all\\n\\nprog1 : prog1.o utils.o\\n    cc -o prog1 prog1.o utils.o\\n\\nprog2 : prog2.o\\n    cc -o prog2 prog2.o\\n\\nprog3 : prog3.o sort.o utils.o\\n    cc -o prog3 prog3.o sort.o utils.o<\\/code><\\/pre>\\n<p>\\u6211\\u4eec\\u77e5\\u9053\\uff0cMakefile\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u76ee\\u6807\\u4f1a\\u88ab\\u4f5c\\u4e3a\\u5176\\u9ed8\\u8ba4\\u76ee\\u6807\\u3002\\u6211\\u4eec\\u58f0\\u660e\\u4e86\\u4e00\\u4e2a\\u201call\\u201d\\u7684\\u4f2a\\u76ee\\u6807\\uff0c\\u5176\\u4f9d\\u8d56\\u4e8e\\u5176\\u5b83\\u4e09\\u4e2a\\u76ee\\u6807\\u3002\\u7531\\u4e8e\\u4f2a\\u76ee\\u6807\\u7684\\u7279\\u6027\\u662f\\uff0c\\u603b\\u662f\\u88ab\\u6267\\u884c\\u7684\\uff0c\\u6240\\u4ee5\\u5176\\u4f9d\\u8d56\\u7684\\u90a3\\u4e09\\u4e2a\\u76ee\\u6807\\u5c31\\u603b\\u662f\\u4e0d\\u5982\\u201call\\u201d\\u8fd9\\u4e2a\\u76ee\\u6807\\u65b0\\u3002\\u6240\\u4ee5\\uff0c\\u5176\\u5b83\\u4e09\\u4e2a\\u76ee\\u6807\\u7684\\u89c4\\u5219\\u603b\\u662f\\u4f1a\\u88ab\\u51b3\\u8bae\\u3002\\u4e5f\\u5c31\\u8fbe\\u5230\\u4e86\\u6211\\u4eec\\u4e00\\u53e3\\u6c14\\u751f\\u6210\\u591a\\u4e2a\\u76ee\\u6807\\u7684\\u76ee\\u7684\\u3002\\u201c.PHONY : all\\u201d\\u58f0\\u660e\\u4e86\\u201call\\u201d\\u8fd9\\u4e2a\\u76ee\\u6807\\u4e3a\\u201c\\u4f2a\\u76ee\\u6807\\u201d\\u3002<\\/p>\\n<p>\\u968f\\u4fbf\\u63d0\\u4e00\\u53e5\\uff0c\\u4ece\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u6211\\u4eec\\u53ef\\u4ee5\\u770b\\u51fa\\uff0c\\u76ee\\u6807\\u4e5f\\u53ef\\u4ee5\\u6210\\u4e3a\\u4f9d\\u8d56\\u3002\\u6240\\u4ee5\\uff0c\\u4f2a\\u76ee\\u6807\\u540c\\u6837\\u4e5f\\u53ef\\u6210\\u4e3a\\u4f9d\\u8d56\\u3002\\u770b\\u4e0b\\u9762\\u7684\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>.PHONY: cleanall cleanobj cleandiff\\n\\ncleanall : cleanobj cleandiff\\n    rm program\\n\\ncleanobj :\\n    rm *.o\\n\\ncleandiff :\\n    rm *.diff<\\/code><\\/pre>\\n<p>\\u201cmake clean\\u201d\\u5c06\\u6e05\\u9664\\u6240\\u6709\\u8981\\u88ab\\u6e05\\u9664\\u7684\\u6587\\u4ef6\\u3002\\u201ccleanobj\\u201d\\u548c\\u201ccleandiff\\u201d\\u8fd9\\u4e24\\u4e2a\\u4f2a\\u76ee\\u6807\\u6709\\u70b9\\u50cf\\u201c\\u5b50\\u7a0b\\u5e8f\\u201d\\u7684\\u610f\\u601d\\u3002\\u6211\\u4eec\\u53ef\\u4ee5\\u8f93\\u5165\\u201cmake cleanall\\u201d\\u548c\\u201cmake cleanobj\\u201d\\u548c\\u201cmake cleandiff\\u201d\\u547d\\u4ee4\\u6765\\u8fbe\\u5230\\u6e05\\u9664\\u4e0d\\u540c\\u79cd\\u7c7b\\u6587\\u4ef6\\u7684\\u76ee\\u7684\\u3002<\\/p>\\n<h5>\\u516d\\u3001\\u591a\\u76ee\\u6807<\\/h5>\\n<p>Makefile\\u7684\\u89c4\\u5219\\u4e2d\\u7684\\u76ee\\u6807\\u53ef\\u4ee5\\u4e0d\\u6b62\\u4e00\\u4e2a\\uff0c\\u5176\\u652f\\u6301\\u591a\\u76ee\\u6807\\uff0c\\u6709\\u53ef\\u80fd\\u6211\\u4eec\\u7684\\u591a\\u4e2a\\u76ee\\u6807\\u540c\\u65f6\\u4f9d\\u8d56\\u4e8e\\u4e00\\u4e2a\\u6587\\u4ef6\\uff0c\\u5e76\\u4e14\\u5176\\u751f\\u6210\\u7684\\u547d\\u4ee4\\u5927\\u4f53\\u7c7b\\u4f3c\\u3002\\u4e8e\\u662f\\u6211\\u4eec\\u5c31\\u80fd\\u628a\\u5176\\u5408\\u5e76\\u8d77\\u6765\\u3002\\u5f53\\u7136\\uff0c\\u591a\\u4e2a\\u76ee\\u6807\\u7684\\u751f\\u6210\\u89c4\\u5219\\u7684\\u6267\\u884c\\u547d\\u4ee4\\u662f\\u540c\\u4e00\\u4e2a\\uff0c\\u8fd9\\u53ef\\u80fd\\u4f1a\\u53ef\\u6211\\u4eec\\u5e26\\u6765\\u9ebb\\u70e6\\uff0c\\u4e0d\\u8fc7\\u597d\\u5728\\u6211\\u4eec\\u7684\\u53ef\\u4ee5\\u4f7f\\u7528\\u4e00\\u4e2a\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\u201c$@\\u201d\\uff08\\u5173\\u4e8e\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff0c\\u5c06\\u5728\\u540e\\u9762\\u8bb2\\u8ff0\\uff09\\uff0c\\u8fd9\\u4e2a\\u53d8\\u91cf\\u8868\\u793a\\u7740\\u76ee\\u524d\\u89c4\\u5219\\u4e2d\\u6240\\u6709\\u7684\\u76ee\\u6807\\u7684\\u96c6\\u5408\\uff0c\\u8fd9\\u6837\\u8bf4\\u53ef\\u80fd\\u5f88\\u62bd\\u8c61\\uff0c\\u8fd8\\u662f\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\u5427\\u3002<\\/p>\\n<pre><code>bigoutput littleoutput : text.g\\n    generate text.g -$(subst output,,$@) &gt;; $@\\n\\n\\u4e0a\\u8ff0\\u89c4\\u5219\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\nbigoutput : text.g\\n    generate text.g -big &gt;; bigoutput\\nlittleoutput : text.g\\n    generate text.g -little &gt;; littleoutput<\\/code><\\/pre>\\n<p>\\u5176\\u4e2d\\uff0c-$(subst output,,$@)\\u4e2d\\u7684\\u201c$\\u201d\\u8868\\u793a\\u6267\\u884c\\u4e00\\u4e2aMakefile\\u7684\\u51fd\\u6570\\uff0c\\u51fd\\u6570\\u540d\\u4e3asubst\\uff0c\\u540e\\u9762\\u7684\\u4e3a\\u53c2\\u6570\\u3002\\u5173\\u4e8e\\u51fd\\u6570\\uff0c\\u5c06\\u5728\\u540e\\u9762\\u8bb2\\u8ff0\\u3002\\u8fd9\\u91cc\\u7684\\u8fd9\\u4e2a\\u51fd\\u6570\\u662f\\u622a\\u53d6\\u5b57\\u7b26\\u4e32\\u7684\\u610f\\u601d\\uff0c\\u201c$@\\u201d\\u8868\\u793a\\u76ee\\u6807\\u7684\\u96c6\\u5408\\uff0c\\u5c31\\u50cf\\u4e00\\u4e2a\\u6570\\u7ec4\\uff0c\\u201c$@\\u201d\\u4f9d\\u6b21\\u53d6\\u51fa\\u76ee\\u6807\\uff0c\\u5e76\\u6267\\u4e8e\\u547d\\u4ee4\\u3002<\\/p>\\n<h5>\\u4e03\\u3001\\u9759\\u6001\\u6a21\\u5f0f<\\/h5>\\n<p>\\u9759\\u6001\\u6a21\\u5f0f\\u53ef\\u4ee5\\u66f4\\u52a0\\u5bb9\\u6613\\u5730\\u5b9a\\u4e49\\u591a\\u76ee\\u6807\\u7684\\u89c4\\u5219\\uff0c\\u53ef\\u4ee5\\u8ba9\\u6211\\u4eec\\u7684\\u89c4\\u5219\\u53d8\\u5f97\\u66f4\\u52a0\\u7684\\u6709\\u5f39\\u6027\\u548c\\u7075\\u6d3b\\u3002\\u6211\\u4eec\\u8fd8\\u662f\\u5148\\u6765\\u770b\\u4e00\\u4e0b\\u8bed\\u6cd5\\uff1a<\\/p>\\n<pre><code>&lt;targets ...&gt;;: &lt;target-pattern&gt;;: &lt;prereq-patterns ...&gt;;\\n    &lt;commands&gt;;\\n    ...<\\/code><\\/pre>\\n<p>**targets\\u5b9a\\u4e49\\u4e86\\u4e00\\u7cfb\\u5217\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u53ef\\u4ee5\\u6709\\u901a\\u914d\\u7b26\\u3002\\u662f\\u76ee\\u6807\\u7684\\u4e00\\u4e2a\\u96c6\\u5408\\u3002<\\/p>\\n<p>target-parrtern\\u662f\\u6307\\u660e\\u4e86targets\\u7684\\u6a21\\u5f0f\\uff0c\\u4e5f\\u5c31\\u662f\\u7684\\u76ee\\u6807\\u96c6\\u6a21\\u5f0f\\u3002<\\/p>\\n<p>prereq-parrterns\\u662f\\u76ee\\u6807\\u7684\\u4f9d\\u8d56\\u6a21\\u5f0f\\uff0c\\u5b83\\u5bf9target-parrtern\\u5f62\\u6210\\u7684\\u6a21\\u5f0f\\u518d\\u8fdb\\u884c\\u4e00\\u6b21\\u4f9d\\u8d56\\u76ee\\u6807\\u7684\\u5b9a\\u4e49\\u3002**<\\/p>\\n<p>\\u8fd9\\u6837\\u63cf\\u8ff0\\u8fd9\\u4e09\\u4e2a\\u4e1c\\u897f\\uff0c\\u53ef\\u80fd\\u8fd8\\u662f\\u6ca1\\u6709\\u8bf4\\u6e05\\u695a\\uff0c\\u8fd8\\u662f\\u4e3e\\u4e2a\\u4f8b\\u5b50\\u6765\\u8bf4\\u660e\\u4e00\\u4e0b\\u5427\\u3002\\u5982\\u679c\\u6211\\u4eec\\u7684<target-parrtern>;\\u5b9a\\u4e49\\u6210\\u201c%.o\\u201d\\uff0c\\u610f\\u601d\\u662f\\u6211\\u4eec\\u7684<target>;\\u96c6\\u5408\\u4e2d\\u90fd\\u662f\\u4ee5\\u201c.o\\u201d\\u7ed3\\u5c3e\\u7684\\uff0c\\u800c\\u5982\\u679c\\u6211\\u4eec\\u7684<prereq-parrterns>;\\u5b9a\\u4e49\\u6210\\u201c%.c\\u201d\\uff0c\\u610f\\u601d\\u662f\\u5bf9<target-parrtern>;\\u6240\\u5f62\\u6210\\u7684\\u76ee\\u6807\\u96c6\\u8fdb\\u884c\\u4e8c\\u6b21\\u5b9a\\u4e49\\uff0c\\u5176\\u8ba1\\u7b97\\u65b9\\u6cd5\\u662f\\uff0c\\u53d6<target-parrtern>;\\u6a21\\u5f0f\\u4e2d\\u7684\\u201c%\\u201d\\uff08\\u4e5f\\u5c31\\u662f\\u53bb\\u6389\\u4e86[.o]\\u8fd9\\u4e2a\\u7ed3\\u5c3e\\uff09\\uff0c\\u5e76\\u4e3a\\u5176\\u52a0\\u4e0a[.c]\\u8fd9\\u4e2a\\u7ed3\\u5c3e\\uff0c\\u5f62\\u6210\\u7684\\u65b0\\u96c6\\u5408\\u3002<\\/p>\\n<p>\\u6240\\u4ee5\\uff0c\\u6211\\u4eec\\u7684\\u201c\\u76ee\\u6807\\u6a21\\u5f0f\\u201d\\u6216\\u662f\\u201c\\u4f9d\\u8d56\\u6a21\\u5f0f\\u201d\\u4e2d\\u90fd\\u5e94\\u8be5\\u6709\\u201c%\\u201d\\u8fd9\\u4e2a\\u5b57\\u7b26\\uff0c\\u5982\\u679c\\u4f60\\u7684\\u6587\\u4ef6\\u540d\\u4e2d\\u6709\\u201c%\\u201d\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u53cd\\u659c\\u6760\\u201c\\\\\\u201d\\u8fdb\\u884c\\u8f6c\\u4e49\\uff0c\\u6765\\u6807\\u660e\\u771f\\u5b9e\\u7684\\u201c%\\u201d\\u5b57\\u7b26\\u3002<\\/p>\\n<p>\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>objects = foo.o bar.o\\n\\nall: $(objects)\\n\\n$(objects): %.o: %.c\\n    $(CC) -c $(CFLAGS) $&lt; -o $@<\\/code><\\/pre>\\n<p>\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u4e2d\\uff0c\\u6307\\u660e\\u4e86\\u6211\\u4eec\\u7684\\u76ee\\u6807\\u4ece$object\\u4e2d\\u83b7\\u53d6\\uff0c\\u201c%.o\\u201d\\u8868\\u660e\\u8981\\u6240\\u6709\\u4ee5\\u201c.o\\u201d\\u7ed3\\u5c3e\\u7684\\u76ee\\u6807\\uff0c\\u4e5f\\u5c31\\u662f\\u201cfoo.o bar.o\\u201d\\uff0c\\u4e5f\\u5c31\\u662f\\u53d8\\u91cf$object\\u96c6\\u5408\\u7684\\u6a21\\u5f0f\\uff0c\\u800c\\u4f9d\\u8d56\\u6a21\\u5f0f\\u201c%.c\\u201d\\u5219\\u53d6\\u6a21\\u5f0f\\u201c%.o\\u201d\\u7684\\u201c%\\u201d\\uff0c\\u4e5f\\u5c31\\u662f\\u201cfoo bar\\u201d\\uff0c\\u5e76\\u4e3a\\u5176\\u52a0\\u4e0b\\u201c.c\\u201d\\u7684\\u540e\\u7f00\\uff0c\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u7684\\u4f9d\\u8d56\\u76ee\\u6807\\u5c31\\u662f\\u201cfoo.c bar.c\\u201d\\u3002\\u800c\\u547d\\u4ee4\\u4e2d\\u7684\\u201c$&lt;\\u201d\\u548c\\u201c$@\\u201d\\u5219\\u662f\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff0c\\u201c$&lt;\\u201d\\u8868\\u793a\\u6240\\u6709\\u7684\\u4f9d\\u8d56\\u76ee\\u6807\\u96c6\\uff08\\u4e5f\\u5c31\\u662f\\u201cfoo.c bar.c\\u201d\\uff09\\uff0c\\u201c$@\\u201d\\u8868\\u793a\\u76ee\\u6807\\u96c6\\uff08\\u4e5f\\u5c31\\u662f\\u201cfoo.o bar.o\\u201d\\uff09\\u3002\\u4e8e\\u662f\\uff0c\\u4e0a\\u9762\\u7684\\u89c4\\u5219\\u5c55\\u5f00\\u540e\\u7b49\\u4ef7\\u4e8e\\u4e0b\\u9762\\u7684\\u89c4\\u5219\\uff1a<\\/p>\\n<pre><code>foo.o : foo.c\\n        $(CC) -c $(CFLAGS) foo.c -o foo.o\\nbar.o : bar.c\\n        $(CC) -c $(CFLAGS) bar.c -o bar.o<\\/code><\\/pre>\\n<p>\\u8bd5\\u60f3\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684\\u201c%.o\\u201d\\u6709\\u51e0\\u767e\\u4e2a\\uff0c\\u90a3\\u79cd\\u6211\\u4eec\\u53ea\\u8981\\u7528\\u8fd9\\u79cd\\u5f88\\u7b80\\u5355\\u7684\\u201c\\u9759\\u6001\\u6a21\\u5f0f\\u89c4\\u5219\\u201d\\u5c31\\u53ef\\u4ee5\\u5199\\u5b8c\\u4e00\\u5806\\u89c4\\u5219\\uff0c\\u5b9e\\u5728\\u662f\\u592a\\u6709\\u6548\\u7387\\u4e86\\u3002\\u201c\\u9759\\u6001\\u6a21\\u5f0f\\u89c4\\u5219\\u201d\\u7684\\u7528\\u6cd5\\u5f88\\u7075\\u6d3b\\uff0c\\u5982\\u679c\\u7528\\u5f97\\u597d\\uff0c\\u90a3\\u4f1a\\u4e00\\u4e2a\\u5f88\\u5f3a\\u5927\\u7684\\u529f\\u80fd\\u3002\\u518d\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>files = foo.elc bar.o lose.o\\n\\n$(filter %.o,$(files)): %.o: %.c\\n        $(CC) -c $(CFLAGS) $&lt; -o $@\\n$(filter %.elc,$(files)): %.elc: %.el\\n        emacs -f batch-byte-compile $&lt;<\\/code><\\/pre>\\n<p>$(filter %.o,$(files))\\u8868\\u793a\\u8c03\\u7528Makefile\\u7684filter\\u51fd\\u6570\\uff0c\\u8fc7\\u6ee4\\u201c$filter\\u201d\\u96c6\\uff0c\\u53ea\\u8981\\u5176\\u4e2d\\u6a21\\u5f0f\\u4e3a\\u201c%.o\\u201d\\u7684\\u5185\\u5bb9\\u3002\\u5176\\u7684\\u5b83\\u5185\\u5bb9\\uff0c\\u6211\\u5c31\\u4e0d\\u7528\\u591a\\u8bf4\\u4e86\\u5427\\u3002\\u8fd9\\u4e2a\\u4f8b\\u5b57\\u5c55\\u793a\\u4e86Makefile\\u4e2d\\u66f4\\u5927\\u7684\\u5f39\\u6027\\u3002<\\/p>\\n<h5>\\u516b\\u3001\\u81ea\\u52a8\\u751f\\u6210\\u4f9d\\u8d56\\u6027<\\/h5>\\n<p>\\u5728Makefile\\u4e2d\\uff0c\\u6211\\u4eec\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u53ef\\u80fd\\u4f1a\\u9700\\u8981\\u5305\\u542b\\u4e00\\u7cfb\\u5217\\u7684\\u5934\\u6587\\u4ef6\\uff0c\\u6bd4\\u5982\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684main.c\\u4e2d\\u6709\\u4e00\\u53e5\\u201c#include &quot;defs.h&quot;\\u201d\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u5e94\\u8be5\\u662f\\uff1a<\\/p>\\n<pre><code>main.o : main.c defs.h<\\/code><\\/pre>\\n<p>\\u4f46\\u662f\\uff0c\\u5982\\u679c\\u662f\\u4e00\\u4e2a\\u6bd4\\u8f83\\u5927\\u578b\\u7684\\u5de5\\u7a0b\\uff0c\\u4f60\\u5fc5\\u9700\\u6e05\\u695a\\u54ea\\u4e9bC\\u6587\\u4ef6\\u5305\\u542b\\u4e86\\u54ea\\u4e9b\\u5934\\u6587\\u4ef6\\uff0c\\u5e76\\u4e14\\uff0c\\u4f60\\u5728\\u52a0\\u5165\\u6216\\u5220\\u9664\\u5934\\u6587\\u4ef6\\u65f6\\uff0c\\u4e5f\\u9700\\u8981\\u5c0f\\u5fc3\\u5730\\u4fee\\u6539Makefile\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u5f88\\u6ca1\\u6709\\u7ef4\\u62a4\\u6027\\u7684\\u5de5\\u4f5c\\u3002<strong>\\u4e3a\\u4e86\\u907f\\u514d\\u8fd9\\u79cd\\u7e41\\u91cd\\u800c\\u53c8\\u5bb9\\u6613\\u51fa\\u9519\\u7684\\u4e8b\\u60c5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528C\\/C++\\u7f16\\u8bd1\\u7684\\u4e00\\u4e2a\\u529f\\u80fd\\u3002\\u5927\\u591a\\u6570\\u7684C\\/C++\\u7f16\\u8bd1\\u5668\\u90fd\\u652f\\u6301\\u4e00\\u4e2a\\u201c-M\\u201d\\u7684\\u9009\\u9879\\uff0c\\u5373\\u81ea\\u52a8\\u627e\\u5bfb\\u6e90\\u6587\\u4ef6\\u4e2d\\u5305\\u542b\\u7684\\u5934\\u6587\\u4ef6\\uff0c\\u5e76\\u751f\\u6210\\u4e00\\u4e2a\\u4f9d\\u8d56\\u5173\\u7cfb\\u3002<\\/strong>\\u4f8b\\u5982\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u6267\\u884c\\u4e0b\\u9762\\u7684\\u547d\\u4ee4\\uff1a<\\/p>\\n<pre><code>cc -M main.c<\\/code><\\/pre>\\n<p>\\u5176\\u8f93\\u51fa\\u662f\\uff1a<\\/p>\\n<pre><code>main.o : main.c defs.h<\\/code><\\/pre>\\n<p>\\u4e8e\\u662f\\u7531\\u7f16\\u8bd1\\u5668\\u81ea\\u52a8\\u751f\\u6210\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u8fd9\\u6837\\u4e00\\u6765\\uff0c\\u4f60\\u5c31\\u4e0d\\u5fc5\\u518d\\u624b\\u52a8\\u4e66\\u5199\\u82e5\\u5e72\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u800c\\u7531\\u7f16\\u8bd1\\u5668\\u81ea\\u52a8\\u751f\\u6210\\u4e86\\u3002\\u9700\\u8981\\u63d0\\u9192\\u4e00\\u53e5\\u7684\\u662f\\uff0c<strong>\\u5982\\u679c\\u4f60\\u4f7f\\u7528GNU\\u7684C\\/C++\\u7f16\\u8bd1\\u5668\\uff0c\\u4f60\\u5f97\\u7528\\u201c-MM\\u201d\\u53c2\\u6570<\\/strong>\\uff0c\\u4e0d\\u7136\\uff0c\\u201c-M\\u201d\\u53c2\\u6570\\u4f1a\\u628a\\u4e00\\u4e9b\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u4e5f\\u5305\\u542b\\u8fdb\\u6765\\u3002<\\/p>\\n<p>gcc -M main.c\\u7684\\u8f93\\u51fa\\u662f\\uff1a<\\/p>\\n<pre><code>main.o: main.c defs.h \\/usr\\/include\\/stdio.h \\/usr\\/include\\/features.h \\\\\\n    \\/usr\\/include\\/sys\\/cdefs.h \\/usr\\/include\\/gnu\\/stubs.h \\\\\\n    \\/usr\\/lib\\/gcc-lib\\/i486-suse-linux\\/2.95.3\\/include\\/stddef.h \\\\\\n    \\/usr\\/include\\/bits\\/types.h \\/usr\\/include\\/bits\\/pthreadtypes.h \\\\\\n    \\/usr\\/include\\/bits\\/sched.h \\/usr\\/include\\/libio.h \\\\\\n    \\/usr\\/include\\/_G_config.h \\/usr\\/include\\/wchar.h \\\\\\n    \\/usr\\/include\\/bits\\/wchar.h \\/usr\\/include\\/gconv.h \\\\\\n    \\/usr\\/lib\\/gcc-lib\\/i486-suse-linux\\/2.95.3\\/include\\/stdarg.h \\\\\\n    \\/usr\\/include\\/bits\\/stdio_lim.h<\\/code><\\/pre>\\n<p>gcc -MM main.c\\u7684\\u8f93\\u51fa\\u5219\\u662f\\uff1a<\\/p>\\n<pre><code>main.o: main.c defs.h<\\/code><\\/pre>\\n<p>\\u90a3\\u4e48\\uff0c\\u7f16\\u8bd1\\u5668\\u7684\\u8fd9\\u4e2a\\u529f\\u80fd\\u5982\\u4f55\\u4e0e\\u6211\\u4eec\\u7684Makefile\\u8054\\u7cfb\\u5728\\u4e00\\u8d77\\u5462\\u3002\\u56e0\\u4e3a\\u8fd9\\u6837\\u4e00\\u6765\\uff0c\\u6211\\u4eec\\u7684Makefile\\u4e5f\\u8981\\u6839\\u636e\\u8fd9\\u4e9b\\u6e90\\u6587\\u4ef6\\u91cd\\u65b0\\u751f\\u6210\\uff0c\\u8ba9Makefile\\u81ea\\u5df2\\u4f9d\\u8d56\\u4e8e\\u6e90\\u6587\\u4ef6\\uff1f\\u8fd9\\u4e2a\\u529f\\u80fd\\u5e76\\u4e0d\\u73b0\\u5b9e\\uff0c\\u4e0d\\u8fc7\\u6211\\u4eec\\u53ef\\u4ee5\\u6709\\u5176\\u5b83\\u624b\\u6bb5\\u6765\\u8fc2\\u56de\\u5730\\u5b9e\\u73b0\\u8fd9\\u4e00\\u529f\\u80fd\\u3002GNU\\u7ec4\\u7ec7\\u5efa\\u8bae\\u628a\\u7f16\\u8bd1\\u5668\\u4e3a\\u6bcf\\u4e00\\u4e2a\\u6e90\\u6587\\u4ef6\\u7684\\u81ea\\u52a8\\u751f\\u6210\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u653e\\u5230\\u4e00\\u4e2a\\u6587\\u4ef6\\u4e2d\\uff0c\\u4e3a\\u6bcf\\u4e00\\u4e2a\\u201cname.c\\u201d\\u7684\\u6587\\u4ef6\\u90fd\\u751f\\u6210\\u4e00\\u4e2a\\u201cname.d\\u201d\\u7684Makefile\\u6587\\u4ef6\\uff0c[.d]\\u6587\\u4ef6\\u4e2d\\u5c31\\u5b58\\u653e\\u5bf9\\u5e94[.c]\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u3002<\\/p>\\n<p>\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5199\\u51fa[.c]\\u6587\\u4ef6\\u548c[.d]\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u5e76\\u8ba9make\\u81ea\\u52a8\\u66f4\\u65b0\\u6216\\u81ea\\u6210[.d]\\u6587\\u4ef6\\uff0c\\u5e76\\u628a\\u5176\\u5305\\u542b\\u5728\\u6211\\u4eec\\u7684\\u4e3bMakefile\\u4e2d\\uff0c\\u8fd9\\u6837\\uff0c\\u6211\\u4eec\\u5c31\\u53ef\\u4ee5\\u81ea\\u52a8\\u5316\\u5730\\u751f\\u6210\\u6bcf\\u4e2a\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u4e86\\u3002<\\/p>\\n<p>\\u8fd9\\u91cc\\uff0c\\u6211\\u4eec\\u7ed9\\u51fa\\u4e86\\u4e00\\u4e2a\\u6a21\\u5f0f\\u89c4\\u5219\\u6765\\u4ea7\\u751f[.d]\\u6587\\u4ef6\\uff1a<\\/p>\\n<pre><code>%.d: %.c\\n    @set -e; rm -f $@; \\\\\\n    $(CC) -M $(CPPFLAGS) $&lt; &gt;; $@.$$$$; \\\\\\n    sed \'s,\\\\($*\\\\)\\\\.o[ :]*,\\\\1.o $@ : ,g\' &lt; $@.$$$$ &gt;; $@; \\\\\\n    rm -f $@.$$$$<\\/code><\\/pre>\\n<p>\\u8fd9\\u4e2a\\u89c4\\u5219\\u7684\\u610f\\u601d\\u662f\\uff0c\\u6240\\u6709\\u7684[.d]\\u6587\\u4ef6\\u4f9d\\u8d56\\u4e8e[.c]\\u6587\\u4ef6\\uff0c\\u201crm -f $@\\u201d\\u7684\\u610f\\u601d\\u662f\\u5220\\u9664\\u6240\\u6709\\u7684\\u76ee\\u6807\\uff0c\\u4e5f\\u5c31\\u662f[.d]\\u6587\\u4ef6\\uff0c\\u7b2c\\u4e8c\\u884c\\u7684\\u610f\\u601d\\u662f\\uff0c\\u4e3a\\u6bcf\\u4e2a\\u4f9d\\u8d56\\u6587\\u4ef6\\u201c$&lt;\\u201d\\uff0c\\u4e5f\\u5c31\\u662f[.c]\\u6587\\u4ef6\\u751f\\u6210\\u4f9d\\u8d56\\u6587\\u4ef6\\uff0c\\u201c$@\\u201d\\u8868\\u793a\\u6a21\\u5f0f\\u201c%.d\\u201d\\u6587\\u4ef6\\uff0c\\u5982\\u679c\\u6709\\u4e00\\u4e2aC\\u6587\\u4ef6\\u662fname.c\\uff0c\\u90a3\\u4e48\\u201c%\\u201d\\u5c31\\u662f\\u201cname\\u201d\\uff0c\\u201c$$$$\\u201d\\u610f\\u4e3a\\u4e00\\u4e2a\\u968f\\u673a\\u7f16\\u53f7\\uff0c\\u7b2c\\u4e8c\\u884c\\u751f\\u6210\\u7684\\u6587\\u4ef6\\u6709\\u53ef\\u80fd\\u662f\\u201cname.d.12345\\u201d\\uff0c\\u7b2c\\u4e09\\u884c\\u4f7f\\u7528sed\\u547d\\u4ee4\\u505a\\u4e86\\u4e00\\u4e2a\\u66ff\\u6362\\uff0c\\u5173\\u4e8esed\\u547d\\u4ee4\\u7684\\u7528\\u6cd5\\u8bf7\\u53c2\\u770b\\u76f8\\u5173\\u7684\\u4f7f\\u7528\\u6587\\u6863\\u3002\\u7b2c\\u56db\\u884c\\u5c31\\u662f\\u5220\\u9664\\u4e34\\u65f6\\u6587\\u4ef6\\u3002<\\/p>\\n<p>\\u603b\\u800c\\u8a00\\u4e4b\\uff0c\\u8fd9\\u4e2a\\u6a21\\u5f0f\\u8981\\u505a\\u7684\\u4e8b\\u5c31\\u662f\\u5728\\u7f16\\u8bd1\\u5668\\u751f\\u6210\\u7684\\u4f9d\\u8d56\\u5173\\u7cfb\\u4e2d\\u52a0\\u5165[.d]\\u6587\\u4ef6\\u7684\\u4f9d\\u8d56\\uff0c\\u5373\\u628a\\u4f9d\\u8d56\\u5173\\u7cfb\\uff1a<\\/p>\\n<pre><code>main.o : main.c defs.h<\\/code><\\/pre>\\n<p>\\u8f6c\\u6210\\uff1a<\\/p>\\n<pre><code>main.o main.d : main.c defs.h<\\/code><\\/pre>\\n<p>\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u7684[.d]\\u6587\\u4ef6\\u4e5f\\u4f1a\\u81ea\\u52a8\\u66f4\\u65b0\\u4e86\\uff0c\\u5e76\\u4f1a\\u81ea\\u52a8\\u751f\\u6210\\u4e86\\uff0c\\u5f53\\u7136\\uff0c\\u4f60\\u8fd8\\u53ef\\u4ee5\\u5728\\u8fd9\\u4e2a[.d]\\u6587\\u4ef6\\u4e2d\\u52a0\\u5165\\u7684\\u4e0d\\u53ea\\u662f\\u4f9d\\u8d56\\u5173\\u7cfb\\uff0c\\u5305\\u62ec\\u751f\\u6210\\u7684\\u547d\\u4ee4\\u4e5f\\u53ef\\u4e00\\u5e76\\u52a0\\u5165\\uff0c\\u8ba9\\u6bcf\\u4e2a[.d]\\u6587\\u4ef6\\u90fd\\u5305\\u542b\\u4e00\\u4e2a\\u5b8c\\u8d56\\u7684\\u89c4\\u5219\\u3002\\u4e00\\u65e6\\u6211\\u4eec\\u5b8c\\u6210\\u8fd9\\u4e2a\\u5de5\\u4f5c\\uff0c\\u63a5\\u4e0b\\u6765\\uff0c\\u6211\\u4eec\\u5c31\\u8981\\u628a\\u8fd9\\u4e9b\\u81ea\\u52a8\\u751f\\u6210\\u7684\\u89c4\\u5219\\u653e\\u8fdb\\u6211\\u4eec\\u7684\\u4e3bMakefile\\u4e2d\\u3002\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528Makefile\\u7684\\u201cinclude\\u201d\\u547d\\u4ee4\\uff0c\\u6765\\u5f15\\u5165\\u522b\\u7684Makefile\\u6587\\u4ef6\\uff08\\u524d\\u9762\\u8bb2\\u8fc7\\uff09\\uff0c\\u4f8b\\u5982\\uff1a<\\/p>\\n<pre><code>sources = foo.c bar.c\\n\\ninclude $(sources:.c=.d)<\\/code><\\/pre>\\n<p>\\u4e0a\\u8ff0\\u8bed\\u53e5\\u4e2d\\u7684\\u201c$(sources:.c=.d)\\u201d\\u4e2d\\u7684\\u201c.c=.d\\u201d\\u7684\\u610f\\u601d\\u662f\\u505a\\u4e00\\u4e2a\\u66ff\\u6362\\uff0c\\u628a\\u53d8\\u91cf$(sources)\\u6240\\u6709[.c]\\u7684\\u5b57\\u4e32\\u90fd\\u66ff\\u6362\\u6210[.d]\\uff0c\\u5173\\u4e8e\\u8fd9\\u4e2a\\u201c\\u66ff\\u6362\\u201d\\u7684\\u5185\\u5bb9\\uff0c\\u5728\\u540e\\u9762\\u6211\\u4f1a\\u6709\\u66f4\\u4e3a\\u8be6\\u7ec6\\u7684\\u8bb2\\u8ff0\\u3002\\u5f53\\u7136\\uff0c\\u4f60\\u5f97\\u6ce8\\u610f\\u6b21\\u5e8f\\uff0c\\u56e0\\u4e3ainclude\\u662f\\u6309\\u6b21\\u6765\\u8f7d\\u5165\\u6587\\u4ef6\\uff0c\\u6700\\u5148\\u8f7d\\u5165\\u7684[.d]\\u6587\\u4ef6\\u4e2d\\u7684\\u76ee\\u6807\\u4f1a\\u6210\\u4e3a\\u9ed8\\u8ba4\\u76ee\\u6807\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => 'makefile书写规则',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 38,
                'published_at' => '2020-09-20 14:51:00',
                'created_at' => '2020-09-20 06:47:36',
                'updated_at' => '2022-01-09 13:02:03',
                'deleted_at' => NULL,
            ),
            4 => 
            array (
                'id' => 5,
                'category_id' => 4,
                'collection_id' => 1,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'c-go-3q9il',
                'title' => '【C vs Go】1：C 与 Go 的起源与语言特性',
                'subtitle' => '现代C语言的诞生',
            'content' => '{"raw":"### \\u5386\\u53f2\\n\\n1969\\u5e74\\uff0c\\u80af\\u00b7\\u6c64\\u666e\\u900a\\uff08Ken Thompson\\uff09\\u548c\\u4e39\\u5c3c\\u65af\\u00b7\\u91cc\\u5947\\uff08Dennis Ritchie\\uff09\\u5728\\u8d1d\\u5c14\\u5b9e\\u9a8c\\u5ba4\\u7684\\u8ba1\\u7b97\\u79d1\\u5b66\\u7814\\u7a76\\u4e2d\\u5fc3\\u91cc\\u5f00\\u53d1\\u51fa\\u4e86 Unix \\u64cd\\u4f5c\\u7cfb\\u7edf\\uff0c\\u4e0e\\u6b64\\u540c\\u65f6\\u7531\\u4e8e Unix \\u800c\\u884d\\u751f\\u51fa\\u4e86\\u4e00\\u95e8\\u540c\\u6837\\u8d6b\\u8d6b\\u6709\\u540d\\u7684\\u7f16\\u7a0b\\u8bed\\u8a00 -- C \\u8bed\\u8a00\\u3002\\n\\n\\u540e\\u6765\\u7684\\u51e0\\u5341\\u5e74\\u91cc\\uff0c\\u8d1d\\u5c14\\u5b9e\\u9a8c\\u5ba4\\u7684\\u5de8\\u5320\\u4eec\\u5728\\u7ee7\\u7eed\\u7740\\u4e00\\u4e2a\\u53eb Inferno \\u7684\\u9879\\u76ee\\uff0c\\u4ee5\\u53ca\\u4e00\\u4e2a\\u540d\\u4e3a Limbo \\u7684\\u7f16\\u7a0b\\u8bed\\u8a00\\u3002Limbo \\u662f\\u7528\\u4e8e\\u5f00\\u53d1\\u8fd0\\u884c\\u5728\\u5c0f\\u578b\\u8ba1\\u7b97\\u673a\\u4e0a\\u7684\\u5206\\u5e03\\u5f0f\\u5e94\\u7528\\u7684\\u8bed\\u8a00\\uff0c\\u5b83\\u88ab\\u8ba4\\u4e3a\\u662f Go \\u8bed\\u8a00\\u7684\\u524d\\u8eab\\uff0c\\u4e00\\u6765\\u662f\\u540c\\u4e00\\u6279\\u4eba\\u8bbe\\u8ba1\\u7684\\u8bed\\u8a00\\uff0c\\u4e8c\\u6765 Go \\u4ece Limbo \\u8bed\\u8a00\\u4e2d\\u7ee7\\u627f\\u4e86\\u4f17\\u591a\\u4f18\\u79c0\\u7684\\u7279\\u6027\\u3002\\n\\nGo \\u8bed\\u8a00\\u7684\\u7b2c\\u4e00\\u4e2a\\u7248\\u672c\\u57282009\\u5e7411\\u6708\\u6b63\\u5f0f\\u5bf9\\u5916\\u53d1\\u5e03\\uff0c\\u5728\\u6b64\\u540e\\u7684\\u4e24\\u5e74\\u5185\\u5feb\\u901f\\u8fed\\u4ee3\\uff0c\\u53d1\\u5c55\\u8fc5\\u731b\\u3002\\u7b2c\\u4e00\\u4e2a\\u6b63\\u5f0f\\u7248\\u672c\\u7684 Go \\u8bed\\u8a00\\u4e8e2012\\u5e743\\u670828\\u65e5\\u6b63\\u5f0f\\u53d1\\u5e03\\uff0c\\u8ba9Go\\u8bed\\u8a00\\u8fce\\u6765\\u4e86\\u7b2c\\u4e00\\u4e2a\\u5f15\\u4eba\\u77a9\\u76ee\\u7684\\u91cc\\u7a0b\\u7891\\u3002\\n\\n### \\u8bed\\u8a00\\u7279\\u6027\\n\\u7c7b\\u578b\\u7cfb\\u7edf\\u662f\\u4e00\\u95e8\\u7f16\\u7a0b\\u8bed\\u8a00\\u7684\\u5730\\u57fa\\uff0c\\u5b83\\u7684\\u5730\\u4f4d\\u81f3\\u5173\\u91cd\\u8981\\u3002\\u56e0\\u6b64\\uff0c\\u8fd9\\u91cc\\u6211\\u4eec\\u5c06\\u4ece\\u7c7b\\u578b\\u7cfb\\u7edf\\u5165\\u624b\\u4ecb\\u7ecd C \\u4e0e Go \\u8bed\\u8a00\\n\\n\\u987e\\u540d\\u601d\\u4e49\\uff0c\\u7c7b\\u578b\\u7cfb\\u7edf\\u662f\\u6307\\u4e00\\u4e2a\\u8bed\\u8a00\\u7684\\u7c7b\\u578b\\u4f53\\u7cfb\\u7ed3\\u6784\\u3002C \\u4e0e Go\\u8bed\\u8a00\\u7c7b\\u578b\\u7cfb\\u7edf\\u901a\\u5e38\\u5305\\u542b\\u5982\\u4e0b\\u57fa\\u672c\\u5185\\u5bb9\\uff1a\\n\\n#### C \\u8bed\\u8a00\\u7684\\u7c7b\\u578b\\u7cfb\\u7edf\\n![C\\u8bed\\u8a00\\u6570\\u636e\\u7c7b\\u578b.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/17\\/egbnUIpmO2YwsxK3P4awi8635aHChwQIiymzIkDO.png)\\n1. \\u57fa\\u672c\\u7c7b\\u578b\\uff0c\\n * \\t\\u6574\\u578b(short\\u3001int\\u3001long\\u3001long long),\\n * \\t\\u6d6e\\u70b9\\u578b(float\\u3001double\\u3001long double),\\n * \\t\\u5b57\\u7b26\\u578b(char-\\u53ef\\u4ee5\\u5f52\\u6574\\u578b),\\n\\n1. \\u590d\\u5408\\u7c7b\\u578b\\uff0c\\n * \\u6570\\u7ec4\\uff08array\\uff09\\n * \\u7ed3\\u6784\\u4f53\\uff08struct\\uff09\\n * \\u8054\\u5408\\u4f53\\uff08union\\uff09\\n * \\u679a\\u4e3e \\uff08enum\\uff09\\u5ea6\\u7b49\\u540c int )\\n\\t\\t\\n1. \\u6307\\u9488\\u7c7b\\u578b\\n1. \\u7a7a\\u7c7b\\u578b\\n\\n#### Go \\u8bed\\u8a00\\u7684\\u7c7b\\u578b\\u7cfb\\u7edf\\n![Go\\u6570\\u636e\\u7c7b\\u578b.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/17\\/kYhH3JEfw1BLYbFFDahWI80p1rilhJ0gfjGMrDF9.png)\\n1. \\u57fa\\u7840\\u7c7b\\u578b\\n    * \\u5e03\\u5c14\\u7c7b\\u578b\\uff1abool\\n    * \\u6574\\u578b\\uff1aint\\u3001int8\\u3001int16\\u3001int32\\u3001int64\\u3001uint\\u3001uint8\\u3001uint16\\u3001uint32\\u3001uint64\\u3001byte\\n    * \\u6d6e\\u70b9\\u7c7b\\u578b\\uff1afloat32\\u3001float64\\n    * \\u590d\\u6570\\u7c7b\\u578b\\uff1acomplex64\\u3001complex128\\n    * \\u5b57\\u7b26\\u4e32\\uff1astring\\n    * \\u5b57\\u7b26\\u7c7b\\u578b\\uff1arune\\n    * \\u9519\\u8bef\\u7c7b\\u578b\\uff1aerror\\n \\n1. \\u590d\\u5408\\u7c7b\\u578b\\n\\t  * \\u6570\\u7ec4\\uff08array)\\n\\t  * \\u5207\\u7247\\uff08slice\\uff09\\n\\t  * \\u5b57\\u5178\\uff08map\\uff09\\n\\t  * \\u901a\\u9053\\uff08chan\\uff09\\n\\t  * \\u7ed3\\u6784\\u4f53\\uff08struct\\uff09\\n\\t  * \\u6307\\u9488\\uff08pointer\\uff09\\n1. \\u63a5\\u53e3\\uff08interface\\uff09\\n\\n\\u5f88\\u660e\\u663e\\uff0cGo \\u8bed\\u8a00\\u6bd4 C \\u8bed\\u8a00\\u591a\\u4e86\\u4e24\\u9879\\uff1a\\u5bf9\\u8c61\\u4e0e\\u63a5\\u53e3\\u3002\\n\\n\\u8054\\u60f3\\u662f\\u5e2e\\u52a9\\u6211\\u4eec\\u8bb0\\u5fc6\\u7684\\u6700\\u597d\\u65b9\\u6cd5\\u4e4b\\u4e00\\uff0c\\u6240\\u4ee5\\u672c\\u4eba\\u5728\\u5b66\\u4e60Go\\u8bed\\u8a00\\u65f6\\uff0c\\u987a\\u5e26\\u5bf9\\u6bd4C\\u8bed\\u8a00\\uff0c\\u5e0c\\u671b\\u501f\\u6b64\\u6765\\u628aGo\\u5b66\\u5f97\\u66f4\\u6df1\\u523b\\u3002Go\\u88ab\\u8a89\\u4e3a\\u4e92\\u8054\\u7f51\\u7684C\\u8bed\\u8a00\\uff0c\\u7684\\u786e\\uff0c\\u5b83\\u4eec\\u7684\\u8bed\\u6cd5\\u5f88\\u76f8\\u8fd1\\uff0c\\u8981\\u8bf4\\u5b83\\u4eec\\u6700\\u5927\\u4e0d\\u540c\\u5728\\u4e8e\\uff1a\\n  * Go \\u6ca1\\u6709\\u4e86\\u5206\\u53f7\\u4f5c\\u4e3a\\u4ee3\\u7801\\u7684\\u7ed3\\u675f\\n  * Go \\u8bed\\u8a00\\u6ca1\\u6709\\u4e86\\u5185\\u5b58\\u5206\\u914d\\u4e0e\\u56de\\u6536\\n\\n\\n\\u597d\\u4e86\\uff0c\\u5176\\u5b83\\u7684\\u66f4\\u52a0\\u8be6\\u7ec6\\u7684\\u5bf9\\u6bd4\\u4f1a\\u5728\\u540e\\u7ee7\\u6587\\u7ae0\\u5217\\u51fa\\uff0c\\u8ba9\\u6211\\u4eec\\u4e0b\\u7bc7\\u518d\\u89c1~ see you","html":"<h3>\\u5386\\u53f2<\\/h3>\\n<p>1969\\u5e74\\uff0c\\u80af\\u00b7\\u6c64\\u666e\\u900a\\uff08Ken Thompson\\uff09\\u548c\\u4e39\\u5c3c\\u65af\\u00b7\\u91cc\\u5947\\uff08Dennis Ritchie\\uff09\\u5728\\u8d1d\\u5c14\\u5b9e\\u9a8c\\u5ba4\\u7684\\u8ba1\\u7b97\\u79d1\\u5b66\\u7814\\u7a76\\u4e2d\\u5fc3\\u91cc\\u5f00\\u53d1\\u51fa\\u4e86 Unix \\u64cd\\u4f5c\\u7cfb\\u7edf\\uff0c\\u4e0e\\u6b64\\u540c\\u65f6\\u7531\\u4e8e Unix \\u800c\\u884d\\u751f\\u51fa\\u4e86\\u4e00\\u95e8\\u540c\\u6837\\u8d6b\\u8d6b\\u6709\\u540d\\u7684\\u7f16\\u7a0b\\u8bed\\u8a00 -- C \\u8bed\\u8a00\\u3002<\\/p>\\n<p>\\u540e\\u6765\\u7684\\u51e0\\u5341\\u5e74\\u91cc\\uff0c\\u8d1d\\u5c14\\u5b9e\\u9a8c\\u5ba4\\u7684\\u5de8\\u5320\\u4eec\\u5728\\u7ee7\\u7eed\\u7740\\u4e00\\u4e2a\\u53eb Inferno \\u7684\\u9879\\u76ee\\uff0c\\u4ee5\\u53ca\\u4e00\\u4e2a\\u540d\\u4e3a Limbo \\u7684\\u7f16\\u7a0b\\u8bed\\u8a00\\u3002Limbo \\u662f\\u7528\\u4e8e\\u5f00\\u53d1\\u8fd0\\u884c\\u5728\\u5c0f\\u578b\\u8ba1\\u7b97\\u673a\\u4e0a\\u7684\\u5206\\u5e03\\u5f0f\\u5e94\\u7528\\u7684\\u8bed\\u8a00\\uff0c\\u5b83\\u88ab\\u8ba4\\u4e3a\\u662f Go \\u8bed\\u8a00\\u7684\\u524d\\u8eab\\uff0c\\u4e00\\u6765\\u662f\\u540c\\u4e00\\u6279\\u4eba\\u8bbe\\u8ba1\\u7684\\u8bed\\u8a00\\uff0c\\u4e8c\\u6765 Go \\u4ece Limbo \\u8bed\\u8a00\\u4e2d\\u7ee7\\u627f\\u4e86\\u4f17\\u591a\\u4f18\\u79c0\\u7684\\u7279\\u6027\\u3002<\\/p>\\n<p>Go \\u8bed\\u8a00\\u7684\\u7b2c\\u4e00\\u4e2a\\u7248\\u672c\\u57282009\\u5e7411\\u6708\\u6b63\\u5f0f\\u5bf9\\u5916\\u53d1\\u5e03\\uff0c\\u5728\\u6b64\\u540e\\u7684\\u4e24\\u5e74\\u5185\\u5feb\\u901f\\u8fed\\u4ee3\\uff0c\\u53d1\\u5c55\\u8fc5\\u731b\\u3002\\u7b2c\\u4e00\\u4e2a\\u6b63\\u5f0f\\u7248\\u672c\\u7684 Go \\u8bed\\u8a00\\u4e8e2012\\u5e743\\u670828\\u65e5\\u6b63\\u5f0f\\u53d1\\u5e03\\uff0c\\u8ba9Go\\u8bed\\u8a00\\u8fce\\u6765\\u4e86\\u7b2c\\u4e00\\u4e2a\\u5f15\\u4eba\\u77a9\\u76ee\\u7684\\u91cc\\u7a0b\\u7891\\u3002<\\/p>\\n<h3>\\u8bed\\u8a00\\u7279\\u6027<\\/h3>\\n<p>\\u7c7b\\u578b\\u7cfb\\u7edf\\u662f\\u4e00\\u95e8\\u7f16\\u7a0b\\u8bed\\u8a00\\u7684\\u5730\\u57fa\\uff0c\\u5b83\\u7684\\u5730\\u4f4d\\u81f3\\u5173\\u91cd\\u8981\\u3002\\u56e0\\u6b64\\uff0c\\u8fd9\\u91cc\\u6211\\u4eec\\u5c06\\u4ece\\u7c7b\\u578b\\u7cfb\\u7edf\\u5165\\u624b\\u4ecb\\u7ecd C \\u4e0e Go \\u8bed\\u8a00<\\/p>\\n<p>\\u987e\\u540d\\u601d\\u4e49\\uff0c\\u7c7b\\u578b\\u7cfb\\u7edf\\u662f\\u6307\\u4e00\\u4e2a\\u8bed\\u8a00\\u7684\\u7c7b\\u578b\\u4f53\\u7cfb\\u7ed3\\u6784\\u3002C \\u4e0e Go\\u8bed\\u8a00\\u7c7b\\u578b\\u7cfb\\u7edf\\u901a\\u5e38\\u5305\\u542b\\u5982\\u4e0b\\u57fa\\u672c\\u5185\\u5bb9\\uff1a<\\/p>\\n<h4>C \\u8bed\\u8a00\\u7684\\u7c7b\\u578b\\u7cfb\\u7edf<\\/h4>\\n<p><img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/17\\/egbnUIpmO2YwsxK3P4awi8635aHChwQIiymzIkDO.png\\" alt=\\"C\\u8bed\\u8a00\\u6570\\u636e\\u7c7b\\u578b.png\\" \\/><\\/p>\\n<ol>\\n<li>\\n<p>\\u57fa\\u672c\\u7c7b\\u578b\\uff0c<\\/p>\\n<ul>\\n<li>\\u6574\\u578b(short\\u3001int\\u3001long\\u3001long long),<\\/li>\\n<li>\\u6d6e\\u70b9\\u578b(float\\u3001double\\u3001long double),<\\/li>\\n<li>\\u5b57\\u7b26\\u578b(char-\\u53ef\\u4ee5\\u5f52\\u6574\\u578b),<\\/li>\\n<\\/ul>\\n<\\/li>\\n<li>\\n<p>\\u590d\\u5408\\u7c7b\\u578b\\uff0c<\\/p>\\n<ul>\\n<li>\\u6570\\u7ec4\\uff08array\\uff09<\\/li>\\n<li>\\u7ed3\\u6784\\u4f53\\uff08struct\\uff09<\\/li>\\n<li>\\u8054\\u5408\\u4f53\\uff08union\\uff09<\\/li>\\n<li>\\u679a\\u4e3e \\uff08enum\\uff09\\u5ea6\\u7b49\\u540c int )<\\/li>\\n<\\/ul>\\n<\\/li>\\n<li>\\n<p>\\u6307\\u9488\\u7c7b\\u578b<\\/p>\\n<\\/li>\\n<li>\\n<p>\\u7a7a\\u7c7b\\u578b<\\/p>\\n<\\/li>\\n<\\/ol>\\n<h4>Go \\u8bed\\u8a00\\u7684\\u7c7b\\u578b\\u7cfb\\u7edf<\\/h4>\\n<p><img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/17\\/kYhH3JEfw1BLYbFFDahWI80p1rilhJ0gfjGMrDF9.png\\" alt=\\"Go\\u6570\\u636e\\u7c7b\\u578b.png\\" \\/><\\/p>\\n<ol>\\n<li>\\n<p>\\u57fa\\u7840\\u7c7b\\u578b<\\/p>\\n<ul>\\n<li>\\u5e03\\u5c14\\u7c7b\\u578b\\uff1abool<\\/li>\\n<li>\\u6574\\u578b\\uff1aint\\u3001int8\\u3001int16\\u3001int32\\u3001int64\\u3001uint\\u3001uint8\\u3001uint16\\u3001uint32\\u3001uint64\\u3001byte<\\/li>\\n<li>\\u6d6e\\u70b9\\u7c7b\\u578b\\uff1afloat32\\u3001float64<\\/li>\\n<li>\\u590d\\u6570\\u7c7b\\u578b\\uff1acomplex64\\u3001complex128<\\/li>\\n<li>\\u5b57\\u7b26\\u4e32\\uff1astring<\\/li>\\n<li>\\u5b57\\u7b26\\u7c7b\\u578b\\uff1arune<\\/li>\\n<li>\\u9519\\u8bef\\u7c7b\\u578b\\uff1aerror<\\/li>\\n<\\/ul>\\n<\\/li>\\n<li>\\n<p>\\u590d\\u5408\\u7c7b\\u578b<\\/p>\\n<ul>\\n<li>\\u6570\\u7ec4\\uff08array)<\\/li>\\n<li>\\u5207\\u7247\\uff08slice\\uff09<\\/li>\\n<li>\\u5b57\\u5178\\uff08map\\uff09<\\/li>\\n<li>\\u901a\\u9053\\uff08chan\\uff09<\\/li>\\n<li>\\u7ed3\\u6784\\u4f53\\uff08struct\\uff09<\\/li>\\n<li>\\u6307\\u9488\\uff08pointer\\uff09<\\/li>\\n<\\/ul>\\n<\\/li>\\n<li>\\n<p>\\u63a5\\u53e3\\uff08interface\\uff09<\\/p>\\n<\\/li>\\n<\\/ol>\\n<p>\\u5f88\\u660e\\u663e\\uff0cGo \\u8bed\\u8a00\\u6bd4 C \\u8bed\\u8a00\\u591a\\u4e86\\u4e24\\u9879\\uff1a\\u5bf9\\u8c61\\u4e0e\\u63a5\\u53e3\\u3002<\\/p>\\n<p>\\u8054\\u60f3\\u662f\\u5e2e\\u52a9\\u6211\\u4eec\\u8bb0\\u5fc6\\u7684\\u6700\\u597d\\u65b9\\u6cd5\\u4e4b\\u4e00\\uff0c\\u6240\\u4ee5\\u672c\\u4eba\\u5728\\u5b66\\u4e60Go\\u8bed\\u8a00\\u65f6\\uff0c\\u987a\\u5e26\\u5bf9\\u6bd4C\\u8bed\\u8a00\\uff0c\\u5e0c\\u671b\\u501f\\u6b64\\u6765\\u628aGo\\u5b66\\u5f97\\u66f4\\u6df1\\u523b\\u3002Go\\u88ab\\u8a89\\u4e3a\\u4e92\\u8054\\u7f51\\u7684C\\u8bed\\u8a00\\uff0c\\u7684\\u786e\\uff0c\\u5b83\\u4eec\\u7684\\u8bed\\u6cd5\\u5f88\\u76f8\\u8fd1\\uff0c\\u8981\\u8bf4\\u5b83\\u4eec\\u6700\\u5927\\u4e0d\\u540c\\u5728\\u4e8e\\uff1a<\\/p>\\n<ul>\\n<li>Go \\u6ca1\\u6709\\u4e86\\u5206\\u53f7\\u4f5c\\u4e3a\\u4ee3\\u7801\\u7684\\u7ed3\\u675f<\\/li>\\n<li>Go \\u8bed\\u8a00\\u6ca1\\u6709\\u4e86\\u5185\\u5b58\\u5206\\u914d\\u4e0e\\u56de\\u6536<\\/li>\\n<\\/ul>\\n<p>\\u597d\\u4e86\\uff0c\\u5176\\u5b83\\u7684\\u66f4\\u52a0\\u8be6\\u7ec6\\u7684\\u5bf9\\u6bd4\\u4f1a\\u5728\\u540e\\u7ee7\\u6587\\u7ae0\\u5217\\u51fa\\uff0c\\u8ba9\\u6211\\u4eec\\u4e0b\\u7bc7\\u518d\\u89c1~ see you<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => 'Go 语言又称 Golang，由 Google 公司于 2009 年发布，近几年伴随着云计算、微服务、分布式的发展而迅速崛起，跻身主流编程语言之列，和 Java 类似，它是一门静态的、强类型的、编译型编程语言，为并发而生，所以天生适用于并发编程',
                'is_original' => 1,
                'is_draft' => 0,
                'view_count' => 313,
                'published_at' => '2020-09-22 22:30:00',
                'created_at' => '2020-09-22 23:19:32',
                'updated_at' => '2022-01-09 07:56:20',
                'deleted_at' => NULL,
            ),
            5 => 
            array (
                'id' => 6,
                'category_id' => 4,
                'collection_id' => 1,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'hello-world-nwk49',
                'title' => '【C vs Go】2：经典程序 hello world',
                'subtitle' => '从经典开始',
            'content' => '{"raw":"\\u4f7f\\u7528\\u4e00\\u6b3e\\u4f60\\u949f\\u7231\\u7684\\u7f16\\u8f91\\u5668\\uff0c\\u5f00\\u59cb\\u6211\\u4eec\\u7f16\\u7a0b\\u5b66\\u4e60\\u7684\\u7b2c\\u4e00\\u7bc7\\uff1ahello world~\\n\\n##### C\\u8bed\\u8a00\\uff1a\\n\\n\\u5728\\u7f16\\u8f91\\u5668\\u4e0b\\uff0c\\u53d6\\u540d\\u4e00\\u4e2a hello.c \\u6587\\u4ef6\\uff0c\\u8f93\\u5165\\u5982\\u4e0b\\u4ee3\\u7801\\uff1a\\n```\\n#include <stdio.h>\\n\\nint main(void)\\n{\\n\\tprintf(\\"Hello world!\\\\n\\");\\n\\treturn 0;\\n}\\n```\\n\\u7531\\u4e8e\\u4f5c\\u8005\\u559c\\u6b22\\u5728Linux\\u73af\\u5883\\u4e0b\\uff0c\\u6240\\u4ee5\\u793a\\u4f8b\\u90fd\\u4f1a\\u5728 shell \\u4e0b\\u505a\\u793a\\u8303\\u3002\\u6309\\u7167\\u4e0a\\u9762\\u7684\\u4ee3\\u7801\\u6572\\u5b8c\\uff0c\\u5c31\\u5b8c\\u6210\\u4e86\\u6211\\u4eec\\u7b2c\\u4e00\\u4e2a C \\u8bed\\u8a00\\u7a0b\\u5e8f\\u3002\\u7136\\u540e\\u6267\\u884c\\n```\\ngcc  hello.c -o hello\\n```\\n\\u7ed3\\u679c\\u4f1a\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\uff0c\\u751f\\u6210\\u4e00\\u4e2a hello \\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u518d\\u6267\\u884c\\u4e0b\\u9762\\u7684\\u8bed\\u53e5\\n```\\n.\\/hello\\n```\\n\\u7ec8\\u7aef\\u4f1a\\u7acb\\u9a6c\\u6253\\u5370\\u51fa\\u4e00\\u4e32\\u5b57\\u7b26\\u4e32\\uff1a\\n\\n![image.png](http:\\/\\/shishao.320.io:8090\\/storage\\/article\\/2020\\/09\\/23\\/JDVyj4xwcBB4ZlLUs5YxGrB0Ki68485zbByqFxv6.png)\\n\\n##### Go\\u8bed\\u8a00\\uff1a\\n\\n\\u8bf7\\u627e\\u5230\\u4e00\\u6b3e\\u7f16\\u8f91\\u5668\\uff0c\\u5efa\\u8bae\\u4f7f\\u7528Gland\\uff0c\\u53d6\\u540d hello.go \\u6587\\u4ef6\\uff0c\\u8f93\\u5165\\u5982\\u4e0b\\u4ee3\\u7801\\uff1a\\n```\\npackage main\\n\\nimport \\"fmt\\"\\n\\nfunc main() {\\n\\tfmt.Println(\\"Hello world!\\");\\n}\\n```\\n\\u5965\\u5229\\u7ed9\\uff0c\\u540c\\u6837\\u4e00\\u4e2a Go \\u7a0b\\u5e8f\\u5c31\\u5199\\u597d\\u4e86\\u3002\\u90a3\\u4e48\\uff0cGo \\u662f\\u600e\\u4e48\\u8fdb\\u884c\\u7f16\\u8bd1\\u5462\\n```\\ngo build hello.go\\n```\\n\\n![image.png](http:\\/\\/shishao.320.io:8090\\/storage\\/article\\/2020\\/09\\/23\\/a5Rp63i5uEcXA4tZUeT1uwIiz2BGsO9LCnJohaTN.png)\\n\\n\\u611f\\u89c9\\u662f\\u4e0d\\u662f\\u8ddf C \\u8bed\\u8a00\\u7684hello world \\u4e00\\u6837\\u3002\\n\\u662f\\u7684\\u8fd0\\u884c\\u8d77 C \\u6216 Go \\u7a0b\\u5e8f\\u5c31\\u662f\\u8fd9\\u4e48\\u7b80\\u5355\\u3002\\u4ece\\u5b9e\\u8df5\\u51fa\\u53d1\\uff0c\\u6211\\u662f\\u77f3\\u5c11\\uff0c\\u6211\\u4eec\\u4e0b\\u6b21\\u89c1~ see you","html":"<p>\\u4f7f\\u7528\\u4e00\\u6b3e\\u4f60\\u949f\\u7231\\u7684\\u7f16\\u8f91\\u5668\\uff0c\\u5f00\\u59cb\\u6211\\u4eec\\u7f16\\u7a0b\\u5b66\\u4e60\\u7684\\u7b2c\\u4e00\\u7bc7\\uff1ahello world~<\\/p>\\n<h5>C\\u8bed\\u8a00\\uff1a<\\/h5>\\n<p>\\u5728\\u7f16\\u8f91\\u5668\\u4e0b\\uff0c\\u53d6\\u540d\\u4e00\\u4e2a hello.c \\u6587\\u4ef6\\uff0c\\u8f93\\u5165\\u5982\\u4e0b\\u4ee3\\u7801\\uff1a<\\/p>\\n<pre><code>#include &lt;stdio.h&gt;\\n\\nint main(void)\\n{\\n    printf(\\"Hello world!\\\\n\\");\\n    return 0;\\n}<\\/code><\\/pre>\\n<p>\\u7531\\u4e8e\\u4f5c\\u8005\\u559c\\u6b22\\u5728Linux\\u73af\\u5883\\u4e0b\\uff0c\\u6240\\u4ee5\\u793a\\u4f8b\\u90fd\\u4f1a\\u5728 shell \\u4e0b\\u505a\\u793a\\u8303\\u3002\\u6309\\u7167\\u4e0a\\u9762\\u7684\\u4ee3\\u7801\\u6572\\u5b8c\\uff0c\\u5c31\\u5b8c\\u6210\\u4e86\\u6211\\u4eec\\u7b2c\\u4e00\\u4e2a C \\u8bed\\u8a00\\u7a0b\\u5e8f\\u3002\\u7136\\u540e\\u6267\\u884c<\\/p>\\n<pre><code>gcc  hello.c -o hello<\\/code><\\/pre>\\n<p>\\u7ed3\\u679c\\u4f1a\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\uff0c\\u751f\\u6210\\u4e00\\u4e2a hello \\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u518d\\u6267\\u884c\\u4e0b\\u9762\\u7684\\u8bed\\u53e5<\\/p>\\n<pre><code>.\\/hello<\\/code><\\/pre>\\n<p>\\u7ec8\\u7aef\\u4f1a\\u7acb\\u9a6c\\u6253\\u5370\\u51fa\\u4e00\\u4e32\\u5b57\\u7b26\\u4e32\\uff1a<\\/p>\\n<p><img src=\\"http:\\/\\/shishao.320.io:8090\\/storage\\/article\\/2020\\/09\\/23\\/JDVyj4xwcBB4ZlLUs5YxGrB0Ki68485zbByqFxv6.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<h5>Go\\u8bed\\u8a00\\uff1a<\\/h5>\\n<p>\\u8bf7\\u627e\\u5230\\u4e00\\u6b3e\\u7f16\\u8f91\\u5668\\uff0c\\u5efa\\u8bae\\u4f7f\\u7528Gland\\uff0c\\u53d6\\u540d hello.go \\u6587\\u4ef6\\uff0c\\u8f93\\u5165\\u5982\\u4e0b\\u4ee3\\u7801\\uff1a<\\/p>\\n<pre><code>package main\\n\\nimport \\"fmt\\"\\n\\nfunc main() {\\n    fmt.Println(\\"Hello world!\\");\\n}<\\/code><\\/pre>\\n<p>\\u5965\\u5229\\u7ed9\\uff0c\\u540c\\u6837\\u4e00\\u4e2a Go \\u7a0b\\u5e8f\\u5c31\\u5199\\u597d\\u4e86\\u3002\\u90a3\\u4e48\\uff0cGo \\u662f\\u600e\\u4e48\\u8fdb\\u884c\\u7f16\\u8bd1\\u5462<\\/p>\\n<pre><code>go build hello.go<\\/code><\\/pre>\\n<p><img src=\\"http:\\/\\/shishao.320.io:8090\\/storage\\/article\\/2020\\/09\\/23\\/a5Rp63i5uEcXA4tZUeT1uwIiz2BGsO9LCnJohaTN.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<p>\\u611f\\u89c9\\u662f\\u4e0d\\u662f\\u8ddf C \\u8bed\\u8a00\\u7684hello world \\u4e00\\u6837\\u3002<br \\/>\\n\\u662f\\u7684\\u8fd0\\u884c\\u8d77 C \\u6216 Go \\u7a0b\\u5e8f\\u5c31\\u662f\\u8fd9\\u4e48\\u7b80\\u5355\\u3002\\u4ece\\u5b9e\\u8df5\\u51fa\\u53d1\\uff0c\\u6211\\u662f\\u77f3\\u5c11\\uff0c\\u6211\\u4eec\\u4e0b\\u6b21\\u89c1~ see you<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '一起学习 C 与 Go，今天我们一起去实现并执行程序的经典示例',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 65,
                'published_at' => '2020-09-23 21:43:00',
                'created_at' => '2020-09-23 21:43:57',
                'updated_at' => '2022-01-09 16:16:47',
                'deleted_at' => NULL,
            ),
            6 => 
            array (
                'id' => 7,
                'category_id' => 4,
                'collection_id' => 1,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'rfget',
                'title' => '【C vs Go】3：变量 - 数值类型',
                'subtitle' => '数值类型的整理与归纳',
            'content' => '{"raw":"### \\u4ec0\\u4e48\\u662f\\u53d8\\u91cf\\n\\u53d8\\u91cf\\u662f\\u8ba1\\u7b97\\u673a\\u91cc\\u4e00\\u5757\\u7279\\u5b9a\\u7684\\u5185\\u5b58\\uff0c\\u5b83\\u662f\\u7531\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u8fde\\u7eed\\u7684\\u5b57\\u8282\\u6240\\u7ec4\\u6210\\u3002\\u6bcf\\u4e2a\\u53d8\\u91cf\\u90fd\\u6709\\u4e00\\u540d\\u79f0\\uff0c\\u8be5\\u540d\\u79f0\\u8868\\u793a\\u5185\\u5b58\\u7684\\u8fd9\\u4e2a\\u4f4d\\u7f6e\\uff0c\\u4ee5\\u63d0\\u53d6\\u5b83\\u5305\\u542b\\u7684\\u6570\\u636e\\u6216\\u5b58\\u50a8\\u4e00\\u4e2a\\u65b0\\u6570\\u503c\\u3002\\u4e0b\\u9762\\u6211\\u4eec\\u5c06\\u4ecb\\u7ecd C \\u4e0e Go \\u7684\\u53d8\\u91cf\\u58f0\\u660e\\u4e0e\\u7f57\\u5217\\u6570\\u503c\\u53d8\\u91cf\\u7c7b\\u578b\\u3002\\n\\n#### \\u53d8\\u91cf\\u58f0\\u660e\\n\\n1. Go \\u548c C \\u58f0\\u660e\\u53d8\\u91cf\\u7684\\u65b9\\u5f0f\\u4e0d\\u540c\\uff1a\\n\\n\\t* C \\u53d8\\u91cf\\u58f0\\u660e -- \\u53d8\\u91cf\\u7684\\u7c7b\\u578b\\u5728\\u53d8\\u91cf\\u524d\\u9762\\n\\n\\t```\\n\\tint *pointer, number;\\n\\t```\\n\\t\\u4ee5\\u4e0a\\u4f8b\\u5b50\\uff0c\\u58f0\\u660e\\u4e86\\u4e00\\u4e2a\\u6307\\u5411 int \\u7c7b\\u578b\\u53d8\\u91cf\\u7684\\u6307\\u9488 pointer \\u4e0e \\u4e00\\u4e2a int \\u7c7b\\u578b\\u7684\\u53d8\\u91cf number\\n\\n\\t* Go \\u53d8\\u91cf\\u58f0\\u660e -- \\u53d8\\u91cf\\u7684\\u7c7b\\u578b\\u5728\\u53d8\\u91cf\\u540e\\u9762\\n\\n\\t```\\n\\tvar a, b *int\\n\\t```\\n\\t\\u4ee5\\u4e0a Go \\u4f8b\\u5b50\\uff0c\\u58f0\\u660e\\u4e86\\u4e24\\u4e2a\\u6307\\u5411 int \\u7c7b\\u578b\\u7684\\u6307\\u9488\\u53d8\\u91cf\\n\\n1. C \\u58f0\\u660e\\u51fa\\u6765\\u7684\\u53d8\\u91cf\\uff0c\\u5728\\u672a\\u6307\\u5b9a\\u53d8\\u91cf\\u7684\\u503c\\u65f6\\uff0c\\u8be5\\u53d8\\u91cf\\u5305\\u542b\\u4e00\\u4e2a\\u5783\\u573e\\u503c\\uff0c\\u5373\\u4e0a\\u6b21\\u4f7f\\u7528\\u90a3\\u5757\\u5185\\u5b58\\u7a7a\\u95f4\\u65f6\\u9057\\u7559\\u4e0b\\u7684\\u503c\\uff1bGo \\u58f0\\u660e\\u51fa\\u6765\\u7684\\u53d8\\u91cf\\uff0c\\u7f16\\u8bd1\\u5668\\u81ea\\u52a8\\u4f1a\\u8d4b\\u4e88\\u8be5\\u7c7b\\u578b\\u7684\\u96f6\\u503c\\n\\n2. C \\u58f0\\u660e\\u7684\\u53d8\\u91cf\\u4e00\\u5b9a\\u8981\\u6307\\u660e\\u7c7b\\u578b\\uff0c\\u4f46 Go \\u53ef\\u4ee5\\u4e0d\\u7528\\uff08Go \\u7f16\\u8bd1\\u5668\\u53ef\\u4ee5\\u6839\\u636e\\u53d8\\u91cf\\u7684\\u503c\\u6765\\u81ea\\u52a8\\u63a8\\u65ad\\u5176\\u7c7b\\u578b\\uff09\\n\\t```\\n\\tvar a = 1\\n\\tvar b = true\\n\\tvar str = \\"This is a string type\\"\\n\\t```\\n\\t\\u4ee5\\u4e0a Go \\u53d8\\u91cf\\u672a\\u58f0\\u660e\\u53d8\\u91cf\\u7c7b\\u578b\\uff0c\\u4f46\\u5b83\\u4eec\\u5206\\u522b\\u88ab\\u63a8\\u65ad\\u51fa\\uff1aa \\u662f int \\u3001b \\u662f bool \\u3001str \\u662f tring\\n\\n1. Go \\u58f0\\u660e\\u53d8\\u91cf\\u7684\\u5f62\\u5f0f\\u66f4\\u591a\\u6837\\uff1a\\n\\n\\t* \\u6807\\u51c6\\u683c\\u5f0f\\uff0c \\u4f7f\\u7528 var \\u5173\\u952e\\u5b57\\uff1a `var identifier type`\\n\\n\\t* \\u7b80\\u77ed\\u683c\\u5f0f\\uff1a `identifier := expression`\\n\\n\\t\\t \\u7b80\\u77ed\\u6a21\\u5f0f\\uff08short variable declaration\\uff09\\u6709\\u4ee5\\u4e0b\\u9650\\u5236\\uff1a\\n\\t\\t1. \\t\\u5b9a\\u4e49\\u53d8\\u91cf\\uff0c\\u540c\\u65f6\\u663e\\u5f0f\\u521d\\u59cb\\u5316\\n\\t\\t1. \\t\\u4e0d\\u80fd\\u63d0\\u4f9b\\u53d8\\u91cf\\u7c7b\\u578b\\n\\t\\t1. \\t\\u53ea\\u80fd\\u7528\\u5728\\u51fd\\u6570\\u5185\\u90e8\\n\\n\\t* \\u6279\\u91cf\\u683c\\u5f0f\\n\\t```\\n\\tvar (\\n\\t\\ta int\\n\\t\\tb bool\\n\\t\\tstr string\\n\\t)\\n\\t```\\n\\n### C \\u4e0e Go \\u6570\\u503c\\u7c7b\\u578b\\u7684\\u5bf9\\u6bd4\\n#### C \\u8bed\\u8a00\\u7684\\u6570\\u503c\\u7c7b\\u578b\\n * \\t\\u6574\\u578b\\uff1achar\\u3001short\\u3001int\\u3001long\\u3001longlong\\n  \\n| \\u7c7b\\u578b\\u540d\\u79f0 | \\u5b57\\u8282\\u6570\\uff08byte\\uff09 | \\u4f4d\\uff08bit\\uff09 | \\u53d6\\u503c\\u8303\\u56f4 |\\n| -------- | :-------:|:------:|-------|\\n| char | 1 | 8 | -128~+127|\\n| short | 2 | 16 | -32768~+32767 |\\n| int | 4 | 32 | -2147438648~+2147438647 |\\n| long | 4 | 32 | -2147438648~+2147438647 |\\n| long long | 8 | 64 | -9223372036854775808~+9223372036854775807 |\\n\\n* \\t\\u65e0\\u7b26\\u53f7\\u6574\\u6570\\u7c7b\\u578b\\n\\n| \\u7c7b\\u578b\\u540d\\u79f0 | \\u5b57\\u8282\\u6570\\uff08byte\\uff09 | \\u4f4d\\uff08bit\\uff09 | \\u53d6\\u503c\\u8303\\u56f4 |\\n| -------- | :-------:|:------:|-------|\\n| unsigned char | 1 | 8 | 0~255|\\n| unsigned short | 2 | 16 | 0~65535 |\\n| unsigned int | 4 | 32 | 0~4294967295 |\\n| unsigned long | 4 | 32 | 0~4294967295 |\\n| unsigned long long | 8 | 64 | 0~18446744073709551615 |\\n\\n * \\t\\u6d6e\\u70b9\\u578b\\uff1afloat\\u3001double\\u3001long double\\n\\n| \\u7c7b\\u578b\\u540d\\u79f0 | \\u5b57\\u8282\\u6570\\uff08byte\\uff09 | \\u4f4d\\uff08bit\\uff09 | \\u6570\\u503c\\u8303\\u56f4 |\\n| -------- | :-------:|:------:|-------|\\n| float | 4 | 32 | +-3.4E38\\uff08\\u7cbe\\u786e\\u52306\\u4f4d\\u5c0f\\u6570\\uff09|\\n| double | 8 | 64 | +-1.7E308\\uff08\\u7cbe\\u786e\\u523015\\u4f4d\\u5c0f\\u6570\\uff09 |\\n| long double | 12 | 128 | +-1.19E4932\\uff08\\u7cbe\\u786e\\u523018\\u4f4d\\u5c0f\\u6570\\uff09 |\\n\\n#### Go \\u8bed\\u8a00\\u7684\\u6570\\u503c\\u7c7b\\u578b\\n\\n* \\u6574\\u6570\\n\\n| \\u7c7b\\u578b\\u540d\\u79f0 | \\u5b57\\u8282\\u6570\\uff08byte\\uff09 | \\u4f4d\\uff08bit\\uff09 | \\u53d6\\u503c\\u8303\\u56f4 |\\n| -------- | :-------:|:------:|-------|\\n| int | \\u5e73\\u53f0\\u76f8\\u5173 | \\u5e73\\u53f0\\u76f8\\u5173 | \\u5e73\\u53f0\\u76f8\\u5173|\\n| int8 | 1 | 8 | -128~+127|\\n| int16 | 2 | 16 | -32768~+32767 |\\n| int32 | 4 | 32 | -2147438648~+2147438647 |\\n| int64  | 8 | 64 | -9223372036854775808~+9223372036854775807 |\\n\\n* \\t\\u65e0\\u7b26\\u53f7\\u6574\\u6570\\u7c7b\\u578b\\n\\n| \\u7c7b\\u578b\\u540d\\u79f0 | \\u5b57\\u8282\\u6570\\uff08byte\\uff09 | \\u4f4d\\uff08bit\\uff09 | \\u53d6\\u503c\\u8303\\u56f4 |\\n| -------- | :-------:|:------:|-------|\\n| unit | \\u5e73\\u53f0\\u76f8\\u5173 |\\u5e73\\u53f0\\u76f8\\u5173 | \\u5e73\\u53f0\\u76f8\\u5173|\\n| unit8\\uff08\\u5373byte\\uff09 | 1 | 8 | 0~255|\\n| uint16 | 2 | 16 | 0~65535 |\\n| uint32 | 4 | 32 | 0~4294967295 |\\n| uint 64| 8 | 64 | 0~18446744073709551615 |\\n\\n* \\t\\u6d6e\\u70b9\\u578b\\n\\t\\nGo \\u8bed\\u8a00\\u4e2d\\u6ca1\\u6709 float \\u7c7b\\u578b\\n\\n| \\u7c7b\\u578b\\u540d\\u79f0 | \\u5b57\\u8282\\u6570\\uff08byte\\uff09 | \\u4f4d\\uff08bit\\uff09 | \\u6570\\u503c\\u8303\\u56f4 |\\n| -------- | :-------:|:------:|-------|\\n| float32 | 4 | 32 | +-1.4E-45 ~ +-3.4E38\\uff08\\u7cbe\\u786e\\u52307\\u4f4d\\u5c0f\\u6570\\uff09|\\n| float64 | 8 | 64 | +-4.94 * 1E-324 ~ +-1.79E308\\uff08\\u7cbe\\u786e\\u523015\\u4f4d\\u5c0f\\u6570\\uff09 |\\n\\nGo \\u8bed\\u8a00 float32 \\u7b49\\u4ef7\\u4e8e C\\u8bed\\u8a00\\u7684 float\\uff0cfloat64 \\u7b49\\u4ef7\\u4e8eC\\u8bed\\u8a00\\u7684double\\u7c7b\\u578b\\u3002","html":"<h3>\\u4ec0\\u4e48\\u662f\\u53d8\\u91cf<\\/h3>\\n<p>\\u53d8\\u91cf\\u662f\\u8ba1\\u7b97\\u673a\\u91cc\\u4e00\\u5757\\u7279\\u5b9a\\u7684\\u5185\\u5b58\\uff0c\\u5b83\\u662f\\u7531\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u8fde\\u7eed\\u7684\\u5b57\\u8282\\u6240\\u7ec4\\u6210\\u3002\\u6bcf\\u4e2a\\u53d8\\u91cf\\u90fd\\u6709\\u4e00\\u540d\\u79f0\\uff0c\\u8be5\\u540d\\u79f0\\u8868\\u793a\\u5185\\u5b58\\u7684\\u8fd9\\u4e2a\\u4f4d\\u7f6e\\uff0c\\u4ee5\\u63d0\\u53d6\\u5b83\\u5305\\u542b\\u7684\\u6570\\u636e\\u6216\\u5b58\\u50a8\\u4e00\\u4e2a\\u65b0\\u6570\\u503c\\u3002\\u4e0b\\u9762\\u6211\\u4eec\\u5c06\\u4ecb\\u7ecd C \\u4e0e Go \\u7684\\u53d8\\u91cf\\u58f0\\u660e\\u4e0e\\u7f57\\u5217\\u6570\\u503c\\u53d8\\u91cf\\u7c7b\\u578b\\u3002<\\/p>\\n<h4>\\u53d8\\u91cf\\u58f0\\u660e<\\/h4>\\n<ol>\\n<li>\\n<p>Go \\u548c C \\u58f0\\u660e\\u53d8\\u91cf\\u7684\\u65b9\\u5f0f\\u4e0d\\u540c\\uff1a<\\/p>\\n<ul>\\n<li>C \\u53d8\\u91cf\\u58f0\\u660e -- \\u53d8\\u91cf\\u7684\\u7c7b\\u578b\\u5728\\u53d8\\u91cf\\u524d\\u9762<\\/li>\\n<\\/ul>\\n<pre><code>int *pointer, number;<\\/code><\\/pre>\\n<p>\\u4ee5\\u4e0a\\u4f8b\\u5b50\\uff0c\\u58f0\\u660e\\u4e86\\u4e00\\u4e2a\\u6307\\u5411 int \\u7c7b\\u578b\\u53d8\\u91cf\\u7684\\u6307\\u9488 pointer \\u4e0e \\u4e00\\u4e2a int \\u7c7b\\u578b\\u7684\\u53d8\\u91cf number<\\/p>\\n<ul>\\n<li>Go \\u53d8\\u91cf\\u58f0\\u660e -- \\u53d8\\u91cf\\u7684\\u7c7b\\u578b\\u5728\\u53d8\\u91cf\\u540e\\u9762<\\/li>\\n<\\/ul>\\n<pre><code>var a, b *int<\\/code><\\/pre>\\n<p>\\u4ee5\\u4e0a Go \\u4f8b\\u5b50\\uff0c\\u58f0\\u660e\\u4e86\\u4e24\\u4e2a\\u6307\\u5411 int \\u7c7b\\u578b\\u7684\\u6307\\u9488\\u53d8\\u91cf<\\/p>\\n<\\/li>\\n<li>\\n<p>C \\u58f0\\u660e\\u51fa\\u6765\\u7684\\u53d8\\u91cf\\uff0c\\u5728\\u672a\\u6307\\u5b9a\\u53d8\\u91cf\\u7684\\u503c\\u65f6\\uff0c\\u8be5\\u53d8\\u91cf\\u5305\\u542b\\u4e00\\u4e2a\\u5783\\u573e\\u503c\\uff0c\\u5373\\u4e0a\\u6b21\\u4f7f\\u7528\\u90a3\\u5757\\u5185\\u5b58\\u7a7a\\u95f4\\u65f6\\u9057\\u7559\\u4e0b\\u7684\\u503c\\uff1bGo \\u58f0\\u660e\\u51fa\\u6765\\u7684\\u53d8\\u91cf\\uff0c\\u7f16\\u8bd1\\u5668\\u81ea\\u52a8\\u4f1a\\u8d4b\\u4e88\\u8be5\\u7c7b\\u578b\\u7684\\u96f6\\u503c<\\/p>\\n<\\/li>\\n<li>\\n<p>C \\u58f0\\u660e\\u7684\\u53d8\\u91cf\\u4e00\\u5b9a\\u8981\\u6307\\u660e\\u7c7b\\u578b\\uff0c\\u4f46 Go \\u53ef\\u4ee5\\u4e0d\\u7528\\uff08Go \\u7f16\\u8bd1\\u5668\\u53ef\\u4ee5\\u6839\\u636e\\u53d8\\u91cf\\u7684\\u503c\\u6765\\u81ea\\u52a8\\u63a8\\u65ad\\u5176\\u7c7b\\u578b\\uff09<\\/p>\\n<pre><code>var a = 1\\nvar b = true\\nvar str = \\"This is a string type\\"<\\/code><\\/pre>\\n<p>\\u4ee5\\u4e0a Go \\u53d8\\u91cf\\u672a\\u58f0\\u660e\\u53d8\\u91cf\\u7c7b\\u578b\\uff0c\\u4f46\\u5b83\\u4eec\\u5206\\u522b\\u88ab\\u63a8\\u65ad\\u51fa\\uff1aa \\u662f int \\u3001b \\u662f bool \\u3001str \\u662f tring<\\/p>\\n<\\/li>\\n<li>\\n<p>Go \\u58f0\\u660e\\u53d8\\u91cf\\u7684\\u5f62\\u5f0f\\u66f4\\u591a\\u6837\\uff1a<\\/p>\\n<ul>\\n<li>\\n<p>\\u6807\\u51c6\\u683c\\u5f0f\\uff0c \\u4f7f\\u7528 var \\u5173\\u952e\\u5b57\\uff1a <code>var identifier type<\\/code><\\/p>\\n<\\/li>\\n<li>\\n<p>\\u7b80\\u77ed\\u683c\\u5f0f\\uff1a <code>identifier := expression<\\/code><\\/p>\\n<p>\\u7b80\\u77ed\\u6a21\\u5f0f\\uff08short variable declaration\\uff09\\u6709\\u4ee5\\u4e0b\\u9650\\u5236\\uff1a<\\/p>\\n<ol>\\n<li>\\u5b9a\\u4e49\\u53d8\\u91cf\\uff0c\\u540c\\u65f6\\u663e\\u5f0f\\u521d\\u59cb\\u5316<\\/li>\\n<li>\\u4e0d\\u80fd\\u63d0\\u4f9b\\u53d8\\u91cf\\u7c7b\\u578b<\\/li>\\n<li>\\u53ea\\u80fd\\u7528\\u5728\\u51fd\\u6570\\u5185\\u90e8<\\/li>\\n<\\/ol>\\n<\\/li>\\n<li>\\n<p>\\u6279\\u91cf\\u683c\\u5f0f<\\/p>\\n<pre><code>var (\\na int\\nb bool\\nstr string\\n)<\\/code><\\/pre>\\n<\\/li>\\n<\\/ul>\\n<\\/li>\\n<\\/ol>\\n<h3>C \\u4e0e Go \\u6570\\u503c\\u7c7b\\u578b\\u7684\\u5bf9\\u6bd4<\\/h3>\\n<h4>C \\u8bed\\u8a00\\u7684\\u6570\\u503c\\u7c7b\\u578b<\\/h4>\\n<ul>\\n<li>\\u6574\\u578b\\uff1achar\\u3001short\\u3001int\\u3001long\\u3001longlong<\\/li>\\n<\\/ul>\\n<table>\\n<thead>\\n<tr>\\n<th>\\u7c7b\\u578b\\u540d\\u79f0<\\/th>\\n<th style=\\"text-align: center;\\">\\u5b57\\u8282\\u6570\\uff08byte\\uff09<\\/th>\\n<th style=\\"text-align: center;\\">\\u4f4d\\uff08bit\\uff09<\\/th>\\n<th>\\u53d6\\u503c\\u8303\\u56f4<\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td>char<\\/td>\\n<td style=\\"text-align: center;\\">1<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td>-128~+127<\\/td>\\n<\\/tr>\\n<tr>\\n<td>short<\\/td>\\n<td style=\\"text-align: center;\\">2<\\/td>\\n<td style=\\"text-align: center;\\">16<\\/td>\\n<td>-32768~+32767<\\/td>\\n<\\/tr>\\n<tr>\\n<td>int<\\/td>\\n<td style=\\"text-align: center;\\">4<\\/td>\\n<td style=\\"text-align: center;\\">32<\\/td>\\n<td>-2147438648~+2147438647<\\/td>\\n<\\/tr>\\n<tr>\\n<td>long<\\/td>\\n<td style=\\"text-align: center;\\">4<\\/td>\\n<td style=\\"text-align: center;\\">32<\\/td>\\n<td>-2147438648~+2147438647<\\/td>\\n<\\/tr>\\n<tr>\\n<td>long long<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td style=\\"text-align: center;\\">64<\\/td>\\n<td>-9223372036854775808~+9223372036854775807<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<ul>\\n<li>\\u65e0\\u7b26\\u53f7\\u6574\\u6570\\u7c7b\\u578b<\\/li>\\n<\\/ul>\\n<table>\\n<thead>\\n<tr>\\n<th>\\u7c7b\\u578b\\u540d\\u79f0<\\/th>\\n<th style=\\"text-align: center;\\">\\u5b57\\u8282\\u6570\\uff08byte\\uff09<\\/th>\\n<th style=\\"text-align: center;\\">\\u4f4d\\uff08bit\\uff09<\\/th>\\n<th>\\u53d6\\u503c\\u8303\\u56f4<\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td>unsigned char<\\/td>\\n<td style=\\"text-align: center;\\">1<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td>0~255<\\/td>\\n<\\/tr>\\n<tr>\\n<td>unsigned short<\\/td>\\n<td style=\\"text-align: center;\\">2<\\/td>\\n<td style=\\"text-align: center;\\">16<\\/td>\\n<td>0~65535<\\/td>\\n<\\/tr>\\n<tr>\\n<td>unsigned int<\\/td>\\n<td style=\\"text-align: center;\\">4<\\/td>\\n<td style=\\"text-align: center;\\">32<\\/td>\\n<td>0~4294967295<\\/td>\\n<\\/tr>\\n<tr>\\n<td>unsigned long<\\/td>\\n<td style=\\"text-align: center;\\">4<\\/td>\\n<td style=\\"text-align: center;\\">32<\\/td>\\n<td>0~4294967295<\\/td>\\n<\\/tr>\\n<tr>\\n<td>unsigned long long<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td style=\\"text-align: center;\\">64<\\/td>\\n<td>0~18446744073709551615<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<ul>\\n<li>\\u6d6e\\u70b9\\u578b\\uff1afloat\\u3001double\\u3001long double<\\/li>\\n<\\/ul>\\n<table>\\n<thead>\\n<tr>\\n<th>\\u7c7b\\u578b\\u540d\\u79f0<\\/th>\\n<th style=\\"text-align: center;\\">\\u5b57\\u8282\\u6570\\uff08byte\\uff09<\\/th>\\n<th style=\\"text-align: center;\\">\\u4f4d\\uff08bit\\uff09<\\/th>\\n<th>\\u6570\\u503c\\u8303\\u56f4<\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td>float<\\/td>\\n<td style=\\"text-align: center;\\">4<\\/td>\\n<td style=\\"text-align: center;\\">32<\\/td>\\n<td>+-3.4E38\\uff08\\u7cbe\\u786e\\u52306\\u4f4d\\u5c0f\\u6570\\uff09<\\/td>\\n<\\/tr>\\n<tr>\\n<td>double<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td style=\\"text-align: center;\\">64<\\/td>\\n<td>+-1.7E308\\uff08\\u7cbe\\u786e\\u523015\\u4f4d\\u5c0f\\u6570\\uff09<\\/td>\\n<\\/tr>\\n<tr>\\n<td>long double<\\/td>\\n<td style=\\"text-align: center;\\">12<\\/td>\\n<td style=\\"text-align: center;\\">128<\\/td>\\n<td>+-1.19E4932\\uff08\\u7cbe\\u786e\\u523018\\u4f4d\\u5c0f\\u6570\\uff09<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<h4>Go \\u8bed\\u8a00\\u7684\\u6570\\u503c\\u7c7b\\u578b<\\/h4>\\n<ul>\\n<li>\\u6574\\u6570<\\/li>\\n<\\/ul>\\n<table>\\n<thead>\\n<tr>\\n<th>\\u7c7b\\u578b\\u540d\\u79f0<\\/th>\\n<th style=\\"text-align: center;\\">\\u5b57\\u8282\\u6570\\uff08byte\\uff09<\\/th>\\n<th style=\\"text-align: center;\\">\\u4f4d\\uff08bit\\uff09<\\/th>\\n<th>\\u53d6\\u503c\\u8303\\u56f4<\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td>int<\\/td>\\n<td style=\\"text-align: center;\\">\\u5e73\\u53f0\\u76f8\\u5173<\\/td>\\n<td style=\\"text-align: center;\\">\\u5e73\\u53f0\\u76f8\\u5173<\\/td>\\n<td>\\u5e73\\u53f0\\u76f8\\u5173<\\/td>\\n<\\/tr>\\n<tr>\\n<td>int8<\\/td>\\n<td style=\\"text-align: center;\\">1<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td>-128~+127<\\/td>\\n<\\/tr>\\n<tr>\\n<td>int16<\\/td>\\n<td style=\\"text-align: center;\\">2<\\/td>\\n<td style=\\"text-align: center;\\">16<\\/td>\\n<td>-32768~+32767<\\/td>\\n<\\/tr>\\n<tr>\\n<td>int32<\\/td>\\n<td style=\\"text-align: center;\\">4<\\/td>\\n<td style=\\"text-align: center;\\">32<\\/td>\\n<td>-2147438648~+2147438647<\\/td>\\n<\\/tr>\\n<tr>\\n<td>int64<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td style=\\"text-align: center;\\">64<\\/td>\\n<td>-9223372036854775808~+9223372036854775807<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<ul>\\n<li>\\u65e0\\u7b26\\u53f7\\u6574\\u6570\\u7c7b\\u578b<\\/li>\\n<\\/ul>\\n<table>\\n<thead>\\n<tr>\\n<th>\\u7c7b\\u578b\\u540d\\u79f0<\\/th>\\n<th style=\\"text-align: center;\\">\\u5b57\\u8282\\u6570\\uff08byte\\uff09<\\/th>\\n<th style=\\"text-align: center;\\">\\u4f4d\\uff08bit\\uff09<\\/th>\\n<th>\\u53d6\\u503c\\u8303\\u56f4<\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td>unit<\\/td>\\n<td style=\\"text-align: center;\\">\\u5e73\\u53f0\\u76f8\\u5173<\\/td>\\n<td style=\\"text-align: center;\\">\\u5e73\\u53f0\\u76f8\\u5173<\\/td>\\n<td>\\u5e73\\u53f0\\u76f8\\u5173<\\/td>\\n<\\/tr>\\n<tr>\\n<td>unit8\\uff08\\u5373byte\\uff09<\\/td>\\n<td style=\\"text-align: center;\\">1<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td>0~255<\\/td>\\n<\\/tr>\\n<tr>\\n<td>uint16<\\/td>\\n<td style=\\"text-align: center;\\">2<\\/td>\\n<td style=\\"text-align: center;\\">16<\\/td>\\n<td>0~65535<\\/td>\\n<\\/tr>\\n<tr>\\n<td>uint32<\\/td>\\n<td style=\\"text-align: center;\\">4<\\/td>\\n<td style=\\"text-align: center;\\">32<\\/td>\\n<td>0~4294967295<\\/td>\\n<\\/tr>\\n<tr>\\n<td>uint 64<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td style=\\"text-align: center;\\">64<\\/td>\\n<td>0~18446744073709551615<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<ul>\\n<li>\\u6d6e\\u70b9\\u578b<\\/li>\\n<\\/ul>\\n<p>Go \\u8bed\\u8a00\\u4e2d\\u6ca1\\u6709 float \\u7c7b\\u578b<\\/p>\\n<table>\\n<thead>\\n<tr>\\n<th>\\u7c7b\\u578b\\u540d\\u79f0<\\/th>\\n<th style=\\"text-align: center;\\">\\u5b57\\u8282\\u6570\\uff08byte\\uff09<\\/th>\\n<th style=\\"text-align: center;\\">\\u4f4d\\uff08bit\\uff09<\\/th>\\n<th>\\u6570\\u503c\\u8303\\u56f4<\\/th>\\n<\\/tr>\\n<\\/thead>\\n<tbody>\\n<tr>\\n<td>float32<\\/td>\\n<td style=\\"text-align: center;\\">4<\\/td>\\n<td style=\\"text-align: center;\\">32<\\/td>\\n<td>+-1.4E-45 ~ +-3.4E38\\uff08\\u7cbe\\u786e\\u52307\\u4f4d\\u5c0f\\u6570\\uff09<\\/td>\\n<\\/tr>\\n<tr>\\n<td>float64<\\/td>\\n<td style=\\"text-align: center;\\">8<\\/td>\\n<td style=\\"text-align: center;\\">64<\\/td>\\n<td>+-4.94 * 1E-324 ~ +-1.79E308\\uff08\\u7cbe\\u786e\\u523015\\u4f4d\\u5c0f\\u6570\\uff09<\\/td>\\n<\\/tr>\\n<\\/tbody>\\n<\\/table>\\n<p>Go \\u8bed\\u8a00 float32 \\u7b49\\u4ef7\\u4e8e C\\u8bed\\u8a00\\u7684 float\\uff0cfloat64 \\u7b49\\u4ef7\\u4e8eC\\u8bed\\u8a00\\u7684double\\u7c7b\\u578b\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '变量是计算机里一块特定的内存，它是由一个或多个连续的字节所组成。每个变量都有一名称，该名称表示内存的这个位置，以提取它包含的数据或存储一个新数值。那么，整数类型在C 与 Go 中有什么区别呢',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 109,
                'published_at' => '2020-09-24 22:00:00',
                'created_at' => '2020-09-25 00:53:33',
                'updated_at' => '2022-01-04 18:44:43',
                'deleted_at' => NULL,
            ),
            7 => 
            array (
                'id' => 8,
                'category_id' => 4,
                'collection_id' => 1,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => '3q5le',
                'title' => '【C vs Go】4：变量 - 布尔类型',
                'subtitle' => 'bool',
            'content' => '{"raw":"#### C \\u5b58\\u50a8\\u5e03\\u5c14\\u503c\\u7684\\u53d8\\u91cf\\n\\n_Bool \\u7c7b\\u578b\\u5b58\\u50a8\\u5e03\\u5c14\\u503c\\u3002\\u5e03\\u5c14\\u503c\\u4e00\\u822c\\u662f\\u6bd4\\u8f83\\u7684\\u7ed3\\u679c true \\u6216 false\\u3002_Bool \\u7c7b\\u578b\\u7684\\u53d8\\u91cf\\u503c\\u53ef\\u4ee5\\u662f 0 \\u6216 1\\uff0c\\u5bf9\\u5e94\\u4e8e\\u5e03\\u5c14\\u503c false \\u548c true\\u3002\\u7531\\u4e8e\\u503c  0  \\u548c 1 \\u662f\\u6574\\u6570\\uff0c\\u6240\\u4ee5_Bool \\u7c7b\\u578b\\u4e5f\\u88ab\\u770b\\u4f5c\\u6574\\u6570\\u7c7b\\u578b\\u3002\\u58f0\\u660e _Bool \\u53d8\\u91cf\\u7684\\u65b9\\u5f0f\\u4e0e\\u58f0\\u660e\\u5176\\u4ed6\\u6574\\u6570\\u7c7b\\u578b\\u4e00\\u6837\\uff0c\\u4f8b\\u5982\\uff1a\\n```\\n\\t_Bool valid = 1; \\/* \\u5e03\\u5c14\\u503c\\u521d\\u59cb\\u5316\\u4e3a true *\\/\\n```\\n_Bool \\u5e76\\u4e0d\\u662f\\u4e00\\u4e2a\\u7406\\u60f3\\u7684\\u7c7b\\u578b\\u540d\\u79f0\\u3002\\u540d\\u79f0 bool \\u770b\\u8d77\\u6765\\u66f4\\u7b80\\u6d01\\u3001\\u53ef\\u8bfb\\u6027\\u66f4\\u9ad8\\uff0c\\u4f46\\u5e03\\u5c14\\u7c7b\\u578b\\u662f\\u6700\\u8fd1\\u624d\\u5f15\\u5165 C \\u8bed\\u8a00\\u7684\\uff0c\\u6240\\u4ee5\\u9009\\u62e9\\u7c7b\\u578b\\u540d\\u79f0 _Bool \\uff0c\\u53ef\\u4ee5\\u662f\\u6700\\u5927\\u9650\\u5ea6\\u5730\\u51cf\\u5c11\\u4e0e\\u5df2\\u6709\\u4ee3\\u7801\\u51b2\\u7a81\\u7684\\u53ef\\u80fd\\u6027\\u3002\\n\\n\\u5728 C99 \\u6807\\u51c6\\u4e2d\\uff0c\\u652f\\u6301 Boolean \\u4f5c\\u4e3a\\u5185\\u7f6e\\u7c7b\\u578b\\u3002\\u5f53\\u5f15\\u5165\\u5934\\u6587\\u4ef6 <stdbool.h> \\u540e\\uff0c\\u90a3\\u4e48\\u5e03\\u5c14\\u7c7b\\u578bbool\\u7684\\u58f0\\u660e\\u5c31\\u53ef\\u4ee5\\u88ab\\u4f7f\\u7528\\u3002\\u4f8b\\u5982\\uff1a\\n```\\n#include <stdio.h>\\n#include <stdbool.h>\\n\\nint main(void)\\n{\\n\\tbool a=true, b=false;\\n\\tprintf(\\"%d\\\\n\\", a&&b);\\n\\tprintf(\\"%d\\\\n\\", a||b);\\n\\tprintf(\\"%d\\\\n\\", !b);\\n}\\n```\\n\\u8f93\\u51fa\\uff1a\\n```\\n0\\n1\\n1\\n```\\n\\n#### Go \\u5b58\\u50a8\\u5e03\\u5c14\\u503c\\u7684\\u53d8\\u91cf\\n\\nGo \\u8bed\\u8a00\\u4e2d\\u7684\\u5e03\\u5c14\\u7c7b\\u578b\\u5219\\u4e0e C99 \\u6807\\u51c6\\u4e2d C \\u4e00\\u81f4\\uff0c\\u5173\\u952e\\u5b57\\u4e5f\\u4e3a bool\\uff0c\\u53ef\\u8d4b\\u503c\\u4e3a\\u9884\\u5b9a\\u4e49\\u7684 true \\u548c false\\u3002\\n\\nGo \\u5e03\\u5c14\\u7c7b\\u578b\\u4e0d\\u80fd\\u63a5\\u53d7\\u5176\\u4ed6\\u7c7b\\u578b\\u7684\\u8d4b\\u503c\\uff0c\\u4e0d\\u652f\\u6301\\u81ea\\u52a8\\u6216\\u5f3a\\u5236\\u7684\\u7c7b\\u578b\\u8f6c\\u6362\\u3002\\u793a\\u4f8b\\uff1a\\n```\\nvar v1 bool\\nv1 = true\\nv2 := (0 == 1) \\/\\/ v2\\u4f1a\\u88ab\\u63a8\\u5bfc\\u4e3a bool \\u7c7b\\u578b\\n\\n\\/\\/ \\u9519\\u8bef\\u7684\\u65b9\\u5f0f\\nvar a bool\\na = 0 \\/\\/ \\u7f16\\u8bd1\\u9519\\u8bef\\na = bool(1) \\/\\/ \\u7f16\\u8bd1\\u9519\\u8bef\\n```","html":"<h4>C \\u5b58\\u50a8\\u5e03\\u5c14\\u503c\\u7684\\u53d8\\u91cf<\\/h4>\\n<p>_Bool \\u7c7b\\u578b\\u5b58\\u50a8\\u5e03\\u5c14\\u503c\\u3002\\u5e03\\u5c14\\u503c\\u4e00\\u822c\\u662f\\u6bd4\\u8f83\\u7684\\u7ed3\\u679c true \\u6216 false\\u3002_Bool \\u7c7b\\u578b\\u7684\\u53d8\\u91cf\\u503c\\u53ef\\u4ee5\\u662f 0 \\u6216 1\\uff0c\\u5bf9\\u5e94\\u4e8e\\u5e03\\u5c14\\u503c false \\u548c true\\u3002\\u7531\\u4e8e\\u503c  0  \\u548c 1 \\u662f\\u6574\\u6570\\uff0c\\u6240\\u4ee5_Bool \\u7c7b\\u578b\\u4e5f\\u88ab\\u770b\\u4f5c\\u6574\\u6570\\u7c7b\\u578b\\u3002\\u58f0\\u660e _Bool \\u53d8\\u91cf\\u7684\\u65b9\\u5f0f\\u4e0e\\u58f0\\u660e\\u5176\\u4ed6\\u6574\\u6570\\u7c7b\\u578b\\u4e00\\u6837\\uff0c\\u4f8b\\u5982\\uff1a<\\/p>\\n<pre><code>    _Bool valid = 1; \\/* \\u5e03\\u5c14\\u503c\\u521d\\u59cb\\u5316\\u4e3a true *\\/<\\/code><\\/pre>\\n<p>_Bool \\u5e76\\u4e0d\\u662f\\u4e00\\u4e2a\\u7406\\u60f3\\u7684\\u7c7b\\u578b\\u540d\\u79f0\\u3002\\u540d\\u79f0 bool \\u770b\\u8d77\\u6765\\u66f4\\u7b80\\u6d01\\u3001\\u53ef\\u8bfb\\u6027\\u66f4\\u9ad8\\uff0c\\u4f46\\u5e03\\u5c14\\u7c7b\\u578b\\u662f\\u6700\\u8fd1\\u624d\\u5f15\\u5165 C \\u8bed\\u8a00\\u7684\\uff0c\\u6240\\u4ee5\\u9009\\u62e9\\u7c7b\\u578b\\u540d\\u79f0 _Bool \\uff0c\\u53ef\\u4ee5\\u662f\\u6700\\u5927\\u9650\\u5ea6\\u5730\\u51cf\\u5c11\\u4e0e\\u5df2\\u6709\\u4ee3\\u7801\\u51b2\\u7a81\\u7684\\u53ef\\u80fd\\u6027\\u3002<\\/p>\\n<p>\\u5728 C99 \\u6807\\u51c6\\u4e2d\\uff0c\\u652f\\u6301 Boolean \\u4f5c\\u4e3a\\u5185\\u7f6e\\u7c7b\\u578b\\u3002\\u5f53\\u5f15\\u5165\\u5934\\u6587\\u4ef6 <stdbool.h> \\u540e\\uff0c\\u90a3\\u4e48\\u5e03\\u5c14\\u7c7b\\u578bbool\\u7684\\u58f0\\u660e\\u5c31\\u53ef\\u4ee5\\u88ab\\u4f7f\\u7528\\u3002\\u4f8b\\u5982\\uff1a<\\/p>\\n<pre><code>#include &lt;stdio.h&gt;\\n#include &lt;stdbool.h&gt;\\n\\nint main(void)\\n{\\n    bool a=true, b=false;\\n    printf(\\"%d\\\\n\\", a&amp;&amp;b);\\n    printf(\\"%d\\\\n\\", a||b);\\n    printf(\\"%d\\\\n\\", !b);\\n}<\\/code><\\/pre>\\n<p>\\u8f93\\u51fa\\uff1a<\\/p>\\n<pre><code>0\\n1\\n1<\\/code><\\/pre>\\n<h4>Go \\u5b58\\u50a8\\u5e03\\u5c14\\u503c\\u7684\\u53d8\\u91cf<\\/h4>\\n<p>Go \\u8bed\\u8a00\\u4e2d\\u7684\\u5e03\\u5c14\\u7c7b\\u578b\\u5219\\u4e0e C99 \\u6807\\u51c6\\u4e2d C \\u4e00\\u81f4\\uff0c\\u5173\\u952e\\u5b57\\u4e5f\\u4e3a bool\\uff0c\\u53ef\\u8d4b\\u503c\\u4e3a\\u9884\\u5b9a\\u4e49\\u7684 true \\u548c false\\u3002<\\/p>\\n<p>Go \\u5e03\\u5c14\\u7c7b\\u578b\\u4e0d\\u80fd\\u63a5\\u53d7\\u5176\\u4ed6\\u7c7b\\u578b\\u7684\\u8d4b\\u503c\\uff0c\\u4e0d\\u652f\\u6301\\u81ea\\u52a8\\u6216\\u5f3a\\u5236\\u7684\\u7c7b\\u578b\\u8f6c\\u6362\\u3002\\u793a\\u4f8b\\uff1a<\\/p>\\n<pre><code>var v1 bool\\nv1 = true\\nv2 := (0 == 1) \\/\\/ v2\\u4f1a\\u88ab\\u63a8\\u5bfc\\u4e3a bool \\u7c7b\\u578b\\n\\n\\/\\/ \\u9519\\u8bef\\u7684\\u65b9\\u5f0f\\nvar a bool\\na = 0 \\/\\/ \\u7f16\\u8bd1\\u9519\\u8bef\\na = bool(1) \\/\\/ \\u7f16\\u8bd1\\u9519\\u8bef<\\/code><\\/pre>"}',
                'page_image' => NULL,
                'meta_description' => '变量类型中比较简单与独立的种类',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 276,
                'published_at' => '2020-09-26 17:45:00',
                'created_at' => '2020-09-26 17:54:26',
                'updated_at' => '2022-01-09 08:17:07',
                'deleted_at' => NULL,
            ),
            8 => 
            array (
                'id' => 9,
                'category_id' => 8,
                'collection_id' => 3,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'makefile-ly8b1',
                'title' => '跟我一起写 Makefile -- 书写命令',
                'subtitle' => '书写命令',
            'content' => '{"raw":"### \\u4e66\\u5199\\u547d\\u4ee4\\n\\n----\\n\\n\\u6bcf\\u6761\\u89c4\\u5219\\u4e2d\\u7684\\u547d\\u4ee4\\u548c\\u64cd\\u4f5c\\u7cfb\\u7edfShell\\u7684\\u547d\\u4ee4\\u884c\\u662f\\u4e00\\u81f4\\u7684\\u3002make\\u4f1a\\u4e00\\u6309\\u987a\\u5e8f\\u4e00\\u6761\\u4e00\\u6761\\u7684\\u6267\\u884c\\u547d\\u4ee4\\uff0c\\u6bcf\\u6761\\u547d\\u4ee4\\u7684\\u5f00\\u5934\\u5fc5\\u987b\\u4ee5[Tab]\\u952e\\u5f00\\u5934\\uff0c\\u9664\\u975e\\uff0c\\u547d\\u4ee4\\u662f\\u7d27\\u8ddf\\u5728\\u4f9d\\u8d56\\u89c4\\u5219\\u540e\\u9762\\u7684\\u5206\\u53f7\\u4e4b\\u540e\\u3002\\u5728\\u547d\\u4ee4\\u884c\\u4e4b\\u95f4\\u4e2d\\u7684\\u7a7a\\u683c\\u6216\\u662f\\u7a7a\\u884c\\u4f1a\\u88ab\\u5ffd\\u7565\\uff0c\\u4f46\\u662f\\u5982\\u679c\\u8be5\\u7a7a\\u683c\\u6216\\u7a7a\\u884c\\u662f\\u4ee5Tab\\u952e\\u5f00\\u5934\\u7684\\uff0c\\u90a3\\u4e48make\\u4f1a\\u8ba4\\u4e3a\\u5176\\u662f\\u4e00\\u4e2a\\u7a7a\\u547d\\u4ee4\\u3002\\n\\n\\u6211\\u4eec\\u5728UNIX\\u4e0b\\u53ef\\u80fd\\u4f1a\\u4f7f\\u7528\\u4e0d\\u540c\\u7684Shell\\uff0c\\u4f46\\u662fmake\\u7684\\u547d\\u4ee4\\u9ed8\\u8ba4\\u662f\\u88ab `\\/bin\\/sh` \\u2014\\u2014 UNIX\\u7684\\u6807\\u51c6Shell\\u89e3\\u91ca\\u6267\\u884c\\u7684\\u3002\\u9664\\u975e\\u4f60\\u7279\\u522b\\u6307\\u5b9a\\u4e00\\u4e2a\\u5176\\u5b83\\u7684Shell\\u3002Makefile\\u4e2d\\uff0c\\u201c#\\u201d\\u662f\\u6ce8\\u91ca\\u7b26\\uff0c\\u5f88\\u50cfC\\/C++\\u4e2d\\u7684`\\/\\/`\\uff0c\\u5176\\u540e\\u7684\\u672c\\u884c\\u5b57\\u7b26\\u90fd\\u88ab\\u6ce8\\u91ca\\u3002\\n\\n#### \\u4e00\\u3001\\u663e\\u793a\\u547d\\u4ee4\\n\\n\\u901a\\u5e38\\uff0cmake\\u4f1a\\u628a\\u5176\\u8981\\u6267\\u884c\\u7684\\u547d\\u4ee4\\u884c\\u5728\\u547d\\u4ee4\\u6267\\u884c\\u524d\\u8f93\\u51fa\\u5230\\u5c4f\\u5e55\\u4e0a\\u3002\\u5f53\\u6211\\u4eec\\u7528`@`\\u5b57\\u7b26\\u5728\\u547d\\u4ee4\\u884c\\u524d\\uff0c\\u90a3\\u4e48\\uff0c\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5c06\\u4e0d\\u88abmake\\u663e\\u793a\\u51fa\\u6765\\uff0c\\u6700\\u5177\\u4ee3\\u8868\\u6027\\u7684\\u4f8b\\u5b50\\u662f\\uff0c\\u6211\\u4eec\\u7528\\u8fd9\\u4e2a\\u529f\\u80fd\\u6765\\u50cf\\u5c4f\\u5e55\\u663e\\u793a\\u4e00\\u4e9b\\u4fe1\\u606f\\u3002\\u5982\\uff1a\\n\\n    @echo \\u6b63\\u5728\\u7f16\\u8bd1XXX\\u6a21\\u5757......\\n\\n\\u5f53make\\u6267\\u884c\\u65f6\\uff0c\\u4f1a\\u8f93\\u51fa\\u201c\\u6b63\\u5728\\u7f16\\u8bd1XXX\\u6a21\\u5757......\\u201d\\u5b57\\u4e32\\uff0c\\u4f46\\u4e0d\\u4f1a\\u8f93\\u51fa\\u547d\\u4ee4\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u201c@\\u201d\\uff0c\\u90a3\\u4e48\\uff0cmake\\u5c06\\u8f93\\u51fa\\uff1a\\n\\n    echo \\u6b63\\u5728\\u7f16\\u8bd1XXX\\u6a21\\u5757......\\n    \\u6b63\\u5728\\u7f16\\u8bd1XXX\\u6a21\\u5757......\\n\\n\\u5982\\u679cmake\\u6267\\u884c\\u65f6\\uff0c\\u5e26\\u5165make\\u53c2\\u6570`-n`\\u6216`--just-print`\\uff0c\\u90a3\\u4e48\\u5176\\u53ea\\u662f\\u663e\\u793a\\u547d\\u4ee4\\uff0c\\u4f46\\u4e0d\\u4f1a\\u6267\\u884c\\u547d\\u4ee4\\uff0c\\u8fd9\\u4e2a\\u529f\\u80fd\\u5f88**\\u6709\\u5229\\u4e8e\\u6211\\u4eec\\u8c03\\u8bd5\\u6211\\u4eec\\u7684Makefile\\uff0c\\u770b\\u770b\\u6211\\u4eec\\u4e66\\u5199\\u7684\\u547d\\u4ee4\\u662f\\u6267\\u884c\\u8d77\\u6765\\u662f\\u4ec0\\u4e48\\u6837\\u5b50\\u7684\\u6216\\u662f\\u4ec0\\u4e48\\u987a\\u5e8f\\u7684**\\u3002\\n\\n\\u800cmake\\u53c2\\u6570`-s`\\u6216`--slient`\\u6216`--quiet`\\u5219\\u662f\\u5168\\u9762\\u7981\\u6b62\\u547d\\u4ee4\\u7684\\u663e\\u793a\\u3002\\n\\n#### \\u4e8c\\u3001\\u547d\\u4ee4\\u6267\\u884c\\n\\n\\u5f53\\u4f9d\\u8d56\\u76ee\\u6807\\u65b0\\u4e8e\\u76ee\\u6807\\u65f6\\uff0c\\u4e5f\\u5c31\\u662f\\u5f53\\u89c4\\u5219\\u7684\\u76ee\\u6807\\u9700\\u8981\\u88ab\\u66f4\\u65b0\\u65f6\\uff0cmake\\u4f1a\\u4e00\\u6761\\u4e00\\u6761\\u7684\\u6267\\u884c\\u5176\\u540e\\u7684\\u547d\\u4ee4\\u3002\\u9700\\u8981\\u6ce8\\u610f\\u7684\\u662f\\uff0c\\u5982\\u679c\\u4f60\\u8981\\u8ba9\\u4e0a\\u4e00\\u6761\\u547d\\u4ee4\\u7684\\u7ed3\\u679c\\u5e94\\u7528\\u5728\\u4e0b\\u4e00\\u6761\\u547d\\u4ee4\\u65f6\\uff0c\\u4f60\\u5e94\\u8be5\\u4f7f\\u7528\\u5206\\u53f7\\u5206\\u9694\\u8fd9\\u4e24\\u6761\\u547d\\u4ee4\\u3002\\u6bd4\\u5982\\u4f60\\u7684\\u7b2c\\u4e00\\u6761\\u547d\\u4ee4\\u662fcd\\u547d\\u4ee4\\uff0c\\u4f60\\u5e0c\\u671b\\u7b2c\\u4e8c\\u6761\\u547d\\u4ee4\\u5f97\\u5728cd\\u4e4b\\u540e\\u7684\\u57fa\\u7840\\u4e0a\\u8fd0\\u884c\\uff0c\\u90a3\\u4e48\\u4f60\\u5c31\\u4e0d\\u80fd\\u628a\\u8fd9\\u4e24\\u6761\\u547d\\u4ee4\\u5199\\u5728\\u4e24\\u884c\\u4e0a\\uff0c\\u800c\\u5e94\\u8be5\\u628a\\u8fd9\\u4e24\\u6761\\u547d\\u4ee4\\u5199\\u5728\\u4e00\\u884c\\u4e0a\\uff0c\\u7528\\u5206\\u53f7\\u5206\\u9694\\u3002\\u5982\\uff1a\\n```\\n\\u793a\\u4f8b\\u4e00\\uff1a\\nexec:\\n\\tcd \\/home\\/hchen\\n\\tpwd\\n\\n\\u793a\\u4f8b\\u4e8c\\uff1a\\nexec:\\n\\tcd \\/home\\/hchen; pwd\\n```\\n\\u5f53\\u6211\\u4eec\\u6267\\u884c\\u201cmake exec\\u201d\\u65f6\\uff0c\\u7b2c\\u4e00\\u4e2a\\u4f8b\\u5b50\\u4e2d\\u7684cd\\u6ca1\\u6709\\u4f5c\\u7528\\uff0cpwd\\u4f1a\\u6253\\u5370\\u51fa\\u5f53\\u524d\\u7684Makefile\\u76ee\\u5f55\\uff0c\\u800c\\u7b2c\\u4e8c\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0ccd\\u5c31\\u8d77\\u4f5c\\u7528\\u4e86\\uff0cpwd\\u4f1a\\u6253\\u5370\\u51fa\\u201c\\/home\\/hchen\\u201d\\u3002\\n\\nmake\\u4e00\\u822c\\u662f\\u4f7f\\u7528\\u73af\\u5883\\u53d8\\u91cfSHELL\\u4e2d\\u6240\\u5b9a\\u4e49\\u7684\\u7cfb\\u7edfShell\\u6765\\u6267\\u884c\\u547d\\u4ee4\\uff0c\\u9ed8\\u8ba4\\u60c5\\u51b5\\u4e0b\\u4f7f\\u7528UNIX\\u7684\\u6807\\u51c6Shell\\u2014\\u2014`\\/bin\\/sh`\\u6765\\u6267\\u884c\\u547d\\u4ee4\\u3002\\u4f46\\u5728MS-DOS\\u4e0b\\u6709\\u70b9\\u7279\\u6b8a\\uff0c\\u56e0\\u4e3aMS-DOS\\u4e0b\\u6ca1\\u6709SHELL\\u73af\\u5883\\u53d8\\u91cf\\uff0c\\u5f53\\u7136\\u4f60\\u4e5f\\u53ef\\u4ee5\\u6307\\u5b9a\\u3002\\u5982\\u679c\\u4f60\\u6307\\u5b9a\\u4e86UNIX\\u98ce\\u683c\\u7684\\u76ee\\u5f55\\u5f62\\u5f0f\\uff0c\\u9996\\u5148\\uff0cmake\\u4f1a\\u5728SHELL\\u6240\\u6307\\u5b9a\\u7684\\u8def\\u5f84\\u4e2d\\u627e\\u5bfb\\u547d\\u4ee4\\u89e3\\u91ca\\u5668\\uff0c\\u5982\\u679c\\u627e\\u4e0d\\u5230\\uff0c\\u5176\\u4f1a\\u5728\\u5f53\\u524d\\u76d8\\u7b26\\u4e2d\\u7684\\u5f53\\u524d\\u76ee\\u5f55\\u4e2d\\u5bfb\\u627e\\uff0c\\u5982\\u679c\\u518d\\u627e\\u4e0d\\u5230\\uff0c\\u5176\\u4f1a\\u5728PATH\\u73af\\u5883\\u53d8\\u91cf\\u4e2d\\u6240\\u5b9a\\u4e49\\u7684\\u6240\\u6709\\u8def\\u5f84\\u4e2d\\u5bfb\\u627e\\u3002MS-DOS\\u4e2d\\uff0c\\u5982\\u679c\\u4f60\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u89e3\\u91ca\\u5668\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u5176\\u4f1a\\u7ed9\\u4f60\\u7684\\u547d\\u4ee4\\u89e3\\u91ca\\u5668\\u52a0\\u4e0a\\u8bf8\\u5982\\u201c.exe\\u201d\\u3001\\u201c.com\\u201d\\u3001\\u201c.bat\\u201d\\u3001\\u201c.sh\\u201d\\u7b49\\u540e\\u7f00\\u3002\\n\\n#### \\u4e09\\u3001\\u547d\\u4ee4\\u51fa\\u9519\\n\\n\\u6bcf\\u5f53\\u547d\\u4ee4\\u8fd0\\u884c\\u5b8c\\u540e\\uff0cmake\\u4f1a\\u68c0\\u6d4b\\u6bcf\\u4e2a\\u547d\\u4ee4\\u7684\\u8fd4\\u56de\\u7801\\uff0c\\u5982\\u679c\\u547d\\u4ee4\\u8fd4\\u56de\\u6210\\u529f\\uff0c\\u90a3\\u4e48make\\u4f1a\\u6267\\u884c\\u4e0b\\u4e00\\u6761\\u547d\\u4ee4\\uff0c\\u5f53\\u89c4\\u5219\\u4e2d\\u6240\\u6709\\u7684\\u547d\\u4ee4\\u6210\\u529f\\u8fd4\\u56de\\u540e\\uff0c\\u8fd9\\u4e2a\\u89c4\\u5219\\u5c31\\u7b97\\u662f\\u6210\\u529f\\u5b8c\\u6210\\u4e86\\u3002\\u5982\\u679c\\u4e00\\u4e2a\\u89c4\\u5219\\u4e2d\\u7684\\u67d0\\u4e2a\\u547d\\u4ee4\\u51fa\\u9519\\u4e86\\uff08\\u547d\\u4ee4\\u9000\\u51fa\\u7801\\u975e\\u96f6\\uff09\\uff0c\\u90a3\\u4e48make\\u5c31\\u4f1a\\u7ec8\\u6b62\\u6267\\u884c\\u5f53\\u524d\\u89c4\\u5219\\uff0c\\u8fd9\\u5c06\\u6709\\u53ef\\u80fd\\u7ec8\\u6b62\\u6240\\u6709\\u89c4\\u5219\\u7684\\u6267\\u884c\\u3002\\n\\n\\u6709\\u4e9b\\u65f6\\u5019\\uff0c\\u547d\\u4ee4\\u7684\\u51fa\\u9519\\u5e76\\u4e0d\\u8868\\u793a\\u5c31\\u662f\\u9519\\u8bef\\u7684\\u3002\\u4f8b\\u5982mkdir\\u547d\\u4ee4\\uff0c\\u6211\\u4eec\\u4e00\\u5b9a\\u9700\\u8981\\u5efa\\u7acb\\u4e00\\u4e2a\\u76ee\\u5f55\\uff0c\\u5982\\u679c\\u76ee\\u5f55\\u4e0d\\u5b58\\u5728\\uff0c\\u90a3\\u4e48mkdir\\u5c31\\u6210\\u529f\\u6267\\u884c\\uff0c\\u4e07\\u4e8b\\u5927\\u5409\\uff0c\\u5982\\u679c\\u76ee\\u5f55\\u5b58\\u5728\\uff0c\\u90a3\\u4e48\\u5c31\\u51fa\\u9519\\u4e86\\u3002\\u6211\\u4eec\\u4e4b\\u6240\\u4ee5\\u4f7f\\u7528mkdir\\u7684\\u610f\\u601d\\u5c31\\u662f\\u4e00\\u5b9a\\u8981\\u6709\\u8fd9\\u6837\\u7684\\u4e00\\u4e2a\\u76ee\\u5f55\\uff0c\\u4e8e\\u662f\\u6211\\u4eec\\u5c31\\u4e0d\\u5e0c\\u671bmkdir\\u51fa\\u9519\\u800c\\u7ec8\\u6b62\\u89c4\\u5219\\u7684\\u8fd0\\u884c\\u3002\\n\\n\\u4e3a\\u4e86\\u505a\\u5230\\u8fd9\\u4e00\\u70b9\\uff0c\\u5ffd\\u7565\\u547d\\u4ee4\\u7684\\u51fa\\u9519\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5728Makefile\\u7684\\u547d\\u4ee4\\u884c\\u524d\\u52a0\\u4e00\\u4e2a\\u51cf\\u53f7\\u201c-\\u201d\\uff08\\u5728Tab\\u952e\\u4e4b\\u540e\\uff09\\uff0c\\u6807\\u8bb0\\u4e3a\\u4e0d\\u7ba1\\u547d\\u4ee4\\u51fa\\u4e0d\\u51fa\\u9519\\u90fd\\u8ba4\\u4e3a\\u662f\\u6210\\u529f\\u7684\\u3002\\u5982\\uff1a\\n```\\nclean:\\n\\t-rm -f *.o\\n```\\n\\u8fd8\\u6709\\u4e00\\u4e2a\\u5168\\u5c40\\u7684\\u529e\\u6cd5\\u662f\\uff0c\\u7ed9make\\u52a0\\u4e0a`-i`\\u6216\\u662f`--ignore-errors`\\u53c2\\u6570\\uff0c\\u90a3\\u4e48\\uff0cMakefile\\u4e2d\\u6240\\u6709\\u547d\\u4ee4\\u90fd\\u4f1a\\u5ffd\\u7565\\u9519\\u8bef\\u3002\\u800c\\u5982\\u679c\\u4e00\\u4e2a\\u89c4\\u5219\\u662f\\u4ee5`.IGNORE`\\u4f5c\\u4e3a\\u76ee\\u6807\\u7684\\uff0c\\u90a3\\u4e48\\u8fd9\\u4e2a\\u89c4\\u5219\\u4e2d\\u7684\\u6240\\u6709\\u547d\\u4ee4\\u5c06\\u4f1a\\u5ffd\\u7565\\u9519\\u8bef\\u3002\\u8fd9\\u4e9b\\u662f\\u4e0d\\u540c\\u7ea7\\u522b\\u7684\\u9632\\u6b62\\u547d\\u4ee4\\u51fa\\u9519\\u7684\\u65b9\\u6cd5\\uff0c\\u4f60\\u53ef\\u4ee5\\u6839\\u636e\\u4f60\\u7684\\u4e0d\\u540c\\u559c\\u6b22\\u8bbe\\u7f6e\\u3002\\n\\n\\u8fd8\\u6709\\u4e00\\u4e2a\\u8981\\u63d0\\u4e00\\u4e0b\\u7684make\\u7684\\u53c2\\u6570\\u7684\\u662f`-k`\\u6216\\u662f`--keep-going`\\uff0c\\u8fd9\\u4e2a\\u53c2\\u6570\\u7684\\u610f\\u601d\\u662f\\uff0c\\u5982\\u679c\\u67d0\\u89c4\\u5219\\u4e2d\\u7684\\u547d\\u4ee4\\u51fa\\u9519\\u4e86\\uff0c\\u90a3\\u4e48\\u5c31\\u7ec8\\u76ee\\u8be5\\u89c4\\u5219\\u7684\\u6267\\u884c\\uff0c\\u4f46\\u7ee7\\u7eed\\u6267\\u884c\\u5176\\u5b83\\u89c4\\u5219\\u3002\\n\\n#### \\u56db\\u3001\\u5d4c\\u5957\\u6267\\u884cmake\\n\\n\\u5728\\u4e00\\u4e9b\\u5927\\u7684\\u5de5\\u7a0b\\u4e2d\\uff0c\\u6211\\u4eec\\u4f1a\\u628a\\u6211\\u4eec\\u4e0d\\u540c\\u6a21\\u5757\\u6216\\u662f\\u4e0d\\u540c\\u529f\\u80fd\\u7684\\u6e90\\u6587\\u4ef6\\u653e\\u5728\\u4e0d\\u540c\\u7684\\u76ee\\u5f55\\u4e2d\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5728\\u6bcf\\u4e2a\\u76ee\\u5f55\\u4e2d\\u90fd\\u4e66\\u5199\\u4e00\\u4e2a\\u8be5\\u76ee\\u5f55\\u7684Makefile\\uff0c\\u8fd9\\u6709\\u5229\\u4e8e\\u8ba9\\u6211\\u4eec\\u7684Makefile\\u53d8\\u5f97\\u66f4\\u52a0\\u5730\\u7b80\\u6d01\\uff0c\\u800c\\u4e0d\\u81f3\\u4e8e\\u628a\\u6240\\u6709\\u7684\\u4e1c\\u897f\\u5168\\u90e8\\u5199\\u5728\\u4e00\\u4e2aMakefile\\u4e2d\\uff0c\\u8fd9\\u6837\\u4f1a\\u5f88\\u96be\\u7ef4\\u62a4\\u6211\\u4eec\\u7684Makefile\\uff0c\\u8fd9\\u4e2a\\u6280\\u672f\\u5bf9\\u4e8e\\u6211\\u4eec\\u6a21\\u5757\\u7f16\\u8bd1\\u548c\\u5206\\u6bb5\\u7f16\\u8bd1\\u6709\\u7740\\u975e\\u5e38\\u5927\\u7684\\u597d\\u5904\\u3002\\n\\n\\u4f8b\\u5982\\uff0c\\u6211\\u4eec\\u6709\\u4e00\\u4e2a\\u5b50\\u76ee\\u5f55\\u53ebsubdir\\uff0c\\u8fd9\\u4e2a\\u76ee\\u5f55\\u4e0b\\u6709\\u4e2aMakefile\\u6587\\u4ef6\\uff0c\\u6765\\u6307\\u660e\\u4e86\\u8fd9\\u4e2a\\u76ee\\u5f55\\u4e0b\\u6587\\u4ef6\\u7684\\u7f16\\u8bd1\\u89c4\\u5219\\u3002\\u90a3\\u4e48\\u6211\\u4eec\\u603b\\u63a7\\u7684Makefile\\u53ef\\u4ee5\\u8fd9\\u6837\\u4e66\\u5199\\uff1a\\n```\\nsubsystem:\\n\\tcd subdir && $(MAKE)\\n```\\n\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n```\\nsubsystem:\\n\\t$(MAKE) -C subdir\\n```\\n\\u5b9a\\u4e49`$(MAKE)`\\u5b8f\\u53d8\\u91cf\\u7684\\u610f\\u601d\\u662f\\uff0c\\u4e5f\\u8bb8\\u6211\\u4eec\\u7684make\\u9700\\u8981\\u4e00\\u4e9b\\u53c2\\u6570\\uff0c\\u6240\\u4ee5\\u5b9a\\u4e49\\u6210\\u4e00\\u4e2a\\u53d8\\u91cf\\u6bd4\\u8f83\\u5229\\u4e8e\\u7ef4\\u62a4\\u3002\\u8fd9\\u4e24\\u4e2a\\u4f8b\\u5b50\\u7684\\u610f\\u601d\\u90fd\\u662f\\u5148\\u8fdb\\u5165\\u201csubdir\\u201d\\u76ee\\u5f55\\uff0c\\u7136\\u540e\\u6267\\u884cmake\\u547d\\u4ee4\\u3002\\n\\n\\u6211\\u4eec\\u628a\\u8fd9\\u4e2aMakefile\\u53eb\\u505a**\\u603b\\u63a7Makefile**\\uff0c\\u603b\\u63a7Makefile\\u7684\\u53d8\\u91cf\\u53ef\\u4ee5\\u4f20\\u9012\\u5230\\u4e0b\\u7ea7\\u7684Makefile\\u4e2d\\uff08\\u5982\\u679c\\u4f60\\u663e\\u793a\\u7684\\u58f0\\u660e\\uff09\\uff0c\\u4f46\\u662f\\u4e0d\\u4f1a\\u8986\\u76d6\\u4e0b\\u5c42\\u7684Makefile\\u4e2d\\u6240\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\uff0c\\u9664\\u975e\\u6307\\u5b9a\\u4e86\\u201c-e\\u201d\\u53c2\\u6570\\u3002\\n\\n\\u5982\\u679c\\u4f60\\u8981\\u4f20\\u9012\\u53d8\\u91cf\\u5230\\u4e0b\\u7ea7Makefile\\u4e2d\\uff0c\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u8fd9\\u6837\\u7684\\u58f0\\u660e\\uff1a\\n\\n    export <variable ...>;\\n\\n\\u5982\\u679c\\u4f60\\u4e0d\\u60f3\\u8ba9\\u67d0\\u4e9b\\u53d8\\u91cf\\u4f20\\u9012\\u5230\\u4e0b\\u7ea7Makefile\\u4e2d\\uff0c\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u8fd9\\u6837\\u58f0\\u660e\\uff1a \\n\\n    unexport <variable ...>;\\n\\n\\u5982\\uff1a\\n    \\n\\u793a\\u4f8b\\u4e00\\uff1a\\n```\\nexport variable = value\\n\\n\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\nvariable = value\\nexport variable\\n\\n\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\nexport variable := value\\n\\n\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\nvariable := value\\nexport variable\\n```\\n\\n\\u793a\\u4f8b\\u4e8c\\uff1a\\n```\\nexport variable += value\\n```\\n\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n```\\nvariable += value\\nexport variable\\n```\\n\\u5982\\u679c\\u4f60\\u8981\\u4f20\\u9012\\u6240\\u6709\\u7684\\u53d8\\u91cf\\uff0c\\u90a3\\u4e48\\uff0c\\u53ea\\u8981\\u4e00\\u4e2aexport\\u5c31\\u884c\\u4e86\\u3002\\u540e\\u9762\\u4ec0\\u4e48\\u4e5f\\u4e0d\\u7528\\u8ddf\\uff0c\\u8868\\u793a\\u4f20\\u9012\\u6240\\u6709\\u7684\\u53d8\\u91cf\\u3002\\n\\n**\\u9700\\u8981\\u6ce8\\u610f\\u7684\\u662f\\uff0c\\u6709\\u4e24\\u4e2a\\u53d8\\u91cf\\uff0c\\u4e00\\u4e2a\\u662f SHELL\\uff0c\\u4e00\\u4e2a\\u662f MAKEFLAGS\\uff0c\\u8fd9\\u4e24\\u4e2a\\u53d8\\u91cf\\u4e0d\\u7ba1\\u4f60\\u662f\\u5426export\\uff0c\\u5176\\u603b\\u662f\\u8981\\u4f20\\u9012\\u5230\\u4e0b\\u5c42Makefile\\u4e2d\\uff0c\\u7279\\u522b\\u662fMAKEFILES\\u53d8\\u91cf\\uff0c\\u5176\\u4e2d\\u5305\\u542b\\u4e86make\\u7684\\u53c2\\u6570\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u6267\\u884c\\u201c\\u603b\\u63a7Makefile\\u201d\\u65f6\\u6709make\\u53c2\\u6570\\u6216\\u662f\\u5728\\u4e0a\\u5c42Makefile\\u4e2d\\u5b9a\\u4e49\\u4e86\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u90a3\\u4e48MAKEFILES\\u53d8\\u91cf\\u5c06\\u4f1a\\u662f\\u8fd9\\u4e9b\\u53c2\\u6570\\uff0c\\u5e76\\u4f1a\\u4f20\\u9012\\u5230\\u4e0b\\u5c42Makefile\\u4e2d\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u7cfb\\u7edf\\u7ea7\\u7684\\u73af\\u5883\\u53d8\\u91cf\\u3002**\\n\\n\\u4f46\\u662fmake\\u547d\\u4ee4\\u4e2d\\u7684\\u6709\\u51e0\\u4e2a\\u53c2\\u6570\\u5e76\\u4e0d\\u5f80\\u4e0b\\u4f20\\u9012\\uff0c\\u5b83\\u4eec\\u662f\\u201c-C\\u201d,\\u201c-f\\u201d,\\u201c-h\\u201d\\u201c-o\\u201d\\u548c\\u201c-W\\u201d\\uff08\\u6709\\u5173Makefile\\u53c2\\u6570\\u7684\\u7ec6\\u8282\\u5c06\\u5728\\u540e\\u9762\\u8bf4\\u660e\\uff09\\uff0c\\u5982\\u679c\\u4f60\\u4e0d\\u60f3\\u5f80\\u4e0b\\u5c42\\u4f20\\u9012\\u53c2\\u6570\\uff0c\\u90a3\\u4e48\\uff0c\\u4f60\\u53ef\\u4ee5\\u8fd9\\u6837\\u6765\\uff1a\\n```\\nsubsystem:\\n\\tcd subdir && $(MAKE) MAKEFLAGS=\\n```\\n\\u5982\\u679c\\u4f60\\u5b9a\\u4e49\\u4e86\\u73af\\u5883\\u53d8\\u91cf MAKEFLAGS\\uff0c\\u90a3\\u4e48\\u4f60\\u5f97\\u786e\\u4fe1\\u5176\\u4e2d\\u7684\\u9009\\u9879\\u662f\\u5927\\u5bb6\\u90fd\\u4f1a\\u7528\\u5230\\u7684\\uff0c\\u5982\\u679c\\u5176\\u4e2d\\u6709`-t`\\u3001`-n`\\u548c`-q`\\u53c2\\u6570\\uff0c\\u90a3\\u4e48\\u5c06\\u4f1a\\u6709\\u8ba9\\u4f60\\u610f\\u60f3\\u4e0d\\u5230\\u7684\\u7ed3\\u679c\\uff0c\\u6216\\u8bb8\\u4f1a\\u8ba9\\u4f60\\u5f02\\u5e38\\u5730\\u6050\\u614c\\u3002\\n\\n\\u8fd8\\u6709\\u4e00\\u4e2a\\u5728\\u201c\\u5d4c\\u5957\\u6267\\u884c\\u201d\\u4e2d\\u6bd4\\u8f83\\u6709\\u7528\\u7684\\u53c2\\u6570\\uff0c`-w`\\u6216\\u662f`--print-directory`\\u4f1a\\u5728make\\u7684\\u8fc7\\u7a0b\\u4e2d\\u8f93\\u51fa\\u4e00\\u4e9b\\u4fe1\\u606f\\uff0c\\u8ba9\\u4f60\\u770b\\u5230\\u76ee\\u524d\\u7684\\u5de5\\u4f5c\\u76ee\\u5f55\\u3002\\u6bd4\\u5982\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684\\u4e0b\\u7ea7make\\u76ee\\u5f55\\u662f`\\/home\\/hchen\\/gnu\\/make`\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u4f7f\\u7528`make -w`\\u6765\\u6267\\u884c\\uff0c\\u90a3\\u4e48\\u5f53\\u8fdb\\u5165\\u8be5\\u76ee\\u5f55\\u65f6\\uff0c\\u6211\\u4eec\\u4f1a\\u770b\\u5230\\uff1a\\n\\n    make: Entering directory `\\/home\\/hchen\\/gnu\\/make\'.\\n\\n\\u800c\\u5728\\u5b8c\\u6210\\u4e0b\\u5c42make\\u540e\\u79bb\\u5f00\\u76ee\\u5f55\\u65f6\\uff0c\\u6211\\u4eec\\u4f1a\\u770b\\u5230\\uff1a\\n\\n    make: Leaving directory `\\/home\\/hchen\\/gnu\\/make\'\\n\\n\\u5f53\\u4f60\\u4f7f\\u7528`-C`\\u53c2\\u6570\\u6765\\u6307\\u5b9amake\\u4e0b\\u5c42Makefile\\u65f6\\uff0c`-w`\\u4f1a\\u88ab\\u81ea\\u52a8\\u6253\\u5f00\\u7684\\u3002\\u5982\\u679c\\u53c2\\u6570\\u4e2d\\u6709`-s`\\uff08`--slient`\\uff09\\u6216\\u662f`--no-print-directory`\\uff0c\\u90a3\\u4e48\\uff0c`-w`\\u603b\\u662f\\u5931\\u6548\\u7684\\u3002\\n\\n\\n\\n#### \\u4e94\\u3001\\u5b9a\\u4e49\\u547d\\u4ee4\\u5305\\n\\n\\u5982\\u679cMakefile\\u4e2d\\u51fa\\u73b0\\u4e00\\u4e9b\\u76f8\\u540c\\u547d\\u4ee4\\u5e8f\\u5217\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u53ef\\u4ee5\\u4e3a\\u8fd9\\u4e9b\\u76f8\\u540c\\u7684\\u547d\\u4ee4\\u5e8f\\u5217\\u5b9a\\u4e49\\u4e00\\u4e2a\\u53d8\\u91cf\\u3002\\u5b9a\\u4e49\\u8fd9\\u79cd\\u547d\\u4ee4\\u5e8f\\u5217\\u7684\\u8bed\\u6cd5\\u4ee5\\u201cdefine\\u201d\\u5f00\\u59cb\\uff0c\\u4ee5`endef`\\u7ed3\\u675f\\uff0c\\u5982\\uff1a\\n```\\ndefine run-yacc\\nyacc $(firstword $^)\\nmv y.tab.c $@\\nendef\\n```\\n\\u8fd9\\u91cc\\uff0c`run-yacc`\\u662f\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\u7684\\u540d\\u5b57\\uff0c\\u5176\\u4e0d\\u8981\\u548cMakefile\\u4e2d\\u7684\\u53d8\\u91cf\\u91cd\\u540d\\u3002\\u5728`define`\\u548c`endef`\\u4e2d\\u7684\\u4e24\\u884c\\u5c31\\u662f\\u547d\\u4ee4\\u5e8f\\u5217\\u3002\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u547d\\u4ee4\\u662f\\u8fd0\\u884cYacc\\u7a0b\\u5e8f\\uff0c\\u56e0\\u4e3aYacc\\u7a0b\\u5e8f\\u603b\\u662f\\u751f\\u6210\\u201cy.tab.c\\u201d\\u7684\\u6587\\u4ef6\\uff0c\\u6240\\u4ee5\\u7b2c\\u4e8c\\u884c\\u7684\\u547d\\u4ee4\\u5c31\\u662f\\u628a\\u8fd9\\u4e2a\\u6587\\u4ef6\\u6539\\u6539\\u540d\\u5b57\\u3002\\u8fd8\\u662f\\u628a\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\u653e\\u5230\\u4e00\\u4e2a\\u793a\\u4f8b\\u4e2d\\u6765\\u770b\\u770b\\u5427\\u3002\\n```\\nfoo.c : foo.y\\n\\t$(run-yacc)\\n```\\n\\u6211\\u4eec\\u53ef\\u4ee5\\u770b\\u89c1\\uff0c\\u8981\\u4f7f\\u7528\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\uff0c\\u6211\\u4eec\\u5c31\\u597d\\u50cf\\u4f7f\\u7528\\u53d8\\u91cf\\u4e00\\u6837\\u3002\\u5728\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\u7684\\u4f7f\\u7528\\u4e2d\\uff0c\\u547d\\u4ee4\\u5305`run-yacc`\\u4e2d\\u7684`$^`\\u5c31\\u662f`foo.y`\\uff0c`$@`\\u5c31\\u662f`foo.c`\\uff08\\u6709\\u5173\\u8fd9\\u79cd\\u4ee5`$`\\u5f00\\u5934\\u7684\\u7279\\u6b8a\\u53d8\\u91cf\\uff0c\\u6211\\u4eec\\u4f1a\\u5728\\u540e\\u9762\\u4ecb\\u7ecd\\uff09\\uff0cmake\\u5728\\u6267\\u884c\\u547d\\u4ee4\\u5305\\u65f6\\uff0c\\u547d\\u4ee4\\u5305\\u4e2d\\u7684\\u6bcf\\u4e2a\\u547d\\u4ee4\\u4f1a\\u88ab\\u4f9d\\u6b21\\u72ec\\u7acb\\u6267\\u884c\\u3002","html":"<h3>\\u4e66\\u5199\\u547d\\u4ee4<\\/h3>\\n<hr \\/>\\n<p>\\u6bcf\\u6761\\u89c4\\u5219\\u4e2d\\u7684\\u547d\\u4ee4\\u548c\\u64cd\\u4f5c\\u7cfb\\u7edfShell\\u7684\\u547d\\u4ee4\\u884c\\u662f\\u4e00\\u81f4\\u7684\\u3002make\\u4f1a\\u4e00\\u6309\\u987a\\u5e8f\\u4e00\\u6761\\u4e00\\u6761\\u7684\\u6267\\u884c\\u547d\\u4ee4\\uff0c\\u6bcf\\u6761\\u547d\\u4ee4\\u7684\\u5f00\\u5934\\u5fc5\\u987b\\u4ee5[Tab]\\u952e\\u5f00\\u5934\\uff0c\\u9664\\u975e\\uff0c\\u547d\\u4ee4\\u662f\\u7d27\\u8ddf\\u5728\\u4f9d\\u8d56\\u89c4\\u5219\\u540e\\u9762\\u7684\\u5206\\u53f7\\u4e4b\\u540e\\u3002\\u5728\\u547d\\u4ee4\\u884c\\u4e4b\\u95f4\\u4e2d\\u7684\\u7a7a\\u683c\\u6216\\u662f\\u7a7a\\u884c\\u4f1a\\u88ab\\u5ffd\\u7565\\uff0c\\u4f46\\u662f\\u5982\\u679c\\u8be5\\u7a7a\\u683c\\u6216\\u7a7a\\u884c\\u662f\\u4ee5Tab\\u952e\\u5f00\\u5934\\u7684\\uff0c\\u90a3\\u4e48make\\u4f1a\\u8ba4\\u4e3a\\u5176\\u662f\\u4e00\\u4e2a\\u7a7a\\u547d\\u4ee4\\u3002<\\/p>\\n<p>\\u6211\\u4eec\\u5728UNIX\\u4e0b\\u53ef\\u80fd\\u4f1a\\u4f7f\\u7528\\u4e0d\\u540c\\u7684Shell\\uff0c\\u4f46\\u662fmake\\u7684\\u547d\\u4ee4\\u9ed8\\u8ba4\\u662f\\u88ab <code>\\/bin\\/sh<\\/code> \\u2014\\u2014 UNIX\\u7684\\u6807\\u51c6Shell\\u89e3\\u91ca\\u6267\\u884c\\u7684\\u3002\\u9664\\u975e\\u4f60\\u7279\\u522b\\u6307\\u5b9a\\u4e00\\u4e2a\\u5176\\u5b83\\u7684Shell\\u3002Makefile\\u4e2d\\uff0c\\u201c#\\u201d\\u662f\\u6ce8\\u91ca\\u7b26\\uff0c\\u5f88\\u50cfC\\/C++\\u4e2d\\u7684<code>\\/\\/<\\/code>\\uff0c\\u5176\\u540e\\u7684\\u672c\\u884c\\u5b57\\u7b26\\u90fd\\u88ab\\u6ce8\\u91ca\\u3002<\\/p>\\n<h4>\\u4e00\\u3001\\u663e\\u793a\\u547d\\u4ee4<\\/h4>\\n<p>\\u901a\\u5e38\\uff0cmake\\u4f1a\\u628a\\u5176\\u8981\\u6267\\u884c\\u7684\\u547d\\u4ee4\\u884c\\u5728\\u547d\\u4ee4\\u6267\\u884c\\u524d\\u8f93\\u51fa\\u5230\\u5c4f\\u5e55\\u4e0a\\u3002\\u5f53\\u6211\\u4eec\\u7528<code>@<\\/code>\\u5b57\\u7b26\\u5728\\u547d\\u4ee4\\u884c\\u524d\\uff0c\\u90a3\\u4e48\\uff0c\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5c06\\u4e0d\\u88abmake\\u663e\\u793a\\u51fa\\u6765\\uff0c\\u6700\\u5177\\u4ee3\\u8868\\u6027\\u7684\\u4f8b\\u5b50\\u662f\\uff0c\\u6211\\u4eec\\u7528\\u8fd9\\u4e2a\\u529f\\u80fd\\u6765\\u50cf\\u5c4f\\u5e55\\u663e\\u793a\\u4e00\\u4e9b\\u4fe1\\u606f\\u3002\\u5982\\uff1a<\\/p>\\n<pre><code>@echo \\u6b63\\u5728\\u7f16\\u8bd1XXX\\u6a21\\u5757......<\\/code><\\/pre>\\n<p>\\u5f53make\\u6267\\u884c\\u65f6\\uff0c\\u4f1a\\u8f93\\u51fa\\u201c\\u6b63\\u5728\\u7f16\\u8bd1XXX\\u6a21\\u5757......\\u201d\\u5b57\\u4e32\\uff0c\\u4f46\\u4e0d\\u4f1a\\u8f93\\u51fa\\u547d\\u4ee4\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u201c@\\u201d\\uff0c\\u90a3\\u4e48\\uff0cmake\\u5c06\\u8f93\\u51fa\\uff1a<\\/p>\\n<pre><code>echo \\u6b63\\u5728\\u7f16\\u8bd1XXX\\u6a21\\u5757......\\n\\u6b63\\u5728\\u7f16\\u8bd1XXX\\u6a21\\u5757......<\\/code><\\/pre>\\n<p>\\u5982\\u679cmake\\u6267\\u884c\\u65f6\\uff0c\\u5e26\\u5165make\\u53c2\\u6570<code>-n<\\/code>\\u6216<code>--just-print<\\/code>\\uff0c\\u90a3\\u4e48\\u5176\\u53ea\\u662f\\u663e\\u793a\\u547d\\u4ee4\\uff0c\\u4f46\\u4e0d\\u4f1a\\u6267\\u884c\\u547d\\u4ee4\\uff0c\\u8fd9\\u4e2a\\u529f\\u80fd\\u5f88<strong>\\u6709\\u5229\\u4e8e\\u6211\\u4eec\\u8c03\\u8bd5\\u6211\\u4eec\\u7684Makefile\\uff0c\\u770b\\u770b\\u6211\\u4eec\\u4e66\\u5199\\u7684\\u547d\\u4ee4\\u662f\\u6267\\u884c\\u8d77\\u6765\\u662f\\u4ec0\\u4e48\\u6837\\u5b50\\u7684\\u6216\\u662f\\u4ec0\\u4e48\\u987a\\u5e8f\\u7684<\\/strong>\\u3002<\\/p>\\n<p>\\u800cmake\\u53c2\\u6570<code>-s<\\/code>\\u6216<code>--slient<\\/code>\\u6216<code>--quiet<\\/code>\\u5219\\u662f\\u5168\\u9762\\u7981\\u6b62\\u547d\\u4ee4\\u7684\\u663e\\u793a\\u3002<\\/p>\\n<h4>\\u4e8c\\u3001\\u547d\\u4ee4\\u6267\\u884c<\\/h4>\\n<p>\\u5f53\\u4f9d\\u8d56\\u76ee\\u6807\\u65b0\\u4e8e\\u76ee\\u6807\\u65f6\\uff0c\\u4e5f\\u5c31\\u662f\\u5f53\\u89c4\\u5219\\u7684\\u76ee\\u6807\\u9700\\u8981\\u88ab\\u66f4\\u65b0\\u65f6\\uff0cmake\\u4f1a\\u4e00\\u6761\\u4e00\\u6761\\u7684\\u6267\\u884c\\u5176\\u540e\\u7684\\u547d\\u4ee4\\u3002\\u9700\\u8981\\u6ce8\\u610f\\u7684\\u662f\\uff0c\\u5982\\u679c\\u4f60\\u8981\\u8ba9\\u4e0a\\u4e00\\u6761\\u547d\\u4ee4\\u7684\\u7ed3\\u679c\\u5e94\\u7528\\u5728\\u4e0b\\u4e00\\u6761\\u547d\\u4ee4\\u65f6\\uff0c\\u4f60\\u5e94\\u8be5\\u4f7f\\u7528\\u5206\\u53f7\\u5206\\u9694\\u8fd9\\u4e24\\u6761\\u547d\\u4ee4\\u3002\\u6bd4\\u5982\\u4f60\\u7684\\u7b2c\\u4e00\\u6761\\u547d\\u4ee4\\u662fcd\\u547d\\u4ee4\\uff0c\\u4f60\\u5e0c\\u671b\\u7b2c\\u4e8c\\u6761\\u547d\\u4ee4\\u5f97\\u5728cd\\u4e4b\\u540e\\u7684\\u57fa\\u7840\\u4e0a\\u8fd0\\u884c\\uff0c\\u90a3\\u4e48\\u4f60\\u5c31\\u4e0d\\u80fd\\u628a\\u8fd9\\u4e24\\u6761\\u547d\\u4ee4\\u5199\\u5728\\u4e24\\u884c\\u4e0a\\uff0c\\u800c\\u5e94\\u8be5\\u628a\\u8fd9\\u4e24\\u6761\\u547d\\u4ee4\\u5199\\u5728\\u4e00\\u884c\\u4e0a\\uff0c\\u7528\\u5206\\u53f7\\u5206\\u9694\\u3002\\u5982\\uff1a<\\/p>\\n<pre><code>\\u793a\\u4f8b\\u4e00\\uff1a\\nexec:\\n    cd \\/home\\/hchen\\n    pwd\\n\\n\\u793a\\u4f8b\\u4e8c\\uff1a\\nexec:\\n    cd \\/home\\/hchen; pwd<\\/code><\\/pre>\\n<p>\\u5f53\\u6211\\u4eec\\u6267\\u884c\\u201cmake exec\\u201d\\u65f6\\uff0c\\u7b2c\\u4e00\\u4e2a\\u4f8b\\u5b50\\u4e2d\\u7684cd\\u6ca1\\u6709\\u4f5c\\u7528\\uff0cpwd\\u4f1a\\u6253\\u5370\\u51fa\\u5f53\\u524d\\u7684Makefile\\u76ee\\u5f55\\uff0c\\u800c\\u7b2c\\u4e8c\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0ccd\\u5c31\\u8d77\\u4f5c\\u7528\\u4e86\\uff0cpwd\\u4f1a\\u6253\\u5370\\u51fa\\u201c\\/home\\/hchen\\u201d\\u3002<\\/p>\\n<p>make\\u4e00\\u822c\\u662f\\u4f7f\\u7528\\u73af\\u5883\\u53d8\\u91cfSHELL\\u4e2d\\u6240\\u5b9a\\u4e49\\u7684\\u7cfb\\u7edfShell\\u6765\\u6267\\u884c\\u547d\\u4ee4\\uff0c\\u9ed8\\u8ba4\\u60c5\\u51b5\\u4e0b\\u4f7f\\u7528UNIX\\u7684\\u6807\\u51c6Shell\\u2014\\u2014<code>\\/bin\\/sh<\\/code>\\u6765\\u6267\\u884c\\u547d\\u4ee4\\u3002\\u4f46\\u5728MS-DOS\\u4e0b\\u6709\\u70b9\\u7279\\u6b8a\\uff0c\\u56e0\\u4e3aMS-DOS\\u4e0b\\u6ca1\\u6709SHELL\\u73af\\u5883\\u53d8\\u91cf\\uff0c\\u5f53\\u7136\\u4f60\\u4e5f\\u53ef\\u4ee5\\u6307\\u5b9a\\u3002\\u5982\\u679c\\u4f60\\u6307\\u5b9a\\u4e86UNIX\\u98ce\\u683c\\u7684\\u76ee\\u5f55\\u5f62\\u5f0f\\uff0c\\u9996\\u5148\\uff0cmake\\u4f1a\\u5728SHELL\\u6240\\u6307\\u5b9a\\u7684\\u8def\\u5f84\\u4e2d\\u627e\\u5bfb\\u547d\\u4ee4\\u89e3\\u91ca\\u5668\\uff0c\\u5982\\u679c\\u627e\\u4e0d\\u5230\\uff0c\\u5176\\u4f1a\\u5728\\u5f53\\u524d\\u76d8\\u7b26\\u4e2d\\u7684\\u5f53\\u524d\\u76ee\\u5f55\\u4e2d\\u5bfb\\u627e\\uff0c\\u5982\\u679c\\u518d\\u627e\\u4e0d\\u5230\\uff0c\\u5176\\u4f1a\\u5728PATH\\u73af\\u5883\\u53d8\\u91cf\\u4e2d\\u6240\\u5b9a\\u4e49\\u7684\\u6240\\u6709\\u8def\\u5f84\\u4e2d\\u5bfb\\u627e\\u3002MS-DOS\\u4e2d\\uff0c\\u5982\\u679c\\u4f60\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u89e3\\u91ca\\u5668\\u6ca1\\u6709\\u627e\\u5230\\uff0c\\u5176\\u4f1a\\u7ed9\\u4f60\\u7684\\u547d\\u4ee4\\u89e3\\u91ca\\u5668\\u52a0\\u4e0a\\u8bf8\\u5982\\u201c.exe\\u201d\\u3001\\u201c.com\\u201d\\u3001\\u201c.bat\\u201d\\u3001\\u201c.sh\\u201d\\u7b49\\u540e\\u7f00\\u3002<\\/p>\\n<h4>\\u4e09\\u3001\\u547d\\u4ee4\\u51fa\\u9519<\\/h4>\\n<p>\\u6bcf\\u5f53\\u547d\\u4ee4\\u8fd0\\u884c\\u5b8c\\u540e\\uff0cmake\\u4f1a\\u68c0\\u6d4b\\u6bcf\\u4e2a\\u547d\\u4ee4\\u7684\\u8fd4\\u56de\\u7801\\uff0c\\u5982\\u679c\\u547d\\u4ee4\\u8fd4\\u56de\\u6210\\u529f\\uff0c\\u90a3\\u4e48make\\u4f1a\\u6267\\u884c\\u4e0b\\u4e00\\u6761\\u547d\\u4ee4\\uff0c\\u5f53\\u89c4\\u5219\\u4e2d\\u6240\\u6709\\u7684\\u547d\\u4ee4\\u6210\\u529f\\u8fd4\\u56de\\u540e\\uff0c\\u8fd9\\u4e2a\\u89c4\\u5219\\u5c31\\u7b97\\u662f\\u6210\\u529f\\u5b8c\\u6210\\u4e86\\u3002\\u5982\\u679c\\u4e00\\u4e2a\\u89c4\\u5219\\u4e2d\\u7684\\u67d0\\u4e2a\\u547d\\u4ee4\\u51fa\\u9519\\u4e86\\uff08\\u547d\\u4ee4\\u9000\\u51fa\\u7801\\u975e\\u96f6\\uff09\\uff0c\\u90a3\\u4e48make\\u5c31\\u4f1a\\u7ec8\\u6b62\\u6267\\u884c\\u5f53\\u524d\\u89c4\\u5219\\uff0c\\u8fd9\\u5c06\\u6709\\u53ef\\u80fd\\u7ec8\\u6b62\\u6240\\u6709\\u89c4\\u5219\\u7684\\u6267\\u884c\\u3002<\\/p>\\n<p>\\u6709\\u4e9b\\u65f6\\u5019\\uff0c\\u547d\\u4ee4\\u7684\\u51fa\\u9519\\u5e76\\u4e0d\\u8868\\u793a\\u5c31\\u662f\\u9519\\u8bef\\u7684\\u3002\\u4f8b\\u5982mkdir\\u547d\\u4ee4\\uff0c\\u6211\\u4eec\\u4e00\\u5b9a\\u9700\\u8981\\u5efa\\u7acb\\u4e00\\u4e2a\\u76ee\\u5f55\\uff0c\\u5982\\u679c\\u76ee\\u5f55\\u4e0d\\u5b58\\u5728\\uff0c\\u90a3\\u4e48mkdir\\u5c31\\u6210\\u529f\\u6267\\u884c\\uff0c\\u4e07\\u4e8b\\u5927\\u5409\\uff0c\\u5982\\u679c\\u76ee\\u5f55\\u5b58\\u5728\\uff0c\\u90a3\\u4e48\\u5c31\\u51fa\\u9519\\u4e86\\u3002\\u6211\\u4eec\\u4e4b\\u6240\\u4ee5\\u4f7f\\u7528mkdir\\u7684\\u610f\\u601d\\u5c31\\u662f\\u4e00\\u5b9a\\u8981\\u6709\\u8fd9\\u6837\\u7684\\u4e00\\u4e2a\\u76ee\\u5f55\\uff0c\\u4e8e\\u662f\\u6211\\u4eec\\u5c31\\u4e0d\\u5e0c\\u671bmkdir\\u51fa\\u9519\\u800c\\u7ec8\\u6b62\\u89c4\\u5219\\u7684\\u8fd0\\u884c\\u3002<\\/p>\\n<p>\\u4e3a\\u4e86\\u505a\\u5230\\u8fd9\\u4e00\\u70b9\\uff0c\\u5ffd\\u7565\\u547d\\u4ee4\\u7684\\u51fa\\u9519\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5728Makefile\\u7684\\u547d\\u4ee4\\u884c\\u524d\\u52a0\\u4e00\\u4e2a\\u51cf\\u53f7\\u201c-\\u201d\\uff08\\u5728Tab\\u952e\\u4e4b\\u540e\\uff09\\uff0c\\u6807\\u8bb0\\u4e3a\\u4e0d\\u7ba1\\u547d\\u4ee4\\u51fa\\u4e0d\\u51fa\\u9519\\u90fd\\u8ba4\\u4e3a\\u662f\\u6210\\u529f\\u7684\\u3002\\u5982\\uff1a<\\/p>\\n<pre><code>clean:\\n    -rm -f *.o<\\/code><\\/pre>\\n<p>\\u8fd8\\u6709\\u4e00\\u4e2a\\u5168\\u5c40\\u7684\\u529e\\u6cd5\\u662f\\uff0c\\u7ed9make\\u52a0\\u4e0a<code>-i<\\/code>\\u6216\\u662f<code>--ignore-errors<\\/code>\\u53c2\\u6570\\uff0c\\u90a3\\u4e48\\uff0cMakefile\\u4e2d\\u6240\\u6709\\u547d\\u4ee4\\u90fd\\u4f1a\\u5ffd\\u7565\\u9519\\u8bef\\u3002\\u800c\\u5982\\u679c\\u4e00\\u4e2a\\u89c4\\u5219\\u662f\\u4ee5<code>.IGNORE<\\/code>\\u4f5c\\u4e3a\\u76ee\\u6807\\u7684\\uff0c\\u90a3\\u4e48\\u8fd9\\u4e2a\\u89c4\\u5219\\u4e2d\\u7684\\u6240\\u6709\\u547d\\u4ee4\\u5c06\\u4f1a\\u5ffd\\u7565\\u9519\\u8bef\\u3002\\u8fd9\\u4e9b\\u662f\\u4e0d\\u540c\\u7ea7\\u522b\\u7684\\u9632\\u6b62\\u547d\\u4ee4\\u51fa\\u9519\\u7684\\u65b9\\u6cd5\\uff0c\\u4f60\\u53ef\\u4ee5\\u6839\\u636e\\u4f60\\u7684\\u4e0d\\u540c\\u559c\\u6b22\\u8bbe\\u7f6e\\u3002<\\/p>\\n<p>\\u8fd8\\u6709\\u4e00\\u4e2a\\u8981\\u63d0\\u4e00\\u4e0b\\u7684make\\u7684\\u53c2\\u6570\\u7684\\u662f<code>-k<\\/code>\\u6216\\u662f<code>--keep-going<\\/code>\\uff0c\\u8fd9\\u4e2a\\u53c2\\u6570\\u7684\\u610f\\u601d\\u662f\\uff0c\\u5982\\u679c\\u67d0\\u89c4\\u5219\\u4e2d\\u7684\\u547d\\u4ee4\\u51fa\\u9519\\u4e86\\uff0c\\u90a3\\u4e48\\u5c31\\u7ec8\\u76ee\\u8be5\\u89c4\\u5219\\u7684\\u6267\\u884c\\uff0c\\u4f46\\u7ee7\\u7eed\\u6267\\u884c\\u5176\\u5b83\\u89c4\\u5219\\u3002<\\/p>\\n<h4>\\u56db\\u3001\\u5d4c\\u5957\\u6267\\u884cmake<\\/h4>\\n<p>\\u5728\\u4e00\\u4e9b\\u5927\\u7684\\u5de5\\u7a0b\\u4e2d\\uff0c\\u6211\\u4eec\\u4f1a\\u628a\\u6211\\u4eec\\u4e0d\\u540c\\u6a21\\u5757\\u6216\\u662f\\u4e0d\\u540c\\u529f\\u80fd\\u7684\\u6e90\\u6587\\u4ef6\\u653e\\u5728\\u4e0d\\u540c\\u7684\\u76ee\\u5f55\\u4e2d\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5728\\u6bcf\\u4e2a\\u76ee\\u5f55\\u4e2d\\u90fd\\u4e66\\u5199\\u4e00\\u4e2a\\u8be5\\u76ee\\u5f55\\u7684Makefile\\uff0c\\u8fd9\\u6709\\u5229\\u4e8e\\u8ba9\\u6211\\u4eec\\u7684Makefile\\u53d8\\u5f97\\u66f4\\u52a0\\u5730\\u7b80\\u6d01\\uff0c\\u800c\\u4e0d\\u81f3\\u4e8e\\u628a\\u6240\\u6709\\u7684\\u4e1c\\u897f\\u5168\\u90e8\\u5199\\u5728\\u4e00\\u4e2aMakefile\\u4e2d\\uff0c\\u8fd9\\u6837\\u4f1a\\u5f88\\u96be\\u7ef4\\u62a4\\u6211\\u4eec\\u7684Makefile\\uff0c\\u8fd9\\u4e2a\\u6280\\u672f\\u5bf9\\u4e8e\\u6211\\u4eec\\u6a21\\u5757\\u7f16\\u8bd1\\u548c\\u5206\\u6bb5\\u7f16\\u8bd1\\u6709\\u7740\\u975e\\u5e38\\u5927\\u7684\\u597d\\u5904\\u3002<\\/p>\\n<p>\\u4f8b\\u5982\\uff0c\\u6211\\u4eec\\u6709\\u4e00\\u4e2a\\u5b50\\u76ee\\u5f55\\u53ebsubdir\\uff0c\\u8fd9\\u4e2a\\u76ee\\u5f55\\u4e0b\\u6709\\u4e2aMakefile\\u6587\\u4ef6\\uff0c\\u6765\\u6307\\u660e\\u4e86\\u8fd9\\u4e2a\\u76ee\\u5f55\\u4e0b\\u6587\\u4ef6\\u7684\\u7f16\\u8bd1\\u89c4\\u5219\\u3002\\u90a3\\u4e48\\u6211\\u4eec\\u603b\\u63a7\\u7684Makefile\\u53ef\\u4ee5\\u8fd9\\u6837\\u4e66\\u5199\\uff1a<\\/p>\\n<pre><code>subsystem:\\n    cd subdir &amp;&amp; $(MAKE)<\\/code><\\/pre>\\n<p>\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a<\\/p>\\n<pre><code>subsystem:\\n    $(MAKE) -C subdir<\\/code><\\/pre>\\n<p>\\u5b9a\\u4e49<code>$(MAKE)<\\/code>\\u5b8f\\u53d8\\u91cf\\u7684\\u610f\\u601d\\u662f\\uff0c\\u4e5f\\u8bb8\\u6211\\u4eec\\u7684make\\u9700\\u8981\\u4e00\\u4e9b\\u53c2\\u6570\\uff0c\\u6240\\u4ee5\\u5b9a\\u4e49\\u6210\\u4e00\\u4e2a\\u53d8\\u91cf\\u6bd4\\u8f83\\u5229\\u4e8e\\u7ef4\\u62a4\\u3002\\u8fd9\\u4e24\\u4e2a\\u4f8b\\u5b50\\u7684\\u610f\\u601d\\u90fd\\u662f\\u5148\\u8fdb\\u5165\\u201csubdir\\u201d\\u76ee\\u5f55\\uff0c\\u7136\\u540e\\u6267\\u884cmake\\u547d\\u4ee4\\u3002<\\/p>\\n<p>\\u6211\\u4eec\\u628a\\u8fd9\\u4e2aMakefile\\u53eb\\u505a<strong>\\u603b\\u63a7Makefile<\\/strong>\\uff0c\\u603b\\u63a7Makefile\\u7684\\u53d8\\u91cf\\u53ef\\u4ee5\\u4f20\\u9012\\u5230\\u4e0b\\u7ea7\\u7684Makefile\\u4e2d\\uff08\\u5982\\u679c\\u4f60\\u663e\\u793a\\u7684\\u58f0\\u660e\\uff09\\uff0c\\u4f46\\u662f\\u4e0d\\u4f1a\\u8986\\u76d6\\u4e0b\\u5c42\\u7684Makefile\\u4e2d\\u6240\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\uff0c\\u9664\\u975e\\u6307\\u5b9a\\u4e86\\u201c-e\\u201d\\u53c2\\u6570\\u3002<\\/p>\\n<p>\\u5982\\u679c\\u4f60\\u8981\\u4f20\\u9012\\u53d8\\u91cf\\u5230\\u4e0b\\u7ea7Makefile\\u4e2d\\uff0c\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u8fd9\\u6837\\u7684\\u58f0\\u660e\\uff1a<\\/p>\\n<pre><code>export &lt;variable ...&gt;;<\\/code><\\/pre>\\n<p>\\u5982\\u679c\\u4f60\\u4e0d\\u60f3\\u8ba9\\u67d0\\u4e9b\\u53d8\\u91cf\\u4f20\\u9012\\u5230\\u4e0b\\u7ea7Makefile\\u4e2d\\uff0c\\u90a3\\u4e48\\u4f60\\u53ef\\u4ee5\\u8fd9\\u6837\\u58f0\\u660e\\uff1a <\\/p>\\n<pre><code>unexport &lt;variable ...&gt;;<\\/code><\\/pre>\\n<p>\\u5982\\uff1a<\\/p>\\n<p>\\u793a\\u4f8b\\u4e00\\uff1a<\\/p>\\n<pre><code>export variable = value\\n\\n\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\nvariable = value\\nexport variable\\n\\n\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\nexport variable := value\\n\\n\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\nvariable := value\\nexport variable<\\/code><\\/pre>\\n<p>\\u793a\\u4f8b\\u4e8c\\uff1a<\\/p>\\n<pre><code>export variable += value<\\/code><\\/pre>\\n<p>\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a<\\/p>\\n<pre><code>variable += value\\nexport variable<\\/code><\\/pre>\\n<p>\\u5982\\u679c\\u4f60\\u8981\\u4f20\\u9012\\u6240\\u6709\\u7684\\u53d8\\u91cf\\uff0c\\u90a3\\u4e48\\uff0c\\u53ea\\u8981\\u4e00\\u4e2aexport\\u5c31\\u884c\\u4e86\\u3002\\u540e\\u9762\\u4ec0\\u4e48\\u4e5f\\u4e0d\\u7528\\u8ddf\\uff0c\\u8868\\u793a\\u4f20\\u9012\\u6240\\u6709\\u7684\\u53d8\\u91cf\\u3002<\\/p>\\n<p><strong>\\u9700\\u8981\\u6ce8\\u610f\\u7684\\u662f\\uff0c\\u6709\\u4e24\\u4e2a\\u53d8\\u91cf\\uff0c\\u4e00\\u4e2a\\u662f SHELL\\uff0c\\u4e00\\u4e2a\\u662f MAKEFLAGS\\uff0c\\u8fd9\\u4e24\\u4e2a\\u53d8\\u91cf\\u4e0d\\u7ba1\\u4f60\\u662f\\u5426export\\uff0c\\u5176\\u603b\\u662f\\u8981\\u4f20\\u9012\\u5230\\u4e0b\\u5c42Makefile\\u4e2d\\uff0c\\u7279\\u522b\\u662fMAKEFILES\\u53d8\\u91cf\\uff0c\\u5176\\u4e2d\\u5305\\u542b\\u4e86make\\u7684\\u53c2\\u6570\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u6267\\u884c\\u201c\\u603b\\u63a7Makefile\\u201d\\u65f6\\u6709make\\u53c2\\u6570\\u6216\\u662f\\u5728\\u4e0a\\u5c42Makefile\\u4e2d\\u5b9a\\u4e49\\u4e86\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u90a3\\u4e48MAKEFILES\\u53d8\\u91cf\\u5c06\\u4f1a\\u662f\\u8fd9\\u4e9b\\u53c2\\u6570\\uff0c\\u5e76\\u4f1a\\u4f20\\u9012\\u5230\\u4e0b\\u5c42Makefile\\u4e2d\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u7cfb\\u7edf\\u7ea7\\u7684\\u73af\\u5883\\u53d8\\u91cf\\u3002<\\/strong><\\/p>\\n<p>\\u4f46\\u662fmake\\u547d\\u4ee4\\u4e2d\\u7684\\u6709\\u51e0\\u4e2a\\u53c2\\u6570\\u5e76\\u4e0d\\u5f80\\u4e0b\\u4f20\\u9012\\uff0c\\u5b83\\u4eec\\u662f\\u201c-C\\u201d,\\u201c-f\\u201d,\\u201c-h\\u201d\\u201c-o\\u201d\\u548c\\u201c-W\\u201d\\uff08\\u6709\\u5173Makefile\\u53c2\\u6570\\u7684\\u7ec6\\u8282\\u5c06\\u5728\\u540e\\u9762\\u8bf4\\u660e\\uff09\\uff0c\\u5982\\u679c\\u4f60\\u4e0d\\u60f3\\u5f80\\u4e0b\\u5c42\\u4f20\\u9012\\u53c2\\u6570\\uff0c\\u90a3\\u4e48\\uff0c\\u4f60\\u53ef\\u4ee5\\u8fd9\\u6837\\u6765\\uff1a<\\/p>\\n<pre><code>subsystem:\\n    cd subdir &amp;&amp; $(MAKE) MAKEFLAGS=<\\/code><\\/pre>\\n<p>\\u5982\\u679c\\u4f60\\u5b9a\\u4e49\\u4e86\\u73af\\u5883\\u53d8\\u91cf MAKEFLAGS\\uff0c\\u90a3\\u4e48\\u4f60\\u5f97\\u786e\\u4fe1\\u5176\\u4e2d\\u7684\\u9009\\u9879\\u662f\\u5927\\u5bb6\\u90fd\\u4f1a\\u7528\\u5230\\u7684\\uff0c\\u5982\\u679c\\u5176\\u4e2d\\u6709<code>-t<\\/code>\\u3001<code>-n<\\/code>\\u548c<code>-q<\\/code>\\u53c2\\u6570\\uff0c\\u90a3\\u4e48\\u5c06\\u4f1a\\u6709\\u8ba9\\u4f60\\u610f\\u60f3\\u4e0d\\u5230\\u7684\\u7ed3\\u679c\\uff0c\\u6216\\u8bb8\\u4f1a\\u8ba9\\u4f60\\u5f02\\u5e38\\u5730\\u6050\\u614c\\u3002<\\/p>\\n<p>\\u8fd8\\u6709\\u4e00\\u4e2a\\u5728\\u201c\\u5d4c\\u5957\\u6267\\u884c\\u201d\\u4e2d\\u6bd4\\u8f83\\u6709\\u7528\\u7684\\u53c2\\u6570\\uff0c<code>-w<\\/code>\\u6216\\u662f<code>--print-directory<\\/code>\\u4f1a\\u5728make\\u7684\\u8fc7\\u7a0b\\u4e2d\\u8f93\\u51fa\\u4e00\\u4e9b\\u4fe1\\u606f\\uff0c\\u8ba9\\u4f60\\u770b\\u5230\\u76ee\\u524d\\u7684\\u5de5\\u4f5c\\u76ee\\u5f55\\u3002\\u6bd4\\u5982\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684\\u4e0b\\u7ea7make\\u76ee\\u5f55\\u662f<code>\\/home\\/hchen\\/gnu\\/make<\\/code>\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u4f7f\\u7528<code>make -w<\\/code>\\u6765\\u6267\\u884c\\uff0c\\u90a3\\u4e48\\u5f53\\u8fdb\\u5165\\u8be5\\u76ee\\u5f55\\u65f6\\uff0c\\u6211\\u4eec\\u4f1a\\u770b\\u5230\\uff1a<\\/p>\\n<pre><code>make: Entering directory `\\/home\\/hchen\\/gnu\\/make\'.<\\/code><\\/pre>\\n<p>\\u800c\\u5728\\u5b8c\\u6210\\u4e0b\\u5c42make\\u540e\\u79bb\\u5f00\\u76ee\\u5f55\\u65f6\\uff0c\\u6211\\u4eec\\u4f1a\\u770b\\u5230\\uff1a<\\/p>\\n<pre><code>make: Leaving directory `\\/home\\/hchen\\/gnu\\/make\'<\\/code><\\/pre>\\n<p>\\u5f53\\u4f60\\u4f7f\\u7528<code>-C<\\/code>\\u53c2\\u6570\\u6765\\u6307\\u5b9amake\\u4e0b\\u5c42Makefile\\u65f6\\uff0c<code>-w<\\/code>\\u4f1a\\u88ab\\u81ea\\u52a8\\u6253\\u5f00\\u7684\\u3002\\u5982\\u679c\\u53c2\\u6570\\u4e2d\\u6709<code>-s<\\/code>\\uff08<code>--slient<\\/code>\\uff09\\u6216\\u662f<code>--no-print-directory<\\/code>\\uff0c\\u90a3\\u4e48\\uff0c<code>-w<\\/code>\\u603b\\u662f\\u5931\\u6548\\u7684\\u3002<\\/p>\\n<h4>\\u4e94\\u3001\\u5b9a\\u4e49\\u547d\\u4ee4\\u5305<\\/h4>\\n<p>\\u5982\\u679cMakefile\\u4e2d\\u51fa\\u73b0\\u4e00\\u4e9b\\u76f8\\u540c\\u547d\\u4ee4\\u5e8f\\u5217\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u53ef\\u4ee5\\u4e3a\\u8fd9\\u4e9b\\u76f8\\u540c\\u7684\\u547d\\u4ee4\\u5e8f\\u5217\\u5b9a\\u4e49\\u4e00\\u4e2a\\u53d8\\u91cf\\u3002\\u5b9a\\u4e49\\u8fd9\\u79cd\\u547d\\u4ee4\\u5e8f\\u5217\\u7684\\u8bed\\u6cd5\\u4ee5\\u201cdefine\\u201d\\u5f00\\u59cb\\uff0c\\u4ee5<code>endef<\\/code>\\u7ed3\\u675f\\uff0c\\u5982\\uff1a<\\/p>\\n<pre><code>define run-yacc\\nyacc $(firstword $^)\\nmv y.tab.c $@\\nendef<\\/code><\\/pre>\\n<p>\\u8fd9\\u91cc\\uff0c<code>run-yacc<\\/code>\\u662f\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\u7684\\u540d\\u5b57\\uff0c\\u5176\\u4e0d\\u8981\\u548cMakefile\\u4e2d\\u7684\\u53d8\\u91cf\\u91cd\\u540d\\u3002\\u5728<code>define<\\/code>\\u548c<code>endef<\\/code>\\u4e2d\\u7684\\u4e24\\u884c\\u5c31\\u662f\\u547d\\u4ee4\\u5e8f\\u5217\\u3002\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u547d\\u4ee4\\u662f\\u8fd0\\u884cYacc\\u7a0b\\u5e8f\\uff0c\\u56e0\\u4e3aYacc\\u7a0b\\u5e8f\\u603b\\u662f\\u751f\\u6210\\u201cy.tab.c\\u201d\\u7684\\u6587\\u4ef6\\uff0c\\u6240\\u4ee5\\u7b2c\\u4e8c\\u884c\\u7684\\u547d\\u4ee4\\u5c31\\u662f\\u628a\\u8fd9\\u4e2a\\u6587\\u4ef6\\u6539\\u6539\\u540d\\u5b57\\u3002\\u8fd8\\u662f\\u628a\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\u653e\\u5230\\u4e00\\u4e2a\\u793a\\u4f8b\\u4e2d\\u6765\\u770b\\u770b\\u5427\\u3002<\\/p>\\n<pre><code>foo.c : foo.y\\n    $(run-yacc)<\\/code><\\/pre>\\n<p>\\u6211\\u4eec\\u53ef\\u4ee5\\u770b\\u89c1\\uff0c\\u8981\\u4f7f\\u7528\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\uff0c\\u6211\\u4eec\\u5c31\\u597d\\u50cf\\u4f7f\\u7528\\u53d8\\u91cf\\u4e00\\u6837\\u3002\\u5728\\u8fd9\\u4e2a\\u547d\\u4ee4\\u5305\\u7684\\u4f7f\\u7528\\u4e2d\\uff0c\\u547d\\u4ee4\\u5305<code>run-yacc<\\/code>\\u4e2d\\u7684<code>$^<\\/code>\\u5c31\\u662f<code>foo.y<\\/code>\\uff0c<code>$@<\\/code>\\u5c31\\u662f<code>foo.c<\\/code>\\uff08\\u6709\\u5173\\u8fd9\\u79cd\\u4ee5<code>$<\\/code>\\u5f00\\u5934\\u7684\\u7279\\u6b8a\\u53d8\\u91cf\\uff0c\\u6211\\u4eec\\u4f1a\\u5728\\u540e\\u9762\\u4ecb\\u7ecd\\uff09\\uff0cmake\\u5728\\u6267\\u884c\\u547d\\u4ee4\\u5305\\u65f6\\uff0c\\u547d\\u4ee4\\u5305\\u4e2d\\u7684\\u6bcf\\u4e2a\\u547d\\u4ee4\\u4f1a\\u88ab\\u4f9d\\u6b21\\u72ec\\u7acb\\u6267\\u884c\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '介绍Makefile中的命令书写格式与注意事项',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 46,
                'published_at' => '2020-09-26 22:58:00',
                'created_at' => '2020-09-26 22:59:26',
                'updated_at' => '2022-01-02 16:09:20',
                'deleted_at' => NULL,
            ),
            9 => 
            array (
                'id' => 10,
                'category_id' => 11,
                'collection_id' => 3,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'shell-makefile-3c1e9',
                'title' => 'shell 与 makefile',
                'subtitle' => 'makefile 中执行 shell 脚本',
            'content' => '{"raw":"\\u521d\\u5b66\\u8005\\u5728\\u770b\\u5230\\u5927\\u91cf\\u7684makefile \\u547d\\u4ee4\\u65f6\\uff0c\\u5f80\\u5f80\\u4e0d\\u77e5\\u5b83\\u6267\\u884c\\u7ed3\\u679c\\u4e0e\\u6548\\u679c\\uff0c\\u4eff\\u5982\\u770b\\u5929\\u4e66\\uff0c\\u6216\\u5f53\\u573a\\u53bb\\u4e16\\u3002\\u540c\\u662f\\u65b0\\u624b\\u7684\\u6211\\u4e5f\\u662f\\u5982\\u6b64\\uff0c\\u4f46\\u4e3a\\u4e86\\u8d70\\u8fdb\\u5f00\\u6e90\\u4e16\\u754c\\u7684\\u5927\\u95e8\\uff0c\\u5929\\u4e66\\u4e5f\\u5f97\\u627e\\u65b9\\u6cd5\\u53bb\\u8bfb\\u61c2\\u3002\\n\\nmakefile \\u4e2d\\u7684\\u53d8\\u91cf\\u5728\\u58f0\\u660e\\u65f6\\u9700\\u8981\\u8d4b\\u4e88\\u521d\\u503c\\uff0c\\u5728\\u4f7f\\u7528\\u65f6\\uff0c\\u9700\\u8981\\u5728\\u4f7f\\u7528\\u7684\\u53d8\\u91cf\\u524d\\u52a0`$`\\u7b26\\u53f7\\uff0c\\u4f46\\u662f\\u6700\\u597d\\u4f7f\\u7528`()`\\u6216\\u8005`{}`\\u5c06\\u53d8\\u91cf\\u5305\\u62ec\\u8d77\\u6765\\u3002\\n\\u6240\\u4ee5\\uff0c\\u5728 makefile \\u4e2d\\u4f7f\\u7528 shell:\\n1. \\u4f7f\\u7528 makefile \\u4e2d\\u7684 `$(shell ...)` \\uff0ceg: `CUR_DIR = $(shell pwd)\\n2. \\u76f4\\u63a5\\u4f7f\\u7528 shell\\uff0c\\u90a3\\u4e48\\u5c31\\u8981\\u6ce8\\u610f\\u5982\\u4e0b\\u4e8b\\u9879\\uff1a\\n * shell \\u547d\\u4ee4\\u5fc5\\u987b\\u662f\\u5728\\u89c4\\u5219\\u91cc\\u9762\\n * shell \\u547d\\u4ee4\\u5728makefile \\u8c03\\u7528\\u65f6\\u5019\\u6bcf\\u884c shell \\u90fd\\u662f\\u4e00\\u4e2a\\u5355\\u72ec\\u7684\\u8fdb\\u7a0b\\u3002\\u4e0a\\u4e00\\u884c\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\u5728\\u4e00\\u4e0b\\u884c\\u662f\\u65e0\\u6548\\u7684\\n * makefile \\u8c03\\u7528 shell \\u65f6\\u5019\\uff08\\u5176\\u5b9e\\u5728\\u6267\\u884c\\u65f6\\u5019\\u90fd\\u4f1a\\u6709\\u8fd9\\u4e2a\\u52a8\\u4f5c\\uff0c\\u4e0d\\u5149\\u5149\\u662f shell\\uff09\\uff0c\\u4f1a\\u5bf9\\u53d8\\u91cf\\u66ff\\u6362\\uff1b\\u5982\\u679c\\u662f makefile \\u4e2d\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\uff08\\u4f7f\\u7528`$()`\\u6765\\u5f15\\u7528\\u7684\\uff09\\u4f1a\\u88ab\\u66ff\\u6362\\u6210\\u53d8\\u91cf\\u7684\\u503c\\uff1b\\u5982\\u679c\\u662f `$$` \\u7b26\\u53f7\\uff0c\\u4f1a\\u66ff\\u6362\\u6210 $\\uff0c\\u7136\\u540e\\u4f20\\u7ed9 shell \\u6765\\u6267\\u884c\\u3002\\n\\n#### \\u5b9e\\u8df5\\u793a\\u4f8b\\n\\n1. \\u793a\\u4f8b\\u4e00\\n\\n```\\nif [\\"$(BUILD)\\" = \\"debug\\"];then echo \\"build debug\\"; else echo \\"build release\\"; fi\\nall:\\n\\t@echo \\"done\\"\\n```\\n\\u6267\\u884c\\u7ed3\\u679c\\uff1a\\n```\\ndone\\n```\\n\\n **\\u89e3\\u8bf4\\uff1a**\\n \\nshell \\u811a\\u672c\\u5728 target \\u91cc\\u624d\\u6709\\u6548\\uff0c\\u5176\\u5b83\\u5730\\u65b9\\u90fd\\u88ab\\u5ffd\\u7565\\u6389\\u4e86\\u3002\\u6240\\u4ee5\\u793a\\u4f8b\\u4e2d\\uff0c`build debug`\\u4e4b\\u7c7b\\u7684\\u5b57\\u7b26\\u4e32\\u6839\\u672c\\u6253\\u5370\\u4e0d\\u51fa\\u6765\\u3002\\u793a\\u4f8b\\u4e00\\u7684\\u6b63\\u786e\\u5199\\u6cd5\\u662f\\uff1a\\n```\\nall:\\n\\tif[\\"$(BUILD)\\" = \\"debug\\"]; then echo \\"build debug\\"; else echo \\"build release\\"; fi\\n\\techo \\"done\\"\\n```\\n\\u5176\\u8f93\\u51fa\\u4e3a\\uff1a\\n```\\n\\u7ed3\\u679c\\u62a5\\u9519\\uff0c\\u6682\\u65f6\\u89e3\\u51b3\\u4e0d\\u4e86\\n```\\n\\u4e3a\\u4ec0\\u4e48\\u4f1a\\u8fd9\\u6837\\uff0c\\u5982\\u679c\\u4f60\\u6709\\u67e5\\u770b\\u8f83\\u591a\\u7684 makefile \\u6587\\u4ef6\\u7684\\u5185\\u5bb9\\u5c31\\u5927\\u6982\\u6e05\\u695a\\uff0cmakefile \\u6ca1\\u6709\\u8fd9\\u6837\\u8fd0\\u7528 shell \\u7684\\u3002\\u90a3\\u4e48\\u6211\\u4eec\\u6539\\u4e0b\\u4f8b\\u5b50\\uff1a\\n ```\\n \\u793a\\u4f8b\\u4e00\\uff1a\\nexec:\\n    cd ~\\n    pwd\\n\\n\\u793a\\u4f8b\\u4e8c\\uff1a\\nexec:\\n    cd ~; pwd\\n ```\\n \\u5f53\\u6211\\u4eec\\u6267\\u884c\\u201cmake exec\\u201d\\u65f6\\uff0c\\u7b2c\\u4e00\\u4e2a\\u4f8b\\u5b50\\u4e2d\\u7684cd\\u6ca1\\u6709\\u4f5c\\u7528\\uff0cpwd\\u4f1a\\u6253\\u5370\\u51fa\\u5f53\\u524d\\u7684Makefile\\u76ee\\u5f55\\uff0c\\u800c\\u7b2c\\u4e8c\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0ccd\\u5c31\\u8d77\\u4f5c\\u7528\\u4e86\\uff0cpwd\\u4f1a\\u6253\\u5370\\u51fa\\u4f60\\u6240\\u5c5e\\u7528\\u6237\\u7684\\u7cfb\\u7edf\\u76ee\\u5f55\\u3002\\n\\n\\n----\\n\\n1. \\u793a\\u4f8b\\u4e8c\\n\\n```\\nall:\\n\\t@CC=arm-linux-gcc\\n\\t@echo $(CC)\\n```\\n\\u6267\\u884c\\u7ed3\\u679c\\uff1a\\n```\\ncc\\n```\\n**\\u89e3\\u8bf4\\uff1a**\\n\\nmake \\u628a\\u6bcf\\u4e00\\u884c shell \\u811a\\u672c\\u5f53\\u4f5c\\u4e00\\u4e2a\\u72ec\\u7acb\\u7684\\u5355\\u5143\\u3002\\u5b83\\u4eec\\u5728\\u5355\\u72ec\\u7684\\u8fdb\\u7a0b\\u4e2d\\u8fdb\\u884c\\u3002\\u6b64\\u4f8b\\u4e2d\\uff0c\\u4e24\\u884c shell \\u811a\\u672c\\u5728\\u4e24\\u4e2a\\u83ab\\u4e0d\\u76f8\\u5e72\\u7684\\u8fdb\\u7a0b\\u91cc\\u8fd0\\u884c\\uff0c\\u7b2c\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u628a `CC` \\u8bbe\\u7f6e\\u4e3a arm-linux-gcc\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u8fdb\\u7a0b\\u662f\\u4e0d\\u77e5\\u9053\\u7684\\uff0c\\u6240\\u4ee5\\u6253\\u5370\\u7684\\u7ed3\\u679c\\u81ea\\u7136\\u4e0d\\u662f arm-linux-gcc \\u4e86\\u3002\\u4e3a\\u5b9e\\u73b0\\u60f3\\u8981\\u7684\\u76ee\\u7684\\uff0c\\u5199\\u6cd5\\u5982\\u4e0b \\uff1a\\n```\\nall:\\n\\t@CC=arm-linux-gcc; echo $(CC)\\n```\\n\\u6216\\n```\\nall\\n\\t@CC=arm-linux-gcc; \\\\\\n\\techo $(CC)\\n```\\n\\u4e8b\\u5b9e\\uff0c\\u4ee5\\u4e0a\\u6267\\u884c\\u7684\\u7ed3\\u679c\\u8fd8\\u662f cc\\u3002\\u7f51\\u4e0a\\u7684\\u8d44\\u6599\\u771f\\u662f\\u201c\\u9760\\u8c31\\u201d\\u3002\\u3002\\u3002\\u539f\\u56e0\\u662f\\u6211\\u4eec\\u4e0d\\u80fd\\u5728\\u547d\\u4ee4\\u4e2d\\u8fdb\\u884c\\u8d4b\\u503c\\u3002\\n\\n\\n----\\n\\n1. \\u793a\\u4f8b\\u4e09\\n\\n```\\nSUBDIR=src example\\nall:\\n\\t@for subdir in $(SUBDIR);\\\\\\n\\tdo\\\\\\n\\t\\techo \\"building\\" $(subdir);\\\\\\n\\tdone\\n```\\n\\u6267\\u884c\\u7ed3\\u679c\\uff1a\\n```\\nbuilding\\nbuilding\\n```\\n**\\u89e3\\u8bf4\\uff1a**\\nmake\\u9884\\u5904\\u7406\\u65f6\\uff0c\\u6240\\u6709\\u4ee5$\\u5f00\\u5934\\u7684\\uff0c\\u5b83\\u90fd\\u4e0d\\u4f1a\\u653e\\u8fc7\\u3002\\u8981\\u60f3\\u5f15\\u7528Shell\\u81ea\\u5df1\\u7684\\u53d8\\u91cf\\uff0c\\u5e94\\u8be5\\u4ee5$$\\u5f00\\u5934\\u3002\\u53e6\\u5916\\u8981\\u6ce8\\u610f\\uff0cShell\\u81ea\\u5df1\\u7684\\u53d8\\u91cf\\u662f\\u4e0d\\u9700\\u8981\\u62ec\\u53f7\\u7684\\u3002\\n```\\nSUBDIR=src example\\nall:\\n\\t@for subdir in $(SUBDIR);\\\\\\n\\tdo\\\\\\n\\t\\techo \\"building\\" $$subdir;\\\\\\n\\tdone\\n```\\n\\u6267\\u884c\\u7ed3\\u679c\\uff1a\\n```\\nbuilding src\\nbuilding example\\n```\\n\\n\\u54c7\\uff0c\\u4e00\\u5b9e\\u8df5\\uff0c\\u8499\\u853d\\u4e86\\uff0c\\u90a3\\u4e5f\\u8981\\u8bb0\\u5f55\\u4e0b\\u8fd9\\u4e2a\\u5751\\u7239\\u7684\\u8fc7\\u7a0b\\u4e0e\\u4f53\\u9a8c\\uff0c\\u8ba9\\u601d\\u7eea\\u6b47\\u4f1a\\uff0c\\u4e0b\\u6b21\\u6765\\u89e3\\u51b3\\u6216\\u7ea0\\u6b63","html":"<p>\\u521d\\u5b66\\u8005\\u5728\\u770b\\u5230\\u5927\\u91cf\\u7684makefile \\u547d\\u4ee4\\u65f6\\uff0c\\u5f80\\u5f80\\u4e0d\\u77e5\\u5b83\\u6267\\u884c\\u7ed3\\u679c\\u4e0e\\u6548\\u679c\\uff0c\\u4eff\\u5982\\u770b\\u5929\\u4e66\\uff0c\\u6216\\u5f53\\u573a\\u53bb\\u4e16\\u3002\\u540c\\u662f\\u65b0\\u624b\\u7684\\u6211\\u4e5f\\u662f\\u5982\\u6b64\\uff0c\\u4f46\\u4e3a\\u4e86\\u8d70\\u8fdb\\u5f00\\u6e90\\u4e16\\u754c\\u7684\\u5927\\u95e8\\uff0c\\u5929\\u4e66\\u4e5f\\u5f97\\u627e\\u65b9\\u6cd5\\u53bb\\u8bfb\\u61c2\\u3002<\\/p>\\n<p>makefile \\u4e2d\\u7684\\u53d8\\u91cf\\u5728\\u58f0\\u660e\\u65f6\\u9700\\u8981\\u8d4b\\u4e88\\u521d\\u503c\\uff0c\\u5728\\u4f7f\\u7528\\u65f6\\uff0c\\u9700\\u8981\\u5728\\u4f7f\\u7528\\u7684\\u53d8\\u91cf\\u524d\\u52a0<code>$<\\/code>\\u7b26\\u53f7\\uff0c\\u4f46\\u662f\\u6700\\u597d\\u4f7f\\u7528<code>()<\\/code>\\u6216\\u8005<code>{}<\\/code>\\u5c06\\u53d8\\u91cf\\u5305\\u62ec\\u8d77\\u6765\\u3002<br \\/>\\n\\u6240\\u4ee5\\uff0c\\u5728 makefile \\u4e2d\\u4f7f\\u7528 shell:<\\/p>\\n<ol>\\n<li>\\u4f7f\\u7528 makefile \\u4e2d\\u7684 <code>$(shell ...)<\\/code> \\uff0ceg: `CUR_DIR = $(shell pwd)<\\/li>\\n<li>\\u76f4\\u63a5\\u4f7f\\u7528 shell\\uff0c\\u90a3\\u4e48\\u5c31\\u8981\\u6ce8\\u610f\\u5982\\u4e0b\\u4e8b\\u9879\\uff1a\\n<ul>\\n<li>shell \\u547d\\u4ee4\\u5fc5\\u987b\\u662f\\u5728\\u89c4\\u5219\\u91cc\\u9762<\\/li>\\n<li>shell \\u547d\\u4ee4\\u5728makefile \\u8c03\\u7528\\u65f6\\u5019\\u6bcf\\u884c shell \\u90fd\\u662f\\u4e00\\u4e2a\\u5355\\u72ec\\u7684\\u8fdb\\u7a0b\\u3002\\u4e0a\\u4e00\\u884c\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\u5728\\u4e00\\u4e0b\\u884c\\u662f\\u65e0\\u6548\\u7684<\\/li>\\n<li>makefile \\u8c03\\u7528 shell \\u65f6\\u5019\\uff08\\u5176\\u5b9e\\u5728\\u6267\\u884c\\u65f6\\u5019\\u90fd\\u4f1a\\u6709\\u8fd9\\u4e2a\\u52a8\\u4f5c\\uff0c\\u4e0d\\u5149\\u5149\\u662f shell\\uff09\\uff0c\\u4f1a\\u5bf9\\u53d8\\u91cf\\u66ff\\u6362\\uff1b\\u5982\\u679c\\u662f makefile \\u4e2d\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\uff08\\u4f7f\\u7528<code>$()<\\/code>\\u6765\\u5f15\\u7528\\u7684\\uff09\\u4f1a\\u88ab\\u66ff\\u6362\\u6210\\u53d8\\u91cf\\u7684\\u503c\\uff1b\\u5982\\u679c\\u662f <code>$$<\\/code> \\u7b26\\u53f7\\uff0c\\u4f1a\\u66ff\\u6362\\u6210 $\\uff0c\\u7136\\u540e\\u4f20\\u7ed9 shell \\u6765\\u6267\\u884c\\u3002<\\/li>\\n<\\/ul><\\/li>\\n<\\/ol>\\n<h4>\\u5b9e\\u8df5\\u793a\\u4f8b<\\/h4>\\n<ol>\\n<li>\\u793a\\u4f8b\\u4e00<\\/li>\\n<\\/ol>\\n<pre><code>if [\\"$(BUILD)\\" = \\"debug\\"];then echo \\"build debug\\"; else echo \\"build release\\"; fi\\nall:\\n    @echo \\"done\\"<\\/code><\\/pre>\\n<p>\\u6267\\u884c\\u7ed3\\u679c\\uff1a<\\/p>\\n<pre><code>done<\\/code><\\/pre>\\n<p><strong>\\u89e3\\u8bf4\\uff1a<\\/strong><\\/p>\\n<p>shell \\u811a\\u672c\\u5728 target \\u91cc\\u624d\\u6709\\u6548\\uff0c\\u5176\\u5b83\\u5730\\u65b9\\u90fd\\u88ab\\u5ffd\\u7565\\u6389\\u4e86\\u3002\\u6240\\u4ee5\\u793a\\u4f8b\\u4e2d\\uff0c<code>build debug<\\/code>\\u4e4b\\u7c7b\\u7684\\u5b57\\u7b26\\u4e32\\u6839\\u672c\\u6253\\u5370\\u4e0d\\u51fa\\u6765\\u3002\\u793a\\u4f8b\\u4e00\\u7684\\u6b63\\u786e\\u5199\\u6cd5\\u662f\\uff1a<\\/p>\\n<pre><code>all:\\n    if[\\"$(BUILD)\\" = \\"debug\\"]; then echo \\"build debug\\"; else echo \\"build release\\"; fi\\n    echo \\"done\\"<\\/code><\\/pre>\\n<p>\\u5176\\u8f93\\u51fa\\u4e3a\\uff1a<\\/p>\\n<pre><code>\\u7ed3\\u679c\\u62a5\\u9519\\uff0c\\u6682\\u65f6\\u89e3\\u51b3\\u4e0d\\u4e86<\\/code><\\/pre>\\n<p>\\u4e3a\\u4ec0\\u4e48\\u4f1a\\u8fd9\\u6837\\uff0c\\u5982\\u679c\\u4f60\\u6709\\u67e5\\u770b\\u8f83\\u591a\\u7684 makefile \\u6587\\u4ef6\\u7684\\u5185\\u5bb9\\u5c31\\u5927\\u6982\\u6e05\\u695a\\uff0cmakefile \\u6ca1\\u6709\\u8fd9\\u6837\\u8fd0\\u7528 shell \\u7684\\u3002\\u90a3\\u4e48\\u6211\\u4eec\\u6539\\u4e0b\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code> \\u793a\\u4f8b\\u4e00\\uff1a\\nexec:\\n    cd ~\\n    pwd\\n\\n\\u793a\\u4f8b\\u4e8c\\uff1a\\nexec:\\n    cd ~; pwd<\\/code><\\/pre>\\n<p>\\u5f53\\u6211\\u4eec\\u6267\\u884c\\u201cmake exec\\u201d\\u65f6\\uff0c\\u7b2c\\u4e00\\u4e2a\\u4f8b\\u5b50\\u4e2d\\u7684cd\\u6ca1\\u6709\\u4f5c\\u7528\\uff0cpwd\\u4f1a\\u6253\\u5370\\u51fa\\u5f53\\u524d\\u7684Makefile\\u76ee\\u5f55\\uff0c\\u800c\\u7b2c\\u4e8c\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0ccd\\u5c31\\u8d77\\u4f5c\\u7528\\u4e86\\uff0cpwd\\u4f1a\\u6253\\u5370\\u51fa\\u4f60\\u6240\\u5c5e\\u7528\\u6237\\u7684\\u7cfb\\u7edf\\u76ee\\u5f55\\u3002<\\/p>\\n<hr \\/>\\n<ol>\\n<li>\\u793a\\u4f8b\\u4e8c<\\/li>\\n<\\/ol>\\n<pre><code>all:\\n    @CC=arm-linux-gcc\\n    @echo $(CC)<\\/code><\\/pre>\\n<p>\\u6267\\u884c\\u7ed3\\u679c\\uff1a<\\/p>\\n<pre><code>cc<\\/code><\\/pre>\\n<p><strong>\\u89e3\\u8bf4\\uff1a<\\/strong><\\/p>\\n<p>make \\u628a\\u6bcf\\u4e00\\u884c shell \\u811a\\u672c\\u5f53\\u4f5c\\u4e00\\u4e2a\\u72ec\\u7acb\\u7684\\u5355\\u5143\\u3002\\u5b83\\u4eec\\u5728\\u5355\\u72ec\\u7684\\u8fdb\\u7a0b\\u4e2d\\u8fdb\\u884c\\u3002\\u6b64\\u4f8b\\u4e2d\\uff0c\\u4e24\\u884c shell \\u811a\\u672c\\u5728\\u4e24\\u4e2a\\u83ab\\u4e0d\\u76f8\\u5e72\\u7684\\u8fdb\\u7a0b\\u91cc\\u8fd0\\u884c\\uff0c\\u7b2c\\u4e00\\u4e2a\\u8fdb\\u7a0b\\u628a <code>CC<\\/code> \\u8bbe\\u7f6e\\u4e3a arm-linux-gcc\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u8fdb\\u7a0b\\u662f\\u4e0d\\u77e5\\u9053\\u7684\\uff0c\\u6240\\u4ee5\\u6253\\u5370\\u7684\\u7ed3\\u679c\\u81ea\\u7136\\u4e0d\\u662f arm-linux-gcc \\u4e86\\u3002\\u4e3a\\u5b9e\\u73b0\\u60f3\\u8981\\u7684\\u76ee\\u7684\\uff0c\\u5199\\u6cd5\\u5982\\u4e0b \\uff1a<\\/p>\\n<pre><code>all:\\n    @CC=arm-linux-gcc; echo $(CC)<\\/code><\\/pre>\\n<p>\\u6216<\\/p>\\n<pre><code>all\\n    @CC=arm-linux-gcc; \\\\\\n    echo $(CC)<\\/code><\\/pre>\\n<p>\\u4e8b\\u5b9e\\uff0c\\u4ee5\\u4e0a\\u6267\\u884c\\u7684\\u7ed3\\u679c\\u8fd8\\u662f cc\\u3002\\u7f51\\u4e0a\\u7684\\u8d44\\u6599\\u771f\\u662f\\u201c\\u9760\\u8c31\\u201d\\u3002\\u3002\\u3002\\u539f\\u56e0\\u662f\\u6211\\u4eec\\u4e0d\\u80fd\\u5728\\u547d\\u4ee4\\u4e2d\\u8fdb\\u884c\\u8d4b\\u503c\\u3002<\\/p>\\n<hr \\/>\\n<ol>\\n<li>\\u793a\\u4f8b\\u4e09<\\/li>\\n<\\/ol>\\n<pre><code>SUBDIR=src example\\nall:\\n    @for subdir in $(SUBDIR);\\\\\\n    do\\\\\\n        echo \\"building\\" $(subdir);\\\\\\n    done<\\/code><\\/pre>\\n<p>\\u6267\\u884c\\u7ed3\\u679c\\uff1a<\\/p>\\n<pre><code>building\\nbuilding<\\/code><\\/pre>\\n<p><strong>\\u89e3\\u8bf4\\uff1a<\\/strong><br \\/>\\nmake\\u9884\\u5904\\u7406\\u65f6\\uff0c\\u6240\\u6709\\u4ee5$\\u5f00\\u5934\\u7684\\uff0c\\u5b83\\u90fd\\u4e0d\\u4f1a\\u653e\\u8fc7\\u3002\\u8981\\u60f3\\u5f15\\u7528Shell\\u81ea\\u5df1\\u7684\\u53d8\\u91cf\\uff0c\\u5e94\\u8be5\\u4ee5$$\\u5f00\\u5934\\u3002\\u53e6\\u5916\\u8981\\u6ce8\\u610f\\uff0cShell\\u81ea\\u5df1\\u7684\\u53d8\\u91cf\\u662f\\u4e0d\\u9700\\u8981\\u62ec\\u53f7\\u7684\\u3002<\\/p>\\n<pre><code>SUBDIR=src example\\nall:\\n    @for subdir in $(SUBDIR);\\\\\\n    do\\\\\\n        echo \\"building\\" $$subdir;\\\\\\n    done<\\/code><\\/pre>\\n<p>\\u6267\\u884c\\u7ed3\\u679c\\uff1a<\\/p>\\n<pre><code>building src\\nbuilding example<\\/code><\\/pre>\\n<p>\\u54c7\\uff0c\\u4e00\\u5b9e\\u8df5\\uff0c\\u8499\\u853d\\u4e86\\uff0c\\u90a3\\u4e5f\\u8981\\u8bb0\\u5f55\\u4e0b\\u8fd9\\u4e2a\\u5751\\u7239\\u7684\\u8fc7\\u7a0b\\u4e0e\\u4f53\\u9a8c\\uff0c\\u8ba9\\u601d\\u7eea\\u6b47\\u4f1a\\uff0c\\u4e0b\\u6b21\\u6765\\u89e3\\u51b3\\u6216\\u7ea0\\u6b63<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '网上资料拿来实践验证下，没想到收获是写的结论都没被我操作出来',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 68,
                'published_at' => '2020-09-27 22:57:00',
                'created_at' => '2020-09-28 00:15:02',
                'updated_at' => '2022-01-09 06:37:35',
                'deleted_at' => NULL,
            ),
            10 => 
            array (
                'id' => 11,
                'category_id' => 8,
                'collection_id' => 3,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'makefile-1k8bx',
                'title' => '跟我一起写 Makefile -- 使用变量',
                'subtitle' => '使用变量',
            'content' => '{"raw":"### \\u4f7f\\u7528\\u53d8\\u91cf\\n\\n----\\n\\n\\u5728Makefile\\u4e2d\\u7684\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\uff0c\\u5c31\\u50cf\\u662fC\\/C++\\u8bed\\u8a00\\u4e2d\\u7684\\u5b8f\\u4e00\\u6837\\uff0c**\\u4ed6\\u4ee3\\u8868\\u4e86\\u4e00\\u4e2a\\u6587\\u672c\\u5b57\\u4e32\\uff0c\\u5728Makefile\\u4e2d\\u6267\\u884c\\u7684\\u65f6\\u5019\\u5176\\u4f1a\\u81ea\\u52a8\\u539f\\u6a21\\u539f\\u6837\\u5730\\u5c55\\u5f00\\u5728\\u6240\\u4f7f\\u7528\\u7684\\u5730\\u65b9**\\u3002\\u5176\\u4e0eC\\/C++\\u4e2d\\u7684\\u5b8f\\u6240\\u4e0d\\u540c\\u7684\\u662f\\uff0c\\u4f60\\u53ef\\u4ee5\\u5728Makefile\\u4e2d\\u6539\\u53d8\\u5176\\u503c\\u3002\\u5728Makefile\\u4e2d\\uff0c\\u53d8\\u91cf\\u53ef\\u4ee5\\u4f7f\\u7528\\u5728\\u201c\\u76ee\\u6807\\u201d\\uff0c\\u201c\\u4f9d\\u8d56\\u76ee\\u6807\\u201d\\uff0c\\u201c\\u547d\\u4ee4\\u201d\\u6216\\u662fMakefile\\u7684\\u5176\\u5b83\\u90e8\\u5206\\u4e2d\\u3002\\n\\n\\u53d8\\u91cf\\u7684\\u547d\\u540d\\u5b57\\u53ef\\u4ee5\\u5305\\u542b\\u5b57\\u7b26\\u3001\\u6570\\u5b57\\uff0c\\u4e0b\\u5212\\u7ebf\\uff08\\u53ef\\u4ee5\\u662f\\u6570\\u5b57\\u5f00\\u5934\\uff09\\uff0c\\u4f46\\u4e0d\\u5e94\\u8be5\\u542b\\u6709\\u201c:\\u201d\\u3001\\u201c#\\u201d\\u3001\\u201c=\\u201d\\u6216\\u662f\\u7a7a\\u5b57\\u7b26\\uff08\\u7a7a\\u683c\\u3001\\u56de\\u8f66\\u7b49\\uff09\\u3002\\u53d8\\u91cf\\u662f\\u5927\\u5c0f\\u5199\\u654f\\u611f\\u7684\\uff0c\\u201cfoo\\u201d\\u3001\\u201cFoo\\u201d\\u548c\\u201cFOO\\u201d\\u662f\\u4e09\\u4e2a\\u4e0d\\u540c\\u7684\\u53d8\\u91cf\\u540d\\u3002\\u4f20\\u7edf\\u7684Makefile\\u7684\\u53d8\\u91cf\\u540d\\u662f\\u5168\\u5927\\u5199\\u7684\\u547d\\u540d\\u65b9\\u5f0f\\uff0c\\u4f46\\u6211\\u63a8\\u8350\\u4f7f\\u7528\\u5927\\u5c0f\\u5199\\u642d\\u914d\\u7684\\u53d8\\u91cf\\u540d\\uff0c\\u5982\\uff1aMakeFlags\\u3002\\u8fd9\\u6837\\u53ef\\u4ee5\\u907f\\u514d\\u548c\\u7cfb\\u7edf\\u7684\\u53d8\\u91cf\\u51b2\\u7a81\\uff0c\\u800c\\u53d1\\u751f\\u610f\\u5916\\u7684\\u4e8b\\u60c5\\u3002\\n\\n\\u6709\\u4e00\\u4e9b\\u53d8\\u91cf\\u662f\\u5f88\\u5947\\u602a\\u5b57\\u4e32\\uff0c\\u5982\\u201c$<\\u201d\\u3001\\u201c$@\\u201d\\u7b49\\uff0c\\u8fd9\\u4e9b\\u662f\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u9762\\u4ecb\\u7ecd\\u3002\\n\\n##### \\u4e00\\u3001\\u53d8\\u91cf\\u7684\\u57fa\\u7840\\n\\n\\u53d8\\u91cf\\u5728\\u58f0\\u660e\\u65f6\\u9700\\u8981\\u7ed9\\u4e88\\u521d\\u503c\\uff0c\\u800c\\u5728\\u4f7f\\u7528\\u65f6\\uff0c\\u9700\\u8981\\u7ed9\\u5728\\u53d8\\u91cf\\u540d\\u524d\\u52a0\\u4e0a\\u201c$\\u201d\\u7b26\\u53f7\\uff0c\\u4f46\\u6700\\u597d\\u7528\\u5c0f\\u62ec\\u53f7\\u201c\\uff08\\uff09\\u201d\\u6216\\u662f\\u5927\\u62ec\\u53f7\\u201c{}\\u201d\\u628a\\u53d8\\u91cf\\u7ed9\\u5305\\u62ec\\u8d77\\u6765\\u3002\\u5982\\u679c\\u4f60\\u8981\\u4f7f\\u7528\\u771f\\u5b9e\\u7684\\u201c$\\u201d\\u5b57\\u7b26\\uff0c\\u90a3\\u4e48\\u4f60\\u9700\\u8981\\u7528\\u201c$$\\u201d\\u6765\\u8868\\u793a\\u3002\\n\\n\\u53d8\\u91cf\\u53ef\\u4ee5\\u4f7f\\u7528\\u5728\\u8bb8\\u591a\\u5730\\u65b9\\uff0c\\u5982\\u89c4\\u5219\\u4e2d\\u7684\\u201c\\u76ee\\u6807\\u201d\\u3001\\u201c\\u4f9d\\u8d56\\u201d\\u3001\\u201c\\u547d\\u4ee4\\u201d\\u4ee5\\u53ca\\u65b0\\u7684\\u53d8\\u91cf\\u4e2d\\u3002\\u5148\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a\\n```\\nobjects = program.o foo.o utils.o\\nprogram : $(objects)\\n\\tcc -o program $(objects)\\n\\n$(objects) : defs.h\\n```\\n\\n\\u53d8\\u91cf\\u4f1a\\u5728\\u4f7f\\u7528\\u5b83\\u7684\\u5730\\u65b9\\u7cbe\\u786e\\u5730\\u5c55\\u5f00\\uff0c\\u5c31\\u50cfC\\/C++\\u4e2d\\u7684\\u5b8f\\u4e00\\u6837\\uff0c\\u4f8b\\u5982\\uff1a\\n```\\nfoo = c\\nprog.o : prog.$(foo)\\n\\t$(foo)$(foo) -$(foo) prog.$(foo)\\n```\\n\\u5c55\\u5f00\\u540e\\u5f97\\u5230\\uff1a\\n```\\nprog.o : prog.c\\n\\tcc -c prog.c\\n```\\n\\u5f53\\u7136\\uff0c\\u5343\\u4e07\\u4e0d\\u8981\\u5728\\u4f60\\u7684Makefile\\u4e2d\\u8fd9\\u6837\\u5e72\\uff0c\\u8fd9\\u91cc\\u53ea\\u662f\\u4e3e\\u4e2a\\u4f8b\\u5b50\\u6765\\u8868\\u660eMakefile\\u4e2d\\u7684\\u53d8\\u91cf\\u5728\\u4f7f\\u7528\\u5904\\u5c55\\u5f00\\u7684\\u771f\\u5b9e\\u6837\\u5b50\\u3002\\u53ef\\u89c1\\u5176\\u5c31\\u662f\\u4e00\\u4e2a\\u201c\\u66ff\\u4ee3\\u201d\\u7684\\u539f\\u7406\\u3002\\n\\n\\u53e6\\u5916\\uff0c\\u7ed9\\u53d8\\u91cf\\u52a0\\u4e0a\\u62ec\\u53f7\\u5b8c\\u5168\\u662f\\u4e3a\\u4e86\\u66f4\\u52a0\\u5b89\\u5168\\u5730\\u4f7f\\u7528\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u5728\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u4e2d\\uff0c\\u5982\\u679c\\u4f60\\u4e0d\\u60f3\\u7ed9\\u53d8\\u91cf\\u52a0\\u4e0a\\u62ec\\u53f7\\uff0c\\u90a3\\u4e5f\\u53ef\\u4ee5\\uff0c\\u4f46\\u6211\\u8fd8\\u662f\\u5f3a\\u70c8\\u5efa\\u8bae\\u4f60\\u7ed9\\u53d8\\u91cf\\u52a0\\u4e0a\\u62ec\\u53f7\\u3002\\n\\n\\n##### \\u4e8c\\u3001\\u53d8\\u91cf\\u4e2d\\u7684\\u53d8\\u91cf\\n\\n\\u5728\\u5b9a\\u4e49\\u53d8\\u91cf\\u7684\\u503c\\u65f6\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u5176\\u5b83\\u53d8\\u91cf\\u6765\\u6784\\u9020\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u5728Makefile\\u4e2d\\u6709\\u4e24\\u79cd\\u65b9\\u5f0f\\u6765\\u5728\\u7528\\u53d8\\u91cf\\u5b9a\\u4e49\\u53d8\\u91cf\\u7684\\u503c\\u3002\\n\\n\\u5148\\u770b\\u7b2c\\u4e00\\u79cd\\u65b9\\u5f0f\\uff0c\\u4e5f\\u5c31\\u662f\\u7b80\\u5355\\u7684\\u4f7f\\u7528\\u201c=\\u201d\\u53f7\\uff0c\\u5728\\u201c=\\u201d\\u5de6\\u4fa7\\u662f\\u53d8\\u91cf\\uff0c\\u53f3\\u4fa7\\u662f\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u53f3\\u4fa7\\u53d8\\u91cf\\u7684\\u503c\\u53ef\\u4ee5\\u5b9a\\u4e49\\u5728\\u6587\\u4ef6\\u7684\\u4efb\\u4f55\\u4e00\\u5904\\uff0c\\u4e5f\\u5c31\\u662f\\u8bf4\\uff0c\\u53f3\\u4fa7\\u4e2d\\u7684\\u53d8\\u91cf\\u4e0d\\u4e00\\u5b9a\\u975e\\u8981\\u662f\\u5df2\\u5b9a\\u4e49\\u597d\\u7684\\u503c\\uff0c\\u5176\\u4e5f\\u53ef\\u4ee5\\u4f7f\\u7528\\u540e\\u9762\\u5b9a\\u4e49\\u7684\\u503c\\u3002\\u5982\\uff1a\\n```\\nfoo = $(bar)\\nbar = $(ugh)\\nugh = Huh?\\n\\nall:\\n\\techo $(foo)\\n```\\n\\u6211\\u4eec\\u6267\\u884c\\u201cmake all\\u201d\\u5c06\\u4f1a\\u6253\\u51fa\\u53d8\\u91cf$(foo)\\u7684\\u503c\\u662f\\u201cHuh?\\u201d\\uff08 $(foo)\\u7684\\u503c\\u662f$(bar)\\uff0c$(bar)\\u7684\\u503c\\u662f$(ugh)\\uff0c$(ugh)\\u7684\\u503c\\u662f\\u201cHuh?\\u201d\\uff09\\u53ef\\u89c1\\uff0c\\u53d8\\u91cf\\u662f\\u53ef\\u4ee5\\u4f7f\\u7528\\u540e\\u9762\\u7684\\u53d8\\u91cf\\u6765\\u5b9a\\u4e49\\u7684\\u3002\\n\\n\\u8fd9\\u4e2a\\u529f\\u80fd\\u6709\\u597d\\u7684\\u5730\\u65b9\\uff0c\\u4e5f\\u6709\\u4e0d\\u597d\\u7684\\u5730\\u65b9\\uff0c\\u597d\\u7684\\u5730\\u65b9\\u662f\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u628a\\u53d8\\u91cf\\u7684\\u771f\\u5b9e\\u503c\\u63a8\\u5230\\u540e\\u9762\\u6765\\u5b9a\\u4e49\\uff0c\\u5982\\uff1a\\n\\n    CFLAGS = $(include_dirs) -O\\n    include_dirs = -Ifoo -Ibar\\n\\n\\u5f53\\u201cCFLAGS\\u201d\\u5728\\u547d\\u4ee4\\u4e2d\\u88ab\\u5c55\\u5f00\\u65f6\\uff0c\\u4f1a\\u662f\\u201c-Ifoo -Ibar -O\\u201d\\u3002\\u4f46\\u8fd9\\u79cd\\u5f62\\u5f0f\\u4e5f\\u6709\\u4e0d\\u597d\\u7684\\u5730\\u65b9\\uff0c\\u90a3\\u5c31\\u662f\\u9012\\u5f52\\u5b9a\\u4e49\\uff0c\\u5982\\uff1a\\n\\n    CFLAGS = $(CFLAGS) -O\\n\\n    \\u6216\\uff1a\\n\\n    A = $(B)\\n    B = $(A)\\n\\n\\u8fd9\\u4f1a\\u8ba9make\\u9677\\u5165\\u65e0\\u9650\\u7684\\u53d8\\u91cf\\u5c55\\u5f00\\u8fc7\\u7a0b\\u4e2d\\u53bb\\uff0c\\u5f53\\u7136\\uff0c\\u6211\\u4eec\\u7684make\\u662f\\u6709\\u80fd\\u529b\\u68c0\\u6d4b\\u8fd9\\u6837\\u7684\\u5b9a\\u4e49\\uff0c\\u5e76\\u4f1a\\u62a5\\u9519\\u3002\\u8fd8\\u6709\\u5c31\\u662f\\u5982\\u679c\\u5728\\u53d8\\u91cf\\u4e2d\\u4f7f\\u7528\\u51fd\\u6570\\uff0c\\u90a3\\u4e48\\uff0c\\u8fd9\\u79cd\\u65b9\\u5f0f\\u4f1a\\u8ba9\\u6211\\u4eec\\u7684make\\u8fd0\\u884c\\u65f6\\u975e\\u5e38\\u6162\\uff0c\\u66f4\\u7cdf\\u7cd5\\u7684\\u662f\\uff0c\\u4ed6\\u4f1a\\u4f7f\\u7528\\u5f97\\u4e24\\u4e2amake\\u7684\\u51fd\\u6570\\u201cwildcard\\u201d\\u548c\\u201cshell\\u201d\\u53d1\\u751f\\u4e0d\\u53ef\\u9884\\u77e5\\u7684\\u9519\\u8bef\\u3002\\u56e0\\u4e3a\\u4f60\\u4e0d\\u4f1a\\u77e5\\u9053\\u8fd9\\u4e24\\u4e2a\\u51fd\\u6570\\u4f1a\\u88ab\\u8c03\\u7528\\u591a\\u5c11\\u6b21\\u3002\\n\\n\\u4e3a\\u4e86\\u907f\\u514d\\u4e0a\\u9762\\u7684\\u8fd9\\u79cd\\u65b9\\u6cd5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528make\\u4e2d\\u7684\\u53e6\\u4e00\\u79cd\\u7528\\u53d8\\u91cf\\u6765\\u5b9a\\u4e49\\u53d8\\u91cf\\u7684\\u65b9\\u6cd5\\u3002\\u8fd9\\u79cd\\u65b9\\u6cd5\\u4f7f\\u7528\\u7684\\u662f`:=`\\u64cd\\u4f5c\\u7b26\\uff0c\\u5982\\uff1a\\n\\n    x := foo\\n    y := $(x) bar\\n    x := later\\n\\n\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\n    y := foo bar\\n    x := later\\n\\n\\u503c\\u5f97\\u4e00\\u63d0\\u7684\\u662f\\uff0c\\u8fd9\\u79cd\\u65b9\\u6cd5\\uff0c\\u524d\\u9762\\u7684\\u53d8\\u91cf\\u4e0d\\u80fd\\u4f7f\\u7528\\u540e\\u9762\\u7684\\u53d8\\u91cf\\uff0c\\u53ea\\u80fd\\u4f7f\\u7528\\u524d\\u9762\\u5df2\\u5b9a\\u4e49\\u597d\\u4e86\\u7684\\u53d8\\u91cf\\u3002\\u5982\\u679c\\u662f\\u8fd9\\u6837\\uff1a\\n\\n    y := $(x) bar\\n    x := foo\\n\\n\\u90a3\\u4e48\\uff0cy\\u7684\\u503c\\u662f\\u201cbar\\u201d\\uff0c\\u800c\\u4e0d\\u662f\\u201cfoo bar\\u201d\\u3002\\n\\n\\u4e0a\\u9762\\u90fd\\u662f\\u4e00\\u4e9b\\u6bd4\\u8f83\\u7b80\\u5355\\u7684\\u53d8\\u91cf\\u4f7f\\u7528\\u4e86\\uff0c\\u8ba9\\u6211\\u4eec\\u6765\\u770b\\u4e00\\u4e2a\\u590d\\u6742\\u7684\\u4f8b\\u5b50\\uff0c\\u5176\\u4e2d\\u5305\\u62ec\\u4e86make\\u7684\\u51fd\\u6570\\u3001\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u548c\\u4e00\\u4e2a\\u7cfb\\u7edf\\u53d8\\u91cf\\u201cMAKELEVEL\\u201d\\u7684\\u4f7f\\u7528\\uff1a\\n```\\nifeq (0,${MAKELEVEL})\\ncur-dir   := $(shell pwd)\\nwhoami    := $(shell whoami)\\nhost-type := $(shell arch)\\nMAKE := ${MAKE} host-type=${host-type} whoami=${whoami}\\nendif\\n```\\n\\u5173\\u4e8e\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u548c\\u51fd\\u6570\\uff0c\\u6211\\u4eec\\u5728\\u540e\\u9762\\u518d\\u8bf4\\uff0c\\u5bf9\\u4e8e\\u7cfb\\u7edf\\u53d8\\u91cf\\u201cMAKELEVEL\\u201d\\uff0c\\u5176\\u610f\\u601d\\u662f\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684make\\u6709\\u4e00\\u4e2a\\u5d4c\\u5957\\u6267\\u884c\\u7684\\u52a8\\u4f5c\\uff08\\u53c2\\u89c1\\u524d\\u9762\\u7684\\u201c\\u5d4c\\u5957\\u4f7f\\u7528make\\u201d\\uff09\\uff0c\\u90a3\\u4e48\\uff0c\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4f1a\\u8bb0\\u5f55\\u4e86\\u6211\\u4eec\\u7684\\u5f53\\u524dMakefile\\u7684\\u8c03\\u7528\\u5c42\\u6570\\u3002\\n\\n\\u4e0b\\u9762\\u518d\\u4ecb\\u7ecd\\u4e24\\u4e2a\\u5b9a\\u4e49\\u53d8\\u91cf\\u65f6\\u6211\\u4eec\\u9700\\u8981\\u77e5\\u9053\\u7684\\uff0c\\u8bf7\\u5148\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u8981\\u5b9a\\u4e49\\u4e00\\u4e2a\\u53d8\\u91cf\\uff0c\\u5176\\u503c\\u662f\\u4e00\\u4e2a\\u7a7a\\u683c\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u53ef\\u4ee5\\u8fd9\\u6837\\u6765\\uff1a\\n\\n    nullstring :=\\n    space := $(nullstring) # end of the line\\n\\nnullstring\\u662f\\u4e00\\u4e2aEmpty\\u53d8\\u91cf\\uff0c\\u5176\\u4e2d\\u4ec0\\u4e48\\u4e5f\\u6ca1\\u6709\\uff0c\\u800c\\u6211\\u4eec\\u7684space\\u7684\\u503c\\u662f\\u4e00\\u4e2a\\u7a7a\\u683c\\u3002\\u56e0\\u4e3a\\u5728\\u64cd\\u4f5c\\u7b26\\u7684\\u53f3\\u8fb9\\u662f\\u5f88\\u96be\\u63cf\\u8ff0\\u4e00\\u4e2a\\u7a7a\\u683c\\u7684\\uff0c\\u8fd9\\u91cc\\u91c7\\u7528\\u7684\\u6280\\u672f\\u5f88\\u7ba1\\u7528\\uff0c\\u5148\\u7528\\u4e00\\u4e2aEmpty\\u53d8\\u91cf\\u6765\\u6807\\u660e\\u53d8\\u91cf\\u7684\\u503c\\u5f00\\u59cb\\u4e86\\uff0c\\u800c\\u540e\\u9762\\u91c7\\u7528\\u201c#\\u201d\\u6ce8\\u91ca\\u7b26\\u6765\\u8868\\u793a\\u53d8\\u91cf\\u5b9a\\u4e49\\u7684\\u7ec8\\u6b62\\uff0c\\u8fd9\\u6837\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5b9a\\u4e49\\u51fa\\u5176\\u503c\\u662f\\u4e00\\u4e2a\\u7a7a\\u683c\\u7684\\u53d8\\u91cf\\u3002\\u8bf7\\u6ce8\\u610f\\u8fd9\\u91cc\\u5173\\u4e8e\\u201c#\\u201d\\u7684\\u4f7f\\u7528\\uff0c\\u6ce8\\u91ca\\u7b26\\u201c#\\u201d\\u7684\\u8fd9\\u79cd\\u7279\\u6027\\u503c\\u5f97\\u6211\\u4eec\\u6ce8\\u610f\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u8fd9\\u6837\\u5b9a\\u4e49\\u4e00\\u4e2a\\u53d8\\u91cf\\uff1a\\n\\n    dir := \\/foo\\/bar    # directory to put the frobs in\\n\\ndir\\u8fd9\\u4e2a\\u53d8\\u91cf\\u7684\\u503c\\u662f\\u201c\\/foo\\/bar\\u201d\\uff0c\\u540e\\u9762\\u8fd8\\u8ddf\\u4e864\\u4e2a\\u7a7a\\u683c\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u8fd9\\u6837\\u4f7f\\u7528\\u8fd9\\u6837\\u53d8\\u91cf\\u6765\\u6307\\u5b9a\\u522b\\u7684\\u76ee\\u5f55\\u2014\\u2014\\u201c$(dir)\\/file\\u201d\\u90a3\\u4e48\\u5c31\\u5b8c\\u86cb\\u4e86\\u3002\\n\\n\\u8fd8\\u6709\\u4e00\\u4e2a\\u6bd4\\u8f83\\u6709\\u7528\\u7684\\u64cd\\u4f5c\\u7b26\\u662f\\u201c?=\\u201d\\uff0c\\u5148\\u770b\\u793a\\u4f8b\\uff1a\\n\\n    FOO ?= bar\\n\\n\\u5176\\u542b\\u4e49\\u662f\\uff0c\\u5982\\u679cFOO\\u6ca1\\u6709\\u88ab\\u5b9a\\u4e49\\u8fc7\\uff0c\\u90a3\\u4e48\\u53d8\\u91cfFOO\\u7684\\u503c\\u5c31\\u662f\\u201cbar\\u201d\\uff0c\\u5982\\u679cFOO\\u5148\\u524d\\u88ab\\u5b9a\\u4e49\\u8fc7\\uff0c\\u90a3\\u4e48\\u8fd9\\u6761\\u8bed\\u5c06\\u4ec0\\u4e48\\u4e5f\\u4e0d\\u505a\\uff0c\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\n    ifeq ($(origin FOO), undefined)\\n      FOO = bar\\n    endif\\n\\n\\n\\u4e09\\u3001\\u53d8\\u91cf\\u9ad8\\u7ea7\\u7528\\u6cd5\\n\\n\\u8fd9\\u91cc\\u4ecb\\u7ecd\\u4e24\\u79cd\\u53d8\\u91cf\\u7684\\u9ad8\\u7ea7\\u4f7f\\u7528\\u65b9\\u6cd5\\uff0c\\u7b2c\\u4e00\\u79cd\\u662f\\u53d8\\u91cf\\u503c\\u7684\\u66ff\\u6362\\u3002\\n\\n\\u6211\\u4eec\\u53ef\\u4ee5\\u66ff\\u6362\\u53d8\\u91cf\\u4e2d\\u7684\\u5171\\u6709\\u7684\\u90e8\\u5206\\uff0c\\u5176\\u683c\\u5f0f\\u662f\\u201c$(var:a=b)\\u201d\\u6216\\u662f\\u201c${var:a=b}\\u201d\\uff0c\\u5176\\u610f\\u601d\\u662f\\uff0c\\u628a\\u53d8\\u91cf\\u201cvar\\u201d\\u4e2d\\u6240\\u6709\\u4ee5\\u201ca\\u201d\\u5b57\\u4e32\\u201c\\u7ed3\\u5c3e\\u201d\\u7684\\u201ca\\u201d\\u66ff\\u6362\\u6210\\u201cb\\u201d\\u5b57\\u4e32\\u3002\\u8fd9\\u91cc\\u7684\\u201c\\u7ed3\\u5c3e\\u201d\\u610f\\u601d\\u662f\\u201c\\u7a7a\\u683c\\u201d\\u6216\\u662f\\u201c\\u7ed3\\u675f\\u7b26\\u201d\\u3002\\n\\n\\u8fd8\\u662f\\u770b\\u4e00\\u4e2a\\u793a\\u4f8b\\u5427\\uff1a\\n\\n    foo := a.o b.o c.o\\n    bar := $(foo:.o=.c)\\n\\n\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c\\u6211\\u4eec\\u5148\\u5b9a\\u4e49\\u4e86\\u4e00\\u4e2a\\u201c$(foo)\\u201d\\u53d8\\u91cf\\uff0c\\u800c\\u7b2c\\u4e8c\\u884c\\u7684\\u610f\\u601d\\u662f\\u628a\\u201c$(foo)\\u201d\\u4e2d\\u6240\\u6709\\u4ee5\\u201c.o\\u201d\\u5b57\\u4e32\\u201c\\u7ed3\\u5c3e\\u201d\\u5168\\u90e8\\u66ff\\u6362\\u6210\\u201c.c\\u201d\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u7684\\u201c$(bar)\\u201d\\u7684\\u503c\\u5c31\\u662f\\u201ca.c b.c c.c\\u201d\\u3002\\n\\n\\u53e6\\u5916\\u4e00\\u79cd\\u53d8\\u91cf\\u66ff\\u6362\\u7684\\u6280\\u672f\\u662f\\u4ee5\\u201c\\u9759\\u6001\\u6a21\\u5f0f\\u201d\\uff08\\u53c2\\u89c1\\u524d\\u9762\\u7ae0\\u8282\\uff09\\u5b9a\\u4e49\\u7684\\uff0c\\u5982\\uff1a\\n\\n    foo := a.o b.o c.o\\n    bar := $(foo:%.o=%.c)\\n\\n\\u8fd9\\u4f9d\\u8d56\\u4e8e\\u88ab\\u66ff\\u6362\\u5b57\\u4e32\\u4e2d\\u7684\\u6709\\u76f8\\u540c\\u7684\\u6a21\\u5f0f\\uff0c\\u6a21\\u5f0f\\u4e2d\\u5fc5\\u987b\\u5305\\u542b\\u4e00\\u4e2a\\u201c%\\u201d\\u5b57\\u7b26\\uff0c\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u540c\\u6837\\u8ba9$(bar)\\u53d8\\u91cf\\u7684\\u503c\\u4e3a\\u201ca.c b.c c.c\\u201d\\u3002 \\n\\n\\u7b2c\\u4e8c\\u79cd\\u9ad8\\u7ea7\\u7528\\u6cd5\\u662f\\u2014\\u2014\\u201c\\u628a\\u53d8\\u91cf\\u7684\\u503c\\u518d\\u5f53\\u6210\\u53d8\\u91cf\\u201d\\u3002\\u5148\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a\\n\\n    x = y\\n    y = z\\n    a := $($(x))\\n\\n\\u5728\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c$(x)\\u7684\\u503c\\u662f\\u201cy\\u201d\\uff0c\\u6240\\u4ee5$($(x))\\u5c31\\u662f$(y)\\uff0c\\u4e8e\\u662f$(a)\\u7684\\u503c\\u5c31\\u662f\\u201cz\\u201d\\u3002\\uff08\\u6ce8\\u610f\\uff0c\\u662f\\u201cx=y\\u201d\\uff0c\\u800c\\u4e0d\\u662f\\u201cx=$(y)\\u201d\\uff09\\n\\n\\u6211\\u4eec\\u8fd8\\u53ef\\u4ee5\\u4f7f\\u7528\\u66f4\\u591a\\u7684\\u5c42\\u6b21\\uff1a\\n\\n    x = y\\n    y = z\\n    z = u\\n    a := $($($(x)))\\n\\n\\u8fd9\\u91cc\\u7684$(a)\\u7684\\u503c\\u662f\\u201cu\\u201d\\uff0c\\u76f8\\u5173\\u7684\\u63a8\\u5bfc\\u7559\\u7ed9\\u8bfb\\u8005\\u81ea\\u5df1\\u53bb\\u505a\\u5427\\u3002\\n\\n\\u8ba9\\u6211\\u4eec\\u518d\\u590d\\u6742\\u4e00\\u70b9\\uff0c\\u4f7f\\u7528\\u4e0a\\u201c\\u5728\\u53d8\\u91cf\\u5b9a\\u4e49\\u4e2d\\u4f7f\\u7528\\u53d8\\u91cf\\u201d\\u7684\\u7b2c\\u4e00\\u4e2a\\u65b9\\u5f0f\\uff0c\\u6765\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a\\n\\n    x = $(y)\\n    y = z\\n    z = Hello\\n    a := $($(x))\\n\\n\\u8fd9\\u91cc\\u7684$($(x))\\u88ab\\u66ff\\u6362\\u6210\\u4e86$($(y))\\uff0c\\u56e0\\u4e3a$(y)\\u503c\\u662f\\u201cz\\u201d\\uff0c\\u6240\\u4ee5\\uff0c\\u6700\\u7ec8\\u7ed3\\u679c\\u662f\\uff1aa:=$(z)\\uff0c\\u4e5f\\u5c31\\u662f\\u201cHello\\u201d\\u3002\\n\\n\\u518d\\u590d\\u6742\\u4e00\\u70b9\\uff0c\\u6211\\u4eec\\u518d\\u52a0\\u4e0a\\u51fd\\u6570\\uff1a\\n\\n    x = variable1\\n    variable2 := Hello\\n    y = $(subst 1,2,$(x))\\n    z = y\\n    a := $($($(z)))\\n\\n\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c\\u201c$($($(z)))\\u201d\\u6269\\u5c55\\u4e3a\\u201c$($(y))\\u201d\\uff0c\\u800c\\u5176\\u518d\\u6b21\\u88ab\\u6269\\u5c55\\u4e3a\\u201c$($(subst 1,2,$(x)))\\u201d\\u3002$(x)\\u7684\\u503c\\u662f\\u201cvariable1\\u201d\\uff0csubst\\u51fd\\u6570\\u628a\\u201cvariable1\\u201d\\u4e2d\\u7684\\u6240\\u6709\\u201c1\\u201d\\u5b57\\u4e32\\u66ff\\u6362\\u6210\\u201c2\\u201d\\u5b57\\u4e32\\uff0c\\u4e8e\\u662f\\uff0c\\u201cvariable1\\u201d\\u53d8\\u6210\\u201cvariable2\\u201d\\uff0c\\u518d\\u53d6\\u5176\\u503c\\uff0c\\u6240\\u4ee5\\uff0c\\u6700\\u7ec8\\uff0c$(a)\\u7684\\u503c\\u5c31\\u662f$(variable2)\\u7684\\u503c\\u2014\\u2014\\u201cHello\\u201d\\u3002\\uff08\\u5594\\uff0c\\u597d\\u4e0d\\u5bb9\\u6613\\uff09\\n\\n\\u5728\\u8fd9\\u79cd\\u65b9\\u5f0f\\u4e2d\\uff0c\\u6216\\u8981\\u53ef\\u4ee5\\u4f7f\\u7528\\u591a\\u4e2a\\u53d8\\u91cf\\u6765\\u7ec4\\u6210\\u4e00\\u4e2a\\u53d8\\u91cf\\u7684\\u540d\\u5b57\\uff0c\\u7136\\u540e\\u518d\\u53d6\\u5176\\u503c\\uff1a\\n\\n    first_second = Hello\\n    a = first\\n    b = second\\n    all = $($a_$b)\\n\\n\\u8fd9\\u91cc\\u7684\\u201c$a_$b\\u201d\\u7ec4\\u6210\\u4e86\\u201cfirst_second\\u201d\\uff0c\\u4e8e\\u662f\\uff0c$(all)\\u7684\\u503c\\u5c31\\u662f\\u201cHello\\u201d\\u3002\\n\\n\\u518d\\u6765\\u770b\\u770b\\u7ed3\\u5408\\u7b2c\\u4e00\\u79cd\\u6280\\u672f\\u7684\\u4f8b\\u5b50\\uff1a\\n\\n    a_objects := a.o b.o c.o\\n    1_objects := 1.o 2.o 3.o\\n\\n    sources := $($(a1)_objects:.o=.c)\\n\\n\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c\\u5982\\u679c$(a1)\\u7684\\u503c\\u662f\\u201ca\\u201d\\u7684\\u8bdd\\uff0c\\u90a3\\u4e48\\uff0c$(sources)\\u7684\\u503c\\u5c31\\u662f\\u201ca.c b.c c.c\\u201d\\uff1b\\u5982\\u679c$(a1)\\u7684\\u503c\\u662f\\u201c1\\u201d\\uff0c\\u90a3\\u4e48$(sources)\\u7684\\u503c\\u662f\\u201c1.c 2.c 3.c\\u201d\\u3002\\n\\n\\u518d\\u6765\\u770b\\u4e00\\u4e2a\\u8fd9\\u79cd\\u6280\\u672f\\u548c\\u201c\\u51fd\\u6570\\u201d\\u4e0e\\u201c\\u6761\\u4ef6\\u8bed\\u53e5\\u201d\\u4e00\\u540c\\u4f7f\\u7528\\u7684\\u4f8b\\u5b50\\uff1a\\n\\n    ifdef do_sort\\n    func := sort\\n    else\\n    func := strip\\n    endif\\n\\n    bar := a d b g q c\\n\\n    foo := $($(func) $(bar))\\n\\n\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c\\u5982\\u679c\\u5b9a\\u4e49\\u4e86\\u201cdo_sort\\u201d\\uff0c\\u90a3\\u4e48\\uff1afoo := $(sort a d b g q c)\\uff0c\\u4e8e\\u662f$(foo)\\u7684\\u503c\\u5c31\\u662f\\u201ca b c d g q\\u201d\\uff0c\\u800c\\u5982\\u679c\\u6ca1\\u6709\\u5b9a\\u4e49\\u201cdo_sort\\u201d\\uff0c\\u90a3\\u4e48\\uff1afoo := $(sort a d b g q c)\\uff0c\\u8c03\\u7528\\u7684\\u5c31\\u662fstrip\\u51fd\\u6570\\u3002\\n\\n\\u5f53\\u7136\\uff0c\\u201c\\u628a\\u53d8\\u91cf\\u7684\\u503c\\u518d\\u5f53\\u6210\\u53d8\\u91cf\\u201d\\u8fd9\\u79cd\\u6280\\u672f\\uff0c\\u540c\\u6837\\u53ef\\u4ee5\\u7528\\u5728\\u64cd\\u4f5c\\u7b26\\u7684\\u5de6\\u8fb9\\uff1a\\n\\n    dir = foo\\n    $(dir)_sources := $(wildcard $(dir)\\/ *.c)\\n    define $(dir)_print\\n    lpr $($(dir)_sources)\\n    endef\\n\\n\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u4e2d\\u5b9a\\u4e49\\u4e86\\u4e09\\u4e2a\\u53d8\\u91cf\\uff1a\\u201cdir\\u201d\\uff0c\\u201cfoo_sources\\u201d\\u548c\\u201cfoo_print\\u201d\\u3002\\n\\n\\n\\u56db\\u3001\\u8ffd\\u52a0\\u53d8\\u91cf\\u503c\\n\\n\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u201c+=\\u201d\\u64cd\\u4f5c\\u7b26\\u7ed9\\u53d8\\u91cf\\u8ffd\\u52a0\\u503c\\uff0c\\u5982\\uff1a\\n\\n    objects = main.o foo.o bar.o utils.o\\n    objects += another.o\\n\\n\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u7684$(objects)\\u503c\\u53d8\\u6210\\uff1a\\u201cmain.o foo.o bar.o utils.o another.o\\u201d\\uff08another.o\\u88ab\\u8ffd\\u52a0\\u8fdb\\u53bb\\u4e86\\uff09\\n\\n\\u4f7f\\u7528\\u201c+=\\u201d\\u64cd\\u4f5c\\u7b26\\uff0c\\u53ef\\u4ee5\\u6a21\\u62df\\u4e3a\\u4e0b\\u9762\\u7684\\u8fd9\\u79cd\\u4f8b\\u5b50\\uff1a\\n\\n    objects = main.o foo.o bar.o utils.o\\n    objects := $(objects) another.o\\n\\n\\u6240\\u4e0d\\u540c\\u7684\\u662f\\uff0c\\u7528\\u201c+=\\u201d\\u66f4\\u4e3a\\u7b80\\u6d01\\u3002\\n\\n\\u5982\\u679c\\u53d8\\u91cf\\u4e4b\\u524d\\u6ca1\\u6709\\u5b9a\\u4e49\\u8fc7\\uff0c\\u90a3\\u4e48\\uff0c\\u201c+=\\u201d\\u4f1a\\u81ea\\u52a8\\u53d8\\u6210\\u201c=\\u201d\\uff0c\\u5982\\u679c\\u524d\\u9762\\u6709\\u53d8\\u91cf\\u5b9a\\u4e49\\uff0c\\u90a3\\u4e48\\u201c+=\\u201d\\u4f1a\\u7ee7\\u627f\\u4e8e\\u524d\\u6b21\\u64cd\\u4f5c\\u7684\\u8d4b\\u503c\\u7b26\\u3002\\u5982\\u679c\\u524d\\u4e00\\u6b21\\u7684\\u662f\\u201c:=\\u201d\\uff0c\\u90a3\\u4e48\\u201c+=\\u201d\\u4f1a\\u4ee5\\u201c:=\\u201d\\u4f5c\\u4e3a\\u5176\\u8d4b\\u503c\\u7b26\\uff0c\\u5982\\uff1a\\n\\n    variable := value\\n    variable += more\\n\\n\\u7b49\\u4ef7\\u4e8e\\uff1a\\n\\n    variable := value\\n    variable := $(variable) more\\n\\n\\u4f46\\u5982\\u679c\\u662f\\u8fd9\\u79cd\\u60c5\\u51b5\\uff1a \\n\\n    variable = value\\n    variable += more\\n\\n\\u7531\\u4e8e\\u524d\\u6b21\\u7684\\u8d4b\\u503c\\u7b26\\u662f\\u201c=\\u201d\\uff0c\\u6240\\u4ee5\\u201c+=\\u201d\\u4e5f\\u4f1a\\u4ee5\\u201c=\\u201d\\u6765\\u505a\\u4e3a\\u8d4b\\u503c\\uff0c\\u90a3\\u4e48\\u5c82\\u4e0d\\u4f1a\\u53d1\\u751f\\u53d8\\u91cf\\u7684\\u9012\\u8865\\u5f52\\u5b9a\\u4e49\\uff0c\\u8fd9\\u662f\\u5f88\\u4e0d\\u597d\\u7684\\uff0c\\u6240\\u4ee5make\\u4f1a\\u81ea\\u52a8\\u4e3a\\u6211\\u4eec\\u89e3\\u51b3\\u8fd9\\u4e2a\\u95ee\\u9898\\uff0c\\u6211\\u4eec\\u4e0d\\u5fc5\\u62c5\\u5fc3\\u8fd9\\u4e2a\\u95ee\\u9898\\u3002\\n\\n\\n\\u4e94\\u3001override \\u6307\\u793a\\u7b26\\n\\n\\u5982\\u679c\\u6709\\u53d8\\u91cf\\u662f\\u901a\\u5e38make\\u7684\\u547d\\u4ee4\\u884c\\u53c2\\u6570\\u8bbe\\u7f6e\\u7684\\uff0c\\u90a3\\u4e48Makefile\\u4e2d\\u5bf9\\u8fd9\\u4e2a\\u53d8\\u91cf\\u7684\\u8d4b\\u503c\\u4f1a\\u88ab\\u5ffd\\u7565\\u3002\\u5982\\u679c\\u4f60\\u60f3\\u5728Makefile\\u4e2d\\u8bbe\\u7f6e\\u8fd9\\u7c7b\\u53c2\\u6570\\u7684\\u503c\\uff0c\\u90a3\\u4e48\\uff0c\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u201coverride\\u201d\\u6307\\u793a\\u7b26\\u3002\\u5176\\u8bed\\u6cd5\\u662f\\uff1a\\n\\n    override <variable>; = <value>;\\n\\n    override <variable>; := <value>;\\n\\n\\u5f53\\u7136\\uff0c\\u4f60\\u8fd8\\u53ef\\u4ee5\\u8ffd\\u52a0\\uff1a\\n\\n    override <variable>; += <more text>;\\n\\n\\u5bf9\\u4e8e\\u591a\\u884c\\u7684\\u53d8\\u91cf\\u5b9a\\u4e49\\uff0c\\u6211\\u4eec\\u7528define\\u6307\\u793a\\u7b26\\uff0c\\u5728define\\u6307\\u793a\\u7b26\\u524d\\uff0c\\u4e5f\\u540c\\u6837\\u53ef\\u4ee5\\u4f7f\\u7528ovveride\\u6307\\u793a\\u7b26\\uff0c\\u5982\\uff1a\\n\\n    override define foo\\n    bar\\n    endef\\n\\n\\n\\n\\n\\u516d\\u3001\\u591a\\u884c\\u53d8\\u91cf\\n \\n\\u8fd8\\u6709\\u4e00\\u79cd\\u8bbe\\u7f6e\\u53d8\\u91cf\\u503c\\u7684\\u65b9\\u6cd5\\u662f\\u4f7f\\u7528define\\u5173\\u952e\\u5b57\\u3002\\u4f7f\\u7528define\\u5173\\u952e\\u5b57\\u8bbe\\u7f6e\\u53d8\\u91cf\\u7684\\u503c\\u53ef\\u4ee5\\u6709\\u6362\\u884c\\uff0c\\u8fd9\\u6709\\u5229\\u4e8e\\u5b9a\\u4e49\\u4e00\\u7cfb\\u5217\\u7684\\u547d\\u4ee4\\uff08\\u524d\\u9762\\u6211\\u4eec\\u8bb2\\u8fc7\\u201c\\u547d\\u4ee4\\u5305\\u201d\\u7684\\u6280\\u672f\\u5c31\\u662f\\u5229\\u7528\\u8fd9\\u4e2a\\u5173\\u952e\\u5b57\\uff09\\u3002\\n\\ndefine\\u6307\\u793a\\u7b26\\u540e\\u9762\\u8ddf\\u7684\\u662f\\u53d8\\u91cf\\u7684\\u540d\\u5b57\\uff0c\\u800c\\u91cd\\u8d77\\u4e00\\u884c\\u5b9a\\u4e49\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u5b9a\\u4e49\\u662f\\u4ee5endef\\u5173\\u952e\\u5b57\\u7ed3\\u675f\\u3002\\u5176\\u5de5\\u4f5c\\u65b9\\u5f0f\\u548c\\u201c=\\u201d\\u64cd\\u4f5c\\u7b26\\u4e00\\u6837\\u3002\\u53d8\\u91cf\\u7684\\u503c\\u53ef\\u4ee5\\u5305\\u542b\\u51fd\\u6570\\u3001\\u547d\\u4ee4\\u3001\\u6587\\u5b57\\uff0c\\u6216\\u662f\\u5176\\u5b83\\u53d8\\u91cf\\u3002\\u56e0\\u4e3a\\u547d\\u4ee4\\u9700\\u8981\\u4ee5[Tab]\\u952e\\u5f00\\u5934\\uff0c\\u6240\\u4ee5\\u5982\\u679c\\u4f60\\u7528define\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u53d8\\u91cf\\u4e2d\\u6ca1\\u6709\\u4ee5[Tab]\\u952e\\u5f00\\u5934\\uff0c\\u90a3\\u4e48make\\u5c31\\u4e0d\\u4f1a\\u628a\\u5176\\u8ba4\\u4e3a\\u662f\\u547d\\u4ee4\\u3002\\n\\n\\u4e0b\\u9762\\u7684\\u8fd9\\u4e2a\\u793a\\u4f8b\\u5c55\\u793a\\u4e86define\\u7684\\u7528\\u6cd5\\uff1a\\n\\n    define two-lines\\n    echo foo\\n    echo $(bar)\\n    endef\\n\\n\\n\\u4e03\\u3001\\u73af\\u5883\\u53d8\\u91cf\\n\\nmake\\u8fd0\\u884c\\u65f6\\u7684\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u53ef\\u4ee5\\u5728make\\u5f00\\u59cb\\u8fd0\\u884c\\u65f6\\u88ab\\u8f7d\\u5165\\u5230Makefile\\u6587\\u4ef6\\u4e2d\\uff0c\\u4f46\\u662f\\u5982\\u679cMakefile\\u4e2d\\u5df2\\u5b9a\\u4e49\\u4e86\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u6216\\u662f\\u8fd9\\u4e2a\\u53d8\\u91cf\\u7531make\\u547d\\u4ee4\\u884c\\u5e26\\u5165\\uff0c\\u90a3\\u4e48\\u7cfb\\u7edf\\u7684\\u73af\\u5883\\u53d8\\u91cf\\u7684\\u503c\\u5c06\\u88ab\\u8986\\u76d6\\u3002\\uff08\\u5982\\u679cmake\\u6307\\u5b9a\\u4e86\\u201c-e\\u201d\\u53c2\\u6570\\uff0c\\u90a3\\u4e48\\uff0c\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u5c06\\u8986\\u76d6Makefile\\u4e2d\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\uff09\\n\\n\\u56e0\\u6b64\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u5728\\u73af\\u5883\\u53d8\\u91cf\\u4e2d\\u8bbe\\u7f6e\\u4e86\\u201cCFLAGS\\u201d\\u73af\\u5883\\u53d8\\u91cf\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u5c31\\u53ef\\u4ee5\\u5728\\u6240\\u6709\\u7684Makefile\\u4e2d\\u4f7f\\u7528\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e86\\u3002\\u8fd9\\u5bf9\\u4e8e\\u6211\\u4eec\\u4f7f\\u7528\\u7edf\\u4e00\\u7684\\u7f16\\u8bd1\\u53c2\\u6570\\u6709\\u6bd4\\u8f83\\u5927\\u7684\\u597d\\u5904\\u3002\\u5982\\u679cMakefile\\u4e2d\\u5b9a\\u4e49\\u4e86CFLAGS\\uff0c\\u90a3\\u4e48\\u5219\\u4f1a\\u4f7f\\u7528Makefile\\u4e2d\\u7684\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5b9a\\u4e49\\u5219\\u4f7f\\u7528\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u4e00\\u4e2a\\u5171\\u6027\\u548c\\u4e2a\\u6027\\u7684\\u7edf\\u4e00\\uff0c\\u5f88\\u50cf\\u201c\\u5168\\u5c40\\u53d8\\u91cf\\u201d\\u548c\\u201c\\u5c40\\u90e8\\u53d8\\u91cf\\u201d\\u7684\\u7279\\u6027\\u3002\\n\\n\\u5f53make\\u5d4c\\u5957\\u8c03\\u7528\\u65f6\\uff08\\u53c2\\u89c1\\u524d\\u9762\\u7684\\u201c\\u5d4c\\u5957\\u8c03\\u7528\\u201d\\u7ae0\\u8282\\uff09\\uff0c\\u4e0a\\u5c42Makefile\\u4e2d\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\u4f1a\\u4ee5\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u7684\\u65b9\\u5f0f\\u4f20\\u9012\\u5230\\u4e0b\\u5c42\\u7684Makefile\\u4e2d\\u3002\\u5f53\\u7136\\uff0c\\u9ed8\\u8ba4\\u60c5\\u51b5\\u4e0b\\uff0c\\u53ea\\u6709\\u901a\\u8fc7\\u547d\\u4ee4\\u884c\\u8bbe\\u7f6e\\u7684\\u53d8\\u91cf\\u4f1a\\u88ab\\u4f20\\u9012\\u3002\\u800c\\u5b9a\\u4e49\\u5728\\u6587\\u4ef6\\u4e2d\\u7684\\u53d8\\u91cf\\uff0c\\u5982\\u679c\\u8981\\u5411\\u4e0b\\u5c42Makefile\\u4f20\\u9012\\uff0c\\u5219\\u9700\\u8981\\u4f7f\\u7528exprot\\u5173\\u952e\\u5b57\\u6765\\u58f0\\u660e\\u3002\\uff08\\u53c2\\u89c1\\u524d\\u9762\\u7ae0\\u8282\\uff09\\n\\n\\u5f53\\u7136\\uff0c\\u6211\\u5e76\\u4e0d\\u63a8\\u8350\\u628a\\u8bb8\\u591a\\u7684\\u53d8\\u91cf\\u90fd\\u5b9a\\u4e49\\u5728\\u7cfb\\u7edf\\u73af\\u5883\\u4e2d\\uff0c\\u8fd9\\u6837\\uff0c\\u5728\\u6211\\u4eec\\u6267\\u884c\\u4e0d\\u7528\\u7684Makefile\\u65f6\\uff0c\\u62e5\\u6709\\u7684\\u662f\\u540c\\u4e00\\u5957\\u7cfb\\u7edf\\u53d8\\u91cf\\uff0c\\u8fd9\\u53ef\\u80fd\\u4f1a\\u5e26\\u6765\\u66f4\\u591a\\u7684\\u9ebb\\u70e6\\u3002\\n\\n\\n\\u516b\\u3001\\u76ee\\u6807\\u53d8\\u91cf\\n\\n\\u524d\\u9762\\u6211\\u4eec\\u6240\\u8bb2\\u7684\\u5728Makefile\\u4e2d\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\u90fd\\u662f\\u201c\\u5168\\u5c40\\u53d8\\u91cf\\u201d\\uff0c\\u5728\\u6574\\u4e2a\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u90fd\\u53ef\\u4ee5\\u8bbf\\u95ee\\u8fd9\\u4e9b\\u53d8\\u91cf\\u3002\\u5f53\\u7136\\uff0c\\u201c\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\u201d\\u9664\\u5916\\uff0c\\u5982\\u201c$<\\u201d\\u7b49\\u8fd9\\u79cd\\u7c7b\\u91cf\\u7684\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\u5c31\\u5c5e\\u4e8e\\u201c\\u89c4\\u5219\\u578b\\u53d8\\u91cf\\u201d\\uff0c\\u8fd9\\u79cd\\u53d8\\u91cf\\u7684\\u503c\\u4f9d\\u8d56\\u4e8e\\u89c4\\u5219\\u7684\\u76ee\\u6807\\u548c\\u4f9d\\u8d56\\u76ee\\u6807\\u7684\\u5b9a\\u4e49\\u3002\\n\\n\\u5f53\\u7136\\uff0c\\u6211\\u6837\\u540c\\u6837\\u53ef\\u4ee5\\u4e3a\\u67d0\\u4e2a\\u76ee\\u6807\\u8bbe\\u7f6e\\u5c40\\u90e8\\u53d8\\u91cf\\uff0c\\u8fd9\\u79cd\\u53d8\\u91cf\\u88ab\\u79f0\\u4e3a\\u201cTarget-specific Variable\\u201d\\uff0c\\u5b83\\u53ef\\u4ee5\\u548c\\u201c\\u5168\\u5c40\\u53d8\\u91cf\\u201d\\u540c\\u540d\\uff0c\\u56e0\\u4e3a\\u5b83\\u7684\\u4f5c\\u7528\\u8303\\u56f4\\u53ea\\u5728\\u8fd9\\u6761\\u89c4\\u5219\\u4ee5\\u53ca\\u8fde\\u5e26\\u89c4\\u5219\\u4e2d\\uff0c\\u6240\\u4ee5\\u5176\\u503c\\u4e5f\\u53ea\\u5728\\u4f5c\\u7528\\u8303\\u56f4\\u5185\\u6709\\u6548\\u3002\\u800c\\u4e0d\\u4f1a\\u5f71\\u54cd\\u89c4\\u5219\\u94fe\\u4ee5\\u5916\\u7684\\u5168\\u5c40\\u53d8\\u91cf\\u7684\\u503c\\u3002\\n\\n\\u5176\\u8bed\\u6cd5\\u662f\\uff1a\\n\\n    <target ...>; : <variable-assignment>;\\n\\n    <target ...>; : overide <variable-assignment>;\\n\\n<variable-assignment>;\\u53ef\\u4ee5\\u662f\\u524d\\u9762\\u8bb2\\u8fc7\\u7684\\u5404\\u79cd\\u8d4b\\u503c\\u8868\\u8fbe\\u5f0f\\uff0c\\u5982\\u201c=\\u201d\\u3001\\u201c:=\\u201d\\u3001\\u201c+=\\u201d\\u6216\\u662f\\u201c\\uff1f=\\u201d\\u3002\\u7b2c\\u4e8c\\u4e2a\\u8bed\\u6cd5\\u662f\\u9488\\u5bf9\\u4e8emake\\u547d\\u4ee4\\u884c\\u5e26\\u5165\\u7684\\u53d8\\u91cf\\uff0c\\u6216\\u662f\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u3002\\n\\n\\u8fd9\\u4e2a\\u7279\\u6027\\u975e\\u5e38\\u7684\\u6709\\u7528\\uff0c\\u5f53\\u6211\\u4eec\\u8bbe\\u7f6e\\u4e86\\u8fd9\\u6837\\u4e00\\u4e2a\\u53d8\\u91cf\\uff0c\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4f1a\\u4f5c\\u7528\\u5230\\u7531\\u8fd9\\u4e2a\\u76ee\\u6807\\u6240\\u5f15\\u53d1\\u7684\\u6240\\u6709\\u7684\\u89c4\\u5219\\u4e2d\\u53bb\\u3002\\u5982\\uff1a\\n\\n    prog : CFLAGS = -g\\n    prog : prog.o foo.o bar.o\\n            $(CC) $(CFLAGS) prog.o foo.o bar.o\\n\\n    prog.o : prog.c\\n            $(CC) $(CFLAGS) prog.c\\n\\n    foo.o : foo.c\\n            $(CC) $(CFLAGS) foo.c\\n\\n    bar.o : bar.c\\n            $(CC) $(CFLAGS) bar.c\\n \\n\\u5728\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c\\u4e0d\\u7ba1\\u5168\\u5c40\\u7684$(CFLAGS)\\u7684\\u503c\\u662f\\u4ec0\\u4e48\\uff0c\\u5728prog\\u76ee\\u6807\\uff0c\\u4ee5\\u53ca\\u5176\\u6240\\u5f15\\u53d1\\u7684\\u6240\\u6709\\u89c4\\u5219\\u4e2d\\uff08prog.o foo.o bar.o\\u7684\\u89c4\\u5219\\uff09\\uff0c$(CFLAGS)\\u7684\\u503c\\u90fd\\u662f\\u201c-g\\u201d\\n\\n\\n\\u4e5d\\u3001\\u6a21\\u5f0f\\u53d8\\u91cf\\n\\n\\u5728GNU\\u7684make\\u4e2d\\uff0c\\u8fd8\\u652f\\u6301\\u6a21\\u5f0f\\u53d8\\u91cf\\uff08Pattern-specific Variable\\uff09\\uff0c\\u901a\\u8fc7\\u4e0a\\u9762\\u7684\\u76ee\\u6807\\u53d8\\u91cf\\u4e2d\\uff0c\\u6211\\u4eec\\u77e5\\u9053\\uff0c\\u53d8\\u91cf\\u53ef\\u4ee5\\u5b9a\\u4e49\\u5728\\u67d0\\u4e2a\\u76ee\\u6807\\u4e0a\\u3002\\u6a21\\u5f0f\\u53d8\\u91cf\\u7684\\u597d\\u5904\\u5c31\\u662f\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u7ed9\\u5b9a\\u4e00\\u79cd\\u201c\\u6a21\\u5f0f\\u201d\\uff0c\\u53ef\\u4ee5\\u628a\\u53d8\\u91cf\\u5b9a\\u4e49\\u5728\\u7b26\\u5408\\u8fd9\\u79cd\\u6a21\\u5f0f\\u7684\\u6240\\u6709\\u76ee\\u6807\\u4e0a\\u3002\\n\\n\\u6211\\u4eec\\u77e5\\u9053\\uff0cmake\\u7684\\u201c\\u6a21\\u5f0f\\u201d\\u4e00\\u822c\\u662f\\u81f3\\u5c11\\u542b\\u6709\\u4e00\\u4e2a\\u201c%\\u201d\\u7684\\uff0c\\u6240\\u4ee5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4ee5\\u5982\\u4e0b\\u65b9\\u5f0f\\u7ed9\\u6240\\u6709\\u4ee5[.o]\\u7ed3\\u5c3e\\u7684\\u76ee\\u6807\\u5b9a\\u4e49\\u76ee\\u6807\\u53d8\\u91cf\\uff1a\\n\\n    %.o : CFLAGS = -O\\n\\n\\u540c\\u6837\\uff0c\\u6a21\\u5f0f\\u53d8\\u91cf\\u7684\\u8bed\\u6cd5\\u548c\\u201c\\u76ee\\u6807\\u53d8\\u91cf\\u201d\\u4e00\\u6837\\uff1a\\n\\n    <pattern ...>; : <variable-assignment>;\\n\\n    <pattern ...>; : override <variable-assignment>;\\n\\noverride\\u540c\\u6837\\u662f\\u9488\\u5bf9\\u4e8e\\u7cfb\\u7edf\\u73af\\u5883\\u4f20\\u5165\\u7684\\u53d8\\u91cf\\uff0c\\u6216\\u662fmake\\u547d\\u4ee4\\u884c\\u6307\\u5b9a\\u7684\\u53d8\\u91cf\\u3002","html":"<h3>\\u4f7f\\u7528\\u53d8\\u91cf<\\/h3>\\n<hr \\/>\\n<p>\\u5728Makefile\\u4e2d\\u7684\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\uff0c\\u5c31\\u50cf\\u662fC\\/C++\\u8bed\\u8a00\\u4e2d\\u7684\\u5b8f\\u4e00\\u6837\\uff0c<strong>\\u4ed6\\u4ee3\\u8868\\u4e86\\u4e00\\u4e2a\\u6587\\u672c\\u5b57\\u4e32\\uff0c\\u5728Makefile\\u4e2d\\u6267\\u884c\\u7684\\u65f6\\u5019\\u5176\\u4f1a\\u81ea\\u52a8\\u539f\\u6a21\\u539f\\u6837\\u5730\\u5c55\\u5f00\\u5728\\u6240\\u4f7f\\u7528\\u7684\\u5730\\u65b9<\\/strong>\\u3002\\u5176\\u4e0eC\\/C++\\u4e2d\\u7684\\u5b8f\\u6240\\u4e0d\\u540c\\u7684\\u662f\\uff0c\\u4f60\\u53ef\\u4ee5\\u5728Makefile\\u4e2d\\u6539\\u53d8\\u5176\\u503c\\u3002\\u5728Makefile\\u4e2d\\uff0c\\u53d8\\u91cf\\u53ef\\u4ee5\\u4f7f\\u7528\\u5728\\u201c\\u76ee\\u6807\\u201d\\uff0c\\u201c\\u4f9d\\u8d56\\u76ee\\u6807\\u201d\\uff0c\\u201c\\u547d\\u4ee4\\u201d\\u6216\\u662fMakefile\\u7684\\u5176\\u5b83\\u90e8\\u5206\\u4e2d\\u3002<\\/p>\\n<p>\\u53d8\\u91cf\\u7684\\u547d\\u540d\\u5b57\\u53ef\\u4ee5\\u5305\\u542b\\u5b57\\u7b26\\u3001\\u6570\\u5b57\\uff0c\\u4e0b\\u5212\\u7ebf\\uff08\\u53ef\\u4ee5\\u662f\\u6570\\u5b57\\u5f00\\u5934\\uff09\\uff0c\\u4f46\\u4e0d\\u5e94\\u8be5\\u542b\\u6709\\u201c:\\u201d\\u3001\\u201c#\\u201d\\u3001\\u201c=\\u201d\\u6216\\u662f\\u7a7a\\u5b57\\u7b26\\uff08\\u7a7a\\u683c\\u3001\\u56de\\u8f66\\u7b49\\uff09\\u3002\\u53d8\\u91cf\\u662f\\u5927\\u5c0f\\u5199\\u654f\\u611f\\u7684\\uff0c\\u201cfoo\\u201d\\u3001\\u201cFoo\\u201d\\u548c\\u201cFOO\\u201d\\u662f\\u4e09\\u4e2a\\u4e0d\\u540c\\u7684\\u53d8\\u91cf\\u540d\\u3002\\u4f20\\u7edf\\u7684Makefile\\u7684\\u53d8\\u91cf\\u540d\\u662f\\u5168\\u5927\\u5199\\u7684\\u547d\\u540d\\u65b9\\u5f0f\\uff0c\\u4f46\\u6211\\u63a8\\u8350\\u4f7f\\u7528\\u5927\\u5c0f\\u5199\\u642d\\u914d\\u7684\\u53d8\\u91cf\\u540d\\uff0c\\u5982\\uff1aMakeFlags\\u3002\\u8fd9\\u6837\\u53ef\\u4ee5\\u907f\\u514d\\u548c\\u7cfb\\u7edf\\u7684\\u53d8\\u91cf\\u51b2\\u7a81\\uff0c\\u800c\\u53d1\\u751f\\u610f\\u5916\\u7684\\u4e8b\\u60c5\\u3002<\\/p>\\n<p>\\u6709\\u4e00\\u4e9b\\u53d8\\u91cf\\u662f\\u5f88\\u5947\\u602a\\u5b57\\u4e32\\uff0c\\u5982\\u201c$&lt;\\u201d\\u3001\\u201c$@\\u201d\\u7b49\\uff0c\\u8fd9\\u4e9b\\u662f\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff0c\\u6211\\u4f1a\\u5728\\u540e\\u9762\\u4ecb\\u7ecd\\u3002<\\/p>\\n<h5>\\u4e00\\u3001\\u53d8\\u91cf\\u7684\\u57fa\\u7840<\\/h5>\\n<p>\\u53d8\\u91cf\\u5728\\u58f0\\u660e\\u65f6\\u9700\\u8981\\u7ed9\\u4e88\\u521d\\u503c\\uff0c\\u800c\\u5728\\u4f7f\\u7528\\u65f6\\uff0c\\u9700\\u8981\\u7ed9\\u5728\\u53d8\\u91cf\\u540d\\u524d\\u52a0\\u4e0a\\u201c$\\u201d\\u7b26\\u53f7\\uff0c\\u4f46\\u6700\\u597d\\u7528\\u5c0f\\u62ec\\u53f7\\u201c\\uff08\\uff09\\u201d\\u6216\\u662f\\u5927\\u62ec\\u53f7\\u201c{}\\u201d\\u628a\\u53d8\\u91cf\\u7ed9\\u5305\\u62ec\\u8d77\\u6765\\u3002\\u5982\\u679c\\u4f60\\u8981\\u4f7f\\u7528\\u771f\\u5b9e\\u7684\\u201c$\\u201d\\u5b57\\u7b26\\uff0c\\u90a3\\u4e48\\u4f60\\u9700\\u8981\\u7528\\u201c$$\\u201d\\u6765\\u8868\\u793a\\u3002<\\/p>\\n<p>\\u53d8\\u91cf\\u53ef\\u4ee5\\u4f7f\\u7528\\u5728\\u8bb8\\u591a\\u5730\\u65b9\\uff0c\\u5982\\u89c4\\u5219\\u4e2d\\u7684\\u201c\\u76ee\\u6807\\u201d\\u3001\\u201c\\u4f9d\\u8d56\\u201d\\u3001\\u201c\\u547d\\u4ee4\\u201d\\u4ee5\\u53ca\\u65b0\\u7684\\u53d8\\u91cf\\u4e2d\\u3002\\u5148\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>objects = program.o foo.o utils.o\\nprogram : $(objects)\\n    cc -o program $(objects)\\n\\n$(objects) : defs.h<\\/code><\\/pre>\\n<p>\\u53d8\\u91cf\\u4f1a\\u5728\\u4f7f\\u7528\\u5b83\\u7684\\u5730\\u65b9\\u7cbe\\u786e\\u5730\\u5c55\\u5f00\\uff0c\\u5c31\\u50cfC\\/C++\\u4e2d\\u7684\\u5b8f\\u4e00\\u6837\\uff0c\\u4f8b\\u5982\\uff1a<\\/p>\\n<pre><code>foo = c\\nprog.o : prog.$(foo)\\n    $(foo)$(foo) -$(foo) prog.$(foo)<\\/code><\\/pre>\\n<p>\\u5c55\\u5f00\\u540e\\u5f97\\u5230\\uff1a<\\/p>\\n<pre><code>prog.o : prog.c\\n    cc -c prog.c<\\/code><\\/pre>\\n<p>\\u5f53\\u7136\\uff0c\\u5343\\u4e07\\u4e0d\\u8981\\u5728\\u4f60\\u7684Makefile\\u4e2d\\u8fd9\\u6837\\u5e72\\uff0c\\u8fd9\\u91cc\\u53ea\\u662f\\u4e3e\\u4e2a\\u4f8b\\u5b50\\u6765\\u8868\\u660eMakefile\\u4e2d\\u7684\\u53d8\\u91cf\\u5728\\u4f7f\\u7528\\u5904\\u5c55\\u5f00\\u7684\\u771f\\u5b9e\\u6837\\u5b50\\u3002\\u53ef\\u89c1\\u5176\\u5c31\\u662f\\u4e00\\u4e2a\\u201c\\u66ff\\u4ee3\\u201d\\u7684\\u539f\\u7406\\u3002<\\/p>\\n<p>\\u53e6\\u5916\\uff0c\\u7ed9\\u53d8\\u91cf\\u52a0\\u4e0a\\u62ec\\u53f7\\u5b8c\\u5168\\u662f\\u4e3a\\u4e86\\u66f4\\u52a0\\u5b89\\u5168\\u5730\\u4f7f\\u7528\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u5728\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u4e2d\\uff0c\\u5982\\u679c\\u4f60\\u4e0d\\u60f3\\u7ed9\\u53d8\\u91cf\\u52a0\\u4e0a\\u62ec\\u53f7\\uff0c\\u90a3\\u4e5f\\u53ef\\u4ee5\\uff0c\\u4f46\\u6211\\u8fd8\\u662f\\u5f3a\\u70c8\\u5efa\\u8bae\\u4f60\\u7ed9\\u53d8\\u91cf\\u52a0\\u4e0a\\u62ec\\u53f7\\u3002<\\/p>\\n<h5>\\u4e8c\\u3001\\u53d8\\u91cf\\u4e2d\\u7684\\u53d8\\u91cf<\\/h5>\\n<p>\\u5728\\u5b9a\\u4e49\\u53d8\\u91cf\\u7684\\u503c\\u65f6\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u5176\\u5b83\\u53d8\\u91cf\\u6765\\u6784\\u9020\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u5728Makefile\\u4e2d\\u6709\\u4e24\\u79cd\\u65b9\\u5f0f\\u6765\\u5728\\u7528\\u53d8\\u91cf\\u5b9a\\u4e49\\u53d8\\u91cf\\u7684\\u503c\\u3002<\\/p>\\n<p>\\u5148\\u770b\\u7b2c\\u4e00\\u79cd\\u65b9\\u5f0f\\uff0c\\u4e5f\\u5c31\\u662f\\u7b80\\u5355\\u7684\\u4f7f\\u7528\\u201c=\\u201d\\u53f7\\uff0c\\u5728\\u201c=\\u201d\\u5de6\\u4fa7\\u662f\\u53d8\\u91cf\\uff0c\\u53f3\\u4fa7\\u662f\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u53f3\\u4fa7\\u53d8\\u91cf\\u7684\\u503c\\u53ef\\u4ee5\\u5b9a\\u4e49\\u5728\\u6587\\u4ef6\\u7684\\u4efb\\u4f55\\u4e00\\u5904\\uff0c\\u4e5f\\u5c31\\u662f\\u8bf4\\uff0c\\u53f3\\u4fa7\\u4e2d\\u7684\\u53d8\\u91cf\\u4e0d\\u4e00\\u5b9a\\u975e\\u8981\\u662f\\u5df2\\u5b9a\\u4e49\\u597d\\u7684\\u503c\\uff0c\\u5176\\u4e5f\\u53ef\\u4ee5\\u4f7f\\u7528\\u540e\\u9762\\u5b9a\\u4e49\\u7684\\u503c\\u3002\\u5982\\uff1a<\\/p>\\n<pre><code>foo = $(bar)\\nbar = $(ugh)\\nugh = Huh?\\n\\nall:\\n    echo $(foo)<\\/code><\\/pre>\\n<p>\\u6211\\u4eec\\u6267\\u884c\\u201cmake all\\u201d\\u5c06\\u4f1a\\u6253\\u51fa\\u53d8\\u91cf$(foo)\\u7684\\u503c\\u662f\\u201cHuh?\\u201d\\uff08 $(foo)\\u7684\\u503c\\u662f$(bar)\\uff0c$(bar)\\u7684\\u503c\\u662f$(ugh)\\uff0c$(ugh)\\u7684\\u503c\\u662f\\u201cHuh?\\u201d\\uff09\\u53ef\\u89c1\\uff0c\\u53d8\\u91cf\\u662f\\u53ef\\u4ee5\\u4f7f\\u7528\\u540e\\u9762\\u7684\\u53d8\\u91cf\\u6765\\u5b9a\\u4e49\\u7684\\u3002<\\/p>\\n<p>\\u8fd9\\u4e2a\\u529f\\u80fd\\u6709\\u597d\\u7684\\u5730\\u65b9\\uff0c\\u4e5f\\u6709\\u4e0d\\u597d\\u7684\\u5730\\u65b9\\uff0c\\u597d\\u7684\\u5730\\u65b9\\u662f\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u628a\\u53d8\\u91cf\\u7684\\u771f\\u5b9e\\u503c\\u63a8\\u5230\\u540e\\u9762\\u6765\\u5b9a\\u4e49\\uff0c\\u5982\\uff1a<\\/p>\\n<pre><code>CFLAGS = $(include_dirs) -O\\ninclude_dirs = -Ifoo -Ibar<\\/code><\\/pre>\\n<p>\\u5f53\\u201cCFLAGS\\u201d\\u5728\\u547d\\u4ee4\\u4e2d\\u88ab\\u5c55\\u5f00\\u65f6\\uff0c\\u4f1a\\u662f\\u201c-Ifoo -Ibar -O\\u201d\\u3002\\u4f46\\u8fd9\\u79cd\\u5f62\\u5f0f\\u4e5f\\u6709\\u4e0d\\u597d\\u7684\\u5730\\u65b9\\uff0c\\u90a3\\u5c31\\u662f\\u9012\\u5f52\\u5b9a\\u4e49\\uff0c\\u5982\\uff1a<\\/p>\\n<pre><code>CFLAGS = $(CFLAGS) -O\\n\\n\\u6216\\uff1a\\n\\nA = $(B)\\nB = $(A)<\\/code><\\/pre>\\n<p>\\u8fd9\\u4f1a\\u8ba9make\\u9677\\u5165\\u65e0\\u9650\\u7684\\u53d8\\u91cf\\u5c55\\u5f00\\u8fc7\\u7a0b\\u4e2d\\u53bb\\uff0c\\u5f53\\u7136\\uff0c\\u6211\\u4eec\\u7684make\\u662f\\u6709\\u80fd\\u529b\\u68c0\\u6d4b\\u8fd9\\u6837\\u7684\\u5b9a\\u4e49\\uff0c\\u5e76\\u4f1a\\u62a5\\u9519\\u3002\\u8fd8\\u6709\\u5c31\\u662f\\u5982\\u679c\\u5728\\u53d8\\u91cf\\u4e2d\\u4f7f\\u7528\\u51fd\\u6570\\uff0c\\u90a3\\u4e48\\uff0c\\u8fd9\\u79cd\\u65b9\\u5f0f\\u4f1a\\u8ba9\\u6211\\u4eec\\u7684make\\u8fd0\\u884c\\u65f6\\u975e\\u5e38\\u6162\\uff0c\\u66f4\\u7cdf\\u7cd5\\u7684\\u662f\\uff0c\\u4ed6\\u4f1a\\u4f7f\\u7528\\u5f97\\u4e24\\u4e2amake\\u7684\\u51fd\\u6570\\u201cwildcard\\u201d\\u548c\\u201cshell\\u201d\\u53d1\\u751f\\u4e0d\\u53ef\\u9884\\u77e5\\u7684\\u9519\\u8bef\\u3002\\u56e0\\u4e3a\\u4f60\\u4e0d\\u4f1a\\u77e5\\u9053\\u8fd9\\u4e24\\u4e2a\\u51fd\\u6570\\u4f1a\\u88ab\\u8c03\\u7528\\u591a\\u5c11\\u6b21\\u3002<\\/p>\\n<p>\\u4e3a\\u4e86\\u907f\\u514d\\u4e0a\\u9762\\u7684\\u8fd9\\u79cd\\u65b9\\u6cd5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528make\\u4e2d\\u7684\\u53e6\\u4e00\\u79cd\\u7528\\u53d8\\u91cf\\u6765\\u5b9a\\u4e49\\u53d8\\u91cf\\u7684\\u65b9\\u6cd5\\u3002\\u8fd9\\u79cd\\u65b9\\u6cd5\\u4f7f\\u7528\\u7684\\u662f<code>:=<\\/code>\\u64cd\\u4f5c\\u7b26\\uff0c\\u5982\\uff1a<\\/p>\\n<pre><code>x := foo\\ny := $(x) bar\\nx := later<\\/code><\\/pre>\\n<p>\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a<\\/p>\\n<pre><code>y := foo bar\\nx := later<\\/code><\\/pre>\\n<p>\\u503c\\u5f97\\u4e00\\u63d0\\u7684\\u662f\\uff0c\\u8fd9\\u79cd\\u65b9\\u6cd5\\uff0c\\u524d\\u9762\\u7684\\u53d8\\u91cf\\u4e0d\\u80fd\\u4f7f\\u7528\\u540e\\u9762\\u7684\\u53d8\\u91cf\\uff0c\\u53ea\\u80fd\\u4f7f\\u7528\\u524d\\u9762\\u5df2\\u5b9a\\u4e49\\u597d\\u4e86\\u7684\\u53d8\\u91cf\\u3002\\u5982\\u679c\\u662f\\u8fd9\\u6837\\uff1a<\\/p>\\n<pre><code>y := $(x) bar\\nx := foo<\\/code><\\/pre>\\n<p>\\u90a3\\u4e48\\uff0cy\\u7684\\u503c\\u662f\\u201cbar\\u201d\\uff0c\\u800c\\u4e0d\\u662f\\u201cfoo bar\\u201d\\u3002<\\/p>\\n<p>\\u4e0a\\u9762\\u90fd\\u662f\\u4e00\\u4e9b\\u6bd4\\u8f83\\u7b80\\u5355\\u7684\\u53d8\\u91cf\\u4f7f\\u7528\\u4e86\\uff0c\\u8ba9\\u6211\\u4eec\\u6765\\u770b\\u4e00\\u4e2a\\u590d\\u6742\\u7684\\u4f8b\\u5b50\\uff0c\\u5176\\u4e2d\\u5305\\u62ec\\u4e86make\\u7684\\u51fd\\u6570\\u3001\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u548c\\u4e00\\u4e2a\\u7cfb\\u7edf\\u53d8\\u91cf\\u201cMAKELEVEL\\u201d\\u7684\\u4f7f\\u7528\\uff1a<\\/p>\\n<pre><code>ifeq (0,${MAKELEVEL})\\ncur-dir   := $(shell pwd)\\nwhoami    := $(shell whoami)\\nhost-type := $(shell arch)\\nMAKE := ${MAKE} host-type=${host-type} whoami=${whoami}\\nendif<\\/code><\\/pre>\\n<p>\\u5173\\u4e8e\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u548c\\u51fd\\u6570\\uff0c\\u6211\\u4eec\\u5728\\u540e\\u9762\\u518d\\u8bf4\\uff0c\\u5bf9\\u4e8e\\u7cfb\\u7edf\\u53d8\\u91cf\\u201cMAKELEVEL\\u201d\\uff0c\\u5176\\u610f\\u601d\\u662f\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u7684make\\u6709\\u4e00\\u4e2a\\u5d4c\\u5957\\u6267\\u884c\\u7684\\u52a8\\u4f5c\\uff08\\u53c2\\u89c1\\u524d\\u9762\\u7684\\u201c\\u5d4c\\u5957\\u4f7f\\u7528make\\u201d\\uff09\\uff0c\\u90a3\\u4e48\\uff0c\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4f1a\\u8bb0\\u5f55\\u4e86\\u6211\\u4eec\\u7684\\u5f53\\u524dMakefile\\u7684\\u8c03\\u7528\\u5c42\\u6570\\u3002<\\/p>\\n<p>\\u4e0b\\u9762\\u518d\\u4ecb\\u7ecd\\u4e24\\u4e2a\\u5b9a\\u4e49\\u53d8\\u91cf\\u65f6\\u6211\\u4eec\\u9700\\u8981\\u77e5\\u9053\\u7684\\uff0c\\u8bf7\\u5148\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u8981\\u5b9a\\u4e49\\u4e00\\u4e2a\\u53d8\\u91cf\\uff0c\\u5176\\u503c\\u662f\\u4e00\\u4e2a\\u7a7a\\u683c\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u53ef\\u4ee5\\u8fd9\\u6837\\u6765\\uff1a<\\/p>\\n<pre><code>nullstring :=\\nspace := $(nullstring) # end of the line<\\/code><\\/pre>\\n<p>nullstring\\u662f\\u4e00\\u4e2aEmpty\\u53d8\\u91cf\\uff0c\\u5176\\u4e2d\\u4ec0\\u4e48\\u4e5f\\u6ca1\\u6709\\uff0c\\u800c\\u6211\\u4eec\\u7684space\\u7684\\u503c\\u662f\\u4e00\\u4e2a\\u7a7a\\u683c\\u3002\\u56e0\\u4e3a\\u5728\\u64cd\\u4f5c\\u7b26\\u7684\\u53f3\\u8fb9\\u662f\\u5f88\\u96be\\u63cf\\u8ff0\\u4e00\\u4e2a\\u7a7a\\u683c\\u7684\\uff0c\\u8fd9\\u91cc\\u91c7\\u7528\\u7684\\u6280\\u672f\\u5f88\\u7ba1\\u7528\\uff0c\\u5148\\u7528\\u4e00\\u4e2aEmpty\\u53d8\\u91cf\\u6765\\u6807\\u660e\\u53d8\\u91cf\\u7684\\u503c\\u5f00\\u59cb\\u4e86\\uff0c\\u800c\\u540e\\u9762\\u91c7\\u7528\\u201c#\\u201d\\u6ce8\\u91ca\\u7b26\\u6765\\u8868\\u793a\\u53d8\\u91cf\\u5b9a\\u4e49\\u7684\\u7ec8\\u6b62\\uff0c\\u8fd9\\u6837\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5b9a\\u4e49\\u51fa\\u5176\\u503c\\u662f\\u4e00\\u4e2a\\u7a7a\\u683c\\u7684\\u53d8\\u91cf\\u3002\\u8bf7\\u6ce8\\u610f\\u8fd9\\u91cc\\u5173\\u4e8e\\u201c#\\u201d\\u7684\\u4f7f\\u7528\\uff0c\\u6ce8\\u91ca\\u7b26\\u201c#\\u201d\\u7684\\u8fd9\\u79cd\\u7279\\u6027\\u503c\\u5f97\\u6211\\u4eec\\u6ce8\\u610f\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u8fd9\\u6837\\u5b9a\\u4e49\\u4e00\\u4e2a\\u53d8\\u91cf\\uff1a<\\/p>\\n<pre><code>dir := \\/foo\\/bar    # directory to put the frobs in<\\/code><\\/pre>\\n<p>dir\\u8fd9\\u4e2a\\u53d8\\u91cf\\u7684\\u503c\\u662f\\u201c\\/foo\\/bar\\u201d\\uff0c\\u540e\\u9762\\u8fd8\\u8ddf\\u4e864\\u4e2a\\u7a7a\\u683c\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u8fd9\\u6837\\u4f7f\\u7528\\u8fd9\\u6837\\u53d8\\u91cf\\u6765\\u6307\\u5b9a\\u522b\\u7684\\u76ee\\u5f55\\u2014\\u2014\\u201c$(dir)\\/file\\u201d\\u90a3\\u4e48\\u5c31\\u5b8c\\u86cb\\u4e86\\u3002<\\/p>\\n<p>\\u8fd8\\u6709\\u4e00\\u4e2a\\u6bd4\\u8f83\\u6709\\u7528\\u7684\\u64cd\\u4f5c\\u7b26\\u662f\\u201c?=\\u201d\\uff0c\\u5148\\u770b\\u793a\\u4f8b\\uff1a<\\/p>\\n<pre><code>FOO ?= bar<\\/code><\\/pre>\\n<p>\\u5176\\u542b\\u4e49\\u662f\\uff0c\\u5982\\u679cFOO\\u6ca1\\u6709\\u88ab\\u5b9a\\u4e49\\u8fc7\\uff0c\\u90a3\\u4e48\\u53d8\\u91cfFOO\\u7684\\u503c\\u5c31\\u662f\\u201cbar\\u201d\\uff0c\\u5982\\u679cFOO\\u5148\\u524d\\u88ab\\u5b9a\\u4e49\\u8fc7\\uff0c\\u90a3\\u4e48\\u8fd9\\u6761\\u8bed\\u5c06\\u4ec0\\u4e48\\u4e5f\\u4e0d\\u505a\\uff0c\\u5176\\u7b49\\u4ef7\\u4e8e\\uff1a<\\/p>\\n<pre><code>ifeq ($(origin FOO), undefined)\\n  FOO = bar\\nendif<\\/code><\\/pre>\\n<p>\\u4e09\\u3001\\u53d8\\u91cf\\u9ad8\\u7ea7\\u7528\\u6cd5<\\/p>\\n<p>\\u8fd9\\u91cc\\u4ecb\\u7ecd\\u4e24\\u79cd\\u53d8\\u91cf\\u7684\\u9ad8\\u7ea7\\u4f7f\\u7528\\u65b9\\u6cd5\\uff0c\\u7b2c\\u4e00\\u79cd\\u662f\\u53d8\\u91cf\\u503c\\u7684\\u66ff\\u6362\\u3002<\\/p>\\n<p>\\u6211\\u4eec\\u53ef\\u4ee5\\u66ff\\u6362\\u53d8\\u91cf\\u4e2d\\u7684\\u5171\\u6709\\u7684\\u90e8\\u5206\\uff0c\\u5176\\u683c\\u5f0f\\u662f\\u201c$(var:a=b)\\u201d\\u6216\\u662f\\u201c${var:a=b}\\u201d\\uff0c\\u5176\\u610f\\u601d\\u662f\\uff0c\\u628a\\u53d8\\u91cf\\u201cvar\\u201d\\u4e2d\\u6240\\u6709\\u4ee5\\u201ca\\u201d\\u5b57\\u4e32\\u201c\\u7ed3\\u5c3e\\u201d\\u7684\\u201ca\\u201d\\u66ff\\u6362\\u6210\\u201cb\\u201d\\u5b57\\u4e32\\u3002\\u8fd9\\u91cc\\u7684\\u201c\\u7ed3\\u5c3e\\u201d\\u610f\\u601d\\u662f\\u201c\\u7a7a\\u683c\\u201d\\u6216\\u662f\\u201c\\u7ed3\\u675f\\u7b26\\u201d\\u3002<\\/p>\\n<p>\\u8fd8\\u662f\\u770b\\u4e00\\u4e2a\\u793a\\u4f8b\\u5427\\uff1a<\\/p>\\n<pre><code>foo := a.o b.o c.o\\nbar := $(foo:.o=.c)<\\/code><\\/pre>\\n<p>\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c\\u6211\\u4eec\\u5148\\u5b9a\\u4e49\\u4e86\\u4e00\\u4e2a\\u201c$(foo)\\u201d\\u53d8\\u91cf\\uff0c\\u800c\\u7b2c\\u4e8c\\u884c\\u7684\\u610f\\u601d\\u662f\\u628a\\u201c$(foo)\\u201d\\u4e2d\\u6240\\u6709\\u4ee5\\u201c.o\\u201d\\u5b57\\u4e32\\u201c\\u7ed3\\u5c3e\\u201d\\u5168\\u90e8\\u66ff\\u6362\\u6210\\u201c.c\\u201d\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u7684\\u201c$(bar)\\u201d\\u7684\\u503c\\u5c31\\u662f\\u201ca.c b.c c.c\\u201d\\u3002<\\/p>\\n<p>\\u53e6\\u5916\\u4e00\\u79cd\\u53d8\\u91cf\\u66ff\\u6362\\u7684\\u6280\\u672f\\u662f\\u4ee5\\u201c\\u9759\\u6001\\u6a21\\u5f0f\\u201d\\uff08\\u53c2\\u89c1\\u524d\\u9762\\u7ae0\\u8282\\uff09\\u5b9a\\u4e49\\u7684\\uff0c\\u5982\\uff1a<\\/p>\\n<pre><code>foo := a.o b.o c.o\\nbar := $(foo:%.o=%.c)<\\/code><\\/pre>\\n<p>\\u8fd9\\u4f9d\\u8d56\\u4e8e\\u88ab\\u66ff\\u6362\\u5b57\\u4e32\\u4e2d\\u7684\\u6709\\u76f8\\u540c\\u7684\\u6a21\\u5f0f\\uff0c\\u6a21\\u5f0f\\u4e2d\\u5fc5\\u987b\\u5305\\u542b\\u4e00\\u4e2a\\u201c%\\u201d\\u5b57\\u7b26\\uff0c\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u540c\\u6837\\u8ba9$(bar)\\u53d8\\u91cf\\u7684\\u503c\\u4e3a\\u201ca.c b.c c.c\\u201d\\u3002 <\\/p>\\n<p>\\u7b2c\\u4e8c\\u79cd\\u9ad8\\u7ea7\\u7528\\u6cd5\\u662f\\u2014\\u2014\\u201c\\u628a\\u53d8\\u91cf\\u7684\\u503c\\u518d\\u5f53\\u6210\\u53d8\\u91cf\\u201d\\u3002\\u5148\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>x = y\\ny = z\\na := $($(x))<\\/code><\\/pre>\\n<p>\\u5728\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c$(x)\\u7684\\u503c\\u662f\\u201cy\\u201d\\uff0c\\u6240\\u4ee5$($(x))\\u5c31\\u662f$(y)\\uff0c\\u4e8e\\u662f$(a)\\u7684\\u503c\\u5c31\\u662f\\u201cz\\u201d\\u3002\\uff08\\u6ce8\\u610f\\uff0c\\u662f\\u201cx=y\\u201d\\uff0c\\u800c\\u4e0d\\u662f\\u201cx=$(y)\\u201d\\uff09<\\/p>\\n<p>\\u6211\\u4eec\\u8fd8\\u53ef\\u4ee5\\u4f7f\\u7528\\u66f4\\u591a\\u7684\\u5c42\\u6b21\\uff1a<\\/p>\\n<pre><code>x = y\\ny = z\\nz = u\\na := $($($(x)))<\\/code><\\/pre>\\n<p>\\u8fd9\\u91cc\\u7684$(a)\\u7684\\u503c\\u662f\\u201cu\\u201d\\uff0c\\u76f8\\u5173\\u7684\\u63a8\\u5bfc\\u7559\\u7ed9\\u8bfb\\u8005\\u81ea\\u5df1\\u53bb\\u505a\\u5427\\u3002<\\/p>\\n<p>\\u8ba9\\u6211\\u4eec\\u518d\\u590d\\u6742\\u4e00\\u70b9\\uff0c\\u4f7f\\u7528\\u4e0a\\u201c\\u5728\\u53d8\\u91cf\\u5b9a\\u4e49\\u4e2d\\u4f7f\\u7528\\u53d8\\u91cf\\u201d\\u7684\\u7b2c\\u4e00\\u4e2a\\u65b9\\u5f0f\\uff0c\\u6765\\u770b\\u4e00\\u4e2a\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>x = $(y)\\ny = z\\nz = Hello\\na := $($(x))<\\/code><\\/pre>\\n<p>\\u8fd9\\u91cc\\u7684$($(x))\\u88ab\\u66ff\\u6362\\u6210\\u4e86$($(y))\\uff0c\\u56e0\\u4e3a$(y)\\u503c\\u662f\\u201cz\\u201d\\uff0c\\u6240\\u4ee5\\uff0c\\u6700\\u7ec8\\u7ed3\\u679c\\u662f\\uff1aa:=$(z)\\uff0c\\u4e5f\\u5c31\\u662f\\u201cHello\\u201d\\u3002<\\/p>\\n<p>\\u518d\\u590d\\u6742\\u4e00\\u70b9\\uff0c\\u6211\\u4eec\\u518d\\u52a0\\u4e0a\\u51fd\\u6570\\uff1a<\\/p>\\n<pre><code>x = variable1\\nvariable2 := Hello\\ny = $(subst 1,2,$(x))\\nz = y\\na := $($($(z)))<\\/code><\\/pre>\\n<p>\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c\\u201c$($($(z)))\\u201d\\u6269\\u5c55\\u4e3a\\u201c$($(y))\\u201d\\uff0c\\u800c\\u5176\\u518d\\u6b21\\u88ab\\u6269\\u5c55\\u4e3a\\u201c$($(subst 1,2,$(x)))\\u201d\\u3002$(x)\\u7684\\u503c\\u662f\\u201cvariable1\\u201d\\uff0csubst\\u51fd\\u6570\\u628a\\u201cvariable1\\u201d\\u4e2d\\u7684\\u6240\\u6709\\u201c1\\u201d\\u5b57\\u4e32\\u66ff\\u6362\\u6210\\u201c2\\u201d\\u5b57\\u4e32\\uff0c\\u4e8e\\u662f\\uff0c\\u201cvariable1\\u201d\\u53d8\\u6210\\u201cvariable2\\u201d\\uff0c\\u518d\\u53d6\\u5176\\u503c\\uff0c\\u6240\\u4ee5\\uff0c\\u6700\\u7ec8\\uff0c$(a)\\u7684\\u503c\\u5c31\\u662f$(variable2)\\u7684\\u503c\\u2014\\u2014\\u201cHello\\u201d\\u3002\\uff08\\u5594\\uff0c\\u597d\\u4e0d\\u5bb9\\u6613\\uff09<\\/p>\\n<p>\\u5728\\u8fd9\\u79cd\\u65b9\\u5f0f\\u4e2d\\uff0c\\u6216\\u8981\\u53ef\\u4ee5\\u4f7f\\u7528\\u591a\\u4e2a\\u53d8\\u91cf\\u6765\\u7ec4\\u6210\\u4e00\\u4e2a\\u53d8\\u91cf\\u7684\\u540d\\u5b57\\uff0c\\u7136\\u540e\\u518d\\u53d6\\u5176\\u503c\\uff1a<\\/p>\\n<pre><code>first_second = Hello\\na = first\\nb = second\\nall = $($a_$b)<\\/code><\\/pre>\\n<p>\\u8fd9\\u91cc\\u7684\\u201c$a_$b\\u201d\\u7ec4\\u6210\\u4e86\\u201cfirst_second\\u201d\\uff0c\\u4e8e\\u662f\\uff0c$(all)\\u7684\\u503c\\u5c31\\u662f\\u201cHello\\u201d\\u3002<\\/p>\\n<p>\\u518d\\u6765\\u770b\\u770b\\u7ed3\\u5408\\u7b2c\\u4e00\\u79cd\\u6280\\u672f\\u7684\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>a_objects := a.o b.o c.o\\n1_objects := 1.o 2.o 3.o\\n\\nsources := $($(a1)_objects:.o=.c)<\\/code><\\/pre>\\n<p>\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c\\u5982\\u679c$(a1)\\u7684\\u503c\\u662f\\u201ca\\u201d\\u7684\\u8bdd\\uff0c\\u90a3\\u4e48\\uff0c$(sources)\\u7684\\u503c\\u5c31\\u662f\\u201ca.c b.c c.c\\u201d\\uff1b\\u5982\\u679c$(a1)\\u7684\\u503c\\u662f\\u201c1\\u201d\\uff0c\\u90a3\\u4e48$(sources)\\u7684\\u503c\\u662f\\u201c1.c 2.c 3.c\\u201d\\u3002<\\/p>\\n<p>\\u518d\\u6765\\u770b\\u4e00\\u4e2a\\u8fd9\\u79cd\\u6280\\u672f\\u548c\\u201c\\u51fd\\u6570\\u201d\\u4e0e\\u201c\\u6761\\u4ef6\\u8bed\\u53e5\\u201d\\u4e00\\u540c\\u4f7f\\u7528\\u7684\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>ifdef do_sort\\nfunc := sort\\nelse\\nfunc := strip\\nendif\\n\\nbar := a d b g q c\\n\\nfoo := $($(func) $(bar))<\\/code><\\/pre>\\n<p>\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c\\u5982\\u679c\\u5b9a\\u4e49\\u4e86\\u201cdo_sort\\u201d\\uff0c\\u90a3\\u4e48\\uff1afoo := $(sort a d b g q c)\\uff0c\\u4e8e\\u662f$(foo)\\u7684\\u503c\\u5c31\\u662f\\u201ca b c d g q\\u201d\\uff0c\\u800c\\u5982\\u679c\\u6ca1\\u6709\\u5b9a\\u4e49\\u201cdo_sort\\u201d\\uff0c\\u90a3\\u4e48\\uff1afoo := $(sort a d b g q c)\\uff0c\\u8c03\\u7528\\u7684\\u5c31\\u662fstrip\\u51fd\\u6570\\u3002<\\/p>\\n<p>\\u5f53\\u7136\\uff0c\\u201c\\u628a\\u53d8\\u91cf\\u7684\\u503c\\u518d\\u5f53\\u6210\\u53d8\\u91cf\\u201d\\u8fd9\\u79cd\\u6280\\u672f\\uff0c\\u540c\\u6837\\u53ef\\u4ee5\\u7528\\u5728\\u64cd\\u4f5c\\u7b26\\u7684\\u5de6\\u8fb9\\uff1a<\\/p>\\n<pre><code>dir = foo\\n$(dir)_sources := $(wildcard $(dir)\\/ *.c)\\ndefine $(dir)_print\\nlpr $($(dir)_sources)\\nendef<\\/code><\\/pre>\\n<p>\\u8fd9\\u4e2a\\u4f8b\\u5b50\\u4e2d\\u5b9a\\u4e49\\u4e86\\u4e09\\u4e2a\\u53d8\\u91cf\\uff1a\\u201cdir\\u201d\\uff0c\\u201cfoo_sources\\u201d\\u548c\\u201cfoo_print\\u201d\\u3002<\\/p>\\n<p>\\u56db\\u3001\\u8ffd\\u52a0\\u53d8\\u91cf\\u503c<\\/p>\\n<p>\\u6211\\u4eec\\u53ef\\u4ee5\\u4f7f\\u7528\\u201c+=\\u201d\\u64cd\\u4f5c\\u7b26\\u7ed9\\u53d8\\u91cf\\u8ffd\\u52a0\\u503c\\uff0c\\u5982\\uff1a<\\/p>\\n<pre><code>objects = main.o foo.o bar.o utils.o\\nobjects += another.o<\\/code><\\/pre>\\n<p>\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u7684$(objects)\\u503c\\u53d8\\u6210\\uff1a\\u201cmain.o foo.o bar.o utils.o another.o\\u201d\\uff08another.o\\u88ab\\u8ffd\\u52a0\\u8fdb\\u53bb\\u4e86\\uff09<\\/p>\\n<p>\\u4f7f\\u7528\\u201c+=\\u201d\\u64cd\\u4f5c\\u7b26\\uff0c\\u53ef\\u4ee5\\u6a21\\u62df\\u4e3a\\u4e0b\\u9762\\u7684\\u8fd9\\u79cd\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>objects = main.o foo.o bar.o utils.o\\nobjects := $(objects) another.o<\\/code><\\/pre>\\n<p>\\u6240\\u4e0d\\u540c\\u7684\\u662f\\uff0c\\u7528\\u201c+=\\u201d\\u66f4\\u4e3a\\u7b80\\u6d01\\u3002<\\/p>\\n<p>\\u5982\\u679c\\u53d8\\u91cf\\u4e4b\\u524d\\u6ca1\\u6709\\u5b9a\\u4e49\\u8fc7\\uff0c\\u90a3\\u4e48\\uff0c\\u201c+=\\u201d\\u4f1a\\u81ea\\u52a8\\u53d8\\u6210\\u201c=\\u201d\\uff0c\\u5982\\u679c\\u524d\\u9762\\u6709\\u53d8\\u91cf\\u5b9a\\u4e49\\uff0c\\u90a3\\u4e48\\u201c+=\\u201d\\u4f1a\\u7ee7\\u627f\\u4e8e\\u524d\\u6b21\\u64cd\\u4f5c\\u7684\\u8d4b\\u503c\\u7b26\\u3002\\u5982\\u679c\\u524d\\u4e00\\u6b21\\u7684\\u662f\\u201c:=\\u201d\\uff0c\\u90a3\\u4e48\\u201c+=\\u201d\\u4f1a\\u4ee5\\u201c:=\\u201d\\u4f5c\\u4e3a\\u5176\\u8d4b\\u503c\\u7b26\\uff0c\\u5982\\uff1a<\\/p>\\n<pre><code>variable := value\\nvariable += more<\\/code><\\/pre>\\n<p>\\u7b49\\u4ef7\\u4e8e\\uff1a<\\/p>\\n<pre><code>variable := value\\nvariable := $(variable) more<\\/code><\\/pre>\\n<p>\\u4f46\\u5982\\u679c\\u662f\\u8fd9\\u79cd\\u60c5\\u51b5\\uff1a <\\/p>\\n<pre><code>variable = value\\nvariable += more<\\/code><\\/pre>\\n<p>\\u7531\\u4e8e\\u524d\\u6b21\\u7684\\u8d4b\\u503c\\u7b26\\u662f\\u201c=\\u201d\\uff0c\\u6240\\u4ee5\\u201c+=\\u201d\\u4e5f\\u4f1a\\u4ee5\\u201c=\\u201d\\u6765\\u505a\\u4e3a\\u8d4b\\u503c\\uff0c\\u90a3\\u4e48\\u5c82\\u4e0d\\u4f1a\\u53d1\\u751f\\u53d8\\u91cf\\u7684\\u9012\\u8865\\u5f52\\u5b9a\\u4e49\\uff0c\\u8fd9\\u662f\\u5f88\\u4e0d\\u597d\\u7684\\uff0c\\u6240\\u4ee5make\\u4f1a\\u81ea\\u52a8\\u4e3a\\u6211\\u4eec\\u89e3\\u51b3\\u8fd9\\u4e2a\\u95ee\\u9898\\uff0c\\u6211\\u4eec\\u4e0d\\u5fc5\\u62c5\\u5fc3\\u8fd9\\u4e2a\\u95ee\\u9898\\u3002<\\/p>\\n<p>\\u4e94\\u3001override \\u6307\\u793a\\u7b26<\\/p>\\n<p>\\u5982\\u679c\\u6709\\u53d8\\u91cf\\u662f\\u901a\\u5e38make\\u7684\\u547d\\u4ee4\\u884c\\u53c2\\u6570\\u8bbe\\u7f6e\\u7684\\uff0c\\u90a3\\u4e48Makefile\\u4e2d\\u5bf9\\u8fd9\\u4e2a\\u53d8\\u91cf\\u7684\\u8d4b\\u503c\\u4f1a\\u88ab\\u5ffd\\u7565\\u3002\\u5982\\u679c\\u4f60\\u60f3\\u5728Makefile\\u4e2d\\u8bbe\\u7f6e\\u8fd9\\u7c7b\\u53c2\\u6570\\u7684\\u503c\\uff0c\\u90a3\\u4e48\\uff0c\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528\\u201coverride\\u201d\\u6307\\u793a\\u7b26\\u3002\\u5176\\u8bed\\u6cd5\\u662f\\uff1a<\\/p>\\n<pre><code>override &lt;variable&gt;; = &lt;value&gt;;\\n\\noverride &lt;variable&gt;; := &lt;value&gt;;<\\/code><\\/pre>\\n<p>\\u5f53\\u7136\\uff0c\\u4f60\\u8fd8\\u53ef\\u4ee5\\u8ffd\\u52a0\\uff1a<\\/p>\\n<pre><code>override &lt;variable&gt;; += &lt;more text&gt;;<\\/code><\\/pre>\\n<p>\\u5bf9\\u4e8e\\u591a\\u884c\\u7684\\u53d8\\u91cf\\u5b9a\\u4e49\\uff0c\\u6211\\u4eec\\u7528define\\u6307\\u793a\\u7b26\\uff0c\\u5728define\\u6307\\u793a\\u7b26\\u524d\\uff0c\\u4e5f\\u540c\\u6837\\u53ef\\u4ee5\\u4f7f\\u7528ovveride\\u6307\\u793a\\u7b26\\uff0c\\u5982\\uff1a<\\/p>\\n<pre><code>override define foo\\nbar\\nendef<\\/code><\\/pre>\\n<p>\\u516d\\u3001\\u591a\\u884c\\u53d8\\u91cf<\\/p>\\n<p>\\u8fd8\\u6709\\u4e00\\u79cd\\u8bbe\\u7f6e\\u53d8\\u91cf\\u503c\\u7684\\u65b9\\u6cd5\\u662f\\u4f7f\\u7528define\\u5173\\u952e\\u5b57\\u3002\\u4f7f\\u7528define\\u5173\\u952e\\u5b57\\u8bbe\\u7f6e\\u53d8\\u91cf\\u7684\\u503c\\u53ef\\u4ee5\\u6709\\u6362\\u884c\\uff0c\\u8fd9\\u6709\\u5229\\u4e8e\\u5b9a\\u4e49\\u4e00\\u7cfb\\u5217\\u7684\\u547d\\u4ee4\\uff08\\u524d\\u9762\\u6211\\u4eec\\u8bb2\\u8fc7\\u201c\\u547d\\u4ee4\\u5305\\u201d\\u7684\\u6280\\u672f\\u5c31\\u662f\\u5229\\u7528\\u8fd9\\u4e2a\\u5173\\u952e\\u5b57\\uff09\\u3002<\\/p>\\n<p>define\\u6307\\u793a\\u7b26\\u540e\\u9762\\u8ddf\\u7684\\u662f\\u53d8\\u91cf\\u7684\\u540d\\u5b57\\uff0c\\u800c\\u91cd\\u8d77\\u4e00\\u884c\\u5b9a\\u4e49\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u5b9a\\u4e49\\u662f\\u4ee5endef\\u5173\\u952e\\u5b57\\u7ed3\\u675f\\u3002\\u5176\\u5de5\\u4f5c\\u65b9\\u5f0f\\u548c\\u201c=\\u201d\\u64cd\\u4f5c\\u7b26\\u4e00\\u6837\\u3002\\u53d8\\u91cf\\u7684\\u503c\\u53ef\\u4ee5\\u5305\\u542b\\u51fd\\u6570\\u3001\\u547d\\u4ee4\\u3001\\u6587\\u5b57\\uff0c\\u6216\\u662f\\u5176\\u5b83\\u53d8\\u91cf\\u3002\\u56e0\\u4e3a\\u547d\\u4ee4\\u9700\\u8981\\u4ee5[Tab]\\u952e\\u5f00\\u5934\\uff0c\\u6240\\u4ee5\\u5982\\u679c\\u4f60\\u7528define\\u5b9a\\u4e49\\u7684\\u547d\\u4ee4\\u53d8\\u91cf\\u4e2d\\u6ca1\\u6709\\u4ee5[Tab]\\u952e\\u5f00\\u5934\\uff0c\\u90a3\\u4e48make\\u5c31\\u4e0d\\u4f1a\\u628a\\u5176\\u8ba4\\u4e3a\\u662f\\u547d\\u4ee4\\u3002<\\/p>\\n<p>\\u4e0b\\u9762\\u7684\\u8fd9\\u4e2a\\u793a\\u4f8b\\u5c55\\u793a\\u4e86define\\u7684\\u7528\\u6cd5\\uff1a<\\/p>\\n<pre><code>define two-lines\\necho foo\\necho $(bar)\\nendef<\\/code><\\/pre>\\n<p>\\u4e03\\u3001\\u73af\\u5883\\u53d8\\u91cf<\\/p>\\n<p>make\\u8fd0\\u884c\\u65f6\\u7684\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u53ef\\u4ee5\\u5728make\\u5f00\\u59cb\\u8fd0\\u884c\\u65f6\\u88ab\\u8f7d\\u5165\\u5230Makefile\\u6587\\u4ef6\\u4e2d\\uff0c\\u4f46\\u662f\\u5982\\u679cMakefile\\u4e2d\\u5df2\\u5b9a\\u4e49\\u4e86\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u6216\\u662f\\u8fd9\\u4e2a\\u53d8\\u91cf\\u7531make\\u547d\\u4ee4\\u884c\\u5e26\\u5165\\uff0c\\u90a3\\u4e48\\u7cfb\\u7edf\\u7684\\u73af\\u5883\\u53d8\\u91cf\\u7684\\u503c\\u5c06\\u88ab\\u8986\\u76d6\\u3002\\uff08\\u5982\\u679cmake\\u6307\\u5b9a\\u4e86\\u201c-e\\u201d\\u53c2\\u6570\\uff0c\\u90a3\\u4e48\\uff0c\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u5c06\\u8986\\u76d6Makefile\\u4e2d\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\uff09<\\/p>\\n<p>\\u56e0\\u6b64\\uff0c\\u5982\\u679c\\u6211\\u4eec\\u5728\\u73af\\u5883\\u53d8\\u91cf\\u4e2d\\u8bbe\\u7f6e\\u4e86\\u201cCFLAGS\\u201d\\u73af\\u5883\\u53d8\\u91cf\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u5c31\\u53ef\\u4ee5\\u5728\\u6240\\u6709\\u7684Makefile\\u4e2d\\u4f7f\\u7528\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4e86\\u3002\\u8fd9\\u5bf9\\u4e8e\\u6211\\u4eec\\u4f7f\\u7528\\u7edf\\u4e00\\u7684\\u7f16\\u8bd1\\u53c2\\u6570\\u6709\\u6bd4\\u8f83\\u5927\\u7684\\u597d\\u5904\\u3002\\u5982\\u679cMakefile\\u4e2d\\u5b9a\\u4e49\\u4e86CFLAGS\\uff0c\\u90a3\\u4e48\\u5219\\u4f1a\\u4f7f\\u7528Makefile\\u4e2d\\u7684\\u8fd9\\u4e2a\\u53d8\\u91cf\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5b9a\\u4e49\\u5219\\u4f7f\\u7528\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u4e00\\u4e2a\\u5171\\u6027\\u548c\\u4e2a\\u6027\\u7684\\u7edf\\u4e00\\uff0c\\u5f88\\u50cf\\u201c\\u5168\\u5c40\\u53d8\\u91cf\\u201d\\u548c\\u201c\\u5c40\\u90e8\\u53d8\\u91cf\\u201d\\u7684\\u7279\\u6027\\u3002<\\/p>\\n<p>\\u5f53make\\u5d4c\\u5957\\u8c03\\u7528\\u65f6\\uff08\\u53c2\\u89c1\\u524d\\u9762\\u7684\\u201c\\u5d4c\\u5957\\u8c03\\u7528\\u201d\\u7ae0\\u8282\\uff09\\uff0c\\u4e0a\\u5c42Makefile\\u4e2d\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\u4f1a\\u4ee5\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u7684\\u65b9\\u5f0f\\u4f20\\u9012\\u5230\\u4e0b\\u5c42\\u7684Makefile\\u4e2d\\u3002\\u5f53\\u7136\\uff0c\\u9ed8\\u8ba4\\u60c5\\u51b5\\u4e0b\\uff0c\\u53ea\\u6709\\u901a\\u8fc7\\u547d\\u4ee4\\u884c\\u8bbe\\u7f6e\\u7684\\u53d8\\u91cf\\u4f1a\\u88ab\\u4f20\\u9012\\u3002\\u800c\\u5b9a\\u4e49\\u5728\\u6587\\u4ef6\\u4e2d\\u7684\\u53d8\\u91cf\\uff0c\\u5982\\u679c\\u8981\\u5411\\u4e0b\\u5c42Makefile\\u4f20\\u9012\\uff0c\\u5219\\u9700\\u8981\\u4f7f\\u7528exprot\\u5173\\u952e\\u5b57\\u6765\\u58f0\\u660e\\u3002\\uff08\\u53c2\\u89c1\\u524d\\u9762\\u7ae0\\u8282\\uff09<\\/p>\\n<p>\\u5f53\\u7136\\uff0c\\u6211\\u5e76\\u4e0d\\u63a8\\u8350\\u628a\\u8bb8\\u591a\\u7684\\u53d8\\u91cf\\u90fd\\u5b9a\\u4e49\\u5728\\u7cfb\\u7edf\\u73af\\u5883\\u4e2d\\uff0c\\u8fd9\\u6837\\uff0c\\u5728\\u6211\\u4eec\\u6267\\u884c\\u4e0d\\u7528\\u7684Makefile\\u65f6\\uff0c\\u62e5\\u6709\\u7684\\u662f\\u540c\\u4e00\\u5957\\u7cfb\\u7edf\\u53d8\\u91cf\\uff0c\\u8fd9\\u53ef\\u80fd\\u4f1a\\u5e26\\u6765\\u66f4\\u591a\\u7684\\u9ebb\\u70e6\\u3002<\\/p>\\n<p>\\u516b\\u3001\\u76ee\\u6807\\u53d8\\u91cf<\\/p>\\n<p>\\u524d\\u9762\\u6211\\u4eec\\u6240\\u8bb2\\u7684\\u5728Makefile\\u4e2d\\u5b9a\\u4e49\\u7684\\u53d8\\u91cf\\u90fd\\u662f\\u201c\\u5168\\u5c40\\u53d8\\u91cf\\u201d\\uff0c\\u5728\\u6574\\u4e2a\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u90fd\\u53ef\\u4ee5\\u8bbf\\u95ee\\u8fd9\\u4e9b\\u53d8\\u91cf\\u3002\\u5f53\\u7136\\uff0c\\u201c\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\u201d\\u9664\\u5916\\uff0c\\u5982\\u201c$&lt;\\u201d\\u7b49\\u8fd9\\u79cd\\u7c7b\\u91cf\\u7684\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\u5c31\\u5c5e\\u4e8e\\u201c\\u89c4\\u5219\\u578b\\u53d8\\u91cf\\u201d\\uff0c\\u8fd9\\u79cd\\u53d8\\u91cf\\u7684\\u503c\\u4f9d\\u8d56\\u4e8e\\u89c4\\u5219\\u7684\\u76ee\\u6807\\u548c\\u4f9d\\u8d56\\u76ee\\u6807\\u7684\\u5b9a\\u4e49\\u3002<\\/p>\\n<p>\\u5f53\\u7136\\uff0c\\u6211\\u6837\\u540c\\u6837\\u53ef\\u4ee5\\u4e3a\\u67d0\\u4e2a\\u76ee\\u6807\\u8bbe\\u7f6e\\u5c40\\u90e8\\u53d8\\u91cf\\uff0c\\u8fd9\\u79cd\\u53d8\\u91cf\\u88ab\\u79f0\\u4e3a\\u201cTarget-specific Variable\\u201d\\uff0c\\u5b83\\u53ef\\u4ee5\\u548c\\u201c\\u5168\\u5c40\\u53d8\\u91cf\\u201d\\u540c\\u540d\\uff0c\\u56e0\\u4e3a\\u5b83\\u7684\\u4f5c\\u7528\\u8303\\u56f4\\u53ea\\u5728\\u8fd9\\u6761\\u89c4\\u5219\\u4ee5\\u53ca\\u8fde\\u5e26\\u89c4\\u5219\\u4e2d\\uff0c\\u6240\\u4ee5\\u5176\\u503c\\u4e5f\\u53ea\\u5728\\u4f5c\\u7528\\u8303\\u56f4\\u5185\\u6709\\u6548\\u3002\\u800c\\u4e0d\\u4f1a\\u5f71\\u54cd\\u89c4\\u5219\\u94fe\\u4ee5\\u5916\\u7684\\u5168\\u5c40\\u53d8\\u91cf\\u7684\\u503c\\u3002<\\/p>\\n<p>\\u5176\\u8bed\\u6cd5\\u662f\\uff1a<\\/p>\\n<pre><code>&lt;target ...&gt;; : &lt;variable-assignment&gt;;\\n\\n&lt;target ...&gt;; : overide &lt;variable-assignment&gt;;<\\/code><\\/pre>\\n<variable-assignment>;\\u53ef\\u4ee5\\u662f\\u524d\\u9762\\u8bb2\\u8fc7\\u7684\\u5404\\u79cd\\u8d4b\\u503c\\u8868\\u8fbe\\u5f0f\\uff0c\\u5982\\u201c=\\u201d\\u3001\\u201c:=\\u201d\\u3001\\u201c+=\\u201d\\u6216\\u662f\\u201c\\uff1f=\\u201d\\u3002\\u7b2c\\u4e8c\\u4e2a\\u8bed\\u6cd5\\u662f\\u9488\\u5bf9\\u4e8emake\\u547d\\u4ee4\\u884c\\u5e26\\u5165\\u7684\\u53d8\\u91cf\\uff0c\\u6216\\u662f\\u7cfb\\u7edf\\u73af\\u5883\\u53d8\\u91cf\\u3002\\n\\n\\u8fd9\\u4e2a\\u7279\\u6027\\u975e\\u5e38\\u7684\\u6709\\u7528\\uff0c\\u5f53\\u6211\\u4eec\\u8bbe\\u7f6e\\u4e86\\u8fd9\\u6837\\u4e00\\u4e2a\\u53d8\\u91cf\\uff0c\\u8fd9\\u4e2a\\u53d8\\u91cf\\u4f1a\\u4f5c\\u7528\\u5230\\u7531\\u8fd9\\u4e2a\\u76ee\\u6807\\u6240\\u5f15\\u53d1\\u7684\\u6240\\u6709\\u7684\\u89c4\\u5219\\u4e2d\\u53bb\\u3002\\u5982\\uff1a\\n\\n    prog : CFLAGS = -g\\n    prog : prog.o foo.o bar.o\\n            $(CC) $(CFLAGS) prog.o foo.o bar.o\\n\\n    prog.o : prog.c\\n            $(CC) $(CFLAGS) prog.c\\n\\n    foo.o : foo.c\\n            $(CC) $(CFLAGS) foo.c\\n\\n    bar.o : bar.c\\n            $(CC) $(CFLAGS) bar.c\\n\\n\\u5728\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c\\u4e0d\\u7ba1\\u5168\\u5c40\\u7684$(CFLAGS)\\u7684\\u503c\\u662f\\u4ec0\\u4e48\\uff0c\\u5728prog\\u76ee\\u6807\\uff0c\\u4ee5\\u53ca\\u5176\\u6240\\u5f15\\u53d1\\u7684\\u6240\\u6709\\u89c4\\u5219\\u4e2d\\uff08prog.o foo.o bar.o\\u7684\\u89c4\\u5219\\uff09\\uff0c$(CFLAGS)\\u7684\\u503c\\u90fd\\u662f\\u201c-g\\u201d\\n\\n\\u4e5d\\u3001\\u6a21\\u5f0f\\u53d8\\u91cf\\n\\n\\u5728GNU\\u7684make\\u4e2d\\uff0c\\u8fd8\\u652f\\u6301\\u6a21\\u5f0f\\u53d8\\u91cf\\uff08Pattern-specific Variable\\uff09\\uff0c\\u901a\\u8fc7\\u4e0a\\u9762\\u7684\\u76ee\\u6807\\u53d8\\u91cf\\u4e2d\\uff0c\\u6211\\u4eec\\u77e5\\u9053\\uff0c\\u53d8\\u91cf\\u53ef\\u4ee5\\u5b9a\\u4e49\\u5728\\u67d0\\u4e2a\\u76ee\\u6807\\u4e0a\\u3002\\u6a21\\u5f0f\\u53d8\\u91cf\\u7684\\u597d\\u5904\\u5c31\\u662f\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u7ed9\\u5b9a\\u4e00\\u79cd\\u201c\\u6a21\\u5f0f\\u201d\\uff0c\\u53ef\\u4ee5\\u628a\\u53d8\\u91cf\\u5b9a\\u4e49\\u5728\\u7b26\\u5408\\u8fd9\\u79cd\\u6a21\\u5f0f\\u7684\\u6240\\u6709\\u76ee\\u6807\\u4e0a\\u3002\\n\\n\\u6211\\u4eec\\u77e5\\u9053\\uff0cmake\\u7684\\u201c\\u6a21\\u5f0f\\u201d\\u4e00\\u822c\\u662f\\u81f3\\u5c11\\u542b\\u6709\\u4e00\\u4e2a\\u201c%\\u201d\\u7684\\uff0c\\u6240\\u4ee5\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4ee5\\u5982\\u4e0b\\u65b9\\u5f0f\\u7ed9\\u6240\\u6709\\u4ee5[.o]\\u7ed3\\u5c3e\\u7684\\u76ee\\u6807\\u5b9a\\u4e49\\u76ee\\u6807\\u53d8\\u91cf\\uff1a\\n\\n    %.o : CFLAGS = -O\\n\\n\\u540c\\u6837\\uff0c\\u6a21\\u5f0f\\u53d8\\u91cf\\u7684\\u8bed\\u6cd5\\u548c\\u201c\\u76ee\\u6807\\u53d8\\u91cf\\u201d\\u4e00\\u6837\\uff1a\\n\\n    <pattern ...>; : <variable-assignment>;\\n\\n    <pattern ...>; : override <variable-assignment>;\\n\\noverride\\u540c\\u6837\\u662f\\u9488\\u5bf9\\u4e8e\\u7cfb\\u7edf\\u73af\\u5883\\u4f20\\u5165\\u7684\\u53d8\\u91cf\\uff0c\\u6216\\u662fmake\\u547d\\u4ee4\\u884c\\u6307\\u5b9a\\u7684\\u53d8\\u91cf\\u3002"}',
                'page_image' => NULL,
                'meta_description' => '在Makefile中的定义的变量，就像是C/C++语言中的宏一样，他代表了一个文本字串，在Makefile中执行的时候其会自动原模原样地展开在所使用的地方',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 65,
                'published_at' => '2020-09-29 11:50:00',
                'created_at' => '2020-09-29 11:51:08',
                'updated_at' => '2022-01-01 12:15:53',
                'deleted_at' => NULL,
            ),
            11 => 
            array (
                'id' => 12,
                'category_id' => 8,
                'collection_id' => 3,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'redismakefile-i1wfm',
                'title' => 'redis下Makefile的理解',
                'subtitle' => '尝试理解redis下的makefile执行细节',
            'content' => '{"raw":"\\u4e3a\\u4ec0\\u4e48\\u8981\\u53bb\\u7406\\u89e3redis\\u7684Makefile\\u6587\\u4ef6\\u6267\\u884c\\u7684\\u6bcf\\u4e00\\u4e2a\\u7ec6\\u8282\\u5462\\uff0c\\u4e00\\u5207\\u7684\\u6e90\\u5934\\u662f\\u4e3a\\u4e86\\u80fd\\u53bb\\u9605\\u8bfb redis \\u7684\\u6e90\\u7801\\uff0c\\u4f46\\u5149\\u662f\\u5982\\u679c\\u7ba1\\u4e2d\\u7aa5\\u8c79\\u5f0f\\u53bb\\u9605\\u8bfb\\u4ee3\\u7801\\u662f\\u4ef6\\u611f\\u89c9\\u4f60\\u7406\\u89e3\\u4e86\\u3001\\u89e3\\u5256\\u4e86 redis\\uff0c\\u53ef\\u80fd\\u4e8b\\u5b9e\\u672a\\u5fc5\\uff0c\\u53ef\\u80fd\\u53ea\\u662f\\u611f\\u89c9\\u4e0a\\u81ea\\u5df1\\u7406\\u89e3\\uff0c\\u800c\\u4e0d\\u662f\\u771f\\u6b63\\u5403\\u900f\\u3002\\u90a3\\u4e48\\uff0c\\u8981\\u5982\\u4f55\\u53bb\\u907f\\u514d\\u8fd9\\u79cd\\u5e7b\\u8c61\\uff0c\\u90a3\\u5c31\\u53ea\\u80fd\\u53bb\\u7406\\u89e3\\u5b83\\u7684\\u9879\\u76ee\\u6784\\u5efa\\u4e0e\\u4e00\\u70b9\\u4e00\\u70b9\\u52a8\\u624b\\u89e3\\u5256\\u5b83\\uff0c\\u628a\\u89e3\\u5256\\u7684\\u96f6\\u90e8\\u4ef6\\u5355\\u72ec\\u5730\\u8ba9\\u5176\\u8dd1\\u8d77\\u6765\\u3002\\u662f\\u7684\\uff0c\\u8fd9\\u662f\\u4e2a\\u6162\\u5de5\\u7ec6\\u6d3b\\uff0c\\u8ba9\\u6211\\u4eec\\u5f00\\u59cb\\u628a\\u8fd9\\u4e2a\\u6d3b\\u4e00\\u70b9\\u4e00\\u70b9\\u53bb\\u78e8\\uff0cgangbadei\\uff01\\n\\n#### \\u7406\\u89e3\\u9876\\u5c42 Makefile \\u6587\\u4ef6\\u7684\\u6267\\u884c\\u610f\\u56fe\\n\\u4ecegithub\\u62c9\\u53d6\\u6700\\u65b0\\u4ee3\\u7801\\uff0c\\u8fdb\\u5165redis\\u76ee\\u5f55\\uff0c\\u6253\\u5f00 Makefile \\u6587\\u4ef6\\uff0c\\u5185\\u5bb9\\u5982\\u4e0b\\uff1a\\n```\\n# Top level makefile, the real shit is at src\\/Makefile\\n# \\u8fd9\\u662f\\u9876\\u5c42\\u7684makefile\\u6587\\u4ef6\\uff0c\\u771f\\u5b9e\\u7684\\u5185\\u5bb9\\u662f\\u5728 src \\u76ee\\u5f55\\u4e0b\\u7684 Makefile \\u6587\\u4ef6\\u5185\\u5bb9\\u4e2d\\n\\ndefault: all\\n\\n.DEFAULT:\\n\\tcd src && $(MAKE) $@\\n\\ninstall:\\n\\tcd src && $(MAKE) $@\\n\\n.PHONY: install\\n```\\n\\u4ee5\\u4e0a\\u5185\\u5bb9\\u662f\\u4ec0\\u4e48\\u610f\\u4e49\\u6216\\u6548\\u679c\\u5462\\uff0c\\u5176\\u5b9e\\u6211\\u4e5f\\u4e0d\\u662f\\u5f88\\u786e\\u5b9a\\uff0c\\u53ea\\u77e5\\u9053 default \\u662f\\u6b64makefile\\u6587\\u4ef6\\u7684\\u6700\\u7ec8\\u76ee\\u6807\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u6765\\u505a\\u70b9\\u52a8\\u624b\\u5b9e\\u9a8c\\u3002\\n```\\ndefault: all\\n\\t\\t\\n.DEFAULT:\\n\\t@echo \\"execute default\\" $@\\n\\t\\ninstall:\\n\\t@echo \\"execute install\\"\\n\\t\\n.PHONY: install\\n```\\n\\u4ee5\\u4e0a\\u5c31\\u662f\\u6d4b\\u8bd5\\u7528\\u7684makefile\\u6587\\u4ef6\\u5185\\u5bb9\\u3002\\u6211\\u4eec\\u8d77\\u5148\\u6267\\u884c\\uff1a`make`\\uff0c\\u7ed3\\u679c\\u5982\\u4e0b:\\n```\\nexecute default all\\n```\\n\\u63a5\\u7740\\u6d4b\\u8bd5\\u6267\\u884c `make install`\\uff0c\\u7ed3\\u679c\\u5982\\u4e0b\\uff1a\\n```\\nexecute install\\n```\\n\\u64cd\\u4f5c\\u5b8c\\u4e0a\\u9762\\u7684\\u6d4b\\u8bd5\\uff0c\\u662f\\u4e0d\\u662f\\u5bf9 redis \\u7684\\u9876\\u5c42 makefile \\u8981\\u6267\\u884c\\u4ec0\\u4e48\\u6709\\u90a3\\u4e48\\u4e00\\u4e1d\\u660e\\u767d\\u4e86\\u3002\\u4e0b\\u9762\\u8bb2\\u89e3\\u4e0b\\u5b83\\u7684\\u89c4\\u5219\\u6cd5\\u3002\\n\\n\\u7531\\u4e8e all \\u662f\\u4e00\\u4e2a\\u524d\\u63d0\\u6761\\u4ef6\\uff0c\\u4f46\\u662f makefile \\u4e2d\\u6ca1\\u6709\\u4e00\\u4e2a\\u540d\\u5b57\\u4e3a all \\u7684\\u76ee\\u7684\\uff0c\\u6240\\u4ee5\\u7b26\\u5408 .DEFAULT \\u76ee\\u7684\\u7684\\u6267\\u884c\\u6761\\u4ef6\\u3002\\u6545\\u6267\\u884c`make`\\u51fa\\u73b0`execute default all`\\u7ed3\\u679c\\u3002\\u5176\\u4e2d\\uff0c$@ \\u88ab\\u66ff\\u6362\\u6210\\u76ee\\u6807\\u672c\\u8eab\\uff08all\\uff09\\u3002\\n\\n.PHONY \\u5192\\u53f7\\u540e\\u9762\\u63a5\\u7684\\u662f\\u4e00\\u4e2a\\u4f2a\\u76ee\\u6807\\uff0c\\u5b83\\u662f\\u4e0d\\u4f1a\\u5728\\u6267\\u884c`make`\\u65f6\\u6267\\u884c\\u7684\\uff0c\\u6240\\u4ee5\\u4f60\\u53ea\\u770b\\u5230\\u8f93\\u51fa`execute default all`\\u3002\\u90a3\\u662f\\u600e\\u4e48\\u89e6\\u53d1\\u7684\\u5462\\uff0c\\u8fd9\\u4e2a\\u901a\\u8fc7\\u4e0a\\u9762\\u7684\\u52a8\\u624b\\u5b9e\\u9a8c\\uff0c\\u4f60\\u65e9\\u660e\\u767d\\u4e86\\u5b83\\u8981\\u7531 `make` \\u540e\\u52a0\\u7684\\u547d\\u4ee4\\u53c2\\u6570(\\u6b64\\u4f8b\\u662f\\uff1ainstall)\\u6307\\u660e\\u6267\\u884c\\u3002\\n\\n\\u5728\\u7406\\u89e3\\u4e86make\\u7684\\u6267\\u884c\\u65b9\\u5f0f\\u53ca\\u53ef\\u80fd\\u7684\\u6548\\u679c\\uff0c\\u6211\\u4eec\\u63a5\\u7740\\u770b\\u770bredis\\u771f\\u5b9e\\u6267\\u884c\\u5e72\\u4e86\\u4ec0\\u4e48\\u3002\\u4ece\\u5185\\u5bb9\\u6765\\u770b\\u53ca\\u6211\\u4eec\\u7684\\u4ee5\\u4e0a\\u5b9e\\u9a8c\\u53ef\\u77e5\\uff0c`make` \\u4e0e `make install`\\u7684\\u6267\\u884c\\u6700\\u7ec8\\u90fd\\u662f\\u6267\\u884c`cd src && $(MAKE) $@`\\u3002\\u8fd9\\u6bb5\\u8bed\\u6cd5\\u7684\\u8bed\\u4e49\\u6bd4\\u8f83\\u76f4\\u767d -- \\u5373\\u8fdb\\u5165 redis \\u76ee\\u5f55\\u91cc\\u7684 src \\u76ee\\u5f55\\uff0c`&&` \\u8868\\u793a\\u63a5\\u7740\\u6267\\u884c\\u540e\\u9762\\u7684\\u547d\\u4ee4\\uff0c\\u5373 `make all`\\u3002\\u662f\\u8fd9\\u6837\\u7684\\u547d\\u4ee4\\u5185\\u5bb9\\u5417\\uff1f\\u4e0d\\u4fe1\\uff0c\\u6211\\u4eec\\u518d\\u4ee5\\u5c0f\\u5b9e\\u9a8c\\u6765\\u8fdb\\u884c\\u9a8c\\u8bc1\\u3002\\n```\\nexec:\\n\\t@echo $(MAKE)\\n```\\n\\u5728\\u4e00\\u4e2a\\u7a7a\\u76ee\\u5f55\\u4e0b\\uff0c\\u521b\\u5efa\\u4e00\\u4e2amakefile\\u6587\\u4ef6\\uff0c\\u5185\\u5bb9\\u5982\\u4e0a\\uff0c\\u6267\\u884c `make` \\u540e\\u4f1a\\u8f93\\u51fa\\uff1a\\n```\\nmake\\n```\\n\\u4ece\\u4ee5\\u4e0a\\u6d4b\\u8bd5\\uff0c\\u53ef\\u5f97\\u77e5 `MAKE`\\u53d8\\u91cf\\u7684\\u503c\\u662f `make`\\u3002\\n\\n\\u7efc\\u4e0a\\uff0c\\u6211\\u4eec\\u5f97\\u77e5\\u9876\\u5c42 Makefile \\u6587\\u4ef6\\u7684\\u6267\\u884c\\u610f\\u56fe\\u662f\\u8fdb\\u5165 src \\uff0c\\u5728 src \\u76ee\\u5f55\\u4e0b\\u627e\\u5230 Makefile \\u6587\\u4ef6\\uff0c\\u7136\\u540e\\u6267\\u884c `make all`\\uff0c\\u5373\\u5728src\\u91cc Makefile \\u6587\\u4ef6\\u5185\\u5bb9\\u627e\\u76ee\\u6807 `all` \\u3002\\n\\n#### \\u8be6\\u89e3 redis\\/src \\u76ee\\u5f55\\u4e2d\\u7684Makefile\\u6587\\u4ef6\\u5185\\u5bb9\\nredis\\/src \\u76ee\\u5f55\\u91cc\\u7684 Makefile \\u6587\\u4ef6\\u5185\\u5bb9\\u6709\\u4e2a4\\u767e\\u591a\\u884c\\uff0c\\u6211\\u4eec\\u6309\\u5185\\u5bb9\\u4ece\\u4e0a\\u5230\\u4e0b\\u8fdb\\u884c\\u89e3\\u91ca\\u3002\\u575a\\u6301\\u4f4f\\uff0c\\u8fd9\\u53e5\\u60f3\\u5bf9\\u4f60\\u8bf4\\uff0c\\u540c\\u65f6\\u4e5f\\u8bf4\\u7ed9\\u81ea\\u5df1\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u6f2b\\u957f\\u4e14\\u4e0d\\u8f7b\\u677e\\u7684\\u8fc7\\u7a0b\\uff0c\\u8f7b\\u677e\\u4e86\\u53ef\\u80fd\\u662f\\u6211\\u5728\\u5077\\u5de5\\u51cf\\u6599\\u6216\\u8005\\u4e0d\\u77e5\\u6240\\u4e91\\u3002\\n\\n\\u7531\\u9876\\u5c42 Makefile \\u53ef\\u77e5\\uff0c\\u6267\\u884c\\u76ee\\u6807\\u662f all\\uff0c\\u4f46\\u5728\\u6267\\u884c\\u5230\\u76ee\\u6807 all \\u4e4b\\u524d\\uff0c\\u6709\\u597d\\u591a\\u524d\\u671f\\u5de5\\u4f5c\\u8981\\u505a\\u3002\\n\\n**\\u5185\\u5bb9\\u5f00\\u59cb\\uff1a**\\n```\\n# Makefile \\u5185\\u5bb9 -- 1\\nrelease_hdr := $(shell sh -c \'.\\/mkreleasehdr.sh\')\\n```\\n\\u7b2c\\u4e00\\u53e5\\uff0c\\u5c55\\u793a\\u4e86\\u5982\\u4f55\\u5728 makefile \\u4e2d\\u4f7f\\u7528 shell \\u547d\\u4ee4\\uff0c\\u7528\\u6cd5\\u53ca\\u6ce8\\u610f\\u4e8b\\u9879\\u8bf7\\u53c2\\u8003** [shell \\u4e0e makefile](http:\\/\\/shishao.320.io:8090\\/shell-makefile-3c1e9)**\\u3002\\u6b64\\u53e5\\u8868\\u793a\\u6267\\u884c \\u6587\\u4ef6\\u540d\\u4e3a mkreleasehdr.sh \\u7684 shell \\u547d\\u4ee4\\u6587\\u4ef6\\u3002\\n\\nmkreleasehdr.sh\\u5c55\\u5f00\\u5185\\u5bb9\\uff08\\u8fd9\\u662f\\u4e00\\u4e2a shell bash \\u547d\\u4ee4\\u6587\\u4ef6\\uff09\\n```\\n#!\\/bin\\/sh\\nGIT_SHA1=`(git show-ref --head --hash=8 2> \\/dev\\/null || echo 00000000) | head -n1`\\nGIT_DIRTY=`git diff --no-ext-diff 2> \\/dev\\/null | wc -l`\\nBUILD_ID=`uname -n`\\"-\\"`date +%s`\\nif [ -n \\"$SOURCE_DATE_EPOCH\\" ]; then\\n  BUILD_ID=$(date -u -d \\"@$SOURCE_DATE_EPOCH\\" +%s 2>\\/dev\\/null || date -u -r \\"$SOURCE_DATE_EPOCH\\" +%s 2>\\/dev\\/null || date -u +%s)\\nfi\\ntest -f release.h || touch release.h\\n(cat release.h | grep SHA1 | grep $GIT_SHA1) && \\\\\\n(cat release.h | grep DIRTY | grep $GIT_DIRTY) && exit 0 # Already up-to-date\\necho \\"#define REDIS_GIT_SHA1 \\\\\\"$GIT_SHA1\\\\\\"\\" > release.h\\necho \\"#define REDIS_GIT_DIRTY \\\\\\"$GIT_DIRTY\\\\\\"\\" >> release.h\\necho \\"#define REDIS_BUILD_ID \\\\\\"$BUILD_ID\\\\\\"\\" >> release.h\\ntouch release.c # Force recompile of release.c\\n```\\n\\n\\u6b64\\u5904\\uff0c\\u6211\\u4eec\\u6682\\u65f6\\u505a\\u6d4b\\u8bd5\\uff0c\\u5373\\u628a\\u8fd9\\u91cc\\u7684\\u5185\\u5bb9\\u62ff\\u53bb\\u6d4b\\u8bd5\\u3002\\u4eb2\\u81ea\\u5c1d\\u8bd5\\u6d4b\\u8bd5\\u4e86\\u4e0b\\uff0c\\u8fd9\\u6b21\\u4e0d\\u9700\\u8981\\u521b\\u5efa\\u65b0\\u6587\\u4ef6\\uff0c\\u53ea\\u9700\\u8981\\u5728 redis \\u4e0b\\u7684 src \\u76ee\\u5f55\\u6267\\u884c `sh mkreleasehdr.sh`\\uff0c\\u4f1a\\u751f\\u6210 release.h \\u6587\\u4ef6\\u3002\\u6211\\u7684\\u6d4b\\u8bd5\\u7ed3\\u679c\\uff0crelease.h \\u5185\\u5bb9\\u5982\\u4e0b\\uff1a\\n```\\n#define REDIS_GIT_SHA1 \\"a295770e\\"\\n#define REDIS_GIT_DIRTY \\"0\\"\\n#define REDIS_BUILD_ID \\"slave1-1601390379\\"\\n```\\n\\u8fd9\\u8fb9\\u7684`shell`\\u547d\\u4ee4\\u6bd4\\u8f83\\u591a\\uff0c\\u4f46\\u610f\\u601d\\u662f\\u6bd4\\u8f83\\u76f4\\u767d\\u7684\\uff0c\\u53ef\\u4ee5\\u52a8\\u624b\\u67e5\\u8be2\\u81ea\\u5df1\\u4e0d\\u660e\\u767d\\u7684\\u5730\\u65b9\\uff0c\\u6240\\u4ee5\\u5c31\\u4e00\\u7b14\\u5e26\\u8fc7\\uff0c\\u6211\\u4eec\\u89e3\\u8bfb\\u63a5\\u4e0b\\u6765\\u7684\\u547d\\u4ee4\\u3002\\n\\n```\\n# Makefile \\u5185\\u5bb9 -- 2\\n# \\u53d6\\u64cd\\u4f5c\\u7cfb\\u7edf\\u4e3b\\u673a\\u540d\\u79f0\\nuname_S := $(shell sh -c \'uname -s 2>\\/dev\\/null || echo not\')\\n# \\u53d6\\u670d\\u52a1\\u5668\\u786c\\u4ef6\\u67b6\\u6784\\nuname_M := $(shell sh -c \'uname -m 2>\\/dev\\/null || echo not\')\\n# \\u4f18\\u5316\\u9009\\u9879\\n# -O\\uff08\\u5927\\u5199\\u7684\\u5b57\\u6bcdO\\uff09\\uff0c\\u7f16\\u8bd1\\u5668\\u5bf9\\u4ee3\\u7801\\u8fdb\\u884c\\u81ea\\u52a8\\u4f18\\u5316\\u7f16\\u8bd1\\uff0c\\u8f93\\u51fa\\u6548\\u7387\\u66f4\\u9ad8\\u7684\\u53ef\\u6267\\u884c\\u6587\\u4ef6\\u3002\\n# -O \\u540e\\u9762\\u8fd8\\u53ef\\u4ee5\\u8ddf\\u4e0a\\u6570\\u5b57\\u6307\\u5b9a\\u4f18\\u5316\\u7ea7\\u522b\\n# \\u6570\\u5b57\\u8d8a\\u5927\\uff0c\\u8d8a\\u52a0\\u4f18\\u5316\\u3002\\u4f46\\u662f\\u901a\\u5e38\\u60c5\\u51b5\\u4e0b\\uff0c\\u81ea\\u52a8\\u7684\\u4e1c\\u897f\\u90fd\\u4e0d\\u662f\\u592a\\u806a\\u660e\\uff0c\\n# \\u592a\\u5927\\u7684\\u4f18\\u5316\\u7ea7\\u522b\\u53ef\\u80fd\\u4f1a\\u4f7f\\u751f\\u6210\\u7684\\u6587\\u4ef6\\u4ea7\\u751f\\u4e00\\u7cfb\\u5217\\u7684bug\\nOPTIMIZATION?=-O2\\n# \\u4f9d\\u8d56\\u76ee\\u6807\\nDEPENDENCY_TARGETS=hiredis linenoise lua hdr_histogram\\n# \\u672a\\u77e5\\nNODEPS:=clean distclean\\n```\\n\\u4e0a\\u9762\\u58f0\\u660e\\u4e865\\u4e2amake\\u53d8\\u91cf\\uff0c\\u4f7f\\u7528\\u4e86\\u4e24\\u79cd\\u58f0\\u660e\\u65b9\\u5f0f\\uff0c\\u987a\\u4fbf\\u6211\\u4eec\\u89e3\\u8bf4\\u4e0b\\u58f0\\u660e\\u65b9\\u5f0f\\uff1a\\n1.  `?= ` \\u6761\\u4ef6\\u8d4b\\u503c(conditional variable assignment)\\uff0c\\u5982\\u679c\\u53d8\\u91cf\\u5df2\\u7ecf\\u8d4b\\u503c\\uff0c\\u5219\\u4e0d\\u8981\\u91cd\\u65b0\\u8d4b\\u503c\\uff1b\\n1. `:=` \\u7acb\\u5373\\u8d4b\\u503c(immediately assignment)\\uff0c\\u53d8\\u91cf\\u53d6\\u503c\\u7acb\\u5373\\u5c55\\u5f00\\uff1b\\n1. `+=` \\u6dfb\\u52a0\\u8d4b\\u503c(appendly assignment)\\uff0c\\u6dfb\\u52a0\\u989d\\u5916\\u5185\\u5bb9\\u5728\\u539f\\u6709\\u5185\\u5bb9\\u4e4b\\u540e\\uff1b\\n1. `=` \\u9012\\u5f52\\u5c55\\u5f00\\u8d4b\\u503c\\uff08recursively expanded assignment)\\uff0c\\u8be5\\u53d8\\u91cf\\u5728\\u4f7f\\u7528\\u7684\\u65f6\\u5019\\u624d\\u5bf9\\u8868\\u8fbe\\u5f0f\\u8fdb\\u884c\\u5c55\\u5f00\\uff1b\\n\\n```\\n# Makefile \\u5185\\u5bb9 -- 3\\n# Default settings\\n# -pedantic \\u4fdd\\u8bc1\\u4ee3\\u7801\\u89c4\\u8303\\u6ee1\\u8db3ISO C\\u548cISO C++\\u6807\\u51c6\\nSTD=-pedantic -DREDIS_STATIC=\'\'\\nifneq (,$(findstring clang,$(CC)))\\nifneq (,$(findstring FreeBSD,$(uname_S)))\\n  STD+=-Wno-c11-extensions\\nendif\\nendif\\n# -Wall\\u8868\\u793a\\u8f93\\u51fa\\u6240\\u6709\\u7f16\\u8bd1\\u8b66\\u544a\\u4fe1\\u606f\\n# Wno-missing-field-initializers \\u4e0d\\u8f93\\u51fa missing- \\u7684\\u8b66\\u544a\\u4fe1\\u606f\\n# -W\\uff0c\\u5728\\u7f16\\u8bd1\\u4e2d\\u5f00\\u542f\\u4e00\\u4e9b\\u989d\\u5916\\u7684\\u8b66\\u544a\\uff08warning\\uff09\\u4fe1\\u606f\\u3002-Wall\\uff0c\\u5c06\\u6240\\u6709\\u7684\\u8b66\\u544a\\u4fe1\\u606f\\u5168\\u5f00\\u3002\\nWARN=-Wall -W -Wno-missing-field-initializers\\nOPT=$(OPTIMIZATION)\\n```\\n\\u8bb2\\u89e3\\u4e0b `$(findstring find, in) ` \\u51fd\\u6570\\uff0c\\u6307\\u5728 in \\u5b57\\u7b26\\u4e32\\u4e2d\\u67e5\\u627e find \\u5b57\\u7b26\\u4e32\\uff0c\\u5982\\u679c\\u627e\\u5230\\u8fd4\\u56de find\\uff0c\\u672a\\u627e\\u5230\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32\\u3002\\u5728\\u6211\\u7684linux\\u673a\\u5668\\u4e0b\\uff0c\\u662f\\u6ca1\\u6709\\u627e\\u5230 clang \\u7684\\uff0c\\u6545 STD \\u662f\\u521d\\u59cb\\u53d8\\u91cf\\u3002\\n\\n```\\n# Makefile \\u5185\\u5bb9 -- 4\\n# Detect if the compiler supports C11 _Atomic\\nC11_ATOMIC := $(shell sh -c \'echo \\"\\\\#include <stdatomic.h>\\" > foo.c; \\\\\\n\\t$(CC) -std=c11 -c foo.c -o foo.o > \\/dev\\/null 2>&1; \\\\\\n\\tif [ -f foo.o ]; then echo \\"yes\\"; rm foo.o; fi; rm foo.c\')\\nifeq ($(C11_ATOMIC),yes)\\n\\tSTD+=-std=c11\\nelse\\n\\tSTD+=-std=c99\\nendif\\n\\n# \\u9ed8\\u8ba4\\u76ee\\u5f55\\uff08\\u5f53\\u6307\\u5b9a PREFIX \\u65f6\\uff0c\\u4f8b `make PREFIX=\\"\\/myhome\\/redis\\"`\\uff0c\\u90a3\\u4e48 PREFIX \\n# \\u5c06\\u4f1a\\u662f\\u88ab\\u6307\\u5b9a\\u7684\\u503c\\uff09\\nPREFIX?=\\/usr\\/local\\n# \\u5b89\\u88c5\\u76ee\\u5f55\\nINSTALL_BIN=$(PREFIX)\\/bin\\nINSTALL=install\\nPKG_CONFIG?=pkg-config\\n\\n# Default allocator defaults to Jemalloc if it\'s not an ARM\\nMALLOC=libc\\nifneq ($(uname_M),armv6l)\\nifneq ($(uname_M),armv7l)\\nifeq ($(uname_S),Linux)\\n\\tMALLOC=jemalloc\\nendif\\nendif\\nendif\\n\\n# \\u7528\\u610f\\u672a\\u77e5\\n# To get ARM stack traces if Redis crashes we need a special C flag.\\nifneq (,$(filter aarch64 armv,$(uname_M)))\\n        CFLAGS+=-funwind-tables\\nelse\\nifneq (,$(findstring armv,$(uname_M)))\\n        CFLAGS+=-funwind-tables\\nendif\\nendif\\n\\n# Backwards compatibility for selecting an allocator\\nifeq ($(USE_TCMALLOC),yes)\\n\\tMALLOC=tcmalloc\\nendif\\n\\nifeq ($(USE_TCMALLOC_MINIMAL),yes)\\n\\tMALLOC=tcmalloc_minimal\\nendif\\n\\nifeq ($(USE_JEMALLOC),yes)\\n\\tMALLOC=jemalloc\\nendif\\n\\nifeq ($(USE_JEMALLOC),no)\\n\\tMALLOC=libc\\nendif\\n\\n# Override default settings if possible\\n-include .make-settings\\n\\nFINAL_CFLAGS=$(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS) $(REDIS_CFLAGS)\\nFINAL_LDFLAGS=$(LDFLAGS) $(REDIS_LDFLAGS) $(DEBUG)\\nFINAL_LIBS=-lm\\nDEBUG=-g -ggdb\\n\\n# Linux ARM needs -latomic at linking time\\nifneq (,$(filter aarch64 armv,$(uname_M)))\\n        FINAL_LIBS+=-latomic\\nelse\\nifneq (,$(findstring armv,$(uname_M)))\\n        FINAL_LIBS+=-latomic\\nendif\\nendif\\n\\nifeq ($(uname_S),SunOS)\\n\\t# SunOS\\n        ifneq ($(@@),32bit)\\n\\t\\tCFLAGS+= -m64\\n\\t\\tLDFLAGS+= -m64\\n\\tendif\\n\\tDEBUG=-g\\n\\tDEBUG_FLAGS=-g\\n\\texport CFLAGS LDFLAGS DEBUG DEBUG_FLAGS\\n\\tINSTALL=cp -pf\\n\\tFINAL_CFLAGS+= -D__EXTENSIONS__ -D_XPG6\\n\\tFINAL_LIBS+= -ldl -lnsl -lsocket -lresolv -lpthread -lrt\\nelse\\nifeq ($(uname_S),Darwin)\\n\\t# Darwin\\n\\tFINAL_LIBS+= -ldl\\n\\tOPENSSL_CFLAGS=-I\\/usr\\/local\\/opt\\/openssl\\/include\\n\\tOPENSSL_LDFLAGS=-L\\/usr\\/local\\/opt\\/openssl\\/lib\\nelse\\nifeq ($(uname_S),AIX)\\n        # AIX\\n        FINAL_LDFLAGS+= -Wl,-bexpall\\n        FINAL_LIBS+=-ldl -pthread -lcrypt -lbsd\\nelse\\nifeq ($(uname_S),OpenBSD)\\n\\t# OpenBSD\\n\\tFINAL_LIBS+= -lpthread\\n\\tifeq ($(USE_BACKTRACE),yes)\\n\\t    FINAL_CFLAGS+= -DUSE_BACKTRACE -I\\/usr\\/local\\/include\\n\\t    FINAL_LDFLAGS+= -L\\/usr\\/local\\/lib\\n\\t    FINAL_LIBS+= -lexecinfo\\n    \\tendif\\n\\nelse\\nifeq ($(uname_S),NetBSD)\\n\\t# NetBSD\\n\\tFINAL_LIBS+= -lpthread\\n\\tifeq ($(USE_BACKTRACE),yes)\\n\\t    FINAL_CFLAGS+= -DUSE_BACKTRACE -I\\/usr\\/pkg\\/include\\n\\t    FINAL_LDFLAGS+= -L\\/usr\\/pkg\\/lib\\n\\t    FINAL_LIBS+= -lexecinfo\\n    \\tendif\\nelse\\nifeq ($(uname_S),FreeBSD)\\n\\t# FreeBSD\\n\\tFINAL_LIBS+= -lpthread -lexecinfo\\nelse\\nifeq ($(uname_S),DragonFly)\\n\\t# DragonFly\\n\\tFINAL_LIBS+= -lpthread -lexecinfo\\nelse\\nifeq ($(uname_S),OpenBSD)\\n\\t# OpenBSD\\n\\tFINAL_LIBS+= -lpthread -lexecinfo\\nelse\\nifeq ($(uname_S),NetBSD)\\n\\t# NetBSD\\n\\tFINAL_LIBS+= -lpthread -lexecinfo\\nelse\\nifeq ($(uname_S),Haiku)\\n\\t# Haiku\\n\\tFINAL_CFLAGS+= -DBSD_SOURCE\\n\\tFINAL_LDFLAGS+= -lbsd -lnetwork\\n\\tFINAL_LIBS+= -lpthread\\nelse\\n\\t# All the other OSes (notably Linux)\\n\\tFINAL_LDFLAGS+= -rdynamic\\n\\tFINAL_LIBS+=-ldl -pthread -lrt\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif\\n```\\n\\n```\\n# Include paths to dependencies\\nFINAL_CFLAGS+= -I..\\/deps\\/hiredis -I..\\/deps\\/linenoise \\\\\\n\\n-I..\\/deps\\/lua\\/src -I..\\/deps\\/hdr_histogram\\n\\n# Determine systemd support and\\/or build preference (defaulting to auto-detection)\\nBUILD_WITH_SYSTEMD=no\\n# If \'USE_SYSTEMD\' in the environment is neither \\"no\\" nor \\"yes\\", try to\\n# auto-detect libsystemd\'s presence and link accordingly.\\nifneq ($(USE_SYSTEMD),no)\\n\\tLIBSYSTEMD_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libsystemd && echo $$?)\\n# If libsystemd cannot be detected, continue building without support for it\\n# (unless a later check tells us otherwise)\\nifeq ($(LIBSYSTEMD_PKGCONFIG),0)\\n\\tBUILD_WITH_SYSTEMD=yes\\nendif\\nendif\\nifeq ($(USE_SYSTEMD),yes)\\nifneq ($(LIBSYSTEMD_PKGCONFIG),0)\\n$(error USE_SYSTEMD is set to \\"$(USE_SYSTEMD)\\", but $(PKG_CONFIG) cannot find libsystemd)\\nendif\\n# Force building with libsystemd\\n\\tBUILD_WITH_SYSTEMD=yes\\nendif\\nifeq ($(BUILD_WITH_SYSTEMD),yes)\\n\\tFINAL_LIBS+=$(shell $(PKG_CONFIG) --libs libsystemd)\\n\\tFINAL_CFLAGS+= -DHAVE_LIBSYSTEMD\\nendif\\n\\nifeq ($(MALLOC),tcmalloc)\\n\\tFINAL_CFLAGS+= -DUSE_TCMALLOC\\n\\tFINAL_LIBS+= -ltcmalloc\\nendif\\n\\nifeq ($(MALLOC),tcmalloc_minimal)\\n\\tFINAL_CFLAGS+= -DUSE_TCMALLOC\\n\\tFINAL_LIBS+= -ltcmalloc_minimal\\nendif\\n\\nifeq ($(MALLOC),jemalloc)\\n\\tDEPENDENCY_TARGETS+= jemalloc\\n\\tFINAL_CFLAGS+= -DUSE_JEMALLOC -I..\\/deps\\/jemalloc\\/include\\n\\tFINAL_LIBS := ..\\/deps\\/jemalloc\\/lib\\/libjemalloc.a $(FINAL_LIBS)\\nendif\\n\\nifeq ($(BUILD_TLS),yes)\\n\\tFINAL_CFLAGS+=-DUSE_OPENSSL $(OPENSSL_CFLAGS)\\n\\tFINAL_LDFLAGS+=$(OPENSSL_LDFLAGS)\\n\\tLIBSSL_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libssl && echo $$?)\\nifeq ($(LIBSSL_PKGCONFIG),0)\\n\\tLIBSSL_LIBS=$(shell $(PKG_CONFIG) --libs libssl)\\nelse\\n\\tLIBSSL_LIBS=-lssl\\nendif\\n\\tLIBCRYPTO_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libcrypto && echo $$?)\\nifeq ($(LIBCRYPTO_PKGCONFIG),0)\\n\\tLIBCRYPTO_LIBS=$(shell $(PKG_CONFIG) --libs libcrypto)\\nelse\\n\\tLIBCRYPTO_LIBS=-lcrypto\\nendif\\n\\tFINAL_LIBS += ..\\/deps\\/hiredis\\/libhiredis_ssl.a $(LIBSSL_LIBS) $(LIBCRYPTO_LIBS)\\nendif\\n\\nREDIS_CC=$(QUIET_CC)$(CC) $(FINAL_CFLAGS)\\nREDIS_LD=$(QUIET_LINK)$(CC) $(FINAL_LDFLAGS)\\nREDIS_INSTALL=$(QUIET_INSTALL)$(INSTALL)\\n\\nCCCOLOR=\\"\\\\033[34m\\"\\nLINKCOLOR=\\"\\\\033[34;1m\\"\\nSRCCOLOR=\\"\\\\033[33m\\"\\nBINCOLOR=\\"\\\\033[37;1m\\"\\nMAKECOLOR=\\"\\\\033[32;1m\\"\\nENDCOLOR=\\"\\\\033[0m\\"\\n\\nifndef V\\nQUIET_CC = @printf \'    %b %b\\\\n\' $(CCCOLOR)CC$(ENDCOLOR) $(SRCCOLOR)$@$(ENDCOLOR) 1>&2;\\nQUIET_LINK = @printf \'    %b %b\\\\n\' $(LINKCOLOR)LINK$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) \\\\ \\n1>&2;\\nQUIET_INSTALL = @printf \'    %b %b\\\\n\' $(LINKCOLOR)INSTALL$(ENDCOLOR) \\\\\\n$(BINCOLOR)$@$(ENDCOLOR) 1>&2;\\nendif\\n\\nREDIS_SERVER_NAME=redis-server$(PROG_SUFFIX)\\nREDIS_SENTINEL_NAME=redis-sentinel$(PROG_SUFFIX)\\nREDIS_SERVER_OBJ=adlist.o quicklist.o ae.o anet.o dict.o server.o sds.o zmalloc.o \\\\\\nlzf_c.o lzf_d.o pqsort.o zipmap.o sha1.o ziplist.o release.o networking.o util.o object.o db.o \\\\\\nreplication.o rdb.o t_string.o t_list.o t_set.o t_zset.o t_hash.o config.o aof.o pubsub.o \\\\\\nmulti.o debug.o sort.o intset.o syncio.o cluster.o crc16.o endianconv.o slowlog.o \\\\\\nscripting.o bio.o rio.o rand.o memtest.o crcspeed.o crc64.o bitops.o sentinel.o notify.o \\\\\\nsetproctitle.o blocked.o hyperloglog.o latency.o sparkline.o redis-check-rdb.o \\\\\\nredis-check-aof.o geo.o lazyfree.o module.o evict.o expire.o geohash.o \\\\\\ngeohash_helper.o childinfo.o defrag.o siphash.o rax.o t_stream.o listpack.o \\\\\\nlocaltime.o lolwut.o lolwut5.o lolwut6.o acl.o gopher.o tracking.o connection.o \\\\\\ntls.o sha256.o timeout.o setcpuaffinity.o monotonic.o\\nREDIS_CLI_NAME=redis-cli$(PROG_SUFFIX)\\nREDIS_CLI_OBJ=anet.o adlist.o dict.o redis-cli.o zmalloc.o release.o ae.o \\\\\\ncrcspeed.o crc64.o siphash.o crc16.o monotonic.o\\nREDIS_BENCHMARK_NAME=redis-benchmark$(PROG_SUFFIX)\\nREDIS_BENCHMARK_OBJ=ae.o anet.o redis-benchmark.o adlist.o dict.o \\\\\\nzmalloc.o siphash.o monotonic.o\\nREDIS_CHECK_RDB_NAME=redis-check-rdb$(PROG_SUFFIX)\\nREDIS_CHECK_AOF_NAME=redis-check-aof$(PROG_SUFFIX)\\n\\nall: $(REDIS_SERVER_NAME) $(REDIS_SENTINEL_NAME) $(REDIS_CLI_NAME) $(REDIS_BENCHMARK_NAME) $(REDIS_CHECK_RDB_NAME) $(REDIS_CHECK_AOF_NAME)\\n\\t@echo \\"\\"\\n\\t@echo \\"Hint: It\'s a good idea to run \'make test\' ;)\\"\\n\\t@echo \\"\\"\\n\\nMakefile.dep:\\n\\t-$(REDIS_CC) -MM *.c > Makefile.dep 2> \\/dev\\/null || true\\n\\nifeq (0, $(words $(findstring $(MAKECMDGOALS), $(NODEPS))))\\n-include Makefile.dep\\nendif\\n\\n.PHONY: all\\n\\npersist-settings: distclean\\n\\techo STD=$(STD) >> .make-settings\\n\\techo WARN=$(WARN) >> .make-settings\\n\\techo OPT=$(OPT) >> .make-settings\\n\\techo MALLOC=$(MALLOC) >> .make-settings\\n\\techo BUILD_TLS=$(BUILD_TLS) >> .make-settings\\n\\techo USE_SYSTEMD=$(USE_SYSTEMD) >> .make-settings\\n\\techo CFLAGS=$(CFLAGS) >> .make-settings\\n\\techo LDFLAGS=$(LDFLAGS) >> .make-settings\\n\\techo REDIS_CFLAGS=$(REDIS_CFLAGS) >> .make-settings\\n\\techo REDIS_LDFLAGS=$(REDIS_LDFLAGS) >> .make-settings\\n\\techo PREV_FINAL_CFLAGS=$(FINAL_CFLAGS) >> .make-settings\\n\\techo PREV_FINAL_LDFLAGS=$(FINAL_LDFLAGS) >> .make-settings\\n\\t-(cd ..\\/deps && $(MAKE) $(DEPENDENCY_TARGETS))\\n\\n.PHONY: persist-settings\\n\\n# Prerequisites target\\n.make-prerequisites:\\n\\t@touch $@\\n\\n# Clean everything, persist settings and build dependencies if anything changed\\nifneq ($(strip $(PREV_FINAL_CFLAGS)), $(strip $(FINAL_CFLAGS)))\\n.make-prerequisites: persist-settings\\nendif\\n\\nifneq ($(strip $(PREV_FINAL_LDFLAGS)), $(strip $(FINAL_LDFLAGS)))\\n.make-prerequisites: persist-settings\\nendif\\n\\n# redis-server\\n$(REDIS_SERVER_NAME): $(REDIS_SERVER_OBJ)\\n\\t$(REDIS_LD) -o $@ $^ ..\\/deps\\/hiredis\\/libhiredis.a ..\\/deps\\/lua\\/src\\/liblua.a $(FINAL_LIBS)\\n\\n# redis-sentinel\\n$(REDIS_SENTINEL_NAME): $(REDIS_SERVER_NAME)\\n\\t$(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(REDIS_SENTINEL_NAME)\\n\\n# redis-check-rdb\\n$(REDIS_CHECK_RDB_NAME): $(REDIS_SERVER_NAME)\\n\\t$(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(REDIS_CHECK_RDB_NAME)\\n\\n# redis-check-aof\\n$(REDIS_CHECK_AOF_NAME): $(REDIS_SERVER_NAME)\\n\\t$(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(REDIS_CHECK_AOF_NAME)\\n\\n# redis-cli\\n$(REDIS_CLI_NAME): $(REDIS_CLI_OBJ)\\n\\t$(REDIS_LD) -o $@ $^ ..\\/deps\\/hiredis\\/libhiredis.a ..\\/deps\\/linenoise\\/linenoise.o $(FINAL_LIBS)\\n\\n# redis-benchmark\\n$(REDIS_BENCHMARK_NAME): $(REDIS_BENCHMARK_OBJ)\\n\\t$(REDIS_LD) -o $@ $^ ..\\/deps\\/hiredis\\/libhiredis.a ..\\/deps\\/hdr_histogram\\/hdr_histogram.o $(FINAL_LIBS)\\n\\ndict-benchmark: dict.c zmalloc.c sds.c siphash.c\\n\\t$(REDIS_CC) $(FINAL_CFLAGS) $^ -D DICT_BENCHMARK_MAIN -o $@ $(FINAL_LIBS)\\n\\nDEP = $(REDIS_SERVER_OBJ:%.o=%.d) $(REDIS_CLI_OBJ:%.o=%.d) $(REDIS_BENCHMARK_OBJ:%.o=%.d)\\n-include $(DEP)\\n\\n# Because the jemalloc.h header is generated as a part of the jemalloc build,\\n# building it should complete before building any other object. Instead of\\n# depending on a single artifact, build all dependencies first.\\n%.o: %.c .make-prerequisites\\n\\t$(REDIS_CC) -MMD -o $@ -c $<\\n\\nclean:\\n\\trm -rf $(REDIS_SERVER_NAME) $(REDIS_SENTINEL_NAME) $(REDIS_CLI_NAME) $(REDIS_BENCHMARK_NAME) $(REDIS_CHECK_RDB_NAME) $(REDIS_CHECK_AOF_NAME) *.o *.gcda *.gcno *.gcov redis.info lcov-html Makefile.dep dict-benchmark\\n\\trm -f $(DEP)\\n\\n.PHONY: clean\\n\\ndistclean: clean\\n\\t-(cd ..\\/deps && $(MAKE) distclean)\\n\\t-(rm -f .make-*)\\n\\n.PHONY: distclean\\n\\ntest: $(REDIS_SERVER_NAME) $(REDIS_CHECK_AOF_NAME) $(REDIS_CLI_NAME) $(REDIS_BENCHMARK_NAME)\\n\\t@(cd ..; .\\/runtest)\\n\\ntest-sentinel: $(REDIS_SENTINEL_NAME) $(REDIS_CLI_NAME)\\n\\t@(cd ..; .\\/runtest-sentinel)\\n\\ncheck: test\\n\\nlcov:\\n\\t$(MAKE) gcov\\n\\t@(set -e; cd ..; .\\/runtest --clients 1)\\n\\t@geninfo -o redis.info .\\n\\t@genhtml --legend -o lcov-html redis.info\\n\\n.PHONY: lcov\\n\\nbench: $(REDIS_BENCHMARK_NAME)\\n\\t.\\/$(REDIS_BENCHMARK_NAME)\\n\\n32bit:\\n\\t@echo \\"\\"\\n\\t@echo \\"WARNING: if it fails under Linux you probably need to install libc6-dev-i386\\"\\n\\t@echo \\"\\"\\n\\t$(MAKE) CFLAGS=\\"-m32\\" LDFLAGS=\\"-m32\\"\\n\\ngcov:\\n\\t$(MAKE) REDIS_CFLAGS=\\"-fprofile-arcs -ftest-coverage -DCOVERAGE_TEST\\" REDIS_LDFLAGS=\\"-fprofile-arcs -ftest-coverage\\"\\n\\nnoopt:\\n\\t$(MAKE) OPTIMIZATION=\\"-O0\\"\\n\\nvalgrind:\\n\\t$(MAKE) OPTIMIZATION=\\"-O0\\" MALLOC=\\"libc\\"\\n\\nhelgrind:\\n\\t$(MAKE) OPTIMIZATION=\\"-O0\\" MALLOC=\\"libc\\" CFLAGS=\\"-D__ATOMIC_VAR_FORCE_SYNC_MACROS\\" REDIS_CFLAGS=\\"-I\\/usr\\/local\\/include\\" REDIS_LDFLAGS=\\"-L\\/usr\\/local\\/lib\\"\\n\\nsrc\\/help.h:\\n\\t@..\\/utils\\/generate-command-help.rb > help.h\\n\\ninstall: all\\n\\t@mkdir -p $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_BENCHMARK_NAME) $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_CLI_NAME) $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_CHECK_RDB_NAME) $(INSTALL_BIN)\\n\\t$(REDIS_INSTALL) $(REDIS_CHECK_AOF_NAME) $(INSTALL_BIN)\\n\\t@ln -sf $(REDIS_SERVER_NAME) $(INSTALL_BIN)\\/$(REDIS_SENTINEL_NAME)\\n\\nuninstall:\\n\\trm -f $(INSTALL_BIN)\\/{$(REDIS_SERVER_NAME),$(REDIS_BENCHMARK_NAME),$(REDIS_CLI_NAME),\\\\\\n\\t$(REDIS_CHECK_RDB_NAME),$(REDIS_CHECK_AOF_NAME),$(REDIS_SENTINEL_NAME)}\\n```","html":"<p>\\u4e3a\\u4ec0\\u4e48\\u8981\\u53bb\\u7406\\u89e3redis\\u7684Makefile\\u6587\\u4ef6\\u6267\\u884c\\u7684\\u6bcf\\u4e00\\u4e2a\\u7ec6\\u8282\\u5462\\uff0c\\u4e00\\u5207\\u7684\\u6e90\\u5934\\u662f\\u4e3a\\u4e86\\u80fd\\u53bb\\u9605\\u8bfb redis \\u7684\\u6e90\\u7801\\uff0c\\u4f46\\u5149\\u662f\\u5982\\u679c\\u7ba1\\u4e2d\\u7aa5\\u8c79\\u5f0f\\u53bb\\u9605\\u8bfb\\u4ee3\\u7801\\u662f\\u4ef6\\u611f\\u89c9\\u4f60\\u7406\\u89e3\\u4e86\\u3001\\u89e3\\u5256\\u4e86 redis\\uff0c\\u53ef\\u80fd\\u4e8b\\u5b9e\\u672a\\u5fc5\\uff0c\\u53ef\\u80fd\\u53ea\\u662f\\u611f\\u89c9\\u4e0a\\u81ea\\u5df1\\u7406\\u89e3\\uff0c\\u800c\\u4e0d\\u662f\\u771f\\u6b63\\u5403\\u900f\\u3002\\u90a3\\u4e48\\uff0c\\u8981\\u5982\\u4f55\\u53bb\\u907f\\u514d\\u8fd9\\u79cd\\u5e7b\\u8c61\\uff0c\\u90a3\\u5c31\\u53ea\\u80fd\\u53bb\\u7406\\u89e3\\u5b83\\u7684\\u9879\\u76ee\\u6784\\u5efa\\u4e0e\\u4e00\\u70b9\\u4e00\\u70b9\\u52a8\\u624b\\u89e3\\u5256\\u5b83\\uff0c\\u628a\\u89e3\\u5256\\u7684\\u96f6\\u90e8\\u4ef6\\u5355\\u72ec\\u5730\\u8ba9\\u5176\\u8dd1\\u8d77\\u6765\\u3002\\u662f\\u7684\\uff0c\\u8fd9\\u662f\\u4e2a\\u6162\\u5de5\\u7ec6\\u6d3b\\uff0c\\u8ba9\\u6211\\u4eec\\u5f00\\u59cb\\u628a\\u8fd9\\u4e2a\\u6d3b\\u4e00\\u70b9\\u4e00\\u70b9\\u53bb\\u78e8\\uff0cgangbadei\\uff01<\\/p>\\n<h4>\\u7406\\u89e3\\u9876\\u5c42 Makefile \\u6587\\u4ef6\\u7684\\u6267\\u884c\\u610f\\u56fe<\\/h4>\\n<p>\\u4ecegithub\\u62c9\\u53d6\\u6700\\u65b0\\u4ee3\\u7801\\uff0c\\u8fdb\\u5165redis\\u76ee\\u5f55\\uff0c\\u6253\\u5f00 Makefile \\u6587\\u4ef6\\uff0c\\u5185\\u5bb9\\u5982\\u4e0b\\uff1a<\\/p>\\n<pre><code># Top level makefile, the real shit is at src\\/Makefile\\n# \\u8fd9\\u662f\\u9876\\u5c42\\u7684makefile\\u6587\\u4ef6\\uff0c\\u771f\\u5b9e\\u7684\\u5185\\u5bb9\\u662f\\u5728 src \\u76ee\\u5f55\\u4e0b\\u7684 Makefile \\u6587\\u4ef6\\u5185\\u5bb9\\u4e2d\\n\\ndefault: all\\n\\n.DEFAULT:\\n    cd src &amp;&amp; $(MAKE) $@\\n\\ninstall:\\n    cd src &amp;&amp; $(MAKE) $@\\n\\n.PHONY: install<\\/code><\\/pre>\\n<p>\\u4ee5\\u4e0a\\u5185\\u5bb9\\u662f\\u4ec0\\u4e48\\u610f\\u4e49\\u6216\\u6548\\u679c\\u5462\\uff0c\\u5176\\u5b9e\\u6211\\u4e5f\\u4e0d\\u662f\\u5f88\\u786e\\u5b9a\\uff0c\\u53ea\\u77e5\\u9053 default \\u662f\\u6b64makefile\\u6587\\u4ef6\\u7684\\u6700\\u7ec8\\u76ee\\u6807\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u6765\\u505a\\u70b9\\u52a8\\u624b\\u5b9e\\u9a8c\\u3002<\\/p>\\n<pre><code>default: all\\n\\n.DEFAULT:\\n    @echo \\"execute default\\" $@\\n\\ninstall:\\n    @echo \\"execute install\\"\\n\\n.PHONY: install<\\/code><\\/pre>\\n<p>\\u4ee5\\u4e0a\\u5c31\\u662f\\u6d4b\\u8bd5\\u7528\\u7684makefile\\u6587\\u4ef6\\u5185\\u5bb9\\u3002\\u6211\\u4eec\\u8d77\\u5148\\u6267\\u884c\\uff1a<code>make<\\/code>\\uff0c\\u7ed3\\u679c\\u5982\\u4e0b:<\\/p>\\n<pre><code>execute default all<\\/code><\\/pre>\\n<p>\\u63a5\\u7740\\u6d4b\\u8bd5\\u6267\\u884c <code>make install<\\/code>\\uff0c\\u7ed3\\u679c\\u5982\\u4e0b\\uff1a<\\/p>\\n<pre><code>execute install<\\/code><\\/pre>\\n<p>\\u64cd\\u4f5c\\u5b8c\\u4e0a\\u9762\\u7684\\u6d4b\\u8bd5\\uff0c\\u662f\\u4e0d\\u662f\\u5bf9 redis \\u7684\\u9876\\u5c42 makefile \\u8981\\u6267\\u884c\\u4ec0\\u4e48\\u6709\\u90a3\\u4e48\\u4e00\\u4e1d\\u660e\\u767d\\u4e86\\u3002\\u4e0b\\u9762\\u8bb2\\u89e3\\u4e0b\\u5b83\\u7684\\u89c4\\u5219\\u6cd5\\u3002<\\/p>\\n<p>\\u7531\\u4e8e all \\u662f\\u4e00\\u4e2a\\u524d\\u63d0\\u6761\\u4ef6\\uff0c\\u4f46\\u662f makefile \\u4e2d\\u6ca1\\u6709\\u4e00\\u4e2a\\u540d\\u5b57\\u4e3a all \\u7684\\u76ee\\u7684\\uff0c\\u6240\\u4ee5\\u7b26\\u5408 .DEFAULT \\u76ee\\u7684\\u7684\\u6267\\u884c\\u6761\\u4ef6\\u3002\\u6545\\u6267\\u884c<code>make<\\/code>\\u51fa\\u73b0<code>execute default all<\\/code>\\u7ed3\\u679c\\u3002\\u5176\\u4e2d\\uff0c$@ \\u88ab\\u66ff\\u6362\\u6210\\u76ee\\u6807\\u672c\\u8eab\\uff08all\\uff09\\u3002<\\/p>\\n<p>.PHONY \\u5192\\u53f7\\u540e\\u9762\\u63a5\\u7684\\u662f\\u4e00\\u4e2a\\u4f2a\\u76ee\\u6807\\uff0c\\u5b83\\u662f\\u4e0d\\u4f1a\\u5728\\u6267\\u884c<code>make<\\/code>\\u65f6\\u6267\\u884c\\u7684\\uff0c\\u6240\\u4ee5\\u4f60\\u53ea\\u770b\\u5230\\u8f93\\u51fa<code>execute default all<\\/code>\\u3002\\u90a3\\u662f\\u600e\\u4e48\\u89e6\\u53d1\\u7684\\u5462\\uff0c\\u8fd9\\u4e2a\\u901a\\u8fc7\\u4e0a\\u9762\\u7684\\u52a8\\u624b\\u5b9e\\u9a8c\\uff0c\\u4f60\\u65e9\\u660e\\u767d\\u4e86\\u5b83\\u8981\\u7531 <code>make<\\/code> \\u540e\\u52a0\\u7684\\u547d\\u4ee4\\u53c2\\u6570(\\u6b64\\u4f8b\\u662f\\uff1ainstall)\\u6307\\u660e\\u6267\\u884c\\u3002<\\/p>\\n<p>\\u5728\\u7406\\u89e3\\u4e86make\\u7684\\u6267\\u884c\\u65b9\\u5f0f\\u53ca\\u53ef\\u80fd\\u7684\\u6548\\u679c\\uff0c\\u6211\\u4eec\\u63a5\\u7740\\u770b\\u770bredis\\u771f\\u5b9e\\u6267\\u884c\\u5e72\\u4e86\\u4ec0\\u4e48\\u3002\\u4ece\\u5185\\u5bb9\\u6765\\u770b\\u53ca\\u6211\\u4eec\\u7684\\u4ee5\\u4e0a\\u5b9e\\u9a8c\\u53ef\\u77e5\\uff0c<code>make<\\/code> \\u4e0e <code>make install<\\/code>\\u7684\\u6267\\u884c\\u6700\\u7ec8\\u90fd\\u662f\\u6267\\u884c<code>cd src &amp;&amp; $(MAKE) $@<\\/code>\\u3002\\u8fd9\\u6bb5\\u8bed\\u6cd5\\u7684\\u8bed\\u4e49\\u6bd4\\u8f83\\u76f4\\u767d -- \\u5373\\u8fdb\\u5165 redis \\u76ee\\u5f55\\u91cc\\u7684 src \\u76ee\\u5f55\\uff0c<code>&amp;&amp;<\\/code> \\u8868\\u793a\\u63a5\\u7740\\u6267\\u884c\\u540e\\u9762\\u7684\\u547d\\u4ee4\\uff0c\\u5373 <code>make all<\\/code>\\u3002\\u662f\\u8fd9\\u6837\\u7684\\u547d\\u4ee4\\u5185\\u5bb9\\u5417\\uff1f\\u4e0d\\u4fe1\\uff0c\\u6211\\u4eec\\u518d\\u4ee5\\u5c0f\\u5b9e\\u9a8c\\u6765\\u8fdb\\u884c\\u9a8c\\u8bc1\\u3002<\\/p>\\n<pre><code>exec:\\n    @echo $(MAKE)<\\/code><\\/pre>\\n<p>\\u5728\\u4e00\\u4e2a\\u7a7a\\u76ee\\u5f55\\u4e0b\\uff0c\\u521b\\u5efa\\u4e00\\u4e2amakefile\\u6587\\u4ef6\\uff0c\\u5185\\u5bb9\\u5982\\u4e0a\\uff0c\\u6267\\u884c <code>make<\\/code> \\u540e\\u4f1a\\u8f93\\u51fa\\uff1a<\\/p>\\n<pre><code>make<\\/code><\\/pre>\\n<p>\\u4ece\\u4ee5\\u4e0a\\u6d4b\\u8bd5\\uff0c\\u53ef\\u5f97\\u77e5 <code>MAKE<\\/code>\\u53d8\\u91cf\\u7684\\u503c\\u662f <code>make<\\/code>\\u3002<\\/p>\\n<p>\\u7efc\\u4e0a\\uff0c\\u6211\\u4eec\\u5f97\\u77e5\\u9876\\u5c42 Makefile \\u6587\\u4ef6\\u7684\\u6267\\u884c\\u610f\\u56fe\\u662f\\u8fdb\\u5165 src \\uff0c\\u5728 src \\u76ee\\u5f55\\u4e0b\\u627e\\u5230 Makefile \\u6587\\u4ef6\\uff0c\\u7136\\u540e\\u6267\\u884c <code>make all<\\/code>\\uff0c\\u5373\\u5728src\\u91cc Makefile \\u6587\\u4ef6\\u5185\\u5bb9\\u627e\\u76ee\\u6807 <code>all<\\/code> \\u3002<\\/p>\\n<h4>\\u8be6\\u89e3 redis\\/src \\u76ee\\u5f55\\u4e2d\\u7684Makefile\\u6587\\u4ef6\\u5185\\u5bb9<\\/h4>\\n<p>redis\\/src \\u76ee\\u5f55\\u91cc\\u7684 Makefile \\u6587\\u4ef6\\u5185\\u5bb9\\u6709\\u4e2a4\\u767e\\u591a\\u884c\\uff0c\\u6211\\u4eec\\u6309\\u5185\\u5bb9\\u4ece\\u4e0a\\u5230\\u4e0b\\u8fdb\\u884c\\u89e3\\u91ca\\u3002\\u575a\\u6301\\u4f4f\\uff0c\\u8fd9\\u53e5\\u60f3\\u5bf9\\u4f60\\u8bf4\\uff0c\\u540c\\u65f6\\u4e5f\\u8bf4\\u7ed9\\u81ea\\u5df1\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u6f2b\\u957f\\u4e14\\u4e0d\\u8f7b\\u677e\\u7684\\u8fc7\\u7a0b\\uff0c\\u8f7b\\u677e\\u4e86\\u53ef\\u80fd\\u662f\\u6211\\u5728\\u5077\\u5de5\\u51cf\\u6599\\u6216\\u8005\\u4e0d\\u77e5\\u6240\\u4e91\\u3002<\\/p>\\n<p>\\u7531\\u9876\\u5c42 Makefile \\u53ef\\u77e5\\uff0c\\u6267\\u884c\\u76ee\\u6807\\u662f all\\uff0c\\u4f46\\u5728\\u6267\\u884c\\u5230\\u76ee\\u6807 all \\u4e4b\\u524d\\uff0c\\u6709\\u597d\\u591a\\u524d\\u671f\\u5de5\\u4f5c\\u8981\\u505a\\u3002<\\/p>\\n<p><strong>\\u5185\\u5bb9\\u5f00\\u59cb\\uff1a<\\/strong><\\/p>\\n<pre><code># Makefile \\u5185\\u5bb9 -- 1\\nrelease_hdr := $(shell sh -c \'.\\/mkreleasehdr.sh\')<\\/code><\\/pre>\\n<p>\\u7b2c\\u4e00\\u53e5\\uff0c\\u5c55\\u793a\\u4e86\\u5982\\u4f55\\u5728 makefile \\u4e2d\\u4f7f\\u7528 shell \\u547d\\u4ee4\\uff0c\\u7528\\u6cd5\\u53ca\\u6ce8\\u610f\\u4e8b\\u9879\\u8bf7\\u53c2\\u8003<strong> <a href=\\"http:\\/\\/shishao.320.io:8090\\/shell-makefile-3c1e9\\">shell \\u4e0e makefile<\\/a><\\/strong>\\u3002\\u6b64\\u53e5\\u8868\\u793a\\u6267\\u884c \\u6587\\u4ef6\\u540d\\u4e3a mkreleasehdr.sh \\u7684 shell \\u547d\\u4ee4\\u6587\\u4ef6\\u3002<\\/p>\\n<p>mkreleasehdr.sh\\u5c55\\u5f00\\u5185\\u5bb9\\uff08\\u8fd9\\u662f\\u4e00\\u4e2a shell bash \\u547d\\u4ee4\\u6587\\u4ef6\\uff09<\\/p>\\n<pre><code>#!\\/bin\\/sh\\nGIT_SHA1=`(git show-ref --head --hash=8 2&gt; \\/dev\\/null || echo 00000000) | head -n1`\\nGIT_DIRTY=`git diff --no-ext-diff 2&gt; \\/dev\\/null | wc -l`\\nBUILD_ID=`uname -n`\\"-\\"`date +%s`\\nif [ -n \\"$SOURCE_DATE_EPOCH\\" ]; then\\n  BUILD_ID=$(date -u -d \\"@$SOURCE_DATE_EPOCH\\" +%s 2&gt;\\/dev\\/null || date -u -r \\"$SOURCE_DATE_EPOCH\\" +%s 2&gt;\\/dev\\/null || date -u +%s)\\nfi\\ntest -f release.h || touch release.h\\n(cat release.h | grep SHA1 | grep $GIT_SHA1) &amp;&amp; \\\\\\n(cat release.h | grep DIRTY | grep $GIT_DIRTY) &amp;&amp; exit 0 # Already up-to-date\\necho \\"#define REDIS_GIT_SHA1 \\\\\\"$GIT_SHA1\\\\\\"\\" &gt; release.h\\necho \\"#define REDIS_GIT_DIRTY \\\\\\"$GIT_DIRTY\\\\\\"\\" &gt;&gt; release.h\\necho \\"#define REDIS_BUILD_ID \\\\\\"$BUILD_ID\\\\\\"\\" &gt;&gt; release.h\\ntouch release.c # Force recompile of release.c<\\/code><\\/pre>\\n<p>\\u6b64\\u5904\\uff0c\\u6211\\u4eec\\u6682\\u65f6\\u505a\\u6d4b\\u8bd5\\uff0c\\u5373\\u628a\\u8fd9\\u91cc\\u7684\\u5185\\u5bb9\\u62ff\\u53bb\\u6d4b\\u8bd5\\u3002\\u4eb2\\u81ea\\u5c1d\\u8bd5\\u6d4b\\u8bd5\\u4e86\\u4e0b\\uff0c\\u8fd9\\u6b21\\u4e0d\\u9700\\u8981\\u521b\\u5efa\\u65b0\\u6587\\u4ef6\\uff0c\\u53ea\\u9700\\u8981\\u5728 redis \\u4e0b\\u7684 src \\u76ee\\u5f55\\u6267\\u884c <code>sh mkreleasehdr.sh<\\/code>\\uff0c\\u4f1a\\u751f\\u6210 release.h \\u6587\\u4ef6\\u3002\\u6211\\u7684\\u6d4b\\u8bd5\\u7ed3\\u679c\\uff0crelease.h \\u5185\\u5bb9\\u5982\\u4e0b\\uff1a<\\/p>\\n<pre><code>#define REDIS_GIT_SHA1 \\"a295770e\\"\\n#define REDIS_GIT_DIRTY \\"0\\"\\n#define REDIS_BUILD_ID \\"slave1-1601390379\\"<\\/code><\\/pre>\\n<p>\\u8fd9\\u8fb9\\u7684<code>shell<\\/code>\\u547d\\u4ee4\\u6bd4\\u8f83\\u591a\\uff0c\\u4f46\\u610f\\u601d\\u662f\\u6bd4\\u8f83\\u76f4\\u767d\\u7684\\uff0c\\u53ef\\u4ee5\\u52a8\\u624b\\u67e5\\u8be2\\u81ea\\u5df1\\u4e0d\\u660e\\u767d\\u7684\\u5730\\u65b9\\uff0c\\u6240\\u4ee5\\u5c31\\u4e00\\u7b14\\u5e26\\u8fc7\\uff0c\\u6211\\u4eec\\u89e3\\u8bfb\\u63a5\\u4e0b\\u6765\\u7684\\u547d\\u4ee4\\u3002<\\/p>\\n<pre><code># Makefile \\u5185\\u5bb9 -- 2\\n# \\u53d6\\u64cd\\u4f5c\\u7cfb\\u7edf\\u4e3b\\u673a\\u540d\\u79f0\\nuname_S := $(shell sh -c \'uname -s 2&gt;\\/dev\\/null || echo not\')\\n# \\u53d6\\u670d\\u52a1\\u5668\\u786c\\u4ef6\\u67b6\\u6784\\nuname_M := $(shell sh -c \'uname -m 2&gt;\\/dev\\/null || echo not\')\\n# \\u4f18\\u5316\\u9009\\u9879\\n# -O\\uff08\\u5927\\u5199\\u7684\\u5b57\\u6bcdO\\uff09\\uff0c\\u7f16\\u8bd1\\u5668\\u5bf9\\u4ee3\\u7801\\u8fdb\\u884c\\u81ea\\u52a8\\u4f18\\u5316\\u7f16\\u8bd1\\uff0c\\u8f93\\u51fa\\u6548\\u7387\\u66f4\\u9ad8\\u7684\\u53ef\\u6267\\u884c\\u6587\\u4ef6\\u3002\\n# -O \\u540e\\u9762\\u8fd8\\u53ef\\u4ee5\\u8ddf\\u4e0a\\u6570\\u5b57\\u6307\\u5b9a\\u4f18\\u5316\\u7ea7\\u522b\\n# \\u6570\\u5b57\\u8d8a\\u5927\\uff0c\\u8d8a\\u52a0\\u4f18\\u5316\\u3002\\u4f46\\u662f\\u901a\\u5e38\\u60c5\\u51b5\\u4e0b\\uff0c\\u81ea\\u52a8\\u7684\\u4e1c\\u897f\\u90fd\\u4e0d\\u662f\\u592a\\u806a\\u660e\\uff0c\\n# \\u592a\\u5927\\u7684\\u4f18\\u5316\\u7ea7\\u522b\\u53ef\\u80fd\\u4f1a\\u4f7f\\u751f\\u6210\\u7684\\u6587\\u4ef6\\u4ea7\\u751f\\u4e00\\u7cfb\\u5217\\u7684bug\\nOPTIMIZATION?=-O2\\n# \\u4f9d\\u8d56\\u76ee\\u6807\\nDEPENDENCY_TARGETS=hiredis linenoise lua hdr_histogram\\n# \\u672a\\u77e5\\nNODEPS:=clean distclean<\\/code><\\/pre>\\n<p>\\u4e0a\\u9762\\u58f0\\u660e\\u4e865\\u4e2amake\\u53d8\\u91cf\\uff0c\\u4f7f\\u7528\\u4e86\\u4e24\\u79cd\\u58f0\\u660e\\u65b9\\u5f0f\\uff0c\\u987a\\u4fbf\\u6211\\u4eec\\u89e3\\u8bf4\\u4e0b\\u58f0\\u660e\\u65b9\\u5f0f\\uff1a<\\/p>\\n<ol>\\n<li><code>?=<\\/code> \\u6761\\u4ef6\\u8d4b\\u503c(conditional variable assignment)\\uff0c\\u5982\\u679c\\u53d8\\u91cf\\u5df2\\u7ecf\\u8d4b\\u503c\\uff0c\\u5219\\u4e0d\\u8981\\u91cd\\u65b0\\u8d4b\\u503c\\uff1b<\\/li>\\n<li><code>:=<\\/code> \\u7acb\\u5373\\u8d4b\\u503c(immediately assignment)\\uff0c\\u53d8\\u91cf\\u53d6\\u503c\\u7acb\\u5373\\u5c55\\u5f00\\uff1b<\\/li>\\n<li><code>+=<\\/code> \\u6dfb\\u52a0\\u8d4b\\u503c(appendly assignment)\\uff0c\\u6dfb\\u52a0\\u989d\\u5916\\u5185\\u5bb9\\u5728\\u539f\\u6709\\u5185\\u5bb9\\u4e4b\\u540e\\uff1b<\\/li>\\n<li><code>=<\\/code> \\u9012\\u5f52\\u5c55\\u5f00\\u8d4b\\u503c\\uff08recursively expanded assignment)\\uff0c\\u8be5\\u53d8\\u91cf\\u5728\\u4f7f\\u7528\\u7684\\u65f6\\u5019\\u624d\\u5bf9\\u8868\\u8fbe\\u5f0f\\u8fdb\\u884c\\u5c55\\u5f00\\uff1b<\\/li>\\n<\\/ol>\\n<pre><code># Makefile \\u5185\\u5bb9 -- 3\\n# Default settings\\n# -pedantic \\u4fdd\\u8bc1\\u4ee3\\u7801\\u89c4\\u8303\\u6ee1\\u8db3ISO C\\u548cISO C++\\u6807\\u51c6\\nSTD=-pedantic -DREDIS_STATIC=\'\'\\nifneq (,$(findstring clang,$(CC)))\\nifneq (,$(findstring FreeBSD,$(uname_S)))\\n  STD+=-Wno-c11-extensions\\nendif\\nendif\\n# -Wall\\u8868\\u793a\\u8f93\\u51fa\\u6240\\u6709\\u7f16\\u8bd1\\u8b66\\u544a\\u4fe1\\u606f\\n# Wno-missing-field-initializers \\u4e0d\\u8f93\\u51fa missing- \\u7684\\u8b66\\u544a\\u4fe1\\u606f\\n# -W\\uff0c\\u5728\\u7f16\\u8bd1\\u4e2d\\u5f00\\u542f\\u4e00\\u4e9b\\u989d\\u5916\\u7684\\u8b66\\u544a\\uff08warning\\uff09\\u4fe1\\u606f\\u3002-Wall\\uff0c\\u5c06\\u6240\\u6709\\u7684\\u8b66\\u544a\\u4fe1\\u606f\\u5168\\u5f00\\u3002\\nWARN=-Wall -W -Wno-missing-field-initializers\\nOPT=$(OPTIMIZATION)<\\/code><\\/pre>\\n<p>\\u8bb2\\u89e3\\u4e0b <code>$(findstring find, in)<\\/code> \\u51fd\\u6570\\uff0c\\u6307\\u5728 in \\u5b57\\u7b26\\u4e32\\u4e2d\\u67e5\\u627e find \\u5b57\\u7b26\\u4e32\\uff0c\\u5982\\u679c\\u627e\\u5230\\u8fd4\\u56de find\\uff0c\\u672a\\u627e\\u5230\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32\\u3002\\u5728\\u6211\\u7684linux\\u673a\\u5668\\u4e0b\\uff0c\\u662f\\u6ca1\\u6709\\u627e\\u5230 clang \\u7684\\uff0c\\u6545 STD \\u662f\\u521d\\u59cb\\u53d8\\u91cf\\u3002<\\/p>\\n<pre><code># Makefile \\u5185\\u5bb9 -- 4\\n# Detect if the compiler supports C11 _Atomic\\nC11_ATOMIC := $(shell sh -c \'echo \\"\\\\#include &lt;stdatomic.h&gt;\\" &gt; foo.c; \\\\\\n    $(CC) -std=c11 -c foo.c -o foo.o &gt; \\/dev\\/null 2&gt;&amp;1; \\\\\\n    if [ -f foo.o ]; then echo \\"yes\\"; rm foo.o; fi; rm foo.c\')\\nifeq ($(C11_ATOMIC),yes)\\n    STD+=-std=c11\\nelse\\n    STD+=-std=c99\\nendif\\n\\n# \\u9ed8\\u8ba4\\u76ee\\u5f55\\uff08\\u5f53\\u6307\\u5b9a PREFIX \\u65f6\\uff0c\\u4f8b `make PREFIX=\\"\\/myhome\\/redis\\"`\\uff0c\\u90a3\\u4e48 PREFIX \\n# \\u5c06\\u4f1a\\u662f\\u88ab\\u6307\\u5b9a\\u7684\\u503c\\uff09\\nPREFIX?=\\/usr\\/local\\n# \\u5b89\\u88c5\\u76ee\\u5f55\\nINSTALL_BIN=$(PREFIX)\\/bin\\nINSTALL=install\\nPKG_CONFIG?=pkg-config\\n\\n# Default allocator defaults to Jemalloc if it\'s not an ARM\\nMALLOC=libc\\nifneq ($(uname_M),armv6l)\\nifneq ($(uname_M),armv7l)\\nifeq ($(uname_S),Linux)\\n    MALLOC=jemalloc\\nendif\\nendif\\nendif\\n\\n# \\u7528\\u610f\\u672a\\u77e5\\n# To get ARM stack traces if Redis crashes we need a special C flag.\\nifneq (,$(filter aarch64 armv,$(uname_M)))\\n        CFLAGS+=-funwind-tables\\nelse\\nifneq (,$(findstring armv,$(uname_M)))\\n        CFLAGS+=-funwind-tables\\nendif\\nendif\\n\\n# Backwards compatibility for selecting an allocator\\nifeq ($(USE_TCMALLOC),yes)\\n    MALLOC=tcmalloc\\nendif\\n\\nifeq ($(USE_TCMALLOC_MINIMAL),yes)\\n    MALLOC=tcmalloc_minimal\\nendif\\n\\nifeq ($(USE_JEMALLOC),yes)\\n    MALLOC=jemalloc\\nendif\\n\\nifeq ($(USE_JEMALLOC),no)\\n    MALLOC=libc\\nendif\\n\\n# Override default settings if possible\\n-include .make-settings\\n\\nFINAL_CFLAGS=$(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS) $(REDIS_CFLAGS)\\nFINAL_LDFLAGS=$(LDFLAGS) $(REDIS_LDFLAGS) $(DEBUG)\\nFINAL_LIBS=-lm\\nDEBUG=-g -ggdb\\n\\n# Linux ARM needs -latomic at linking time\\nifneq (,$(filter aarch64 armv,$(uname_M)))\\n        FINAL_LIBS+=-latomic\\nelse\\nifneq (,$(findstring armv,$(uname_M)))\\n        FINAL_LIBS+=-latomic\\nendif\\nendif\\n\\nifeq ($(uname_S),SunOS)\\n    # SunOS\\n        ifneq ($(@@),32bit)\\n        CFLAGS+= -m64\\n        LDFLAGS+= -m64\\n    endif\\n    DEBUG=-g\\n    DEBUG_FLAGS=-g\\n    export CFLAGS LDFLAGS DEBUG DEBUG_FLAGS\\n    INSTALL=cp -pf\\n    FINAL_CFLAGS+= -D__EXTENSIONS__ -D_XPG6\\n    FINAL_LIBS+= -ldl -lnsl -lsocket -lresolv -lpthread -lrt\\nelse\\nifeq ($(uname_S),Darwin)\\n    # Darwin\\n    FINAL_LIBS+= -ldl\\n    OPENSSL_CFLAGS=-I\\/usr\\/local\\/opt\\/openssl\\/include\\n    OPENSSL_LDFLAGS=-L\\/usr\\/local\\/opt\\/openssl\\/lib\\nelse\\nifeq ($(uname_S),AIX)\\n        # AIX\\n        FINAL_LDFLAGS+= -Wl,-bexpall\\n        FINAL_LIBS+=-ldl -pthread -lcrypt -lbsd\\nelse\\nifeq ($(uname_S),OpenBSD)\\n    # OpenBSD\\n    FINAL_LIBS+= -lpthread\\n    ifeq ($(USE_BACKTRACE),yes)\\n        FINAL_CFLAGS+= -DUSE_BACKTRACE -I\\/usr\\/local\\/include\\n        FINAL_LDFLAGS+= -L\\/usr\\/local\\/lib\\n        FINAL_LIBS+= -lexecinfo\\n        endif\\n\\nelse\\nifeq ($(uname_S),NetBSD)\\n    # NetBSD\\n    FINAL_LIBS+= -lpthread\\n    ifeq ($(USE_BACKTRACE),yes)\\n        FINAL_CFLAGS+= -DUSE_BACKTRACE -I\\/usr\\/pkg\\/include\\n        FINAL_LDFLAGS+= -L\\/usr\\/pkg\\/lib\\n        FINAL_LIBS+= -lexecinfo\\n        endif\\nelse\\nifeq ($(uname_S),FreeBSD)\\n    # FreeBSD\\n    FINAL_LIBS+= -lpthread -lexecinfo\\nelse\\nifeq ($(uname_S),DragonFly)\\n    # DragonFly\\n    FINAL_LIBS+= -lpthread -lexecinfo\\nelse\\nifeq ($(uname_S),OpenBSD)\\n    # OpenBSD\\n    FINAL_LIBS+= -lpthread -lexecinfo\\nelse\\nifeq ($(uname_S),NetBSD)\\n    # NetBSD\\n    FINAL_LIBS+= -lpthread -lexecinfo\\nelse\\nifeq ($(uname_S),Haiku)\\n    # Haiku\\n    FINAL_CFLAGS+= -DBSD_SOURCE\\n    FINAL_LDFLAGS+= -lbsd -lnetwork\\n    FINAL_LIBS+= -lpthread\\nelse\\n    # All the other OSes (notably Linux)\\n    FINAL_LDFLAGS+= -rdynamic\\n    FINAL_LIBS+=-ldl -pthread -lrt\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif\\nendif<\\/code><\\/pre>\\n<pre><code># Include paths to dependencies\\nFINAL_CFLAGS+= -I..\\/deps\\/hiredis -I..\\/deps\\/linenoise \\\\\\n\\n-I..\\/deps\\/lua\\/src -I..\\/deps\\/hdr_histogram\\n\\n# Determine systemd support and\\/or build preference (defaulting to auto-detection)\\nBUILD_WITH_SYSTEMD=no\\n# If \'USE_SYSTEMD\' in the environment is neither \\"no\\" nor \\"yes\\", try to\\n# auto-detect libsystemd\'s presence and link accordingly.\\nifneq ($(USE_SYSTEMD),no)\\n    LIBSYSTEMD_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libsystemd &amp;&amp; echo $$?)\\n# If libsystemd cannot be detected, continue building without support for it\\n# (unless a later check tells us otherwise)\\nifeq ($(LIBSYSTEMD_PKGCONFIG),0)\\n    BUILD_WITH_SYSTEMD=yes\\nendif\\nendif\\nifeq ($(USE_SYSTEMD),yes)\\nifneq ($(LIBSYSTEMD_PKGCONFIG),0)\\n$(error USE_SYSTEMD is set to \\"$(USE_SYSTEMD)\\", but $(PKG_CONFIG) cannot find libsystemd)\\nendif\\n# Force building with libsystemd\\n    BUILD_WITH_SYSTEMD=yes\\nendif\\nifeq ($(BUILD_WITH_SYSTEMD),yes)\\n    FINAL_LIBS+=$(shell $(PKG_CONFIG) --libs libsystemd)\\n    FINAL_CFLAGS+= -DHAVE_LIBSYSTEMD\\nendif\\n\\nifeq ($(MALLOC),tcmalloc)\\n    FINAL_CFLAGS+= -DUSE_TCMALLOC\\n    FINAL_LIBS+= -ltcmalloc\\nendif\\n\\nifeq ($(MALLOC),tcmalloc_minimal)\\n    FINAL_CFLAGS+= -DUSE_TCMALLOC\\n    FINAL_LIBS+= -ltcmalloc_minimal\\nendif\\n\\nifeq ($(MALLOC),jemalloc)\\n    DEPENDENCY_TARGETS+= jemalloc\\n    FINAL_CFLAGS+= -DUSE_JEMALLOC -I..\\/deps\\/jemalloc\\/include\\n    FINAL_LIBS := ..\\/deps\\/jemalloc\\/lib\\/libjemalloc.a $(FINAL_LIBS)\\nendif\\n\\nifeq ($(BUILD_TLS),yes)\\n    FINAL_CFLAGS+=-DUSE_OPENSSL $(OPENSSL_CFLAGS)\\n    FINAL_LDFLAGS+=$(OPENSSL_LDFLAGS)\\n    LIBSSL_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libssl &amp;&amp; echo $$?)\\nifeq ($(LIBSSL_PKGCONFIG),0)\\n    LIBSSL_LIBS=$(shell $(PKG_CONFIG) --libs libssl)\\nelse\\n    LIBSSL_LIBS=-lssl\\nendif\\n    LIBCRYPTO_PKGCONFIG := $(shell $(PKG_CONFIG) --exists libcrypto &amp;&amp; echo $$?)\\nifeq ($(LIBCRYPTO_PKGCONFIG),0)\\n    LIBCRYPTO_LIBS=$(shell $(PKG_CONFIG) --libs libcrypto)\\nelse\\n    LIBCRYPTO_LIBS=-lcrypto\\nendif\\n    FINAL_LIBS += ..\\/deps\\/hiredis\\/libhiredis_ssl.a $(LIBSSL_LIBS) $(LIBCRYPTO_LIBS)\\nendif\\n\\nREDIS_CC=$(QUIET_CC)$(CC) $(FINAL_CFLAGS)\\nREDIS_LD=$(QUIET_LINK)$(CC) $(FINAL_LDFLAGS)\\nREDIS_INSTALL=$(QUIET_INSTALL)$(INSTALL)\\n\\nCCCOLOR=\\"\\\\033[34m\\"\\nLINKCOLOR=\\"\\\\033[34;1m\\"\\nSRCCOLOR=\\"\\\\033[33m\\"\\nBINCOLOR=\\"\\\\033[37;1m\\"\\nMAKECOLOR=\\"\\\\033[32;1m\\"\\nENDCOLOR=\\"\\\\033[0m\\"\\n\\nifndef V\\nQUIET_CC = @printf \'    %b %b\\\\n\' $(CCCOLOR)CC$(ENDCOLOR) $(SRCCOLOR)$@$(ENDCOLOR) 1&gt;&amp;2;\\nQUIET_LINK = @printf \'    %b %b\\\\n\' $(LINKCOLOR)LINK$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) \\\\ \\n1&gt;&amp;2;\\nQUIET_INSTALL = @printf \'    %b %b\\\\n\' $(LINKCOLOR)INSTALL$(ENDCOLOR) \\\\\\n$(BINCOLOR)$@$(ENDCOLOR) 1&gt;&amp;2;\\nendif\\n\\nREDIS_SERVER_NAME=redis-server$(PROG_SUFFIX)\\nREDIS_SENTINEL_NAME=redis-sentinel$(PROG_SUFFIX)\\nREDIS_SERVER_OBJ=adlist.o quicklist.o ae.o anet.o dict.o server.o sds.o zmalloc.o \\\\\\nlzf_c.o lzf_d.o pqsort.o zipmap.o sha1.o ziplist.o release.o networking.o util.o object.o db.o \\\\\\nreplication.o rdb.o t_string.o t_list.o t_set.o t_zset.o t_hash.o config.o aof.o pubsub.o \\\\\\nmulti.o debug.o sort.o intset.o syncio.o cluster.o crc16.o endianconv.o slowlog.o \\\\\\nscripting.o bio.o rio.o rand.o memtest.o crcspeed.o crc64.o bitops.o sentinel.o notify.o \\\\\\nsetproctitle.o blocked.o hyperloglog.o latency.o sparkline.o redis-check-rdb.o \\\\\\nredis-check-aof.o geo.o lazyfree.o module.o evict.o expire.o geohash.o \\\\\\ngeohash_helper.o childinfo.o defrag.o siphash.o rax.o t_stream.o listpack.o \\\\\\nlocaltime.o lolwut.o lolwut5.o lolwut6.o acl.o gopher.o tracking.o connection.o \\\\\\ntls.o sha256.o timeout.o setcpuaffinity.o monotonic.o\\nREDIS_CLI_NAME=redis-cli$(PROG_SUFFIX)\\nREDIS_CLI_OBJ=anet.o adlist.o dict.o redis-cli.o zmalloc.o release.o ae.o \\\\\\ncrcspeed.o crc64.o siphash.o crc16.o monotonic.o\\nREDIS_BENCHMARK_NAME=redis-benchmark$(PROG_SUFFIX)\\nREDIS_BENCHMARK_OBJ=ae.o anet.o redis-benchmark.o adlist.o dict.o \\\\\\nzmalloc.o siphash.o monotonic.o\\nREDIS_CHECK_RDB_NAME=redis-check-rdb$(PROG_SUFFIX)\\nREDIS_CHECK_AOF_NAME=redis-check-aof$(PROG_SUFFIX)\\n\\nall: $(REDIS_SERVER_NAME) $(REDIS_SENTINEL_NAME) $(REDIS_CLI_NAME) $(REDIS_BENCHMARK_NAME) $(REDIS_CHECK_RDB_NAME) $(REDIS_CHECK_AOF_NAME)\\n    @echo \\"\\"\\n    @echo \\"Hint: It\'s a good idea to run \'make test\' ;)\\"\\n    @echo \\"\\"\\n\\nMakefile.dep:\\n    -$(REDIS_CC) -MM *.c &gt; Makefile.dep 2&gt; \\/dev\\/null || true\\n\\nifeq (0, $(words $(findstring $(MAKECMDGOALS), $(NODEPS))))\\n-include Makefile.dep\\nendif\\n\\n.PHONY: all\\n\\npersist-settings: distclean\\n    echo STD=$(STD) &gt;&gt; .make-settings\\n    echo WARN=$(WARN) &gt;&gt; .make-settings\\n    echo OPT=$(OPT) &gt;&gt; .make-settings\\n    echo MALLOC=$(MALLOC) &gt;&gt; .make-settings\\n    echo BUILD_TLS=$(BUILD_TLS) &gt;&gt; .make-settings\\n    echo USE_SYSTEMD=$(USE_SYSTEMD) &gt;&gt; .make-settings\\n    echo CFLAGS=$(CFLAGS) &gt;&gt; .make-settings\\n    echo LDFLAGS=$(LDFLAGS) &gt;&gt; .make-settings\\n    echo REDIS_CFLAGS=$(REDIS_CFLAGS) &gt;&gt; .make-settings\\n    echo REDIS_LDFLAGS=$(REDIS_LDFLAGS) &gt;&gt; .make-settings\\n    echo PREV_FINAL_CFLAGS=$(FINAL_CFLAGS) &gt;&gt; .make-settings\\n    echo PREV_FINAL_LDFLAGS=$(FINAL_LDFLAGS) &gt;&gt; .make-settings\\n    -(cd ..\\/deps &amp;&amp; $(MAKE) $(DEPENDENCY_TARGETS))\\n\\n.PHONY: persist-settings\\n\\n# Prerequisites target\\n.make-prerequisites:\\n    @touch $@\\n\\n# Clean everything, persist settings and build dependencies if anything changed\\nifneq ($(strip $(PREV_FINAL_CFLAGS)), $(strip $(FINAL_CFLAGS)))\\n.make-prerequisites: persist-settings\\nendif\\n\\nifneq ($(strip $(PREV_FINAL_LDFLAGS)), $(strip $(FINAL_LDFLAGS)))\\n.make-prerequisites: persist-settings\\nendif\\n\\n# redis-server\\n$(REDIS_SERVER_NAME): $(REDIS_SERVER_OBJ)\\n    $(REDIS_LD) -o $@ $^ ..\\/deps\\/hiredis\\/libhiredis.a ..\\/deps\\/lua\\/src\\/liblua.a $(FINAL_LIBS)\\n\\n# redis-sentinel\\n$(REDIS_SENTINEL_NAME): $(REDIS_SERVER_NAME)\\n    $(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(REDIS_SENTINEL_NAME)\\n\\n# redis-check-rdb\\n$(REDIS_CHECK_RDB_NAME): $(REDIS_SERVER_NAME)\\n    $(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(REDIS_CHECK_RDB_NAME)\\n\\n# redis-check-aof\\n$(REDIS_CHECK_AOF_NAME): $(REDIS_SERVER_NAME)\\n    $(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(REDIS_CHECK_AOF_NAME)\\n\\n# redis-cli\\n$(REDIS_CLI_NAME): $(REDIS_CLI_OBJ)\\n    $(REDIS_LD) -o $@ $^ ..\\/deps\\/hiredis\\/libhiredis.a ..\\/deps\\/linenoise\\/linenoise.o $(FINAL_LIBS)\\n\\n# redis-benchmark\\n$(REDIS_BENCHMARK_NAME): $(REDIS_BENCHMARK_OBJ)\\n    $(REDIS_LD) -o $@ $^ ..\\/deps\\/hiredis\\/libhiredis.a ..\\/deps\\/hdr_histogram\\/hdr_histogram.o $(FINAL_LIBS)\\n\\ndict-benchmark: dict.c zmalloc.c sds.c siphash.c\\n    $(REDIS_CC) $(FINAL_CFLAGS) $^ -D DICT_BENCHMARK_MAIN -o $@ $(FINAL_LIBS)\\n\\nDEP = $(REDIS_SERVER_OBJ:%.o=%.d) $(REDIS_CLI_OBJ:%.o=%.d) $(REDIS_BENCHMARK_OBJ:%.o=%.d)\\n-include $(DEP)\\n\\n# Because the jemalloc.h header is generated as a part of the jemalloc build,\\n# building it should complete before building any other object. Instead of\\n# depending on a single artifact, build all dependencies first.\\n%.o: %.c .make-prerequisites\\n    $(REDIS_CC) -MMD -o $@ -c $&lt;\\n\\nclean:\\n    rm -rf $(REDIS_SERVER_NAME) $(REDIS_SENTINEL_NAME) $(REDIS_CLI_NAME) $(REDIS_BENCHMARK_NAME) $(REDIS_CHECK_RDB_NAME) $(REDIS_CHECK_AOF_NAME) *.o *.gcda *.gcno *.gcov redis.info lcov-html Makefile.dep dict-benchmark\\n    rm -f $(DEP)\\n\\n.PHONY: clean\\n\\ndistclean: clean\\n    -(cd ..\\/deps &amp;&amp; $(MAKE) distclean)\\n    -(rm -f .make-*)\\n\\n.PHONY: distclean\\n\\ntest: $(REDIS_SERVER_NAME) $(REDIS_CHECK_AOF_NAME) $(REDIS_CLI_NAME) $(REDIS_BENCHMARK_NAME)\\n    @(cd ..; .\\/runtest)\\n\\ntest-sentinel: $(REDIS_SENTINEL_NAME) $(REDIS_CLI_NAME)\\n    @(cd ..; .\\/runtest-sentinel)\\n\\ncheck: test\\n\\nlcov:\\n    $(MAKE) gcov\\n    @(set -e; cd ..; .\\/runtest --clients 1)\\n    @geninfo -o redis.info .\\n    @genhtml --legend -o lcov-html redis.info\\n\\n.PHONY: lcov\\n\\nbench: $(REDIS_BENCHMARK_NAME)\\n    .\\/$(REDIS_BENCHMARK_NAME)\\n\\n32bit:\\n    @echo \\"\\"\\n    @echo \\"WARNING: if it fails under Linux you probably need to install libc6-dev-i386\\"\\n    @echo \\"\\"\\n    $(MAKE) CFLAGS=\\"-m32\\" LDFLAGS=\\"-m32\\"\\n\\ngcov:\\n    $(MAKE) REDIS_CFLAGS=\\"-fprofile-arcs -ftest-coverage -DCOVERAGE_TEST\\" REDIS_LDFLAGS=\\"-fprofile-arcs -ftest-coverage\\"\\n\\nnoopt:\\n    $(MAKE) OPTIMIZATION=\\"-O0\\"\\n\\nvalgrind:\\n    $(MAKE) OPTIMIZATION=\\"-O0\\" MALLOC=\\"libc\\"\\n\\nhelgrind:\\n    $(MAKE) OPTIMIZATION=\\"-O0\\" MALLOC=\\"libc\\" CFLAGS=\\"-D__ATOMIC_VAR_FORCE_SYNC_MACROS\\" REDIS_CFLAGS=\\"-I\\/usr\\/local\\/include\\" REDIS_LDFLAGS=\\"-L\\/usr\\/local\\/lib\\"\\n\\nsrc\\/help.h:\\n    @..\\/utils\\/generate-command-help.rb &gt; help.h\\n\\ninstall: all\\n    @mkdir -p $(INSTALL_BIN)\\n    $(REDIS_INSTALL) $(REDIS_SERVER_NAME) $(INSTALL_BIN)\\n    $(REDIS_INSTALL) $(REDIS_BENCHMARK_NAME) $(INSTALL_BIN)\\n    $(REDIS_INSTALL) $(REDIS_CLI_NAME) $(INSTALL_BIN)\\n    $(REDIS_INSTALL) $(REDIS_CHECK_RDB_NAME) $(INSTALL_BIN)\\n    $(REDIS_INSTALL) $(REDIS_CHECK_AOF_NAME) $(INSTALL_BIN)\\n    @ln -sf $(REDIS_SERVER_NAME) $(INSTALL_BIN)\\/$(REDIS_SENTINEL_NAME)\\n\\nuninstall:\\n    rm -f $(INSTALL_BIN)\\/{$(REDIS_SERVER_NAME),$(REDIS_BENCHMARK_NAME),$(REDIS_CLI_NAME),\\\\\\n    $(REDIS_CHECK_RDB_NAME),$(REDIS_CHECK_AOF_NAME),$(REDIS_SENTINEL_NAME)}<\\/code><\\/pre>"}',
                'page_image' => NULL,
                'meta_description' => '为什么要去理解redis的Makefile文件执行的每一个细节呢，一切的源头是为了能去阅读 redis 的源码，但光是直接管中窥豹式去阅读代码是件感觉你理解了、解剖了 redis，可能事实未必，可能只是感觉上自己理解，而不是真正吃透。那么，要如何去避免这种幻象，那就只能去理解它的项目构建与一点一点动手解剖它，把解剖的零部件单独地让其跑起来。',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 155,
                'published_at' => '2020-09-29 22:58:00',
                'created_at' => '2020-09-29 23:47:13',
                'updated_at' => '2022-01-09 12:26:04',
                'deleted_at' => NULL,
            ),
            12 => 
            array (
                'id' => 13,
                'category_id' => 8,
                'collection_id' => 3,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'makefile-83v8r',
                'title' => '跟我一起写 Makefile -- 使用条件判断',
                'subtitle' => 'makefile 使用条件判断',
            'content' => '{"raw":"\\u4f7f\\u7528\\u6761\\u4ef6\\u5224\\u65ad\\n\\n----\\n\\n\\u4f7f\\u7528\\u6761\\u4ef6\\u5224\\u65ad\\uff0c\\u53ef\\u4ee5\\u8ba9 make \\u6839\\u636e\\u8fd0\\u884c\\u65f6\\u7684\\u4e0d\\u540c\\u60c5\\u51b5\\u9009\\u62e9\\u4e0d\\u540c\\u7684\\u6267\\u884c\\u5206\\u652f\\u3002\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u53ef\\u4ee5\\u662f\\u6bd4\\u8f83\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u6216\\u662f\\u6bd4\\u8f83\\u53d8\\u91cf\\u548c\\u5e38\\u91cf\\u7684\\u503c\\u3002\\n\\n##### \\u4e00\\u3001\\u793a\\u4f8b\\n\\n\\u4e0b\\u9762\\u7684\\u4f8b\\u5b50\\uff0c\\u5224\\u65ad$(CC)\\u53d8\\u91cf\\u662f\\u5426\\u201cgcc\\u201d\\uff0c\\u5982\\u679c\\u662f\\u7684\\u8bdd\\uff0c\\u5219\\u4f7f\\u7528GNU\\u51fd\\u6570\\u7f16\\u8bd1\\u76ee\\u6807\\u3002\\n```\\nlibs_for_gcc = -lgnu\\nnormal_libs =\\n\\nfoo: $(objects)\\nifeq ($(CC),gcc)\\n\\t$(CC) -o foo $(objects) $(libs_for_gcc)\\nelse\\n\\t$(CC) -o foo $(objects) $(normal_libs)\\nendif\\n```\\n\\u53ef\\u89c1\\uff0c\\u5728\\u4e0a\\u9762\\u793a\\u4f8b\\u7684\\u8fd9\\u4e2a\\u89c4\\u5219\\u4e2d\\uff0c\\u76ee\\u6807\\u201cfoo\\u201d\\u53ef\\u4ee5\\u6839\\u636e\\u53d8\\u91cf\\u201c$(CC)\\u201d\\u503c\\u6765\\u9009\\u53d6\\u4e0d\\u540c\\u7684\\u51fd\\u6570\\u5e93\\u6765\\u7f16\\u8bd1\\u7a0b\\u5e8f\\u3002\\n\\n\\u6211\\u4eec\\u53ef\\u4ee5\\u4ece\\u4e0a\\u9762\\u7684\\u793a\\u4f8b\\u4e2d\\u770b\\u5230\\u4e09\\u4e2a\\u5173\\u952e\\u5b57\\uff1aifeq\\u3001else \\u548c endif\\u3002ifeq \\u7684\\u610f\\u601d\\u8868\\u793a\\u6761\\u4ef6\\u8bed\\u53e5\\u7684\\u5f00\\u59cb\\uff0c\\u5e76\\u6307\\u5b9a\\u4e00\\u4e2a\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\uff0c\\u8868\\u8fbe\\u5f0f\\u5305\\u542b\\u4e24\\u4e2a\\u53c2\\u6570\\uff0c\\u4ee5\\u9017\\u53f7\\u5206\\u9694\\uff0c\\u8868\\u8fbe\\u5f0f\\u4ee5\\u5706\\u62ec\\u53f7\\u62ec\\u8d77\\u3002else \\u8868\\u793a\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u4e3a\\u5047\\u7684\\u60c5\\u51b5\\u3002endif \\u8868\\u793a\\u4e00\\u4e2a\\u6761\\u4ef6\\u8bed\\u53e5\\u7684\\u7ed3\\u675f\\uff0c\\u4efb\\u4f55\\u4e00\\u4e2a\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u90fd\\u5e94\\u8be5\\u4ee5 endif \\u7ed3\\u675f\\u3002\\n\\n\\u5f53\\u6211\\u4eec\\u7684\\u53d8\\u91cf$(CC)\\u503c\\u662f gcc \\u65f6\\uff0c\\u76ee\\u6807foo\\u7684\\u89c4\\u5219\\u662f\\uff1a\\n```\\nfoo: $(objects)\\n\\t$(CC) -o foo $(objects) $(libs_for_gcc)\\n```\\n\\u800c\\u5f53\\u6211\\u4eec\\u7684\\u53d8\\u91cf$(CC)\\u503c\\u4e0d\\u662f\\u201cgcc\\u201d\\u65f6\\uff08\\u6bd4\\u5982\\u201ccc\\u201d\\uff09\\uff0c\\u76ee\\u6807foo\\u7684\\u89c4\\u5219\\u662f\\uff1a\\n```\\nfoo: $(objects)\\n\\t$(CC) -o foo $(objects) $(normal_libs)\\n```\\n\\u5f53\\u7136\\uff0c\\u6211\\u4eec\\u8fd8\\u53ef\\u4ee5\\u628a\\u4e0a\\u9762\\u7684\\u90a3\\u4e2a\\u4f8b\\u5b50\\u5199\\u5f97\\u66f4\\u7b80\\u6d01\\u4e00\\u4e9b\\uff1a\\n```\\nlibs_for_gcc = -lgnu\\nnormal_libs =\\n\\nifeq ($(CC),gcc)\\n\\tlibs=$(libs_for_gcc)\\nelse\\n\\tlibs=$(normal_libs)\\nendif\\n\\nfoo: $(objects)\\n\\t$(CC) -o foo $(objects) $(libs)\\n```\\n\\n##### \\u4e8c\\u3001\\u8bed\\u6cd5\\n\\n\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u7684\\u8bed\\u6cd5\\u4e3a\\uff1a\\n```\\n<conditional-directive>;\\n\\t<text-if-true>;\\nendif\\n```\\n\\u4ee5\\u53ca\\uff1a\\n```\\n<conditional-directive>;\\n\\t<text-if-true>;\\nelse\\n\\t<text-if-false>;\\nendif\\n```\\n\\u5176\\u4e2d<conditional-directive>;\\u8868\\u793a\\u6761\\u4ef6\\u5173\\u952e\\u5b57\\uff0c\\u5982 `ifeq`\\u3002\\u8fd9\\u4e2a\\u5173\\u952e\\u5b57\\u6709\\u56db\\u4e2a\\u3002\\n\\n\\u7b2c\\u4e00\\u4e2a\\u662f\\u6211\\u4eec\\u524d\\u9762\\u6240\\u89c1\\u8fc7\\u7684\\u201cifeq\\u201d\\n\\n    ifeq (<arg1>;, <arg2>;) \\n    ifeq \'<arg1>;\' \'<arg2>;\' \\n    ifeq \\"<arg1>;\\" \\"<arg2>;\\" \\n    ifeq \\"<arg1>;\\" \'<arg2>;\' \\n    ifeq \'<arg1>;\' \\"<arg2>;\\" \\n\\n\\u6bd4\\u8f83\\u53c2\\u6570`arg1`\\u548c`arg2`\\u7684\\u503c\\u662f\\u5426\\u76f8\\u540c\\u3002\\u5f53\\u7136\\uff0c\\u53c2\\u6570\\u4e2d\\u6211\\u4eec\\u8fd8\\u53ef\\u4ee5\\u4f7f\\u7528`make`\\u7684\\u51fd\\u6570\\u3002\\u5982\\uff1a\\n```\\nifeq ($(strip $(foo)),)\\n\\t<text-if-empty>;\\nendif\\n```\\n\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\u4f7f\\u7528\\u4e86`strip`\\u51fd\\u6570\\uff0c\\u5982\\u679c\\u8fd9\\u4e2a\\u51fd\\u6570\\u7684\\u8fd4\\u56de\\u503c\\u662f\\u7a7a\\uff08Empty\\uff09\\uff0c\\u90a3\\u4e48<text-if-empty>;\\u5c31\\u751f\\u6548\\u3002\\n\\n\\u7b2c\\u4e8c\\u4e2a\\u6761\\u4ef6\\u5173\\u952e\\u5b57\\u662f\\u201cifneq\\u201d\\u3002\\u8bed\\u6cd5\\u662f\\uff1a\\n\\n    ifneq (<arg1>;, <arg2>;) \\n    ifneq \'<arg1>;\' \'<arg2>;\' \\n    ifneq \\"<arg1>;\\" \\"<arg2>;\\" \\n    ifneq \\"<arg1>;\\" \'<arg2>;\' \\n    ifneq \'<arg1>;\' \\"<arg2>;\\" \\n\\n\\u5176\\u6bd4\\u8f83\\u53c2\\u6570`arg1`\\u548c`arg2`\\u7684\\u503c\\u662f\\u5426\\u76f8\\u540c\\uff0c\\u5982\\u679c\\u4e0d\\u540c\\uff0c\\u5219\\u4e3a\\u771f\\u3002\\u548c`ifeq`\\u7c7b\\u4f3c\\u3002\\n\\n\\u7b2c\\u4e09\\u4e2a\\u6761\\u4ef6\\u5173\\u952e\\u5b57\\u662f`ifdef`\\u3002\\u8bed\\u6cd5\\u662f\\uff1a\\n```\\nifdef <variable-name>; \\n```\\n\\u5982\\u679c\\u53d8\\u91cf<variable-name>;\\u7684\\u503c\\u975e\\u7a7a\\uff0c\\u90a3\\u5230\\u8868\\u8fbe\\u5f0f\\u4e3a\\u771f\\u3002\\u5426\\u5219\\uff0c\\u8868\\u8fbe\\u5f0f\\u4e3a\\u5047\\u3002\\u5f53\\u7136\\uff0c<variable-name>;\\u540c\\u6837\\u53ef\\u4ee5\\u662f\\u4e00\\u4e2a\\u51fd\\u6570\\u7684\\u8fd4\\u56de\\u503c\\u3002\\u6ce8\\u610f\\uff0c`ifdef `\\u53ea\\u662f\\u6d4b\\u8bd5\\u4e00\\u4e2a\\u53d8\\u91cf\\u662f\\u5426\\u6709\\u503c\\uff0c\\u5176\\u5e76\\u4e0d\\u4f1a\\u628a\\u53d8\\u91cf\\u6269\\u5c55\\u5230\\u5f53\\u524d\\u4f4d\\u7f6e\\u3002\\u8fd8\\u662f\\u6765\\u770b\\u4e24\\u4e2a\\u4f8b\\u5b50\\uff1a\\n```\\n\\u793a\\u4f8b\\u4e00\\uff1a\\nbar =\\nfoo = $(bar)\\nifdef foo\\nfrobozz = yes\\nelse\\nfrobozz = no\\nendif\\n\\n\\u793a\\u4f8b\\u4e8c\\uff1a\\nfoo =\\nifdef foo\\nfrobozz = yes\\nelse\\nfrobozz = no\\nendif\\n```\\n\\u7b2c\\u4e00\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c$(frobozz) \\u503c\\u662f`yes`\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u5219\\u662f`no`\\u3002\\n\\n\\u7b2c\\u56db\\u4e2a\\u6761\\u4ef6\\u5173\\u952e\\u5b57\\u662f`ifndef`\\u3002\\u5176\\u8bed\\u6cd5\\u662f\\uff1a\\n\\n    ifndef <variable-name>;\\n\\n\\u8fd9\\u4e2a\\u6211\\u5c31\\u4e0d\\u591a\\u8bf4\\u4e86\\uff0c\\u548c`ifdef`\\u662f\\u76f8\\u53cd\\u7684\\u610f\\u601d\\u3002\\n\\n\\u5728<conditional-directive>;\\u8fd9\\u4e00\\u884c\\u4e0a\\uff0c\\u591a\\u4f59\\u7684\\u7a7a\\u683c\\u662f\\u88ab\\u5141\\u8bb8\\u7684\\uff0c\\u4f46\\u662f\\u4e0d\\u80fd\\u4ee5[Tab]\\u952e\\u505a\\u4e3a\\u5f00\\u59cb\\uff08\\u4e0d\\u7136\\u5c31\\u88ab\\u8ba4\\u4e3a\\u662f\\u547d\\u4ee4\\uff09\\u3002\\u800c\\u6ce8\\u91ca\\u7b26\\u201c#\\u201d\\u540c\\u6837\\u4e5f\\u662f\\u5b89\\u5168\\u7684\\u3002`else`\\u548c`endif`\\u4e5f\\u4e00\\u6837\\uff0c\\u53ea\\u8981\\u4e0d\\u662f\\u4ee5[Tab]\\u952e\\u5f00\\u59cb\\u5c31\\u884c\\u4e86\\u3002\\n\\n\\u7279\\u522b\\u6ce8\\u610f\\u7684\\u662f\\uff0cmake \\u662f\\u5728\\u8bfb\\u53d6 Makefile \\u65f6\\u5c31\\u8ba1\\u7b97\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u7684\\u503c\\uff0c\\u5e76\\u6839\\u636e\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u7684\\u503c\\u6765\\u9009\\u62e9\\u8bed\\u53e5\\uff0c\\u6240\\u4ee5\\uff0c\\u4f60\\u6700\\u597d\\u4e0d\\u8981\\u628a\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff08\\u5982\\u201c$@\\u201d\\u7b49\\uff09\\u653e\\u5165\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u4e2d\\uff0c\\u56e0\\u4e3a\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\u662f\\u5728\\u8fd0\\u884c\\u65f6\\u624d\\u6709\\u7684\\u3002\\n\\n\\u800c\\u4e14\\uff0c\\u4e3a\\u4e86\\u907f\\u514d\\u6df7\\u4e71\\uff0cmake \\u4e0d\\u5141\\u8bb8\\u628a\\u6574\\u4e2a\\u6761\\u4ef6\\u8bed\\u53e5\\u5206\\u6210\\u4e24\\u90e8\\u5206\\u653e\\u5728\\u4e0d\\u540c\\u7684\\u6587\\u4ef6\\u4e2d\\u3002","html":"<p>\\u4f7f\\u7528\\u6761\\u4ef6\\u5224\\u65ad<\\/p>\\n<hr \\/>\\n<p>\\u4f7f\\u7528\\u6761\\u4ef6\\u5224\\u65ad\\uff0c\\u53ef\\u4ee5\\u8ba9 make \\u6839\\u636e\\u8fd0\\u884c\\u65f6\\u7684\\u4e0d\\u540c\\u60c5\\u51b5\\u9009\\u62e9\\u4e0d\\u540c\\u7684\\u6267\\u884c\\u5206\\u652f\\u3002\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u53ef\\u4ee5\\u662f\\u6bd4\\u8f83\\u53d8\\u91cf\\u7684\\u503c\\uff0c\\u6216\\u662f\\u6bd4\\u8f83\\u53d8\\u91cf\\u548c\\u5e38\\u91cf\\u7684\\u503c\\u3002<\\/p>\\n<h5>\\u4e00\\u3001\\u793a\\u4f8b<\\/h5>\\n<p>\\u4e0b\\u9762\\u7684\\u4f8b\\u5b50\\uff0c\\u5224\\u65ad$(CC)\\u53d8\\u91cf\\u662f\\u5426\\u201cgcc\\u201d\\uff0c\\u5982\\u679c\\u662f\\u7684\\u8bdd\\uff0c\\u5219\\u4f7f\\u7528GNU\\u51fd\\u6570\\u7f16\\u8bd1\\u76ee\\u6807\\u3002<\\/p>\\n<pre><code>libs_for_gcc = -lgnu\\nnormal_libs =\\n\\nfoo: $(objects)\\nifeq ($(CC),gcc)\\n    $(CC) -o foo $(objects) $(libs_for_gcc)\\nelse\\n    $(CC) -o foo $(objects) $(normal_libs)\\nendif<\\/code><\\/pre>\\n<p>\\u53ef\\u89c1\\uff0c\\u5728\\u4e0a\\u9762\\u793a\\u4f8b\\u7684\\u8fd9\\u4e2a\\u89c4\\u5219\\u4e2d\\uff0c\\u76ee\\u6807\\u201cfoo\\u201d\\u53ef\\u4ee5\\u6839\\u636e\\u53d8\\u91cf\\u201c$(CC)\\u201d\\u503c\\u6765\\u9009\\u53d6\\u4e0d\\u540c\\u7684\\u51fd\\u6570\\u5e93\\u6765\\u7f16\\u8bd1\\u7a0b\\u5e8f\\u3002<\\/p>\\n<p>\\u6211\\u4eec\\u53ef\\u4ee5\\u4ece\\u4e0a\\u9762\\u7684\\u793a\\u4f8b\\u4e2d\\u770b\\u5230\\u4e09\\u4e2a\\u5173\\u952e\\u5b57\\uff1aifeq\\u3001else \\u548c endif\\u3002ifeq \\u7684\\u610f\\u601d\\u8868\\u793a\\u6761\\u4ef6\\u8bed\\u53e5\\u7684\\u5f00\\u59cb\\uff0c\\u5e76\\u6307\\u5b9a\\u4e00\\u4e2a\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\uff0c\\u8868\\u8fbe\\u5f0f\\u5305\\u542b\\u4e24\\u4e2a\\u53c2\\u6570\\uff0c\\u4ee5\\u9017\\u53f7\\u5206\\u9694\\uff0c\\u8868\\u8fbe\\u5f0f\\u4ee5\\u5706\\u62ec\\u53f7\\u62ec\\u8d77\\u3002else \\u8868\\u793a\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u4e3a\\u5047\\u7684\\u60c5\\u51b5\\u3002endif \\u8868\\u793a\\u4e00\\u4e2a\\u6761\\u4ef6\\u8bed\\u53e5\\u7684\\u7ed3\\u675f\\uff0c\\u4efb\\u4f55\\u4e00\\u4e2a\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u90fd\\u5e94\\u8be5\\u4ee5 endif \\u7ed3\\u675f\\u3002<\\/p>\\n<p>\\u5f53\\u6211\\u4eec\\u7684\\u53d8\\u91cf$(CC)\\u503c\\u662f gcc \\u65f6\\uff0c\\u76ee\\u6807foo\\u7684\\u89c4\\u5219\\u662f\\uff1a<\\/p>\\n<pre><code>foo: $(objects)\\n    $(CC) -o foo $(objects) $(libs_for_gcc)<\\/code><\\/pre>\\n<p>\\u800c\\u5f53\\u6211\\u4eec\\u7684\\u53d8\\u91cf$(CC)\\u503c\\u4e0d\\u662f\\u201cgcc\\u201d\\u65f6\\uff08\\u6bd4\\u5982\\u201ccc\\u201d\\uff09\\uff0c\\u76ee\\u6807foo\\u7684\\u89c4\\u5219\\u662f\\uff1a<\\/p>\\n<pre><code>foo: $(objects)\\n    $(CC) -o foo $(objects) $(normal_libs)<\\/code><\\/pre>\\n<p>\\u5f53\\u7136\\uff0c\\u6211\\u4eec\\u8fd8\\u53ef\\u4ee5\\u628a\\u4e0a\\u9762\\u7684\\u90a3\\u4e2a\\u4f8b\\u5b50\\u5199\\u5f97\\u66f4\\u7b80\\u6d01\\u4e00\\u4e9b\\uff1a<\\/p>\\n<pre><code>libs_for_gcc = -lgnu\\nnormal_libs =\\n\\nifeq ($(CC),gcc)\\n    libs=$(libs_for_gcc)\\nelse\\n    libs=$(normal_libs)\\nendif\\n\\nfoo: $(objects)\\n    $(CC) -o foo $(objects) $(libs)<\\/code><\\/pre>\\n<h5>\\u4e8c\\u3001\\u8bed\\u6cd5<\\/h5>\\n<p>\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u7684\\u8bed\\u6cd5\\u4e3a\\uff1a<\\/p>\\n<pre><code>&lt;conditional-directive&gt;;\\n    &lt;text-if-true&gt;;\\nendif<\\/code><\\/pre>\\n<p>\\u4ee5\\u53ca\\uff1a<\\/p>\\n<pre><code>&lt;conditional-directive&gt;;\\n    &lt;text-if-true&gt;;\\nelse\\n    &lt;text-if-false&gt;;\\nendif<\\/code><\\/pre>\\n<p>\\u5176\\u4e2d<conditional-directive>;\\u8868\\u793a\\u6761\\u4ef6\\u5173\\u952e\\u5b57\\uff0c\\u5982 <code>ifeq<\\/code>\\u3002\\u8fd9\\u4e2a\\u5173\\u952e\\u5b57\\u6709\\u56db\\u4e2a\\u3002<\\/p>\\n<p>\\u7b2c\\u4e00\\u4e2a\\u662f\\u6211\\u4eec\\u524d\\u9762\\u6240\\u89c1\\u8fc7\\u7684\\u201cifeq\\u201d<\\/p>\\n<pre><code>ifeq (&lt;arg1&gt;;, &lt;arg2&gt;;) \\nifeq \'&lt;arg1&gt;;\' \'&lt;arg2&gt;;\' \\nifeq \\"&lt;arg1&gt;;\\" \\"&lt;arg2&gt;;\\" \\nifeq \\"&lt;arg1&gt;;\\" \'&lt;arg2&gt;;\' \\nifeq \'&lt;arg1&gt;;\' \\"&lt;arg2&gt;;\\" <\\/code><\\/pre>\\n<p>\\u6bd4\\u8f83\\u53c2\\u6570<code>arg1<\\/code>\\u548c<code>arg2<\\/code>\\u7684\\u503c\\u662f\\u5426\\u76f8\\u540c\\u3002\\u5f53\\u7136\\uff0c\\u53c2\\u6570\\u4e2d\\u6211\\u4eec\\u8fd8\\u53ef\\u4ee5\\u4f7f\\u7528<code>make<\\/code>\\u7684\\u51fd\\u6570\\u3002\\u5982\\uff1a<\\/p>\\n<pre><code>ifeq ($(strip $(foo)),)\\n    &lt;text-if-empty&gt;;\\nendif<\\/code><\\/pre>\\n<p>\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\u4f7f\\u7528\\u4e86<code>strip<\\/code>\\u51fd\\u6570\\uff0c\\u5982\\u679c\\u8fd9\\u4e2a\\u51fd\\u6570\\u7684\\u8fd4\\u56de\\u503c\\u662f\\u7a7a\\uff08Empty\\uff09\\uff0c\\u90a3\\u4e48<text-if-empty>;\\u5c31\\u751f\\u6548\\u3002<\\/p>\\n<p>\\u7b2c\\u4e8c\\u4e2a\\u6761\\u4ef6\\u5173\\u952e\\u5b57\\u662f\\u201cifneq\\u201d\\u3002\\u8bed\\u6cd5\\u662f\\uff1a<\\/p>\\n<pre><code>ifneq (&lt;arg1&gt;;, &lt;arg2&gt;;) \\nifneq \'&lt;arg1&gt;;\' \'&lt;arg2&gt;;\' \\nifneq \\"&lt;arg1&gt;;\\" \\"&lt;arg2&gt;;\\" \\nifneq \\"&lt;arg1&gt;;\\" \'&lt;arg2&gt;;\' \\nifneq \'&lt;arg1&gt;;\' \\"&lt;arg2&gt;;\\" <\\/code><\\/pre>\\n<p>\\u5176\\u6bd4\\u8f83\\u53c2\\u6570<code>arg1<\\/code>\\u548c<code>arg2<\\/code>\\u7684\\u503c\\u662f\\u5426\\u76f8\\u540c\\uff0c\\u5982\\u679c\\u4e0d\\u540c\\uff0c\\u5219\\u4e3a\\u771f\\u3002\\u548c<code>ifeq<\\/code>\\u7c7b\\u4f3c\\u3002<\\/p>\\n<p>\\u7b2c\\u4e09\\u4e2a\\u6761\\u4ef6\\u5173\\u952e\\u5b57\\u662f<code>ifdef<\\/code>\\u3002\\u8bed\\u6cd5\\u662f\\uff1a<\\/p>\\n<pre><code>ifdef &lt;variable-name&gt;; <\\/code><\\/pre>\\n<p>\\u5982\\u679c\\u53d8\\u91cf<variable-name>;\\u7684\\u503c\\u975e\\u7a7a\\uff0c\\u90a3\\u5230\\u8868\\u8fbe\\u5f0f\\u4e3a\\u771f\\u3002\\u5426\\u5219\\uff0c\\u8868\\u8fbe\\u5f0f\\u4e3a\\u5047\\u3002\\u5f53\\u7136\\uff0c<variable-name>;\\u540c\\u6837\\u53ef\\u4ee5\\u662f\\u4e00\\u4e2a\\u51fd\\u6570\\u7684\\u8fd4\\u56de\\u503c\\u3002\\u6ce8\\u610f\\uff0c<code>ifdef<\\/code>\\u53ea\\u662f\\u6d4b\\u8bd5\\u4e00\\u4e2a\\u53d8\\u91cf\\u662f\\u5426\\u6709\\u503c\\uff0c\\u5176\\u5e76\\u4e0d\\u4f1a\\u628a\\u53d8\\u91cf\\u6269\\u5c55\\u5230\\u5f53\\u524d\\u4f4d\\u7f6e\\u3002\\u8fd8\\u662f\\u6765\\u770b\\u4e24\\u4e2a\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>\\u793a\\u4f8b\\u4e00\\uff1a\\nbar =\\nfoo = $(bar)\\nifdef foo\\nfrobozz = yes\\nelse\\nfrobozz = no\\nendif\\n\\n\\u793a\\u4f8b\\u4e8c\\uff1a\\nfoo =\\nifdef foo\\nfrobozz = yes\\nelse\\nfrobozz = no\\nendif<\\/code><\\/pre>\\n<p>\\u7b2c\\u4e00\\u4e2a\\u4f8b\\u5b50\\u4e2d\\uff0c$(frobozz) \\u503c\\u662f<code>yes<\\/code>\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u5219\\u662f<code>no<\\/code>\\u3002<\\/p>\\n<p>\\u7b2c\\u56db\\u4e2a\\u6761\\u4ef6\\u5173\\u952e\\u5b57\\u662f<code>ifndef<\\/code>\\u3002\\u5176\\u8bed\\u6cd5\\u662f\\uff1a<\\/p>\\n<pre><code>ifndef &lt;variable-name&gt;;<\\/code><\\/pre>\\n<p>\\u8fd9\\u4e2a\\u6211\\u5c31\\u4e0d\\u591a\\u8bf4\\u4e86\\uff0c\\u548c<code>ifdef<\\/code>\\u662f\\u76f8\\u53cd\\u7684\\u610f\\u601d\\u3002<\\/p>\\n<p>\\u5728<conditional-directive>;\\u8fd9\\u4e00\\u884c\\u4e0a\\uff0c\\u591a\\u4f59\\u7684\\u7a7a\\u683c\\u662f\\u88ab\\u5141\\u8bb8\\u7684\\uff0c\\u4f46\\u662f\\u4e0d\\u80fd\\u4ee5[Tab]\\u952e\\u505a\\u4e3a\\u5f00\\u59cb\\uff08\\u4e0d\\u7136\\u5c31\\u88ab\\u8ba4\\u4e3a\\u662f\\u547d\\u4ee4\\uff09\\u3002\\u800c\\u6ce8\\u91ca\\u7b26\\u201c#\\u201d\\u540c\\u6837\\u4e5f\\u662f\\u5b89\\u5168\\u7684\\u3002<code>else<\\/code>\\u548c<code>endif<\\/code>\\u4e5f\\u4e00\\u6837\\uff0c\\u53ea\\u8981\\u4e0d\\u662f\\u4ee5[Tab]\\u952e\\u5f00\\u59cb\\u5c31\\u884c\\u4e86\\u3002<\\/p>\\n<p>\\u7279\\u522b\\u6ce8\\u610f\\u7684\\u662f\\uff0cmake \\u662f\\u5728\\u8bfb\\u53d6 Makefile \\u65f6\\u5c31\\u8ba1\\u7b97\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u7684\\u503c\\uff0c\\u5e76\\u6839\\u636e\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u7684\\u503c\\u6765\\u9009\\u62e9\\u8bed\\u53e5\\uff0c\\u6240\\u4ee5\\uff0c\\u4f60\\u6700\\u597d\\u4e0d\\u8981\\u628a\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\uff08\\u5982\\u201c$@\\u201d\\u7b49\\uff09\\u653e\\u5165\\u6761\\u4ef6\\u8868\\u8fbe\\u5f0f\\u4e2d\\uff0c\\u56e0\\u4e3a\\u81ea\\u52a8\\u5316\\u53d8\\u91cf\\u662f\\u5728\\u8fd0\\u884c\\u65f6\\u624d\\u6709\\u7684\\u3002<\\/p>\\n<p>\\u800c\\u4e14\\uff0c\\u4e3a\\u4e86\\u907f\\u514d\\u6df7\\u4e71\\uff0cmake \\u4e0d\\u5141\\u8bb8\\u628a\\u6574\\u4e2a\\u6761\\u4ef6\\u8bed\\u53e5\\u5206\\u6210\\u4e24\\u90e8\\u5206\\u653e\\u5728\\u4e0d\\u540c\\u7684\\u6587\\u4ef6\\u4e2d\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => 'makefile 中使用条件判断',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 71,
                'published_at' => '2020-10-03 20:30:00',
                'created_at' => '2020-10-03 21:44:26',
                'updated_at' => '2022-01-03 21:18:01',
                'deleted_at' => NULL,
            ),
            13 => 
            array (
                'id' => 14,
                'category_id' => 8,
                'collection_id' => 3,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'makefile-yupij',
                'title' => '跟我一起写 Makefile -- 使用函数',
                'subtitle' => '使用函数',
            'content' => '{"raw":"# \\u4f7f\\u7528\\u51fd\\u6570\\n\\n\\u5728 Makefile \\u4e2d\\u53ef\\u4ee5\\u4f7f\\u7528\\u51fd\\u6570\\u6765\\u5904\\u7406\\u53d8\\u91cf\\uff0c\\u4ece\\u800c\\u8ba9\\u6211\\u4eec\\u7684\\u547d\\u4ee4\\u6216\\u662f\\u89c4\\u5219\\u66f4\\u4e3a\\u7684\\u7075\\u6d3b\\u548c\\u5177\\u6709\\u667a\\u80fd\\u3002make \\u6240\\u652f\\u6301\\u7684\\u51fd\\u6570\\u4e5f\\u4e0d\\u7b97\\u5f88\\u591a\\uff0c\\u4e0d\\u8fc7\\u5df2\\u7ecf\\u8db3\\u591f\\u6211\\u4eec\\u7684\\u64cd\\u4f5c\\u4e86\\u3002\\u51fd\\u6570\\u8c03\\u7528\\u540e\\uff0c\\u51fd\\u6570\\u7684\\u8fd4\\u56de\\u503c**\\u53ef\\u4ee5\\u5f53\\u505a\\u53d8\\u91cf**\\u6765\\u4f7f\\u7528\\u3002\\n\\n\\n### \\u4e00\\u3001\\u51fd\\u6570\\u7684\\u8c03\\u7528\\u8bed\\u6cd5\\n\\n\\u51fd\\u6570\\u8c03\\u7528\\uff0c\\u5f88\\u50cf\\u53d8\\u91cf\\u7684\\u4f7f\\u7528\\uff0c\\u4e5f\\u662f\\u4ee5\\u201c$\\u201d\\u6765\\u6807\\u8bc6\\u7684\\uff0c\\u5176\\u8bed\\u6cd5\\u5982\\u4e0b\\uff1a\\n```\\n$(<function>; <arguments>;)\\n```\\n\\u6216\\u662f\\n```\\n${<function>; <arguments>;}\\n```\\n\\u8fd9\\u91cc\\uff0c<function>; \\u5c31\\u662f\\u51fd\\u6570\\u540d\\uff0cmake \\u652f\\u6301\\u7684\\u51fd\\u6570\\u4e0d\\u591a\\u3002<arguments>; \\u662f\\u51fd\\u6570\\u7684\\u53c2\\u6570\\uff0c\\u53c2\\u6570\\u95f4\\u4ee5\\u9017\\u53f7`,`\\u5206\\u9694\\uff0c\\u800c\\u51fd\\u6570\\u540d\\u548c\\u53c2\\u6570\\u4e4b\\u95f4\\u4ee5\\u7a7a\\u683c\\u5206\\u9694\\u3002\\u51fd\\u6570\\u8c03\\u7528\\u4ee5`$`\\u5f00\\u5934\\uff0c\\u4ee5\\u5706\\u62ec\\u53f7\\u6216\\u82b1\\u62ec\\u53f7\\u628a\\u51fd\\u6570\\u540d\\u548c\\u53c2\\u6570\\u62ec\\u8d77\\u3002\\u611f\\u89c9\\u5f88\\u50cf\\u4e00\\u4e2a\\u53d8\\u91cf\\uff0c\\u662f\\u4e0d\\u662f\\uff1f\\u51fd\\u6570\\u4e2d\\u7684\\u53c2\\u6570\\u53ef\\u4ee5\\u4f7f\\u7528\\u53d8\\u91cf\\uff0c\\u4e3a\\u4e86\\u98ce\\u683c\\u7684\\u7edf\\u4e00\\uff0c\\u51fd\\u6570\\u548c\\u53d8\\u91cf\\u7684\\u62ec\\u53f7\\u6700\\u597d\\u4e00\\u6837\\uff0c\\u5982\\u4f7f\\u7528`$(subst a,b,$(x))`\\u8fd9\\u6837\\u7684\\u5f62\\u5f0f\\uff0c\\u800c\\u4e0d\\u662f`$(subst a,b,${x})`\\u7684\\u5f62\\u5f0f\\u3002\\u56e0\\u4e3a\\u7edf\\u4e00\\u4f1a\\u66f4\\u6e05\\u695a\\uff0c\\u4e5f\\u4f1a\\u51cf\\u5c11\\u4e00\\u4e9b\\u4e0d\\u5fc5\\u8981\\u7684\\u9ebb\\u70e6\\u3002\\n\\n\\u8fd8\\u662f\\u6765\\u770b\\u4e00\\u4e2a\\u793a\\u4f8b\\uff1a\\n```\\ncomma:= ,\\nempty:=\\nspace:= $(empty) $(empty)\\nfoo:= a b c\\nbar:= $(subst $(space),$(comma),$(foo))\\n```\\n\\u5728\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c$(comma) \\u7684\\u503c\\u662f\\u4e00\\u4e2a\\u9017\\u53f7\\u3002$(space) \\u4f7f\\u7528\\u4e86 $(empty) \\u5b9a\\u4e49\\u4e86\\u4e00\\u4e2a\\u7a7a\\u683c\\uff0c$(foo)\\u7684\\u503c\\u662f`a b c`\\uff0c$(bar) \\u7684\\u5b9a\\u4e49\\u7528\\uff0c\\u8c03\\u7528\\u4e86\\u51fd\\u6570`subst`\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u66ff\\u6362\\u51fd\\u6570\\uff0c\\u8fd9\\u4e2a\\u51fd\\u6570\\u6709\\u4e09\\u4e2a\\u53c2\\u6570\\uff0c\\u7b2c\\u4e00\\u4e2a\\u53c2\\u6570\\u662f\\u88ab\\u66ff\\u6362\\u5b57\\u4e32\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u53c2\\u6570\\u662f\\u66ff\\u6362\\u5b57\\u4e32\\uff0c\\u7b2c\\u4e09\\u4e2a\\u53c2\\u6570\\u662f\\u66ff\\u6362\\u64cd\\u4f5c\\u4f5c\\u7528\\u7684\\u5b57\\u4e32\\u3002\\u8fd9\\u4e2a\\u51fd\\u6570\\u4e5f\\u5c31\\u662f\\u628a$(foo)\\u4e2d\\u7684\\u7a7a\\u683c\\u66ff\\u6362\\u6210\\u9017\\u53f7\\uff0c\\u6240\\u4ee5$(bar)\\u7684\\u503c\\u662f\\u201ca,b,c\\u201d\\u3002\\n\\n\\n### \\u4e8c\\u3001\\u5b57\\u7b26\\u4e32\\u5904\\u7406\\u51fd\\u6570\\n\\n>$(subst <from>;,<to>;,<text>;) \\n\\n* \\u540d\\u79f0\\uff1a\\u5b57\\u7b26\\u4e32\\u66ff\\u6362\\u51fd\\u6570\\u2014\\u2014subst\\u3002\\n* \\u529f\\u80fd\\uff1a\\u628a\\u5b57\\u4e32<text>;\\u4e2d\\u7684<from>;\\u5b57\\u7b26\\u4e32\\u66ff\\u6362\\u6210<to>;\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u51fd\\u6570\\u8fd4\\u56de\\u88ab\\u66ff\\u6362\\u8fc7\\u540e\\u7684\\u5b57\\u7b26\\u4e32\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n\\t\\t$(subst ee,EE,feet on the street)\\uff0c\\n        \\n\\t\\u628a\\u201cfeet on the street\\u201d\\u4e2d\\u7684\\u201cee\\u201d\\u66ff\\u6362\\u6210\\u201cEE\\u201d\\uff0c\\u8fd4\\u56de\\u7ed3\\u679c\\u662f\\u201cfEEt on the strEEt\\u201d\\u3002\\n\\n\\n>$(patsubst <pattern>;,<replacement>;,<text>;) \\n\\n* \\u540d\\u79f0\\uff1a\\u6a21\\u5f0f\\u5b57\\u7b26\\u4e32\\u66ff\\u6362\\u51fd\\u6570\\u2014\\u2014patsubst\\u3002\\n* \\u529f\\u80fd\\uff1a\\u67e5\\u627e<text>;\\u4e2d\\u7684\\u5355\\u8bcd\\uff08\\u5355\\u8bcd\\u4ee5\\u201c\\u7a7a\\u683c\\u201d\\u3001\\u201cTab\\u201d\\u6216\\u201c\\u56de\\u8f66\\u201d\\u201c\\u6362\\u884c\\u201d\\u5206\\u9694\\uff09\\u662f\\u5426\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\uff0c\\u5982\\u679c\\u5339\\u914d\\u7684\\u8bdd\\uff0c\\u5219\\u4ee5<replacement>;\\u66ff\\u6362\\u3002\\u8fd9\\u91cc\\uff0c<pattern>;\\u53ef\\u4ee5\\u5305\\u62ec\\u901a\\u914d\\u7b26`%`\\uff0c\\u8868\\u793a\\u4efb\\u610f\\u957f\\u5ea6\\u7684\\u5b57\\u4e32\\u3002\\u5982\\u679c<replacement>;\\u4e2d\\u4e5f\\u5305\\u542b`%`\\uff0c\\u90a3\\u4e48\\uff0c<replacement>;\\u4e2d\\u7684\\u8fd9\\u4e2a`%\\u5c06\\u662f<pattern>;\\u4e2d\\u7684\\u90a3\\u4e2a`%`\\u6240\\u4ee3\\u8868\\u7684\\u5b57\\u4e32\\u3002\\uff08\\u53ef\\u4ee5\\u7528`\\\\`\\u6765\\u8f6c\\u4e49\\uff0c\\u4ee5`\\\\%`\\u6765\\u8868\\u793a\\u771f\\u5b9e\\u542b\\u4e49\\u7684`%`\\u5b57\\u7b26\\uff09\\n* \\u8fd4\\u56de\\uff1a\\u51fd\\u6570\\u8fd4\\u56de\\u88ab\\u66ff\\u6362\\u8fc7\\u540e\\u7684\\u5b57\\u7b26\\u4e32\\u3002\\n\\n* \\u793a\\u4f8b\\uff1a\\n\\n        $(patsubst %.c,%.o,x.c.c bar.c)\\n\\n        \\u628a\\u5b57\\u4e32 \\u201cx.c.c bar.c\\u201d \\u7b26\\u5408\\u6a21\\u5f0f [%.c] \\u7684\\u5355\\u8bcd\\u66ff\\u6362\\u6210 [%.o] \\uff0c\\u8fd4\\u56de\\u7ed3\\u679c\\u662f\\u201cx.c.o bar.o\\u201d\\n\\n* \\u5907\\u6ce8\\uff1a\\n\\n\\t\\u8fd9\\u548c\\u6211\\u4eec\\u524d\\u9762\\u201c\\u53d8\\u91cf\\u7ae0\\u8282\\u201d\\u8bf4\\u8fc7\\u7684\\u76f8\\u5173\\u77e5\\u8bc6\\u6709\\u70b9\\u76f8\\u4f3c\\u3002\\u5982\\uff1a\\n\\n* `$(var:<pattern>;=<replacement>;)` \\u76f8\\u5f53\\u4e8e `$(patsubst <pattern>;,<replacement>;,$(var))`\\uff0c\\n\\n* `$(var: <suffix>;=<replacement>;)` \\u76f8\\u5f53\\u4e8e `$(patsubst %<suffix>;,%<replacement>;,$(var))`\\u3002\\n\\n\\t\\u4f8b\\u5982\\u6709\\uff1aobjects = foo.o bar.o baz.o\\uff0c\\u90a3\\u4e48\\uff0c`$(objects:.o=.c)`\\u548c`$(patsubst %.o,%.c,$(objects))`\\u662f\\u4e00\\u6837\\u7684\\u3002\\n\\n\\t\\n>$(strip <string>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u53bb\\u7a7a\\u683c\\u51fd\\u6570\\u2014\\u2014strip\\u3002\\n* \\u529f\\u80fd\\uff1a\\u53bb\\u6389<string>;\\u5b57\\u4e32\\u4e2d\\u5f00\\u5934\\u548c\\u7ed3\\u5c3e\\u7684\\u7a7a\\u5b57\\u7b26\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u88ab\\u53bb\\u6389\\u7a7a\\u683c\\u7684\\u5b57\\u7b26\\u4e32\\u503c\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n```\\n$(strip a b c )\\n```\\n\\u628a\\u5b57\\u4e32\\u201ca b c \\u201d\\u53bb\\u5230\\u5f00\\u5934\\u548c\\u7ed3\\u5c3e\\u7684\\u7a7a\\u683c\\uff0c\\u7ed3\\u679c\\u662f\\u201ca b c\\u201d\\u3002\\n\\n\\n>$(findstring <find>;,<in>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u67e5\\u627e\\u5b57\\u7b26\\u4e32\\u51fd\\u6570\\u2014\\u2014findstring\\u3002\\n* \\u529f\\u80fd\\uff1a\\u5728\\u5b57\\u4e32<in>;\\u4e2d\\u67e5\\u627e<find>;\\u5b57\\u4e32\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u5982\\u679c\\u627e\\u5230\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de<find>;\\uff0c\\u5426\\u5219\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n```\\n$(findstring a,a b c)\\n$(findstring a,b c)\\n```\\n\\u7b2c\\u4e00\\u4e2a\\u51fd\\u6570\\u8fd4\\u56de\\u201ca\\u201d\\u5b57\\u7b26\\u4e32\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u8fd4\\u56de\\u201c\\u201d\\u5b57\\u7b26\\u4e32\\uff08\\u7a7a\\u5b57\\u7b26\\u4e32\\uff09\\n\\n\\n>$(filter <pattern...>;,<text>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u8fc7\\u6ee4\\u51fd\\u6570\\u2014\\u2014filter\\u3002\\n* \\u529f\\u80fd\\uff1a\\u4ee5<pattern>;\\u6a21\\u5f0f\\u8fc7\\u6ee4<text>;\\u5b57\\u7b26\\u4e32\\u4e2d\\u7684\\u5355\\u8bcd\\uff0c\\u4fdd\\u7559\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u5355\\u8bcd\\u3002\\u53ef\\u4ee5\\u6709\\u591a\\u4e2a\\u6a21\\u5f0f\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u5b57\\u4e32\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n\\n\\t\\tsources := foo.c bar.c baz.s ugh.h\\n\\t\\tfoo: $(sources)\\n\\t\\tcc $(filter %.c %.s,$(sources)) -o foo\\n\\n\\t\\t$(filter %.c %.s,$(sources))\\u8fd4\\u56de\\u7684\\u503c\\u662f\\u201cfoo.c bar.c baz.s\\u201d\\u3002\\n\\n\\n>$(filter-out <pattern...>;,<text>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u53cd\\u8fc7\\u6ee4\\u51fd\\u6570\\u2014\\u2014filter-out\\u3002\\n* \\u529f\\u80fd\\uff1a\\u4ee5<pattern>;\\u6a21\\u5f0f\\u8fc7\\u6ee4<text>;\\u5b57\\u7b26\\u4e32\\u4e2d\\u7684\\u5355\\u8bcd\\uff0c\\u53bb\\u9664\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u5355\\u8bcd\\u3002\\u53ef\\u4ee5\\u6709\\u591a\\u4e2a\\u6a21\\u5f0f\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u4e0d\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u5b57\\u4e32\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n\\t\\tobjects=main1.o foo.o main2.o bar.o\\n\\t\\tmains=main1.o main2.o\\n\\n\\t\\t$(filter-out $(mains),$(objects)) \\u8fd4\\u56de\\u503c\\u662f\\u201cfoo.o bar.o\\u201d\\u3002\\n\\n>$(sort <list>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u6392\\u5e8f\\u51fd\\u6570\\u2014\\u2014sort\\u3002\\n* \\u529f\\u80fd\\uff1a\\u7ed9\\u5b57\\u7b26\\u4e32<list>;\\u4e2d\\u7684\\u5355\\u8bcd\\u6392\\u5e8f\\uff08\\u5347\\u5e8f\\uff09\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6392\\u5e8f\\u540e\\u7684\\u5b57\\u7b26\\u4e32\\u3002\\n* \\u793a\\u4f8b\\uff1a$(sort foo bar lose)\\u8fd4\\u56de\\u201cbar foo lose\\u201d \\u3002\\n* \\u5907\\u6ce8\\uff1asort\\u51fd\\u6570\\u4f1a\\u53bb\\u6389<list>;\\u4e2d\\u76f8\\u540c\\u7684\\u5355\\u8bcd\\u3002\\n\\n\\t\\n>$(word <n>;,<text>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u53d6\\u5355\\u8bcd\\u51fd\\u6570\\u2014\\u2014word\\u3002\\n* \\u529f\\u80fd\\uff1a\\u53d6\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u7b2c<n>;\\u4e2a\\u5355\\u8bcd\\u3002\\uff08\\u4ece\\u4e00\\u5f00\\u59cb\\uff09\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u7b2c<n>;\\u4e2a\\u5355\\u8bcd\\u3002\\u5982\\u679c<n>;\\u6bd4<text>;\\u4e2d\\u7684\\u5355\\u8bcd\\u6570\\u8981\\u5927\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n\\t\\t$(word 2, foo bar baz)\\n\\t\\t# \\u8fd4\\u56de\\u503c\\u662f\\u201cbar\\u201d\\u3002\\n\\n>$(wordlist <s>;,<e>;,<text>;)  \\n\\n* \\u540d\\u79f0\\uff1a\\u53d6\\u5355\\u8bcd\\u4e32\\u51fd\\u6570\\u2014\\u2014wordlist\\u3002\\n* \\u529f\\u80fd\\uff1a\\u4ece\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u53d6\\u4ece<s>;\\u5f00\\u59cb\\u5230<e>;\\u7684\\u5355\\u8bcd\\u4e32\\u3002<s>;\\u548c<e>;\\u662f\\u4e00\\u4e2a\\u6570\\u5b57\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u4ece<s>;\\u5230<e>;\\u7684\\u5355\\u8bcd\\u5b57\\u4e32\\u3002\\u5982\\u679c<s>;\\u6bd4<text>;\\u4e2d\\u7684\\u5355\\u8bcd\\u6570\\u8981\\u5927\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32\\u3002\\u5982\\u679c<e>;\\u5927\\u4e8e<text>;\\u7684\\u5355\\u8bcd\\u6570\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de\\u4ece<s>;\\u5f00\\u59cb\\uff0c\\u5230<text>;\\u7ed3\\u675f\\u7684\\u5355\\u8bcd\\u4e32\\u3002\\n* \\u793a\\u4f8b\\uff1a $(wordlist 2, 3, foo bar baz)\\u8fd4\\u56de\\u503c\\u662f\\u201cbar baz\\u201d\\u3002\\n\\n\\t\\n>$(words <text>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u5355\\u8bcd\\u4e2a\\u6570\\u7edf\\u8ba1\\u51fd\\u6570\\u2014\\u2014words\\u3002\\n* \\u529f\\u80fd\\uff1a\\u7edf\\u8ba1<text>;\\u4e2d\\u5b57\\u7b26\\u4e32\\u4e2d\\u7684\\u5355\\u8bcd\\u4e2a\\u6570\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de<text>;\\u4e2d\\u7684\\u5355\\u8bcd\\u6570\\u3002\\n* \\u793a\\u4f8b\\uff1a$(words, foo bar baz)\\u8fd4\\u56de\\u503c\\u662f\\u201c3\\u201d\\u3002\\n* \\u5907\\u6ce8\\uff1a\\u5982\\u679c\\u6211\\u4eec\\u8981\\u53d6<text>;\\u4e2d\\u6700\\u540e\\u7684\\u4e00\\u4e2a\\u5355\\u8bcd\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u8fd9\\u6837\\uff1a\\n\\t\\t$(word $(words <text>;),<text>;)\\u3002\\n\\n\\t\\n>$(firstword <text>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u9996\\u5355\\u8bcd\\u51fd\\u6570\\u2014\\u2014firstword\\u3002\\n* \\u529f\\u80fd\\uff1a\\u53d6\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u5355\\u8bcd\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u5b57\\u7b26\\u4e32<text>;\\u7684\\u7b2c\\u4e00\\u4e2a\\u5355\\u8bcd\\u3002\\n* \\u793a\\u4f8b\\uff1a$(firstword foo bar)\\u8fd4\\u56de\\u503c\\u662f\\u201cfoo\\u201d\\u3002\\n* \\u5907\\u6ce8\\uff1a\\u8fd9\\u4e2a\\u51fd\\u6570\\u53ef\\u4ee5\\u7528word\\u51fd\\u6570\\u6765\\u5b9e\\u73b0\\uff1a$(word 1,<text>;)\\u3002\\n\\n\\u4ee5\\u4e0a\\uff0c\\u662f\\u6240\\u6709\\u7684\\u5b57\\u7b26\\u4e32\\u64cd\\u4f5c\\u51fd\\u6570\\uff0c\\u5982\\u679c\\u642d\\u914d\\u6df7\\u5408\\u4f7f\\u7528\\uff0c\\u53ef\\u4ee5\\u5b8c\\u6210\\u6bd4\\u8f83\\u590d\\u6742\\u7684\\u529f\\u80fd\\u3002\\u8fd9\\u91cc\\uff0c\\u4e3e\\u4e00\\u4e2a\\u73b0\\u5b9e\\u4e2d\\u5e94\\u7528\\u7684\\u4f8b\\u5b50\\u3002\\u6211\\u4eec\\u77e5\\u9053\\uff0cmake\\u4f7f\\u7528\\u201cVPATH\\u201d\\u53d8\\u91cf\\u6765\\u6307\\u5b9a\\u201c\\u4f9d\\u8d56\\u6587\\u4ef6\\u201d\\u7684\\u641c\\u7d22\\u8def\\u5f84\\u3002\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5229\\u7528\\u8fd9\\u4e2a\\u641c\\u7d22\\u8def\\u5f84\\u6765\\u6307\\u5b9a\\u7f16\\u8bd1\\u5668\\u5bf9\\u5934\\u6587\\u4ef6\\u7684\\u641c\\u7d22\\u8def\\u5f84\\u53c2\\u6570CFLAGS\\uff0c\\u5982\\uff1a\\n\\n    override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))\\n\\n  \\u5982\\u679c\\u6211\\u4eec\\u7684\\u201c$(VPATH)\\u201d\\u503c\\u662f\\u201csrc:..\\/headers\\u201d\\uff0c\\u90a3\\u4e48\\u201c$(patsubst %,-I%,$(subst :, ,$(VPATH)))\\u201d\\u5c06\\u8fd4\\u56de\\u201c-Isrc -I..\\/headers\\u201d\\uff0c\\u8fd9\\u6b63\\u662fcc\\u6216gcc\\u641c\\u7d22\\u5934\\u6587\\u4ef6\\u8def\\u5f84\\u7684\\u53c2\\u6570\\u3002\\n\\n\\n### \\u4e09\\u3001\\u6587\\u4ef6\\u540d\\u64cd\\u4f5c\\u51fd\\u6570\\n\\n\\u4e0b\\u9762\\u6211\\u4eec\\u8981\\u4ecb\\u7ecd\\u7684\\u51fd\\u6570\\u4e3b\\u8981\\u662f\\u5904\\u7406\\u6587\\u4ef6\\u540d\\u7684\\u3002\\u6bcf\\u4e2a\\u51fd\\u6570\\u7684\\u53c2\\u6570\\u5b57\\u7b26\\u4e32\\u90fd\\u4f1a\\u88ab\\u5f53\\u505a\\u4e00\\u4e2a\\u6216\\u662f\\u4e00\\u7cfb\\u5217\\u7684\\u6587\\u4ef6\\u540d\\u6765\\u5bf9\\u5f85\\u3002\\n\\n\\n>$(dir <names...>;) \\n\\n* \\u540d\\u79f0\\uff1a\\u53d6\\u76ee\\u5f55\\u51fd\\u6570\\u2014\\u2014dir\\u3002\\n* \\u529f\\u80fd\\uff1a\\u4ece\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u4e2d\\u53d6\\u51fa\\u76ee\\u5f55\\u90e8\\u5206\\u3002\\u76ee\\u5f55\\u90e8\\u5206\\u662f\\u6307\\u6700\\u540e\\u4e00\\u4e2a\\u53cd\\u659c\\u6760\\uff08\\u201c\\/\\u201d\\uff09\\u4e4b\\u524d\\u7684\\u90e8\\u5206\\u3002\\u5982\\u679c\\u6ca1\\u6709\\u53cd\\u659c\\u6760\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de\\u201c.\\/\\u201d\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u7684\\u76ee\\u5f55\\u90e8\\u5206\\u3002\\n* \\u793a\\u4f8b\\uff1a \\n\\t\\t$(dir src\\/foo.c hacks)\\n\\t\\t# \\u8fd4\\u56de\\u503c\\u662f\\u201csrc\\/ .\\/\\u201d\\u3002\\n\\n\\t\\n>$(notdir <names...>;) \\n\\n* \\u540d\\u79f0\\uff1a\\u53d6\\u6587\\u4ef6\\u51fd\\u6570\\u2014\\u2014notdir\\u3002\\n* \\u529f\\u80fd\\uff1a\\u4ece\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u4e2d\\u53d6\\u51fa\\u975e\\u76ee\\u5f55\\u90e8\\u5206\\u3002\\u975e\\u76ee\\u5f55\\u90e8\\u5206\\u662f\\u6307\\u6700\\u540e\\u4e00\\u4e2a\\u53cd\\u659c\\u6760\\uff08\\u201c\\/\\u201d\\uff09\\u4e4b\\u540e\\u7684\\u90e8\\u5206\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u7684\\u975e\\u76ee\\u5f55\\u90e8\\u5206\\u3002\\n* \\u793a\\u4f8b\\uff1a \\n\\t\\t$(notdir src\\/foo.c hacks)\\u8fd4\\u56de\\u503c\\u662f\\u201cfoo.c hacks\\u201d\\u3002\\n \\n\\t\\n>$(suffix <names...>;) \\n    \\n* \\u540d\\u79f0\\uff1a\\u53d6\\u540e\\u7f00\\u51fd\\u6570\\u2014\\u2014suffix\\u3002\\n* \\u529f\\u80fd\\uff1a\\u4ece\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u4e2d\\u53d6\\u51fa\\u5404\\u4e2a\\u6587\\u4ef6\\u540d\\u7684\\u540e\\u7f00\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u7684\\u540e\\u7f00\\u5e8f\\u5217\\uff0c\\u5982\\u679c\\u6587\\u4ef6\\u6ca1\\u6709\\u540e\\u7f00\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u5b57\\u4e32\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n\\t\\t$(suffix src\\/foo.c src-1.0\\/bar.c hacks)\\u8fd4\\u56de\\u503c\\u662f\\u201c.c .c\\u201d\\u3002\\n\\n\\n>$(basename <names...>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u53d6\\u524d\\u7f00\\u51fd\\u6570\\u2014\\u2014basename\\u3002\\n* \\u529f\\u80fd\\uff1a\\u4ece\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u4e2d\\u53d6\\u51fa\\u5404\\u4e2a\\u6587\\u4ef6\\u540d\\u7684\\u524d\\u7f00\\u90e8\\u5206\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u7684\\u524d\\u7f00\\u5e8f\\u5217\\uff0c\\u5982\\u679c\\u6587\\u4ef6\\u6ca1\\u6709\\u524d\\u7f00\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u5b57\\u4e32\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n\\t\\t$(basename src\\/foo.c src-1.0\\/bar.c hacks)\\u8fd4\\u56de\\u503c\\u662f\\u201csrc\\/foo src-1.0\\/bar hacks\\u201d\\u3002\\n\\n\\n>$(addsuffix <suffix>;,<names...>;) \\n\\n* \\u540d\\u79f0\\uff1a\\u52a0\\u540e\\u7f00\\u51fd\\u6570\\u2014\\u2014addsuffix\\u3002\\n* \\u529f\\u80fd\\uff1a\\u628a\\u540e\\u7f00<suffix>;\\u52a0\\u5230<names>;\\u4e2d\\u7684\\u6bcf\\u4e2a\\u5355\\u8bcd\\u540e\\u9762\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u52a0\\u8fc7\\u540e\\u7f00\\u7684\\u6587\\u4ef6\\u540d\\u5e8f\\u5217\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n\\t\\t$(addsuffix .c,foo bar)\\u8fd4\\u56de\\u503c\\u662f\\u201cfoo.c bar.c\\u201d\\u3002\\n\\n\\n>$(addprefix <prefix>;,<names...>;) \\n\\n* \\u540d\\u79f0\\uff1a\\u52a0\\u524d\\u7f00\\u51fd\\u6570\\u2014\\u2014addprefix\\u3002\\n* \\u529f\\u80fd\\uff1a\\u628a\\u524d\\u7f00<prefix>;\\u52a0\\u5230<names>;\\u4e2d\\u7684\\u6bcf\\u4e2a\\u5355\\u8bcd\\u540e\\u9762\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u52a0\\u8fc7\\u524d\\u7f00\\u7684\\u6587\\u4ef6\\u540d\\u5e8f\\u5217\\u3002\\n* \\u793a\\u4f8b\\uff1a\\n\\t\\t$(addprefix src\\/,foo bar)\\u8fd4\\u56de\\u503c\\u662f\\u201csrc\\/foo src\\/bar\\u201d\\u3002\\n\\n\\n>$(join <list1>;,<list2>;)\\n\\n* \\u540d\\u79f0\\uff1a\\u8fde\\u63a5\\u51fd\\u6570\\u2014\\u2014join\\u3002\\n* \\u529f\\u80fd\\uff1a\\u628a<list2>;\\u4e2d\\u7684\\u5355\\u8bcd\\u5bf9\\u5e94\\u5730\\u52a0\\u5230<list1>;\\u7684\\u5355\\u8bcd\\u540e\\u9762\\u3002\\u5982\\u679c<list1>;\\u7684\\u5355\\u8bcd\\u4e2a\\u6570\\u8981\\u6bd4<list2>;\\u7684\\u591a\\uff0c\\u90a3\\u4e48\\uff0c<list1>;\\u4e2d\\u7684\\u591a\\u51fa\\u6765\\u7684\\u5355\\u8bcd\\u5c06\\u4fdd\\u6301\\u539f\\u6837\\u3002\\u5982\\u679c<list2>;\\u7684\\u5355\\u8bcd\\u4e2a\\u6570\\u8981\\u6bd4<list1>;\\u591a\\uff0c\\u90a3\\u4e48\\uff0c<list2>;\\u591a\\u51fa\\u6765\\u7684\\u5355\\u8bcd\\u5c06\\u88ab\\u590d\\u5236\\u5230<list2>;\\u4e2d\\u3002\\n* \\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u8fde\\u63a5\\u8fc7\\u540e\\u7684\\u5b57\\u7b26\\u4e32\\u3002\\n*  \\u793a\\u4f8b\\uff1a\\n\\t\\t$(join aaa bbb , 111 222 333)\\u8fd4\\u56de\\u503c\\u662f\\u201caaa111 bbb222 333\\u201d\\u3002","html":"<h1>\\u4f7f\\u7528\\u51fd\\u6570<\\/h1>\\n<p>\\u5728 Makefile \\u4e2d\\u53ef\\u4ee5\\u4f7f\\u7528\\u51fd\\u6570\\u6765\\u5904\\u7406\\u53d8\\u91cf\\uff0c\\u4ece\\u800c\\u8ba9\\u6211\\u4eec\\u7684\\u547d\\u4ee4\\u6216\\u662f\\u89c4\\u5219\\u66f4\\u4e3a\\u7684\\u7075\\u6d3b\\u548c\\u5177\\u6709\\u667a\\u80fd\\u3002make \\u6240\\u652f\\u6301\\u7684\\u51fd\\u6570\\u4e5f\\u4e0d\\u7b97\\u5f88\\u591a\\uff0c\\u4e0d\\u8fc7\\u5df2\\u7ecf\\u8db3\\u591f\\u6211\\u4eec\\u7684\\u64cd\\u4f5c\\u4e86\\u3002\\u51fd\\u6570\\u8c03\\u7528\\u540e\\uff0c\\u51fd\\u6570\\u7684\\u8fd4\\u56de\\u503c<strong>\\u53ef\\u4ee5\\u5f53\\u505a\\u53d8\\u91cf<\\/strong>\\u6765\\u4f7f\\u7528\\u3002<\\/p>\\n<h3>\\u4e00\\u3001\\u51fd\\u6570\\u7684\\u8c03\\u7528\\u8bed\\u6cd5<\\/h3>\\n<p>\\u51fd\\u6570\\u8c03\\u7528\\uff0c\\u5f88\\u50cf\\u53d8\\u91cf\\u7684\\u4f7f\\u7528\\uff0c\\u4e5f\\u662f\\u4ee5\\u201c$\\u201d\\u6765\\u6807\\u8bc6\\u7684\\uff0c\\u5176\\u8bed\\u6cd5\\u5982\\u4e0b\\uff1a<\\/p>\\n<pre><code>$(&lt;function&gt;; &lt;arguments&gt;;)<\\/code><\\/pre>\\n<p>\\u6216\\u662f<\\/p>\\n<pre><code>${&lt;function&gt;; &lt;arguments&gt;;}<\\/code><\\/pre>\\n<p>\\u8fd9\\u91cc\\uff0c<function>; \\u5c31\\u662f\\u51fd\\u6570\\u540d\\uff0cmake \\u652f\\u6301\\u7684\\u51fd\\u6570\\u4e0d\\u591a\\u3002<arguments>; \\u662f\\u51fd\\u6570\\u7684\\u53c2\\u6570\\uff0c\\u53c2\\u6570\\u95f4\\u4ee5\\u9017\\u53f7<code>,<\\/code>\\u5206\\u9694\\uff0c\\u800c\\u51fd\\u6570\\u540d\\u548c\\u53c2\\u6570\\u4e4b\\u95f4\\u4ee5\\u7a7a\\u683c\\u5206\\u9694\\u3002\\u51fd\\u6570\\u8c03\\u7528\\u4ee5<code>$<\\/code>\\u5f00\\u5934\\uff0c\\u4ee5\\u5706\\u62ec\\u53f7\\u6216\\u82b1\\u62ec\\u53f7\\u628a\\u51fd\\u6570\\u540d\\u548c\\u53c2\\u6570\\u62ec\\u8d77\\u3002\\u611f\\u89c9\\u5f88\\u50cf\\u4e00\\u4e2a\\u53d8\\u91cf\\uff0c\\u662f\\u4e0d\\u662f\\uff1f\\u51fd\\u6570\\u4e2d\\u7684\\u53c2\\u6570\\u53ef\\u4ee5\\u4f7f\\u7528\\u53d8\\u91cf\\uff0c\\u4e3a\\u4e86\\u98ce\\u683c\\u7684\\u7edf\\u4e00\\uff0c\\u51fd\\u6570\\u548c\\u53d8\\u91cf\\u7684\\u62ec\\u53f7\\u6700\\u597d\\u4e00\\u6837\\uff0c\\u5982\\u4f7f\\u7528<code>$(subst a,b,$(x))<\\/code>\\u8fd9\\u6837\\u7684\\u5f62\\u5f0f\\uff0c\\u800c\\u4e0d\\u662f<code>$(subst a,b,${x})<\\/code>\\u7684\\u5f62\\u5f0f\\u3002\\u56e0\\u4e3a\\u7edf\\u4e00\\u4f1a\\u66f4\\u6e05\\u695a\\uff0c\\u4e5f\\u4f1a\\u51cf\\u5c11\\u4e00\\u4e9b\\u4e0d\\u5fc5\\u8981\\u7684\\u9ebb\\u70e6\\u3002<\\/p>\\n<p>\\u8fd8\\u662f\\u6765\\u770b\\u4e00\\u4e2a\\u793a\\u4f8b\\uff1a<\\/p>\\n<pre><code>comma:= ,\\nempty:=\\nspace:= $(empty) $(empty)\\nfoo:= a b c\\nbar:= $(subst $(space),$(comma),$(foo))<\\/code><\\/pre>\\n<p>\\u5728\\u8fd9\\u4e2a\\u793a\\u4f8b\\u4e2d\\uff0c$(comma) \\u7684\\u503c\\u662f\\u4e00\\u4e2a\\u9017\\u53f7\\u3002$(space) \\u4f7f\\u7528\\u4e86 $(empty) \\u5b9a\\u4e49\\u4e86\\u4e00\\u4e2a\\u7a7a\\u683c\\uff0c$(foo)\\u7684\\u503c\\u662f<code>a b c<\\/code>\\uff0c$(bar) \\u7684\\u5b9a\\u4e49\\u7528\\uff0c\\u8c03\\u7528\\u4e86\\u51fd\\u6570<code>subst<\\/code>\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u66ff\\u6362\\u51fd\\u6570\\uff0c\\u8fd9\\u4e2a\\u51fd\\u6570\\u6709\\u4e09\\u4e2a\\u53c2\\u6570\\uff0c\\u7b2c\\u4e00\\u4e2a\\u53c2\\u6570\\u662f\\u88ab\\u66ff\\u6362\\u5b57\\u4e32\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u53c2\\u6570\\u662f\\u66ff\\u6362\\u5b57\\u4e32\\uff0c\\u7b2c\\u4e09\\u4e2a\\u53c2\\u6570\\u662f\\u66ff\\u6362\\u64cd\\u4f5c\\u4f5c\\u7528\\u7684\\u5b57\\u4e32\\u3002\\u8fd9\\u4e2a\\u51fd\\u6570\\u4e5f\\u5c31\\u662f\\u628a$(foo)\\u4e2d\\u7684\\u7a7a\\u683c\\u66ff\\u6362\\u6210\\u9017\\u53f7\\uff0c\\u6240\\u4ee5$(bar)\\u7684\\u503c\\u662f\\u201ca,b,c\\u201d\\u3002<\\/p>\\n<h3>\\u4e8c\\u3001\\u5b57\\u7b26\\u4e32\\u5904\\u7406\\u51fd\\u6570<\\/h3>\\n<blockquote>\\n<p>$(subst <from>;,<to>;,<text>;) <\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u5b57\\u7b26\\u4e32\\u66ff\\u6362\\u51fd\\u6570\\u2014\\u2014subst\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u628a\\u5b57\\u4e32<text>;\\u4e2d\\u7684<from>;\\u5b57\\u7b26\\u4e32\\u66ff\\u6362\\u6210<to>;\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u51fd\\u6570\\u8fd4\\u56de\\u88ab\\u66ff\\u6362\\u8fc7\\u540e\\u7684\\u5b57\\u7b26\\u4e32\\u3002<\\/li>\\n<li>\\n<p>\\u793a\\u4f8b\\uff1a<br \\/>\\n$(subst ee,EE,feet on the street)\\uff0c<\\/p>\\n<p>\\u628a\\u201cfeet on the street\\u201d\\u4e2d\\u7684\\u201cee\\u201d\\u66ff\\u6362\\u6210\\u201cEE\\u201d\\uff0c\\u8fd4\\u56de\\u7ed3\\u679c\\u662f\\u201cfEEt on the strEEt\\u201d\\u3002<\\/p>\\n<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(patsubst <pattern>;,<replacement>;,<text>;) <\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\n<p>\\u540d\\u79f0\\uff1a\\u6a21\\u5f0f\\u5b57\\u7b26\\u4e32\\u66ff\\u6362\\u51fd\\u6570\\u2014\\u2014patsubst\\u3002<\\/p>\\n<\\/li>\\n<li>\\n<p>\\u529f\\u80fd\\uff1a\\u67e5\\u627e<text>;\\u4e2d\\u7684\\u5355\\u8bcd\\uff08\\u5355\\u8bcd\\u4ee5\\u201c\\u7a7a\\u683c\\u201d\\u3001\\u201cTab\\u201d\\u6216\\u201c\\u56de\\u8f66\\u201d\\u201c\\u6362\\u884c\\u201d\\u5206\\u9694\\uff09\\u662f\\u5426\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\uff0c\\u5982\\u679c\\u5339\\u914d\\u7684\\u8bdd\\uff0c\\u5219\\u4ee5<replacement>;\\u66ff\\u6362\\u3002\\u8fd9\\u91cc\\uff0c<pattern>;\\u53ef\\u4ee5\\u5305\\u62ec\\u901a\\u914d\\u7b26<code>%<\\/code>\\uff0c\\u8868\\u793a\\u4efb\\u610f\\u957f\\u5ea6\\u7684\\u5b57\\u4e32\\u3002\\u5982\\u679c<replacement>;\\u4e2d\\u4e5f\\u5305\\u542b<code>%<\\/code>\\uff0c\\u90a3\\u4e48\\uff0c<replacement>;\\u4e2d\\u7684\\u8fd9\\u4e2a<code>%\\u5c06\\u662f&lt;pattern&gt;;\\u4e2d\\u7684\\u90a3\\u4e2a<\\/code>%<code>\\u6240\\u4ee3\\u8868\\u7684\\u5b57\\u4e32\\u3002\\uff08\\u53ef\\u4ee5\\u7528<\\/code>`\\u6765\\u8f6c\\u4e49\\uff0c\\u4ee5<code>\\\\%<\\/code>\\u6765\\u8868\\u793a\\u771f\\u5b9e\\u542b\\u4e49\\u7684<code>%<\\/code>\\u5b57\\u7b26\\uff09<\\/p>\\n<\\/li>\\n<li>\\n<p>\\u8fd4\\u56de\\uff1a\\u51fd\\u6570\\u8fd4\\u56de\\u88ab\\u66ff\\u6362\\u8fc7\\u540e\\u7684\\u5b57\\u7b26\\u4e32\\u3002<\\/p>\\n<\\/li>\\n<li>\\n<p>\\u793a\\u4f8b\\uff1a<\\/p>\\n<pre><code>$(patsubst %.c,%.o,x.c.c bar.c)\\n\\n\\u628a\\u5b57\\u4e32 \\u201cx.c.c bar.c\\u201d \\u7b26\\u5408\\u6a21\\u5f0f [%.c] \\u7684\\u5355\\u8bcd\\u66ff\\u6362\\u6210 [%.o] \\uff0c\\u8fd4\\u56de\\u7ed3\\u679c\\u662f\\u201cx.c.o bar.o\\u201d<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>\\u5907\\u6ce8\\uff1a<\\/p>\\n<p>\\u8fd9\\u548c\\u6211\\u4eec\\u524d\\u9762\\u201c\\u53d8\\u91cf\\u7ae0\\u8282\\u201d\\u8bf4\\u8fc7\\u7684\\u76f8\\u5173\\u77e5\\u8bc6\\u6709\\u70b9\\u76f8\\u4f3c\\u3002\\u5982\\uff1a<\\/p>\\n<\\/li>\\n<li>\\n<p><code>$(var:&lt;pattern&gt;;=&lt;replacement&gt;;)<\\/code> \\u76f8\\u5f53\\u4e8e <code>$(patsubst &lt;pattern&gt;;,&lt;replacement&gt;;,$(var))<\\/code>\\uff0c<\\/p>\\n<\\/li>\\n<li>\\n<p><code>$(var: &lt;suffix&gt;;=&lt;replacement&gt;;)<\\/code> \\u76f8\\u5f53\\u4e8e <code>$(patsubst %&lt;suffix&gt;;,%&lt;replacement&gt;;,$(var))<\\/code>\\u3002<\\/p>\\n<p>\\u4f8b\\u5982\\u6709\\uff1aobjects = foo.o bar.o baz.o\\uff0c\\u90a3\\u4e48\\uff0c<code>$(objects:.o=.c)<\\/code>\\u548c<code>$(patsubst %.o,%.c,$(objects))<\\/code>\\u662f\\u4e00\\u6837\\u7684\\u3002<\\/p>\\n<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(strip <string>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u53bb\\u7a7a\\u683c\\u51fd\\u6570\\u2014\\u2014strip\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u53bb\\u6389<string>;\\u5b57\\u4e32\\u4e2d\\u5f00\\u5934\\u548c\\u7ed3\\u5c3e\\u7684\\u7a7a\\u5b57\\u7b26\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u88ab\\u53bb\\u6389\\u7a7a\\u683c\\u7684\\u5b57\\u7b26\\u4e32\\u503c\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a\\n<pre><code>$(strip a b c )<\\/code><\\/pre>\\n<p>\\u628a\\u5b57\\u4e32\\u201ca b c \\u201d\\u53bb\\u5230\\u5f00\\u5934\\u548c\\u7ed3\\u5c3e\\u7684\\u7a7a\\u683c\\uff0c\\u7ed3\\u679c\\u662f\\u201ca b c\\u201d\\u3002<\\/p><\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(findstring <find>;,<in>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u67e5\\u627e\\u5b57\\u7b26\\u4e32\\u51fd\\u6570\\u2014\\u2014findstring\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u5728\\u5b57\\u4e32<in>;\\u4e2d\\u67e5\\u627e<find>;\\u5b57\\u4e32\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u5982\\u679c\\u627e\\u5230\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de<find>;\\uff0c\\u5426\\u5219\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a\\n<pre><code>$(findstring a,a b c)\\n$(findstring a,b c)<\\/code><\\/pre>\\n<p>\\u7b2c\\u4e00\\u4e2a\\u51fd\\u6570\\u8fd4\\u56de\\u201ca\\u201d\\u5b57\\u7b26\\u4e32\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u8fd4\\u56de\\u201c\\u201d\\u5b57\\u7b26\\u4e32\\uff08\\u7a7a\\u5b57\\u7b26\\u4e32\\uff09<\\/p><\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(filter <pattern...>;,<text>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u8fc7\\u6ee4\\u51fd\\u6570\\u2014\\u2014filter\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u4ee5<pattern>;\\u6a21\\u5f0f\\u8fc7\\u6ee4<text>;\\u5b57\\u7b26\\u4e32\\u4e2d\\u7684\\u5355\\u8bcd\\uff0c\\u4fdd\\u7559\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u5355\\u8bcd\\u3002\\u53ef\\u4ee5\\u6709\\u591a\\u4e2a\\u6a21\\u5f0f\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u5b57\\u4e32\\u3002<\\/li>\\n<li>\\n<p>\\u793a\\u4f8b\\uff1a<\\/p>\\n<pre><code>sources := foo.c bar.c baz.s ugh.h\\nfoo: $(sources)\\ncc $(filter %.c %.s,$(sources)) -o foo\\n\\n$(filter %.c %.s,$(sources))\\u8fd4\\u56de\\u7684\\u503c\\u662f\\u201cfoo.c bar.c baz.s\\u201d\\u3002<\\/code><\\/pre>\\n<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(filter-out <pattern...>;,<text>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u53cd\\u8fc7\\u6ee4\\u51fd\\u6570\\u2014\\u2014filter-out\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u4ee5<pattern>;\\u6a21\\u5f0f\\u8fc7\\u6ee4<text>;\\u5b57\\u7b26\\u4e32\\u4e2d\\u7684\\u5355\\u8bcd\\uff0c\\u53bb\\u9664\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u5355\\u8bcd\\u3002\\u53ef\\u4ee5\\u6709\\u591a\\u4e2a\\u6a21\\u5f0f\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u4e0d\\u7b26\\u5408\\u6a21\\u5f0f<pattern>;\\u7684\\u5b57\\u4e32\\u3002<\\/li>\\n<li>\\n<p>\\u793a\\u4f8b\\uff1a<br \\/>\\nobjects=main1.o foo.o main2.o bar.o<br \\/>\\nmains=main1.o main2.o<\\/p>\\n<pre><code>$(filter-out $(mains),$(objects)) \\u8fd4\\u56de\\u503c\\u662f\\u201cfoo.o bar.o\\u201d\\u3002<\\/code><\\/pre>\\n<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(sort <list>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u6392\\u5e8f\\u51fd\\u6570\\u2014\\u2014sort\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u7ed9\\u5b57\\u7b26\\u4e32<list>;\\u4e2d\\u7684\\u5355\\u8bcd\\u6392\\u5e8f\\uff08\\u5347\\u5e8f\\uff09\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6392\\u5e8f\\u540e\\u7684\\u5b57\\u7b26\\u4e32\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a$(sort foo bar lose)\\u8fd4\\u56de\\u201cbar foo lose\\u201d \\u3002<\\/li>\\n<li>\\u5907\\u6ce8\\uff1asort\\u51fd\\u6570\\u4f1a\\u53bb\\u6389<list>;\\u4e2d\\u76f8\\u540c\\u7684\\u5355\\u8bcd\\u3002<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(word <n>;,<text>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u53d6\\u5355\\u8bcd\\u51fd\\u6570\\u2014\\u2014word\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u53d6\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u7b2c<n>;\\u4e2a\\u5355\\u8bcd\\u3002\\uff08\\u4ece\\u4e00\\u5f00\\u59cb\\uff09<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u7b2c<n>;\\u4e2a\\u5355\\u8bcd\\u3002\\u5982\\u679c<n>;\\u6bd4<text>;\\u4e2d\\u7684\\u5355\\u8bcd\\u6570\\u8981\\u5927\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a<br \\/>\\n$(word 2, foo bar baz)\\n<h1>\\u8fd4\\u56de\\u503c\\u662f\\u201cbar\\u201d\\u3002<\\/h1><\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(wordlist <s>;,<e>;,<text>;)  <\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u53d6\\u5355\\u8bcd\\u4e32\\u51fd\\u6570\\u2014\\u2014wordlist\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u4ece\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u53d6\\u4ece<s>;\\u5f00\\u59cb\\u5230<e>;\\u7684\\u5355\\u8bcd\\u4e32\\u3002<s>;\\u548c<e>;\\u662f\\u4e00\\u4e2a\\u6570\\u5b57\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u4ece<s>;\\u5230<e>;\\u7684\\u5355\\u8bcd\\u5b57\\u4e32\\u3002\\u5982\\u679c<s>;\\u6bd4<text>;\\u4e2d\\u7684\\u5355\\u8bcd\\u6570\\u8981\\u5927\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de\\u7a7a\\u5b57\\u7b26\\u4e32\\u3002\\u5982\\u679c<e>;\\u5927\\u4e8e<text>;\\u7684\\u5355\\u8bcd\\u6570\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de\\u4ece<s>;\\u5f00\\u59cb\\uff0c\\u5230<text>;\\u7ed3\\u675f\\u7684\\u5355\\u8bcd\\u4e32\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a $(wordlist 2, 3, foo bar baz)\\u8fd4\\u56de\\u503c\\u662f\\u201cbar baz\\u201d\\u3002<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(words <text>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u5355\\u8bcd\\u4e2a\\u6570\\u7edf\\u8ba1\\u51fd\\u6570\\u2014\\u2014words\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u7edf\\u8ba1<text>;\\u4e2d\\u5b57\\u7b26\\u4e32\\u4e2d\\u7684\\u5355\\u8bcd\\u4e2a\\u6570\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de<text>;\\u4e2d\\u7684\\u5355\\u8bcd\\u6570\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a$(words, foo bar baz)\\u8fd4\\u56de\\u503c\\u662f\\u201c3\\u201d\\u3002<\\/li>\\n<li>\\u5907\\u6ce8\\uff1a\\u5982\\u679c\\u6211\\u4eec\\u8981\\u53d6<text>;\\u4e2d\\u6700\\u540e\\u7684\\u4e00\\u4e2a\\u5355\\u8bcd\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u8fd9\\u6837\\uff1a<br \\/>\\n$(word $(words <text>;),<text>;)\\u3002<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(firstword <text>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u9996\\u5355\\u8bcd\\u51fd\\u6570\\u2014\\u2014firstword\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u53d6\\u5b57\\u7b26\\u4e32<text>;\\u4e2d\\u7684\\u7b2c\\u4e00\\u4e2a\\u5355\\u8bcd\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u5b57\\u7b26\\u4e32<text>;\\u7684\\u7b2c\\u4e00\\u4e2a\\u5355\\u8bcd\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a$(firstword foo bar)\\u8fd4\\u56de\\u503c\\u662f\\u201cfoo\\u201d\\u3002<\\/li>\\n<li>\\u5907\\u6ce8\\uff1a\\u8fd9\\u4e2a\\u51fd\\u6570\\u53ef\\u4ee5\\u7528word\\u51fd\\u6570\\u6765\\u5b9e\\u73b0\\uff1a$(word 1,<text>;)\\u3002<\\/li>\\n<\\/ul>\\n<p>\\u4ee5\\u4e0a\\uff0c\\u662f\\u6240\\u6709\\u7684\\u5b57\\u7b26\\u4e32\\u64cd\\u4f5c\\u51fd\\u6570\\uff0c\\u5982\\u679c\\u642d\\u914d\\u6df7\\u5408\\u4f7f\\u7528\\uff0c\\u53ef\\u4ee5\\u5b8c\\u6210\\u6bd4\\u8f83\\u590d\\u6742\\u7684\\u529f\\u80fd\\u3002\\u8fd9\\u91cc\\uff0c\\u4e3e\\u4e00\\u4e2a\\u73b0\\u5b9e\\u4e2d\\u5e94\\u7528\\u7684\\u4f8b\\u5b50\\u3002\\u6211\\u4eec\\u77e5\\u9053\\uff0cmake\\u4f7f\\u7528\\u201cVPATH\\u201d\\u53d8\\u91cf\\u6765\\u6307\\u5b9a\\u201c\\u4f9d\\u8d56\\u6587\\u4ef6\\u201d\\u7684\\u641c\\u7d22\\u8def\\u5f84\\u3002\\u4e8e\\u662f\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u5229\\u7528\\u8fd9\\u4e2a\\u641c\\u7d22\\u8def\\u5f84\\u6765\\u6307\\u5b9a\\u7f16\\u8bd1\\u5668\\u5bf9\\u5934\\u6587\\u4ef6\\u7684\\u641c\\u7d22\\u8def\\u5f84\\u53c2\\u6570CFLAGS\\uff0c\\u5982\\uff1a<\\/p>\\n<pre><code>override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))<\\/code><\\/pre>\\n<p>\\u5982\\u679c\\u6211\\u4eec\\u7684\\u201c$(VPATH)\\u201d\\u503c\\u662f\\u201csrc:..\\/headers\\u201d\\uff0c\\u90a3\\u4e48\\u201c$(patsubst %,-I%,$(subst :, ,$(VPATH)))\\u201d\\u5c06\\u8fd4\\u56de\\u201c-Isrc -I..\\/headers\\u201d\\uff0c\\u8fd9\\u6b63\\u662fcc\\u6216gcc\\u641c\\u7d22\\u5934\\u6587\\u4ef6\\u8def\\u5f84\\u7684\\u53c2\\u6570\\u3002<\\/p>\\n<h3>\\u4e09\\u3001\\u6587\\u4ef6\\u540d\\u64cd\\u4f5c\\u51fd\\u6570<\\/h3>\\n<p>\\u4e0b\\u9762\\u6211\\u4eec\\u8981\\u4ecb\\u7ecd\\u7684\\u51fd\\u6570\\u4e3b\\u8981\\u662f\\u5904\\u7406\\u6587\\u4ef6\\u540d\\u7684\\u3002\\u6bcf\\u4e2a\\u51fd\\u6570\\u7684\\u53c2\\u6570\\u5b57\\u7b26\\u4e32\\u90fd\\u4f1a\\u88ab\\u5f53\\u505a\\u4e00\\u4e2a\\u6216\\u662f\\u4e00\\u7cfb\\u5217\\u7684\\u6587\\u4ef6\\u540d\\u6765\\u5bf9\\u5f85\\u3002<\\/p>\\n<blockquote>\\n<p>$(dir <names...>;) <\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u53d6\\u76ee\\u5f55\\u51fd\\u6570\\u2014\\u2014dir\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u4ece\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u4e2d\\u53d6\\u51fa\\u76ee\\u5f55\\u90e8\\u5206\\u3002\\u76ee\\u5f55\\u90e8\\u5206\\u662f\\u6307\\u6700\\u540e\\u4e00\\u4e2a\\u53cd\\u659c\\u6760\\uff08\\u201c\\/\\u201d\\uff09\\u4e4b\\u524d\\u7684\\u90e8\\u5206\\u3002\\u5982\\u679c\\u6ca1\\u6709\\u53cd\\u659c\\u6760\\uff0c\\u90a3\\u4e48\\u8fd4\\u56de\\u201c.\\/\\u201d\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u7684\\u76ee\\u5f55\\u90e8\\u5206\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a<br \\/>\\n$(dir src\\/foo.c hacks)\\n<h1>\\u8fd4\\u56de\\u503c\\u662f\\u201csrc\\/ .\\/\\u201d\\u3002<\\/h1><\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(notdir <names...>;) <\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u53d6\\u6587\\u4ef6\\u51fd\\u6570\\u2014\\u2014notdir\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u4ece\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u4e2d\\u53d6\\u51fa\\u975e\\u76ee\\u5f55\\u90e8\\u5206\\u3002\\u975e\\u76ee\\u5f55\\u90e8\\u5206\\u662f\\u6307\\u6700\\u540e\\u4e00\\u4e2a\\u53cd\\u659c\\u6760\\uff08\\u201c\\/\\u201d\\uff09\\u4e4b\\u540e\\u7684\\u90e8\\u5206\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u7684\\u975e\\u76ee\\u5f55\\u90e8\\u5206\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a<br \\/>\\n$(notdir src\\/foo.c hacks)\\u8fd4\\u56de\\u503c\\u662f\\u201cfoo.c hacks\\u201d\\u3002<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(suffix <names...>;) <\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u53d6\\u540e\\u7f00\\u51fd\\u6570\\u2014\\u2014suffix\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u4ece\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u4e2d\\u53d6\\u51fa\\u5404\\u4e2a\\u6587\\u4ef6\\u540d\\u7684\\u540e\\u7f00\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u7684\\u540e\\u7f00\\u5e8f\\u5217\\uff0c\\u5982\\u679c\\u6587\\u4ef6\\u6ca1\\u6709\\u540e\\u7f00\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u5b57\\u4e32\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a<br \\/>\\n$(suffix src\\/foo.c src-1.0\\/bar.c hacks)\\u8fd4\\u56de\\u503c\\u662f\\u201c.c .c\\u201d\\u3002<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(basename <names...>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u53d6\\u524d\\u7f00\\u51fd\\u6570\\u2014\\u2014basename\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u4ece\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u4e2d\\u53d6\\u51fa\\u5404\\u4e2a\\u6587\\u4ef6\\u540d\\u7684\\u524d\\u7f00\\u90e8\\u5206\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u6587\\u4ef6\\u540d\\u5e8f\\u5217<names>;\\u7684\\u524d\\u7f00\\u5e8f\\u5217\\uff0c\\u5982\\u679c\\u6587\\u4ef6\\u6ca1\\u6709\\u524d\\u7f00\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u5b57\\u4e32\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a<br \\/>\\n$(basename src\\/foo.c src-1.0\\/bar.c hacks)\\u8fd4\\u56de\\u503c\\u662f\\u201csrc\\/foo src-1.0\\/bar hacks\\u201d\\u3002<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(addsuffix <suffix>;,<names...>;) <\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u52a0\\u540e\\u7f00\\u51fd\\u6570\\u2014\\u2014addsuffix\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u628a\\u540e\\u7f00<suffix>;\\u52a0\\u5230<names>;\\u4e2d\\u7684\\u6bcf\\u4e2a\\u5355\\u8bcd\\u540e\\u9762\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u52a0\\u8fc7\\u540e\\u7f00\\u7684\\u6587\\u4ef6\\u540d\\u5e8f\\u5217\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a<br \\/>\\n$(addsuffix .c,foo bar)\\u8fd4\\u56de\\u503c\\u662f\\u201cfoo.c bar.c\\u201d\\u3002<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(addprefix <prefix>;,<names...>;) <\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u52a0\\u524d\\u7f00\\u51fd\\u6570\\u2014\\u2014addprefix\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u628a\\u524d\\u7f00<prefix>;\\u52a0\\u5230<names>;\\u4e2d\\u7684\\u6bcf\\u4e2a\\u5355\\u8bcd\\u540e\\u9762\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u52a0\\u8fc7\\u524d\\u7f00\\u7684\\u6587\\u4ef6\\u540d\\u5e8f\\u5217\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a<br \\/>\\n$(addprefix src\\/,foo bar)\\u8fd4\\u56de\\u503c\\u662f\\u201csrc\\/foo src\\/bar\\u201d\\u3002<\\/li>\\n<\\/ul>\\n<blockquote>\\n<p>$(join <list1>;,<list2>;)<\\/p>\\n<\\/blockquote>\\n<ul>\\n<li>\\u540d\\u79f0\\uff1a\\u8fde\\u63a5\\u51fd\\u6570\\u2014\\u2014join\\u3002<\\/li>\\n<li>\\u529f\\u80fd\\uff1a\\u628a<list2>;\\u4e2d\\u7684\\u5355\\u8bcd\\u5bf9\\u5e94\\u5730\\u52a0\\u5230<list1>;\\u7684\\u5355\\u8bcd\\u540e\\u9762\\u3002\\u5982\\u679c<list1>;\\u7684\\u5355\\u8bcd\\u4e2a\\u6570\\u8981\\u6bd4<list2>;\\u7684\\u591a\\uff0c\\u90a3\\u4e48\\uff0c<list1>;\\u4e2d\\u7684\\u591a\\u51fa\\u6765\\u7684\\u5355\\u8bcd\\u5c06\\u4fdd\\u6301\\u539f\\u6837\\u3002\\u5982\\u679c<list2>;\\u7684\\u5355\\u8bcd\\u4e2a\\u6570\\u8981\\u6bd4<list1>;\\u591a\\uff0c\\u90a3\\u4e48\\uff0c<list2>;\\u591a\\u51fa\\u6765\\u7684\\u5355\\u8bcd\\u5c06\\u88ab\\u590d\\u5236\\u5230<list2>;\\u4e2d\\u3002<\\/li>\\n<li>\\u8fd4\\u56de\\uff1a\\u8fd4\\u56de\\u8fde\\u63a5\\u8fc7\\u540e\\u7684\\u5b57\\u7b26\\u4e32\\u3002<\\/li>\\n<li>\\u793a\\u4f8b\\uff1a<br \\/>\\n$(join aaa bbb , 111 222 333)\\u8fd4\\u56de\\u503c\\u662f\\u201caaa111 bbb222 333\\u201d\\u3002<\\/li>\\n<\\/ul>"}',
                'page_image' => NULL,
                'meta_description' => '在 Makefile 中可以使用函数来处理变量，从而让我们的命令或是规则更为的灵活和具有智能。make 所支持的函数也不算很多，不过已经足够我们的操作了。',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 75,
                'published_at' => '2020-10-03 22:00:00',
                'created_at' => '2020-10-03 22:27:20',
                'updated_at' => '2022-01-06 23:04:34',
                'deleted_at' => NULL,
            ),
            14 => 
            array (
                'id' => 15,
                'category_id' => 4,
                'collection_id' => 1,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'c-go-xlypy',
                'title' => '【C vs Go】5：常量',
                'subtitle' => '常量用法',
            'content' => '{"raw":"\\u5982\\u4f55\\u4fdd\\u6301\\u67d0\\u4e9b\\u6570\\u636e\\u5728\\u7a0b\\u5e8f\\u91cc\\u4fdd\\u6301\\u4e0d\\u53d8\\u5462\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u58f0\\u660e\\u5b83\\u4e3a\\u5e38\\u91cf\\uff0c\\u544a\\u8bc9\\u7f16\\u8bd1\\u5668\\uff0c\\u5b83\\u7684\\u503c\\u662f\\u56fa\\u5b9a\\u7684\\uff0c\\u4e0d\\u80fd\\u88ab\\u6539\\u53d8\\u7684\\u3002\\n\\n\\u4e0b\\u9762\\uff0c\\u6211\\u4eec\\u4f1a\\u7528\\u5230\\u6570\\u5b66\\u4e2d Pi(\\u00a0\\u03c0) \\u503c\\u505a\\u4e3a\\u5e38\\u91cf\\u8bb2\\u89e3\\n\\n#### C \\u8bed\\u8a00\\u5b9a\\u4e49\\u5e38\\u91cf\\n\\u5728 C \\u8bed\\u8a00\\u4e2d\\uff0c\\u6211\\u4eec\\u6709\\u4e24\\u79cd\\u65b9\\u6cd5\\u6765\\u4fdd\\u6301\\u67d0\\u4e2a\\u6570\\u503c\\u4e0d\\u53d8\\n\\n1. \\u5c06 Pi \\u5b9a\\u4e49\\u4e3a\\u4e00\\u4e2a\\u7b26\\u53f7\\n```\\n#define PI 3.14159f    \\/* \\u5b9a\\u4e49\\u7b26\\u53f7 PI *\\/\\n```\\n\\n2. \\u5c06 Pi \\u5b9a\\u4e49\\u6210\\u53d8\\u91cf\\uff0c\\u4f46\\u544a\\u8bc9\\u7f16\\u8bd1\\u5668\\uff0c\\u5b83\\u7684\\u503c\\u662f\\u56fa\\u5b9a\\u7684\\uff0c\\u4e0d\\u80fd\\u6539\\u53d8\\u3002\\u58f0\\u660e\\u53d8\\u91cf\\u65f6\\uff0c\\u5728\\u53d8\\u91cf\\u540d\\u524d\\u52a0\\u4e0a const \\u5173\\u952e\\u5b57\\n```\\nconst float Pi = 3.14159f;    \\/* \\u5b9a\\u4e49 Pi \\u7684\\u503c\\u662f\\u56fa\\u5b9a\\u4e0d\\u53d8\\u7684 *\\/\\n```\\n\\n\\n#### Go \\u8bed\\u8a00\\u5b9a\\u4e49\\u5e38\\u91cf\\nGo \\u8bed\\u8a00\\u4e2d\\uff0c\\u5b58\\u50a8\\u5728\\u5e38\\u91cf\\u4e2d\\u7684\\u6570\\u636e\\u7c7b\\u578b\\u53ea\\u53ef\\u4ee5\\u662f\\u5e03\\u5c14\\u578b\\u3001\\u6570\\u503c\\u578b\\uff08\\u6574\\u6570\\u578b\\u3001\\u6d6e\\u70b9\\u578b\\u548c\\u590d\\u6570\\uff09\\u548c\\u5b57\\u7b26\\u4e32\\u578b\\u3002\\n\\u5e38\\u91cf\\u7684\\u5b9a\\u4e49\\u683c\\u5f0f\\uff1a const identifier [type] = value , \\u4f8b\\u5982\\uff1a\\n```\\nconst Pi = 3.14159\\n```\\n\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u7701\\u7565\\u7c7b\\u578b\\u8bf4\\u660e\\u7b26 `[type]`\\uff0c\\u56e0\\u4e3a\\u7f16\\u8bd1\\u5668\\u53ef\\u4ee5\\u6839\\u636e\\u53d8\\u91cf\\u7684\\u503c\\u6765\\u63a8\\u65ad\\u5176\\u7c7b\\u578b\\u3002\\n\\n* \\u663e\\u5f0f\\u7c7b\\u578b\\u5b9a\\u4e49\\uff1a const val int = 123\\n* \\u9690\\u5f0f\\u7c7b\\u578b\\u5b9a\\u4e49\\uff1a const val  = 123","html":"<p>\\u5982\\u4f55\\u4fdd\\u6301\\u67d0\\u4e9b\\u6570\\u636e\\u5728\\u7a0b\\u5e8f\\u91cc\\u4fdd\\u6301\\u4e0d\\u53d8\\u5462\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u58f0\\u660e\\u5b83\\u4e3a\\u5e38\\u91cf\\uff0c\\u544a\\u8bc9\\u7f16\\u8bd1\\u5668\\uff0c\\u5b83\\u7684\\u503c\\u662f\\u56fa\\u5b9a\\u7684\\uff0c\\u4e0d\\u80fd\\u88ab\\u6539\\u53d8\\u7684\\u3002<\\/p>\\n<p>\\u4e0b\\u9762\\uff0c\\u6211\\u4eec\\u4f1a\\u7528\\u5230\\u6570\\u5b66\\u4e2d Pi(\\u00a0\\u03c0) \\u503c\\u505a\\u4e3a\\u5e38\\u91cf\\u8bb2\\u89e3<\\/p>\\n<h4>C \\u8bed\\u8a00\\u5b9a\\u4e49\\u5e38\\u91cf<\\/h4>\\n<p>\\u5728 C \\u8bed\\u8a00\\u4e2d\\uff0c\\u6211\\u4eec\\u6709\\u4e24\\u79cd\\u65b9\\u6cd5\\u6765\\u4fdd\\u6301\\u67d0\\u4e2a\\u6570\\u503c\\u4e0d\\u53d8<\\/p>\\n<ol>\\n<li>\\n<p>\\u5c06 Pi \\u5b9a\\u4e49\\u4e3a\\u4e00\\u4e2a\\u7b26\\u53f7<\\/p>\\n<pre><code>#define PI 3.14159f    \\/* \\u5b9a\\u4e49\\u7b26\\u53f7 PI *\\/<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>\\u5c06 Pi \\u5b9a\\u4e49\\u6210\\u53d8\\u91cf\\uff0c\\u4f46\\u544a\\u8bc9\\u7f16\\u8bd1\\u5668\\uff0c\\u5b83\\u7684\\u503c\\u662f\\u56fa\\u5b9a\\u7684\\uff0c\\u4e0d\\u80fd\\u6539\\u53d8\\u3002\\u58f0\\u660e\\u53d8\\u91cf\\u65f6\\uff0c\\u5728\\u53d8\\u91cf\\u540d\\u524d\\u52a0\\u4e0a const \\u5173\\u952e\\u5b57<\\/p>\\n<pre><code>const float Pi = 3.14159f;    \\/* \\u5b9a\\u4e49 Pi \\u7684\\u503c\\u662f\\u56fa\\u5b9a\\u4e0d\\u53d8\\u7684 *\\/<\\/code><\\/pre>\\n<\\/li>\\n<\\/ol>\\n<h4>Go \\u8bed\\u8a00\\u5b9a\\u4e49\\u5e38\\u91cf<\\/h4>\\n<p>Go \\u8bed\\u8a00\\u4e2d\\uff0c\\u5b58\\u50a8\\u5728\\u5e38\\u91cf\\u4e2d\\u7684\\u6570\\u636e\\u7c7b\\u578b\\u53ea\\u53ef\\u4ee5\\u662f\\u5e03\\u5c14\\u578b\\u3001\\u6570\\u503c\\u578b\\uff08\\u6574\\u6570\\u578b\\u3001\\u6d6e\\u70b9\\u578b\\u548c\\u590d\\u6570\\uff09\\u548c\\u5b57\\u7b26\\u4e32\\u578b\\u3002<br \\/>\\n\\u5e38\\u91cf\\u7684\\u5b9a\\u4e49\\u683c\\u5f0f\\uff1a const identifier [type] = value , \\u4f8b\\u5982\\uff1a<\\/p>\\n<pre><code>const Pi = 3.14159<\\/code><\\/pre>\\n<p>\\u4e0a\\u9762\\u7684\\u4f8b\\u5b50\\u7701\\u7565\\u7c7b\\u578b\\u8bf4\\u660e\\u7b26 <code>[type]<\\/code>\\uff0c\\u56e0\\u4e3a\\u7f16\\u8bd1\\u5668\\u53ef\\u4ee5\\u6839\\u636e\\u53d8\\u91cf\\u7684\\u503c\\u6765\\u63a8\\u65ad\\u5176\\u7c7b\\u578b\\u3002<\\/p>\\n<ul>\\n<li>\\u663e\\u5f0f\\u7c7b\\u578b\\u5b9a\\u4e49\\uff1a const val int = 123<\\/li>\\n<li>\\u9690\\u5f0f\\u7c7b\\u578b\\u5b9a\\u4e49\\uff1a const val  = 123<\\/li>\\n<\\/ul>"}',
                'page_image' => NULL,
                'meta_description' => '有些数据可以在程序使用之前预先设定并在整个运行过程中不变化，这称为常量',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 267,
                'published_at' => '2020-10-13 21:45:00',
                'created_at' => '2020-10-13 22:53:08',
                'updated_at' => '2022-01-09 07:56:20',
                'deleted_at' => NULL,
            ),
            15 => 
            array (
                'id' => 16,
                'category_id' => 4,
                'collection_id' => 1,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'k4xw8',
                'title' => '【C vs Go】6：字符类型、字符串与数组',
                'subtitle' => '从字符类型到数组，再到字符串',
            'content' => '{"raw":"C \\u8bed\\u8a00\\u4e2d\\u4e0d\\u5b58\\u5728\\u539f\\u751f\\u7684\\u5b57\\u7b26\\u4e32\\u7c7b\\u578b\\uff0c\\u901a\\u5e38\\u4f7f\\u7528\\u5b57\\u7b26\\u6570\\u7ec4\\u6765\\u8868\\u793a\\uff0c\\u90a3\\u4e48C\\u8bed\\u8a00\\u4e2d\\u5b57\\u7b26\\u7c7b\\u578b\\u3001\\u5b57\\u7b26\\u4e32\\u4e0e\\u6570\\u7ec4\\u662f\\u4ec0\\u4e48\\u5173\\u7cfb\\uff0c\\u53ca\\u4e0e go \\u8bed\\u8a00\\u7684\\u5b57\\u7b26\\u7c7b\\u578b\\u3001\\u5b57\\u7b26\\u4e32\\u4e0e\\u6570\\u7ec4\\u6709\\u54ea\\u5f02\\u540c\\uff0c\\u4e0b\\u9762\\u6211\\u4eec\\u5c06\\u9010\\u4e00\\u8fdb\\u884c\\u4ecb\\u7ecd\\u4e0e\\u8bb2\\u89e3\\u3002\\n\\n### \\u5b57\\u7b26\\u7c7b\\u578b\\nC \\u4e0e Go \\u5b57\\u7b26\\uff0c\\u4ece\\u611f\\u89c2\\u4e0a\\u6765\\u8bf4\\u6709\\u7740\\u5f88\\u5927\\u7684\\u76f8\\u901a\\u6027\\n\\n##### C \\u8bed\\u8a00\\u4e2d\\u7684\\u5b57\\u7b26\\u7c7b\\u578b\\n\\u5728 C \\u8bed\\u8a00\\u4e2d\\u5b57\\u7b26\\u7c7b\\u578b\\u662f char\\uff0cchar \\u7c7b\\u578b\\u7684\\u53d8\\u91cf\\u662f\\u7528\\u4e8e\\u5b58\\u50a8\\u5b57\\u6bcd\\u6216\\u6807\\u70b9\\u7b26\\u53f7\\u4e4b\\u7c7b\\u7684\\u5b57\\u7b26\\u3002\\u53ea\\u80fd\\u5b58\\u50a8\\u4e00\\u4e2a\\u5b57\\u7b26\\u4ee3\\u7801\\uff08\\u5373\\u4e00\\u4e2a\\u6574\\u6570\\uff09\\uff0c\\u6240\\u4ee5\\u88ab\\u770b\\u4f5c\\u6574\\u6570\\u7c7b\\u578b\\u3002\\u56e0\\u800c\\u53ef\\u4ee5\\u50cf\\u6574\\u6570\\u7c7b\\u578b\\u90a3\\u6837\\u5904\\u7406 char \\u7c7b\\u578b\\u5b58\\u50a8\\u7684\\u503c\\uff0c\\u4ece\\u800c\\u53ef\\u4ee5\\u5728\\u7b97\\u672f\\u8fd0\\u7b97\\u4e2d\\u4f7f\\u7528\\u5b83\\u3002\\u4e3a\\u4e86\\u5904\\u7406\\u5b57\\u7b26\\uff0c\\u8ba1\\u7b97\\u673a\\u4f7f\\u7528\\u4e00\\u79cd\\u6570\\u5b57\\u7f16\\u7801\\uff0c\\u7528\\u7279\\u5b9a\\u7684\\u6574\\u6570\\u8868\\u793a\\u7279\\u5b9a\\u7684\\u5b57\\u7b26 -- \\u6700\\u5e38\\u7528\\u7684\\u7f16\\u7801\\u662f ASCII \\u7801\\u3002\\n\\n\\u4f8b\\u5b50\\uff1a\\n\\n```\\n#include<stdio.h>\\n\\nint main() {\\n    char charater;\\n    char grade = \'A\';\\n    char integer = 65;\\n\\n    charater = \'b\';\\n\\n    printf(\\"charater = %c (ASCII decimal = %d)\\\\n\\", charater, charater);\\n    printf(\\"grade = %c (ASCII decimal = %d)\\\\n\\", grade, grade);\\n    printf(\\"integer = %c (ASCII decimal = %d)\\\\n\\", integer, integer);\\n}\\n```\\n\\u7f16\\u8bd1\\u540e\\uff0c\\u6267\\u884c\\uff0c\\u8f93\\u51fa\\u5982\\u4e0b\\uff1a\\n```\\ncharater = b (ASCII decimal = 98)\\ngrade = A (ASCII decimal = 65)\\ninteger = A (ASCII decimal = 65)\\n```\\n##### Go \\u8bed\\u8a00\\u4e2d\\u7684\\u5b57\\u7b26\\u7c7b\\u578b\\n\\u5728 Go \\u8bed\\u8a00\\u4e2d\\u652f\\u6301\\u4e24\\u79cd\\u5b57\\u7b26\\u7c7b\\u578b\\uff0c\\u4e00\\u4e2a\\u662f byte \\uff08\\u5b9e\\u9645\\u4e0a\\u662f uint8 \\u7684\\u522b\\u540d\\uff09\\uff0c\\u4ee3\\u8868UTF-8\\u5b57\\u7b26\\u4e32\\u7684\\u5355\\u4e2a\\u5b57\\u8282\\u7684\\u503c\\uff1b\\u53e6\\u4e00\\u4e2a\\u662f rune\\uff0c\\u4ee3\\u8868\\u5355\\u4e2a Unicode \\u5b57\\u7b26\\u3002\\n\\n* byte (uint8) \\u5bf9\\u4e8e\\u53ea\\u5360\\u75281\\u4e2a\\u5b57\\u8282\\u7684\\u4f20\\u7edf ASCII \\u7f16\\u7801\\u7684\\u5b57\\u7b26\\u6765\\u8bf4\\uff0c\\u5b8c\\u5168\\u6ca1\\u6709\\u95ee\\u9898\\u3002\\n\\nbyte \\u4f8b\\u5b50\\uff1a\\n\\n```\\npackage main\\n\\nimport \\"fmt\\"\\n\\nfunc main()  {\\n\\tvar charater byte\\n\\tvar ch byte = \'A\'\\n\\tvar integer byte = 65\\n\\tvar chx byte = \'\\\\x41\'\\n\\n\\tfmt.Printf(\\"charater: integer = %v, charater = %c, UTF-8 bytes = %X, UTF-8 code point = %U\\\\n\\", charater, charater, charater, charater)\\n\\tfmt.Printf(\\"ch: integer = %v, charater = %c, UTF-8 bytes = %X, UTF-8 code point = %U\\\\n\\", ch, ch, ch, ch)\\n\\tfmt.Printf(\\"integer: integer = %v, charater = %c, UTF-8 bytes = %X, UTF-8 code point = %U\\\\n\\", integer, integer, integer, integer)\\n\\tfmt.Printf(\\"chx: integer = %v, charater = %c, UTF-8 bytes = %X, UTF-8 code point = %U\\\\n\\", chx, chx, chx, chx)\\n}\\n```\\n\\u7f16\\u8bd1\\uff0c\\u6267\\u884c\\u8f93\\u51fa\\uff1a\\n```\\ncharater: integer = 0, charater =  , UTF-8 bytes = 0, UTF-8 code point = U+0000\\nch: integer = 65, charater = A, UTF-8 bytes = 41, UTF-8 code point = U+0041\\ninteger: integer = 65, charater = A, UTF-8 bytes = 41, UTF-8 code point = U+0041\\nchx: integer = 65, charater = A, UTF-8 bytes = 41, UTF-8 code point = U+0041\\n```\\n\\n### \\u5b57\\u7b26\\u4e32\\n\\n##### C \\u8bed\\u8a00\\u4e2d\\u7684\\u6570\\u7ec4\\u4e0e\\u5b57\\u7b26\\u4e32\\nC \\u8bed\\u8a00\\u4e2d\\u5e76\\u4e0d\\u5b58\\u5728\\u539f\\u751f\\u7684\\u5b57\\u7b26\\u4e32\\u7c7b\\u578b\\uff0c\\u901a\\u5e38\\u4f7f\\u7528\\u5b57\\u7b26\\u6570\\u7ec4\\u6765\\u8868\\u793a\\uff0c\\u5e76\\u4ee5\\u5b57\\u7b26\\u6307\\u9488\\u6765\\u4f20\\u9012\\u3002\\u4ece\\u800c\\u5728\\u8fd9\\uff0c\\u6211\\u4eec\\u4e00\\u8d77\\u8bb2\\u8ff0 C \\u8bed\\u8a00\\u7684\\u6570\\u7ec4\\u4e0e\\u5b57\\u7b26\\u4e32\\u53ca\\u5b83\\u4eec\\u7684\\u5173\\u7cfb\\u3002\\n\\n\\u524d\\u9762\\u6211\\u4eec\\u4ecb\\u7ecd\\u4e86 C \\u7684\\u5b57\\u7b26\\u7c7b\\u578b\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u4e86\\u89e3\\u4e0b\\u6570\\u7ec4\\u7684\\u8868\\u793a\\u65b9\\u5f0f\\uff0c\\u7ed3\\u5408\\u8d77\\u5b83\\u4eec\\u5c31\\u80fd\\u5448\\u73b0\\u4ec0\\u4e48\\u662f\\u5b57\\u7b26\\u4e32\\uff0c\\u6211\\u4eec\\u5f00\\u59cb\\u5427\\u3002\\nC \\u8bed\\u8a00\\u6570\\u7ec4\\u58f0\\u660e\\u793a\\u4f8b\\uff1a\\n```\\nint number[10];\\nint number[10][100];\\nfloat digit[100];\\nchar str[250]; \\/\\/ \\u5b57\\u7b26\\u7c7b\\u578b\\u6570\\u7ec4\\uff0c\\u5373\\u5b57\\u7b26\\u4e32\\n```\\n\\u6570\\u7ec4\\u662f\\u4e00\\u7ec4\\u6570\\u76ee\\u56fa\\u5b9a\\u3001\\u7c7b\\u578b\\u76f8\\u540c\\u7684\\u6570\\u636e\\u9879\\uff08\\u6570\\u7ec4\\u4e2d\\u7684\\u6570\\u636e\\u9879\\u79f0\\u4e3a\\u5143\\u7d20\\uff09\\uff1b\\u4e0a\\u9762\\u793a\\u4f8b\\u4e2d\\uff0c\\u6709\\u5e26\\u4e00\\u4e2a\\u4e2d\\u62ec\\u53f7\\u4e0e\\u5e26\\u4e24\\u4e2a\\u4e2d\\u62ec\\u53f7\\uff0c\\u51e0\\u4e2a\\u4e2d\\u62ec\\u53f7\\u4ee3\\u8868\\u662f\\u51e0\\u7ef4\\u6570\\u7ec4\\uff0c\\u62ec\\u53f7\\u4e2d\\u7684\\u6570\\u5b57\\u5b9a\\u4e49\\u4e86\\u8981\\u5b58\\u653e\\u5728\\u6570\\u7ec4\\u4e2d\\u7684\\u5143\\u7d20\\u4e2a\\u6570\\uff08\\u591a\\u7ef4\\u5219\\u662f [m][n]... m\\\\*n\\\\*...\\u4e2a\\uff09\\u3002\\n\\n\\n##### Go \\u8bed\\u8a00\\u4e2d\\u5b57\\u7b26\\u4e32\\n\\n\\u5728 Go \\u8bed\\u8a00\\u4e2d\\uff0c\\u5b57\\u7b26\\u4e32\\u662f\\u4e00\\u79cd\\u57fa\\u672c\\u7c7b\\u578b\\u3002Go \\u8bed\\u8a00\\u4e2d\\u5b57\\u7b26\\u4e32\\u7684\\u58f0\\u660e\\u548c\\u521d\\u59cb\\u5316\\u975e\\u5e38\\u7b80\\u5355\\uff0c\\u4e3e\\u4f8b\\u5982\\u4e0b\\uff1a\\n```\\nvar str string     \\/\\/ \\u58f0\\u660e\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\u53d8\\u91cf\\nstr = \\"Hello world\\"    \\/\\/ \\u5b57\\u7b26\\u4e32\\u8d4b\\u503c\\nch := str[0]     \\/\\/ \\u53d6\\u5b57\\u7b26\\u4e32\\u7684\\u7b2c\\u4e00\\u4e2a\\u5b57\\u7b26\\nfmt.Printf(\\"The length of  \\\\\\"%s\\\\\\" is %d \\\\n\\", str, len(str))\\nfmt.Printf(\\"The first character of  \\\\\\"%s\\\\\\" is %c.\\\\n\\", str, ch)\\n```","html":"<p>C \\u8bed\\u8a00\\u4e2d\\u4e0d\\u5b58\\u5728\\u539f\\u751f\\u7684\\u5b57\\u7b26\\u4e32\\u7c7b\\u578b\\uff0c\\u901a\\u5e38\\u4f7f\\u7528\\u5b57\\u7b26\\u6570\\u7ec4\\u6765\\u8868\\u793a\\uff0c\\u90a3\\u4e48C\\u8bed\\u8a00\\u4e2d\\u5b57\\u7b26\\u7c7b\\u578b\\u3001\\u5b57\\u7b26\\u4e32\\u4e0e\\u6570\\u7ec4\\u662f\\u4ec0\\u4e48\\u5173\\u7cfb\\uff0c\\u53ca\\u4e0e go \\u8bed\\u8a00\\u7684\\u5b57\\u7b26\\u7c7b\\u578b\\u3001\\u5b57\\u7b26\\u4e32\\u4e0e\\u6570\\u7ec4\\u6709\\u54ea\\u5f02\\u540c\\uff0c\\u4e0b\\u9762\\u6211\\u4eec\\u5c06\\u9010\\u4e00\\u8fdb\\u884c\\u4ecb\\u7ecd\\u4e0e\\u8bb2\\u89e3\\u3002<\\/p>\\n<h3>\\u5b57\\u7b26\\u7c7b\\u578b<\\/h3>\\n<p>C \\u4e0e Go \\u5b57\\u7b26\\uff0c\\u4ece\\u611f\\u89c2\\u4e0a\\u6765\\u8bf4\\u6709\\u7740\\u5f88\\u5927\\u7684\\u76f8\\u901a\\u6027<\\/p>\\n<h5>C \\u8bed\\u8a00\\u4e2d\\u7684\\u5b57\\u7b26\\u7c7b\\u578b<\\/h5>\\n<p>\\u5728 C \\u8bed\\u8a00\\u4e2d\\u5b57\\u7b26\\u7c7b\\u578b\\u662f char\\uff0cchar \\u7c7b\\u578b\\u7684\\u53d8\\u91cf\\u662f\\u7528\\u4e8e\\u5b58\\u50a8\\u5b57\\u6bcd\\u6216\\u6807\\u70b9\\u7b26\\u53f7\\u4e4b\\u7c7b\\u7684\\u5b57\\u7b26\\u3002\\u53ea\\u80fd\\u5b58\\u50a8\\u4e00\\u4e2a\\u5b57\\u7b26\\u4ee3\\u7801\\uff08\\u5373\\u4e00\\u4e2a\\u6574\\u6570\\uff09\\uff0c\\u6240\\u4ee5\\u88ab\\u770b\\u4f5c\\u6574\\u6570\\u7c7b\\u578b\\u3002\\u56e0\\u800c\\u53ef\\u4ee5\\u50cf\\u6574\\u6570\\u7c7b\\u578b\\u90a3\\u6837\\u5904\\u7406 char \\u7c7b\\u578b\\u5b58\\u50a8\\u7684\\u503c\\uff0c\\u4ece\\u800c\\u53ef\\u4ee5\\u5728\\u7b97\\u672f\\u8fd0\\u7b97\\u4e2d\\u4f7f\\u7528\\u5b83\\u3002\\u4e3a\\u4e86\\u5904\\u7406\\u5b57\\u7b26\\uff0c\\u8ba1\\u7b97\\u673a\\u4f7f\\u7528\\u4e00\\u79cd\\u6570\\u5b57\\u7f16\\u7801\\uff0c\\u7528\\u7279\\u5b9a\\u7684\\u6574\\u6570\\u8868\\u793a\\u7279\\u5b9a\\u7684\\u5b57\\u7b26 -- \\u6700\\u5e38\\u7528\\u7684\\u7f16\\u7801\\u662f ASCII \\u7801\\u3002<\\/p>\\n<p>\\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>#include&lt;stdio.h&gt;\\n\\nint main() {\\n    char charater;\\n    char grade = \'A\';\\n    char integer = 65;\\n\\n    charater = \'b\';\\n\\n    printf(\\"charater = %c (ASCII decimal = %d)\\\\n\\", charater, charater);\\n    printf(\\"grade = %c (ASCII decimal = %d)\\\\n\\", grade, grade);\\n    printf(\\"integer = %c (ASCII decimal = %d)\\\\n\\", integer, integer);\\n}<\\/code><\\/pre>\\n<p>\\u7f16\\u8bd1\\u540e\\uff0c\\u6267\\u884c\\uff0c\\u8f93\\u51fa\\u5982\\u4e0b\\uff1a<\\/p>\\n<pre><code>charater = b (ASCII decimal = 98)\\ngrade = A (ASCII decimal = 65)\\ninteger = A (ASCII decimal = 65)<\\/code><\\/pre>\\n<h5>Go \\u8bed\\u8a00\\u4e2d\\u7684\\u5b57\\u7b26\\u7c7b\\u578b<\\/h5>\\n<p>\\u5728 Go \\u8bed\\u8a00\\u4e2d\\u652f\\u6301\\u4e24\\u79cd\\u5b57\\u7b26\\u7c7b\\u578b\\uff0c\\u4e00\\u4e2a\\u662f byte \\uff08\\u5b9e\\u9645\\u4e0a\\u662f uint8 \\u7684\\u522b\\u540d\\uff09\\uff0c\\u4ee3\\u8868UTF-8\\u5b57\\u7b26\\u4e32\\u7684\\u5355\\u4e2a\\u5b57\\u8282\\u7684\\u503c\\uff1b\\u53e6\\u4e00\\u4e2a\\u662f rune\\uff0c\\u4ee3\\u8868\\u5355\\u4e2a Unicode \\u5b57\\u7b26\\u3002<\\/p>\\n<ul>\\n<li>byte (uint8) \\u5bf9\\u4e8e\\u53ea\\u5360\\u75281\\u4e2a\\u5b57\\u8282\\u7684\\u4f20\\u7edf ASCII \\u7f16\\u7801\\u7684\\u5b57\\u7b26\\u6765\\u8bf4\\uff0c\\u5b8c\\u5168\\u6ca1\\u6709\\u95ee\\u9898\\u3002<\\/li>\\n<\\/ul>\\n<p>byte \\u4f8b\\u5b50\\uff1a<\\/p>\\n<pre><code>package main\\n\\nimport \\"fmt\\"\\n\\nfunc main()  {\\n    var charater byte\\n    var ch byte = \'A\'\\n    var integer byte = 65\\n    var chx byte = \'\\\\x41\'\\n\\n    fmt.Printf(\\"charater: integer = %v, charater = %c, UTF-8 bytes = %X, UTF-8 code point = %U\\\\n\\", charater, charater, charater, charater)\\n    fmt.Printf(\\"ch: integer = %v, charater = %c, UTF-8 bytes = %X, UTF-8 code point = %U\\\\n\\", ch, ch, ch, ch)\\n    fmt.Printf(\\"integer: integer = %v, charater = %c, UTF-8 bytes = %X, UTF-8 code point = %U\\\\n\\", integer, integer, integer, integer)\\n    fmt.Printf(\\"chx: integer = %v, charater = %c, UTF-8 bytes = %X, UTF-8 code point = %U\\\\n\\", chx, chx, chx, chx)\\n}<\\/code><\\/pre>\\n<p>\\u7f16\\u8bd1\\uff0c\\u6267\\u884c\\u8f93\\u51fa\\uff1a<\\/p>\\n<pre><code>charater: integer = 0, charater =  , UTF-8 bytes = 0, UTF-8 code point = U+0000\\nch: integer = 65, charater = A, UTF-8 bytes = 41, UTF-8 code point = U+0041\\ninteger: integer = 65, charater = A, UTF-8 bytes = 41, UTF-8 code point = U+0041\\nchx: integer = 65, charater = A, UTF-8 bytes = 41, UTF-8 code point = U+0041<\\/code><\\/pre>\\n<h3>\\u5b57\\u7b26\\u4e32<\\/h3>\\n<h5>C \\u8bed\\u8a00\\u4e2d\\u7684\\u6570\\u7ec4\\u4e0e\\u5b57\\u7b26\\u4e32<\\/h5>\\n<p>C \\u8bed\\u8a00\\u4e2d\\u5e76\\u4e0d\\u5b58\\u5728\\u539f\\u751f\\u7684\\u5b57\\u7b26\\u4e32\\u7c7b\\u578b\\uff0c\\u901a\\u5e38\\u4f7f\\u7528\\u5b57\\u7b26\\u6570\\u7ec4\\u6765\\u8868\\u793a\\uff0c\\u5e76\\u4ee5\\u5b57\\u7b26\\u6307\\u9488\\u6765\\u4f20\\u9012\\u3002\\u4ece\\u800c\\u5728\\u8fd9\\uff0c\\u6211\\u4eec\\u4e00\\u8d77\\u8bb2\\u8ff0 C \\u8bed\\u8a00\\u7684\\u6570\\u7ec4\\u4e0e\\u5b57\\u7b26\\u4e32\\u53ca\\u5b83\\u4eec\\u7684\\u5173\\u7cfb\\u3002<\\/p>\\n<p>\\u524d\\u9762\\u6211\\u4eec\\u4ecb\\u7ecd\\u4e86 C \\u7684\\u5b57\\u7b26\\u7c7b\\u578b\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u4e86\\u89e3\\u4e0b\\u6570\\u7ec4\\u7684\\u8868\\u793a\\u65b9\\u5f0f\\uff0c\\u7ed3\\u5408\\u8d77\\u5b83\\u4eec\\u5c31\\u80fd\\u5448\\u73b0\\u4ec0\\u4e48\\u662f\\u5b57\\u7b26\\u4e32\\uff0c\\u6211\\u4eec\\u5f00\\u59cb\\u5427\\u3002<br \\/>\\nC \\u8bed\\u8a00\\u6570\\u7ec4\\u58f0\\u660e\\u793a\\u4f8b\\uff1a<\\/p>\\n<pre><code>int number[10];\\nint number[10][100];\\nfloat digit[100];\\nchar str[250]; \\/\\/ \\u5b57\\u7b26\\u7c7b\\u578b\\u6570\\u7ec4\\uff0c\\u5373\\u5b57\\u7b26\\u4e32<\\/code><\\/pre>\\n<p>\\u6570\\u7ec4\\u662f\\u4e00\\u7ec4\\u6570\\u76ee\\u56fa\\u5b9a\\u3001\\u7c7b\\u578b\\u76f8\\u540c\\u7684\\u6570\\u636e\\u9879\\uff08\\u6570\\u7ec4\\u4e2d\\u7684\\u6570\\u636e\\u9879\\u79f0\\u4e3a\\u5143\\u7d20\\uff09\\uff1b\\u4e0a\\u9762\\u793a\\u4f8b\\u4e2d\\uff0c\\u6709\\u5e26\\u4e00\\u4e2a\\u4e2d\\u62ec\\u53f7\\u4e0e\\u5e26\\u4e24\\u4e2a\\u4e2d\\u62ec\\u53f7\\uff0c\\u51e0\\u4e2a\\u4e2d\\u62ec\\u53f7\\u4ee3\\u8868\\u662f\\u51e0\\u7ef4\\u6570\\u7ec4\\uff0c\\u62ec\\u53f7\\u4e2d\\u7684\\u6570\\u5b57\\u5b9a\\u4e49\\u4e86\\u8981\\u5b58\\u653e\\u5728\\u6570\\u7ec4\\u4e2d\\u7684\\u5143\\u7d20\\u4e2a\\u6570\\uff08\\u591a\\u7ef4\\u5219\\u662f [m][n]... m*n*...\\u4e2a\\uff09\\u3002<\\/p>\\n<h5>Go \\u8bed\\u8a00\\u4e2d\\u5b57\\u7b26\\u4e32<\\/h5>\\n<p>\\u5728 Go \\u8bed\\u8a00\\u4e2d\\uff0c\\u5b57\\u7b26\\u4e32\\u662f\\u4e00\\u79cd\\u57fa\\u672c\\u7c7b\\u578b\\u3002Go \\u8bed\\u8a00\\u4e2d\\u5b57\\u7b26\\u4e32\\u7684\\u58f0\\u660e\\u548c\\u521d\\u59cb\\u5316\\u975e\\u5e38\\u7b80\\u5355\\uff0c\\u4e3e\\u4f8b\\u5982\\u4e0b\\uff1a<\\/p>\\n<pre><code>var str string     \\/\\/ \\u58f0\\u660e\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\u53d8\\u91cf\\nstr = \\"Hello world\\"    \\/\\/ \\u5b57\\u7b26\\u4e32\\u8d4b\\u503c\\nch := str[0]     \\/\\/ \\u53d6\\u5b57\\u7b26\\u4e32\\u7684\\u7b2c\\u4e00\\u4e2a\\u5b57\\u7b26\\nfmt.Printf(\\"The length of  \\\\\\"%s\\\\\\" is %d \\\\n\\", str, len(str))\\nfmt.Printf(\\"The first character of  \\\\\\"%s\\\\\\" is %c.\\\\n\\", str, ch)<\\/code><\\/pre>"}',
                'page_image' => NULL,
                'meta_description' => 'C 语言中不存在原生的字符串类型，通常使用字符数组来表示，所以有了字符类型、字符串与数组这个文章标题。C 与 Go 字符，从感观上来说，应该有很大的想通性，希望能通过这篇文章能带来一定启发。',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 107,
                'published_at' => '2020-10-19 20:59:00',
                'created_at' => '2020-10-20 00:14:49',
                'updated_at' => '2022-01-09 12:15:31',
                'deleted_at' => NULL,
            ),
            16 => 
            array (
                'id' => 17,
                'category_id' => 12,
                'collection_id' => 2,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'sds-16h4f',
                'title' => 'redis -- 简单动态字符串（SDS）',
                'subtitle' => '简单动态字符串 -- SDS',
            'content' => '{"raw":"\\u5f00\\u59cb\\u6211\\u4eec redis \\u6570\\u636e\\u7ed3\\u6784\\u7684\\u7b2c\\u4e00\\u65c5\\u7a0b\\uff0c\\u7b80\\u5355\\u52a8\\u6001\\u5b57\\u7b26\\u4e32\\uff08simple dynamic string, SDS\\uff09\\u4eceredis\\u6e90\\u7801\\u5806\\u91cc\\u72ec\\u7acb\\u51fa\\u6765\\uff0c\\u81ea\\u7acb\\u95e8\\u6237\\u3002\\n\\n\\u9996\\u5148\\uff0c\\u4ece redis \\u6e90\\u4ee3\\u7801\\u6587\\u4ef6\\u5939 src \\u91cc\\u62f7\\u8d1d\\u51fa sds.h \\u4e0e sds.c \\u4e24\\u4e2a\\u6587\\u4ef6\\u3002\\u6253\\u5f00 sds.c \\u6587\\u4ef6\\uff0c\\u80fd\\u770b\\u5230 include \\u5934\\u6587\\u4ef6\\u5217\\u8868\\u542b\\u6709 sdsalloc.h \\u6587\\u4ef6\\uff0csdsalloc.h \\u6587\\u4ef6\\u53c8\\u5305\\u542b\\u4e86 zmalloc.h\\uff1b\\n\\u56e0\\u6b64\\uff0c\\u6211\\u4eec\\u4e5f\\u8981\\u5f15\\u5165atomicvar.h\\u3001 zmalloc.h \\u4e0e zmalloc.c \\u6587\\u4ef6\\u3002\\u7136\\u800c\\uff0czmalloc.c \\u6587\\u4ef6\\u5f15\\u5165\\u4e86 redis \\u4e2d\\u7684 config.h\\u3001atomicvar.h \\u5934\\u6587\\u4ef6\\u3002\\u67e5\\u770b\\u8fd9\\u4e9b\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u53d1\\u73b0\\u5b83\\u4eec\\u4ee3\\u7801\\u91cf\\u5f88\\u591a\\uff0c\\u6b64\\u65f6\\u6211\\u4eec\\u7528\\u4e0d\\u7740\\u5b83\\u4eec\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u5148\\u7565\\u8fc7\\u5b83\\u4eec\\u4ee3\\u7801\\u5185\\u5bb9\\u7684\\u7ec6\\u8282\\uff0c\\u53ea\\u7ba1\\u590d\\u5236\\u5b83\\u4eec\\uff08\\u7edf\\u7edf\\u590d\\u5236\\u5230\\u4e00\\u4e2a\\u6587\\u4ef6\\u5939\\u4e2d\\uff09\\u3002\\n\\n\\u64cd\\u4f5c\\u5230\\u8fd9\\uff0c\\u76ee\\u5f55\\u6587\\u4ef6\\u4e0b\\uff0c\\u603b\\u5171\\u67097\\u4e2a\\u6587\\u4ef6\\uff1asds.h\\u3001sds.c\\u3001zmalloc.h\\u3001zmalloc.c \\u3001atomicvar.h\\u3001config.h\\u3001sdsalloc.h\\u3002\\u63a5\\u4e0b\\u6765\\uff0c\\u5199\\u4e2amakefile\\u6587\\u4ef6\\uff0c\\u5185\\u5bb9\\u5982\\u4e0b\\uff1a\\n> make \\u4e0e makefile \\u6587\\u4ef6\\u5e94\\u8be5\\u5bf9\\u4e8e\\u975e\\u4e13\\u4e1a C \\u5f00\\u53d1\\u8005\\u6765\\u8bf4\\u90fd\\u4f1a\\u662f\\u964c\\u751f\\u7684\\uff0c\\u4f46\\u5b83\\u5374\\u662f\\u672c\\u7cfb\\u5217\\u4e0d\\u53ef\\u5c11\\u7684\\u77e5\\u8bc6\\u70b9\\uff0c\\u60f3\\u4e86\\u89e3 make \\u8bf7\\u67e5\\u770b\\u7cfb\\u5217 --** [\\u8ddf\\u6211\\u4e00\\u8d77\\u5199 Makefile](http:\\/\\/www.shishao.site\\/collection\\/3)**\\n\\n```shell\\nCC  := gcc\\n#CFLAGS  := -w -std=gnu99 -ggdb -ffunction-sections # -w:\\u5173\\u95ed\\u6240\\u6709\\u544a\\u8b66\\nCFLAGS  := -g -I. $(CCFLAGS)\\nSRCS    := $(wildcard *.c) # \\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u7684\\u6240\\u6709\\u7684.c\\u6587\\u4ef6 \\nOBJS    := $(SRCS:.c=.o) # \\u5c06\\u6240\\u6709\\u7684.c\\u6587\\u4ef6\\u540d\\u66ff\\u6362\\u4e3a.o\\nREDISLIB\\t:= libredis.a\\n\\nall:$(REDISLIB) gccr\\n\\n# ***************************************************************\\n# C compilations\\nzmalloc.o: zmalloc.c zmalloc.h\\n\\t$(CC) $(CFLAGS) -c zmalloc.c\\n\\nsds.o: sds.c sds.h\\n\\t$(CC) $(CFLAGS) -c sds.c\\n\\n$(REDISLIB):$(OBJS)\\n\\t-rm -f $(REDISLIB)\\n\\tar cr $(REDISLIB) $(OBJS)\\n\\tranlib $(REDISLIB)\\n\\n# ***************************************************************\\n# Entry to reconstruct the gccr script\\n\\ngccr: makefile\\n\\t@echo \'#! \\/bin\\/csh -f\' > gccr\\n\\t@echo \'set INCLUDE =\' `pwd` >> gccr\\n\\t@echo \'set REDISLIB = $$INCLUDE\\/libredis.a\' >> gccr\\n\\t@echo \'set LIBRARIES = ($$REDISLIB)\' >> gccr\\n\\t@echo \'foreach x ($$*)\' >> gccr\\n\\t@echo \'  if (\\"x$$x\\" == \\"x-c\\") then\' >> gccr\\n\\t@echo \'    set LIBRARIES = \\"\\"\' >> gccr\\n\\t@echo \'    break\' >> gccr\\n\\t@echo \'  endif\' >> gccr\\n\\t@echo \'end\' >> gccr\\n\\t@echo \'gcc -g -I$$INCLUDE $$* $$LIBRARIES\' >> gccr\\n\\t@chmod a+x gccr\\n\\t@echo \'[gccr script created]\'\\n\\nclean:\\n\\trm -f *.o\\n\\trm -f $(BINS)\\n\\trm -f $(REDISLIB)\\n\\trm -f gccr\\n```\\n\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\uff0c\\u6267\\u884c\\u547d\\u4ee4\\uff1a`make`\\uff0c\\u4e3b\\u8981\\u4f1a\\u751f\\u6210\\u4e00\\u4e2a shell \\u53ef\\u6267\\u884c\\u6587\\u4ef6 gccr \\u548c\\u53e6\\u5916\\u4e00\\u4e2a C \\u9759\\u6001\\u5e93\\u6587\\u4ef6 libredis.a \\u3002libredis.a \\u9759\\u6001\\u5e93\\u6587\\u4ef6\\u662f\\u6211\\u4eec\\u80fd\\u591f\\u5b9e\\u73b0\\u5355\\u72ec\\u53bb\\u6d4b\\u8bd5\\u6267\\u884c redis \\u91cc\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u4ee3\\u7801\\u7684\\u5173\\u952e\\u3002\\u73b0\\u8ba9\\u6211\\u4eec\\u6253\\u5f00 gccr \\u8fd9\\u4e2a\\u6587\\u4ef6\\uff1a\\n```shell\\n#! \\/bin\\/csh -f\\nset INCLUDE = \\/www\\/redisResourceInAction\\/01-SDS\\nset REDISLIB = $INCLUDE\\/libredis.a\\nset LIBRARIES = ($REDISLIB)\\nforeach x ($*)\\n  if (\\"x$x\\" == \\"x-c\\") then\\n    set LIBRARIES = \\"\\"\\n    break\\n  endif\\nend\\ngcc -g -I$INCLUDE $* $LIBRARIES\\n\\n```\\n\\u7ec6\\u5fc3\\u7684\\u4f60\\u4e5f\\u8bb8\\u6ce8\\u610f\\u5230\\u4e86\\u7b2c\\u4e00\\u53e5\\u91cc\\u6709\\u4e2a csh \\u3002sh \\u4e4b\\u540e\\u53e6\\u4e00\\u4e2a\\u5e7f\\u4e3a\\u6d41\\u4f20\\u7684 shell \\u662f\\u7531\\u67cf\\u514b\\u83b1\\u5927\\u5b66\\u7684 Bill Joy \\u8bbe\\u8ba1\\u7684\\uff0c\\u8fd9\\u4e2a shell \\u7684\\u8bed\\u6cd5\\u6709\\u70b9\\u7c7b\\u4f3cC\\u8bed\\u8a00\\uff0c\\u6240\\u4ee5\\u624d\\u5f97\\u540d\\u4e3a C shell \\uff0c\\u7b80\\u79f0\\u4e3a csh\\u3002\\u5982\\u679c\\u4f60\\u7684 linux \\u73af\\u5883\\u4e0d\\u652f\\u6301\\uff0c\\u8bf7\\u5b89\\u88c5\\u4e0b\\u3002gccr\\u6587\\u4ef6\\u5185\\u5bb9\\u5c31\\u662f\\u7eaf shell \\u547d\\u4ee4\\uff0c\\u53ea\\u8981\\u5927\\u6982\\u61c2\\u5f97\\u4e00\\u4e9b shell \\u547d\\u4ee4\\u5c31\\u5927\\u6982\\u77e5\\u9053\\u5b83\\u5728\\u505a\\u4ec0\\u4e48\\u3002\\u8fd9\\u4e2a\\u4e5f\\u4f1a\\u5728\\u540e\\u9762\\u535a\\u6587\\u8fdb\\u884c\\u8be6\\u89e3\\u3002\\n\\n\\u4e3a\\u4e86\\u80fd\\u5728shell\\u547d\\u4ee4\\u884c\\u4e0b\\uff0c\\u76f4\\u63a5\\u6267\\u884cgccr \\uff0c \\u6267\\u884c\\uff1a`mv gccr \\/usr\\/local\\/bin`\\uff0c\\u628a\\u8fd9\\u4e2a\\u6587\\u4ef6\\u653e\\u5165 \\/usr\\/local\\/bin \\u76ee\\u5f55\\u4e0b\\u3002\\n\\nok! \\u81f3\\u6b64\\uff0c\\u5c31\\u5927\\u529f\\u544a\\u6210\\uff0c\\u662f\\u4e0d\\u662f\\u611f\\u89c9\\u5f88\\u7b80\\u5355\\u3002\\u4e0b\\u9762\\u6211\\u4eec\\u8fdb\\u884c\\u521b\\u5efa\\u4e00\\u4e9b\\u6d4b\\u8bd5demo\\uff0c\\u6765\\u68c0\\u67e5\\u6211\\u4eec\\u7684\\u52a8\\u6001\\u5b57\\u7b26\\u4e32(SDS)\\n```c\\n#include <stdio.h>\\n#include <string.h>\\n#include \\"sds.h\\"\\n\\nint main() {\\n    char *str = \\"hello\\";\\n    sds sdsStr;\\n\\n    \\/\\/ \\u521b\\u5efa\\u4e00\\u4e2a\\u5305\\u542b\\u7ed9\\u5b9aC\\u5b57\\u7b26\\u4e32\\u7684SDS\\n    sdsStr = sdsnew(str);\\n    printf(\\"sdsStr content: %s\\\\n\\", sdsStr);\\n\\n    \\/\\/ \\u8fd4\\u56deSDS\\u7684\\u5df2\\u4f7f\\u7528\\u7a7a\\u95f4\\u5b57\\u8282\\u6570\\n    size_t length = sdslen(sdsStr);\\n    printf(\\"sdsStr length: %d\\\\n\\", length);\\n\\n    sds secondStr = \\"keep doing\\";\\n    \\/\\/ \\u6839\\u636e\\u7ed9\\u5b9a\\u7684\\u521d\\u59cb\\u5316\\u5b57\\u7b26\\u4e32 init \\u548c\\u5b57\\u7b26\\u4e32\\u957f\\u5ea6 initlen\\uff0c\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684 sds\\n    sdsStr = sdsnewlen(secondStr, strlen(secondStr));\\n    printf(\\"new sdsStr content: %s\\\\n\\", sdsStr);\\n\\n    length = sdslen(sdsStr);\\n    printf(\\"new sdsStr length: %d\\\\n\\", length);\\n\\n    \\/\\/create empty string\\n    sds emptyStr = sdsempty();\\n    printf(\\"This is empty string: %s\\\\n\\", emptyStr);\\n\\n    \\/\\/dumplicate a string\\n    sds dupStr = sdsdup(sdsStr);\\n    printf(\\"dumplicate of sdsStr: %s\\\\n\\", dupStr);\\n\\n    return 0;\\n}\\n```\\n\\u5728\\u6b64\\u6587\\u4ef6\\u76ee\\u5f55\\u4e0b\\uff0c\\u6267\\u884c\\uff1a`gccr demo_1.c -o demo_1`\\uff0c\\u4e00\\u5207\\u6b63\\u5e38\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u518d\\u6267\\u884c\\uff1a`.\\/demo_1`\\n\\n![K3is5XcoR878xKmUqje18yeDb7hhZd1ettUCy7T5.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/10\\/cNEVXPh6dMY8kiUhp6kjnDkjRdy8QeegEPfWmUgr.png)\\n\\n\\u5982\\u679c\\u80fd\\u5f97\\u5230\\u4e0a\\u56fe\\u7ed3\\u679c\\uff0c\\u90a3\\u4e48\\u4f60redis\\u6570\\u636e\\u7ed3\\u6784\\u5e93\\u5c31\\u987a\\u5229\\u751f\\u6210\\u4e86\\uff0c\\u4e14\\u80fd\\u6b63\\u5e38\\u7f16\\u8bd1\\u4ee3\\u7801\\u3002\\u5230\\u6b64\\u6211\\u4eec\\u4fbf\\u6253\\u5f00\\u63a2\\u7d22 redis \\u6e90\\u7801\\u4e4b\\u95e8\\u3002\\n\\n\\u521a\\u5f00\\u59cb\\u5199\\u535a\\u5ba2\\uff0c\\u5f88\\u662f\\u4e0d\\u4e13\\u4e1a\\uff0c\\u611f\\u89c9\\u601d\\u7ef4\\u8df3\\u8dc3\\u5927\\uff0c\\u5f88\\u96be\\u8ba9\\u8bfb\\u8005\\u77e5\\u9053\\u6240\\u6709\\u7684\\u64cd\\u4f5c\\u6b65\\u9aa4\\uff0c\\u8fd8\\u8bf7\\u591a\\u591a\\u5305\\u6db5\\u3002\\u9644\\u4e0a [github\\u6e90\\u7801](https:\\/\\/github.com\\/shishaoqi\\/redisResourceInAction \\"github\\u6e90\\u7801\\")\\uff0c\\u5982\\u6709\\u4e0d\\u61c2\\u7684\\u5730\\u65b9\\u8bf7\\u7559\\u8a00\\u3002","html":"<p>\\u5f00\\u59cb\\u6211\\u4eec redis \\u6570\\u636e\\u7ed3\\u6784\\u7684\\u7b2c\\u4e00\\u65c5\\u7a0b\\uff0c\\u7b80\\u5355\\u52a8\\u6001\\u5b57\\u7b26\\u4e32\\uff08simple dynamic string, SDS\\uff09\\u4eceredis\\u6e90\\u7801\\u5806\\u91cc\\u72ec\\u7acb\\u51fa\\u6765\\uff0c\\u81ea\\u7acb\\u95e8\\u6237\\u3002<\\/p>\\n<p>\\u9996\\u5148\\uff0c\\u4ece redis \\u6e90\\u4ee3\\u7801\\u6587\\u4ef6\\u5939 src \\u91cc\\u62f7\\u8d1d\\u51fa sds.h \\u4e0e sds.c \\u4e24\\u4e2a\\u6587\\u4ef6\\u3002\\u6253\\u5f00 sds.c \\u6587\\u4ef6\\uff0c\\u80fd\\u770b\\u5230 include \\u5934\\u6587\\u4ef6\\u5217\\u8868\\u542b\\u6709 sdsalloc.h \\u6587\\u4ef6\\uff0csdsalloc.h \\u6587\\u4ef6\\u53c8\\u5305\\u542b\\u4e86 zmalloc.h\\uff1b<br \\/>\\n\\u56e0\\u6b64\\uff0c\\u6211\\u4eec\\u4e5f\\u8981\\u5f15\\u5165atomicvar.h\\u3001 zmalloc.h \\u4e0e zmalloc.c \\u6587\\u4ef6\\u3002\\u7136\\u800c\\uff0czmalloc.c \\u6587\\u4ef6\\u5f15\\u5165\\u4e86 redis \\u4e2d\\u7684 config.h\\u3001atomicvar.h \\u5934\\u6587\\u4ef6\\u3002\\u67e5\\u770b\\u8fd9\\u4e9b\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u53d1\\u73b0\\u5b83\\u4eec\\u4ee3\\u7801\\u91cf\\u5f88\\u591a\\uff0c\\u6b64\\u65f6\\u6211\\u4eec\\u7528\\u4e0d\\u7740\\u5b83\\u4eec\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u5148\\u7565\\u8fc7\\u5b83\\u4eec\\u4ee3\\u7801\\u5185\\u5bb9\\u7684\\u7ec6\\u8282\\uff0c\\u53ea\\u7ba1\\u590d\\u5236\\u5b83\\u4eec\\uff08\\u7edf\\u7edf\\u590d\\u5236\\u5230\\u4e00\\u4e2a\\u6587\\u4ef6\\u5939\\u4e2d\\uff09\\u3002<\\/p>\\n<p>\\u64cd\\u4f5c\\u5230\\u8fd9\\uff0c\\u76ee\\u5f55\\u6587\\u4ef6\\u4e0b\\uff0c\\u603b\\u5171\\u67097\\u4e2a\\u6587\\u4ef6\\uff1asds.h\\u3001sds.c\\u3001zmalloc.h\\u3001zmalloc.c \\u3001atomicvar.h\\u3001config.h\\u3001sdsalloc.h\\u3002\\u63a5\\u4e0b\\u6765\\uff0c\\u5199\\u4e2amakefile\\u6587\\u4ef6\\uff0c\\u5185\\u5bb9\\u5982\\u4e0b\\uff1a<\\/p>\\n<blockquote>\\n<p>make \\u4e0e makefile \\u6587\\u4ef6\\u5e94\\u8be5\\u5bf9\\u4e8e\\u975e\\u4e13\\u4e1a C \\u5f00\\u53d1\\u8005\\u6765\\u8bf4\\u90fd\\u4f1a\\u662f\\u964c\\u751f\\u7684\\uff0c\\u4f46\\u5b83\\u5374\\u662f\\u672c\\u7cfb\\u5217\\u4e0d\\u53ef\\u5c11\\u7684\\u77e5\\u8bc6\\u70b9\\uff0c\\u60f3\\u4e86\\u89e3 make \\u8bf7\\u67e5\\u770b\\u7cfb\\u5217 --<strong> <a href=\\"http:\\/\\/www.shishao.site\\/collection\\/3\\">\\u8ddf\\u6211\\u4e00\\u8d77\\u5199 Makefile<\\/a><\\/strong><\\/p>\\n<\\/blockquote>\\n<pre><code class=\\"language-shell\\">CC  := gcc\\n#CFLAGS  := -w -std=gnu99 -ggdb -ffunction-sections # -w:\\u5173\\u95ed\\u6240\\u6709\\u544a\\u8b66\\nCFLAGS  := -g -I. $(CCFLAGS)\\nSRCS    := $(wildcard *.c) # \\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u7684\\u6240\\u6709\\u7684.c\\u6587\\u4ef6 \\nOBJS    := $(SRCS:.c=.o) # \\u5c06\\u6240\\u6709\\u7684.c\\u6587\\u4ef6\\u540d\\u66ff\\u6362\\u4e3a.o\\nREDISLIB    := libredis.a\\n\\nall:$(REDISLIB) gccr\\n\\n# ***************************************************************\\n# C compilations\\nzmalloc.o: zmalloc.c zmalloc.h\\n    $(CC) $(CFLAGS) -c zmalloc.c\\n\\nsds.o: sds.c sds.h\\n    $(CC) $(CFLAGS) -c sds.c\\n\\n$(REDISLIB):$(OBJS)\\n    -rm -f $(REDISLIB)\\n    ar cr $(REDISLIB) $(OBJS)\\n    ranlib $(REDISLIB)\\n\\n# ***************************************************************\\n# Entry to reconstruct the gccr script\\n\\ngccr: makefile\\n    @echo \'#! \\/bin\\/csh -f\' &gt; gccr\\n    @echo \'set INCLUDE =\' `pwd` &gt;&gt; gccr\\n    @echo \'set REDISLIB = $$INCLUDE\\/libredis.a\' &gt;&gt; gccr\\n    @echo \'set LIBRARIES = ($$REDISLIB)\' &gt;&gt; gccr\\n    @echo \'foreach x ($$*)\' &gt;&gt; gccr\\n    @echo \'  if (\\"x$$x\\" == \\"x-c\\") then\' &gt;&gt; gccr\\n    @echo \'    set LIBRARIES = \\"\\"\' &gt;&gt; gccr\\n    @echo \'    break\' &gt;&gt; gccr\\n    @echo \'  endif\' &gt;&gt; gccr\\n    @echo \'end\' &gt;&gt; gccr\\n    @echo \'gcc -g -I$$INCLUDE $$* $$LIBRARIES\' &gt;&gt; gccr\\n    @chmod a+x gccr\\n    @echo \'[gccr script created]\'\\n\\nclean:\\n    rm -f *.o\\n    rm -f $(BINS)\\n    rm -f $(REDISLIB)\\n    rm -f gccr<\\/code><\\/pre>\\n<p>\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\uff0c\\u6267\\u884c\\u547d\\u4ee4\\uff1a<code>make<\\/code>\\uff0c\\u4e3b\\u8981\\u4f1a\\u751f\\u6210\\u4e00\\u4e2a shell \\u53ef\\u6267\\u884c\\u6587\\u4ef6 gccr \\u548c\\u53e6\\u5916\\u4e00\\u4e2a C \\u9759\\u6001\\u5e93\\u6587\\u4ef6 libredis.a \\u3002libredis.a \\u9759\\u6001\\u5e93\\u6587\\u4ef6\\u662f\\u6211\\u4eec\\u80fd\\u591f\\u5b9e\\u73b0\\u5355\\u72ec\\u53bb\\u6d4b\\u8bd5\\u6267\\u884c redis \\u91cc\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u4ee3\\u7801\\u7684\\u5173\\u952e\\u3002\\u73b0\\u8ba9\\u6211\\u4eec\\u6253\\u5f00 gccr \\u8fd9\\u4e2a\\u6587\\u4ef6\\uff1a<\\/p>\\n<pre><code class=\\"language-shell\\">#! \\/bin\\/csh -f\\nset INCLUDE = \\/www\\/redisResourceInAction\\/01-SDS\\nset REDISLIB = $INCLUDE\\/libredis.a\\nset LIBRARIES = ($REDISLIB)\\nforeach x ($*)\\n  if (\\"x$x\\" == \\"x-c\\") then\\n    set LIBRARIES = \\"\\"\\n    break\\n  endif\\nend\\ngcc -g -I$INCLUDE $* $LIBRARIES\\n<\\/code><\\/pre>\\n<p>\\u7ec6\\u5fc3\\u7684\\u4f60\\u4e5f\\u8bb8\\u6ce8\\u610f\\u5230\\u4e86\\u7b2c\\u4e00\\u53e5\\u91cc\\u6709\\u4e2a csh \\u3002sh \\u4e4b\\u540e\\u53e6\\u4e00\\u4e2a\\u5e7f\\u4e3a\\u6d41\\u4f20\\u7684 shell \\u662f\\u7531\\u67cf\\u514b\\u83b1\\u5927\\u5b66\\u7684 Bill Joy \\u8bbe\\u8ba1\\u7684\\uff0c\\u8fd9\\u4e2a shell \\u7684\\u8bed\\u6cd5\\u6709\\u70b9\\u7c7b\\u4f3cC\\u8bed\\u8a00\\uff0c\\u6240\\u4ee5\\u624d\\u5f97\\u540d\\u4e3a C shell \\uff0c\\u7b80\\u79f0\\u4e3a csh\\u3002\\u5982\\u679c\\u4f60\\u7684 linux \\u73af\\u5883\\u4e0d\\u652f\\u6301\\uff0c\\u8bf7\\u5b89\\u88c5\\u4e0b\\u3002gccr\\u6587\\u4ef6\\u5185\\u5bb9\\u5c31\\u662f\\u7eaf shell \\u547d\\u4ee4\\uff0c\\u53ea\\u8981\\u5927\\u6982\\u61c2\\u5f97\\u4e00\\u4e9b shell \\u547d\\u4ee4\\u5c31\\u5927\\u6982\\u77e5\\u9053\\u5b83\\u5728\\u505a\\u4ec0\\u4e48\\u3002\\u8fd9\\u4e2a\\u4e5f\\u4f1a\\u5728\\u540e\\u9762\\u535a\\u6587\\u8fdb\\u884c\\u8be6\\u89e3\\u3002<\\/p>\\n<p>\\u4e3a\\u4e86\\u80fd\\u5728shell\\u547d\\u4ee4\\u884c\\u4e0b\\uff0c\\u76f4\\u63a5\\u6267\\u884cgccr \\uff0c \\u6267\\u884c\\uff1a<code>mv gccr \\/usr\\/local\\/bin<\\/code>\\uff0c\\u628a\\u8fd9\\u4e2a\\u6587\\u4ef6\\u653e\\u5165 \\/usr\\/local\\/bin \\u76ee\\u5f55\\u4e0b\\u3002<\\/p>\\n<p>ok! \\u81f3\\u6b64\\uff0c\\u5c31\\u5927\\u529f\\u544a\\u6210\\uff0c\\u662f\\u4e0d\\u662f\\u611f\\u89c9\\u5f88\\u7b80\\u5355\\u3002\\u4e0b\\u9762\\u6211\\u4eec\\u8fdb\\u884c\\u521b\\u5efa\\u4e00\\u4e9b\\u6d4b\\u8bd5demo\\uff0c\\u6765\\u68c0\\u67e5\\u6211\\u4eec\\u7684\\u52a8\\u6001\\u5b57\\u7b26\\u4e32(SDS)<\\/p>\\n<pre><code class=\\"language-c\\">#include &lt;stdio.h&gt;\\n#include &lt;string.h&gt;\\n#include \\"sds.h\\"\\n\\nint main() {\\n    char *str = \\"hello\\";\\n    sds sdsStr;\\n\\n    \\/\\/ \\u521b\\u5efa\\u4e00\\u4e2a\\u5305\\u542b\\u7ed9\\u5b9aC\\u5b57\\u7b26\\u4e32\\u7684SDS\\n    sdsStr = sdsnew(str);\\n    printf(\\"sdsStr content: %s\\\\n\\", sdsStr);\\n\\n    \\/\\/ \\u8fd4\\u56deSDS\\u7684\\u5df2\\u4f7f\\u7528\\u7a7a\\u95f4\\u5b57\\u8282\\u6570\\n    size_t length = sdslen(sdsStr);\\n    printf(\\"sdsStr length: %d\\\\n\\", length);\\n\\n    sds secondStr = \\"keep doing\\";\\n    \\/\\/ \\u6839\\u636e\\u7ed9\\u5b9a\\u7684\\u521d\\u59cb\\u5316\\u5b57\\u7b26\\u4e32 init \\u548c\\u5b57\\u7b26\\u4e32\\u957f\\u5ea6 initlen\\uff0c\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684 sds\\n    sdsStr = sdsnewlen(secondStr, strlen(secondStr));\\n    printf(\\"new sdsStr content: %s\\\\n\\", sdsStr);\\n\\n    length = sdslen(sdsStr);\\n    printf(\\"new sdsStr length: %d\\\\n\\", length);\\n\\n    \\/\\/create empty string\\n    sds emptyStr = sdsempty();\\n    printf(\\"This is empty string: %s\\\\n\\", emptyStr);\\n\\n    \\/\\/dumplicate a string\\n    sds dupStr = sdsdup(sdsStr);\\n    printf(\\"dumplicate of sdsStr: %s\\\\n\\", dupStr);\\n\\n    return 0;\\n}<\\/code><\\/pre>\\n<p>\\u5728\\u6b64\\u6587\\u4ef6\\u76ee\\u5f55\\u4e0b\\uff0c\\u6267\\u884c\\uff1a<code>gccr demo_1.c -o demo_1<\\/code>\\uff0c\\u4e00\\u5207\\u6b63\\u5e38\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u518d\\u6267\\u884c\\uff1a<code>.\\/demo_1<\\/code><\\/p>\\n<p><img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/10\\/cNEVXPh6dMY8kiUhp6kjnDkjRdy8QeegEPfWmUgr.png\\" alt=\\"K3is5XcoR878xKmUqje18yeDb7hhZd1ettUCy7T5.png\\" \\/><\\/p>\\n<p>\\u5982\\u679c\\u80fd\\u5f97\\u5230\\u4e0a\\u56fe\\u7ed3\\u679c\\uff0c\\u90a3\\u4e48\\u4f60redis\\u6570\\u636e\\u7ed3\\u6784\\u5e93\\u5c31\\u987a\\u5229\\u751f\\u6210\\u4e86\\uff0c\\u4e14\\u80fd\\u6b63\\u5e38\\u7f16\\u8bd1\\u4ee3\\u7801\\u3002\\u5230\\u6b64\\u6211\\u4eec\\u4fbf\\u6253\\u5f00\\u63a2\\u7d22 redis \\u6e90\\u7801\\u4e4b\\u95e8\\u3002<\\/p>\\n<p>\\u521a\\u5f00\\u59cb\\u5199\\u535a\\u5ba2\\uff0c\\u5f88\\u662f\\u4e0d\\u4e13\\u4e1a\\uff0c\\u611f\\u89c9\\u601d\\u7ef4\\u8df3\\u8dc3\\u5927\\uff0c\\u5f88\\u96be\\u8ba9\\u8bfb\\u8005\\u77e5\\u9053\\u6240\\u6709\\u7684\\u64cd\\u4f5c\\u6b65\\u9aa4\\uff0c\\u8fd8\\u8bf7\\u591a\\u591a\\u5305\\u6db5\\u3002\\u9644\\u4e0a <a href=\\"https:\\/\\/github.com\\/shishaoqi\\/redisResourceInAction\\" title=\\"github\\u6e90\\u7801\\">github\\u6e90\\u7801<\\/a>\\uff0c\\u5982\\u6709\\u4e0d\\u61c2\\u7684\\u5730\\u65b9\\u8bf7\\u7559\\u8a00\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '走进 redis 源码代码大门的第一步：简单动态字符串（simple dynamic string, SDS）剥离及其基础工作',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 149,
                'published_at' => '2020-10-24 20:00:00',
                'created_at' => '2020-10-24 23:14:00',
                'updated_at' => '2022-01-09 13:04:59',
                'deleted_at' => NULL,
            ),
            17 => 
            array (
                'id' => 18,
                'category_id' => 12,
                'collection_id' => 2,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'sds-gnk2v',
                'title' => '简单动态字符串 -- SDS，源码理解关键',
                'subtitle' => '如果你基本掌握了C语言，但如果没有接触什么Linux C的开发，很有可能是看不懂 SDS 源码的，下面来扫除阅读 SDS 源码几大障碍',
            'content' => '{"raw":"sdsnew \\u65b9\\u6cd5\\u53ef\\u4ee5\\u521b\\u5efa\\u4e00\\u4e2a sds\\uff0c\\u5728 sds.c \\u6587\\u4ef6\\u4e2d\\uff0c\\u6211\\u4eec\\u770b\\u5230\\u7684\\u6e90\\u7801\\u662f\\uff1a\\n```\\n\\/* Create a new sds string starting from a null terminated C string. *\\/\\nsds sdsnew(const char *init) {\\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\\n    return sdsnewlen(init, initlen);\\n}\\n```\\nsdsnew \\u5176\\u5b9e\\u8c03\\u7528\\u7684\\u662f\\u65b9\\u6cd5 sdsnewlen \\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u53bb\\u67e5\\u770b sdsnewlen \\u4ee3\\u7801\\u5b9e\\u73b0\\u3002\\n\\n```\\n\\/* Create a new sds string with the content specified by the \'init\' pointer\\n * and \'initlen\'.\\n * If NULL is used for \'init\' the string is initialized with zero bytes.\\n * If SDS_NOINIT is used, the buffer is left uninitialized;\\n *\\n * The string is always null-termined (all the sds strings are, always) so\\n * even if you create an sds string with:\\n *\\n * mystring = sdsnewlen(\\"abc\\",3);\\n *\\n * You can print the string with printf() as there is an implicit \\\\0 at the\\n * end of the string. However the string is binary safe and can contain\\n * \\\\0 characters in the middle, as the length is stored in the sds header. *\\/\\nsds sdsnewlen(const void *init, size_t initlen) {\\n    void *sh;\\n    sds s;\\n    char type = sdsReqType(initlen);\\n    \\/* Empty strings are usually created in order to append. Use type 8\\n     * since type 5 is not good at this. *\\/\\n    if (type == SDS_TYPE_5 && initlen == 0) type = SDS_TYPE_8;\\n    int hdrlen = sdsHdrSize(type);\\n    unsigned char *fp; \\/* flags pointer. *\\/\\n    size_t usable;\\n\\n    sh = s_malloc_usable(hdrlen+initlen+1, &usable); \\/\\/ \\u771f\\u6b63\\u5b58\\u50a8\\u5b57\\u7b26\\u4e32\\u7684\\u5730\\u5740\\n    if (sh == NULL) return NULL;\\n    if (init==SDS_NOINIT)\\n        init = NULL;\\n    else if (!init)\\n        memset(sh, 0, hdrlen+initlen+1);\\n    s = (char*)sh+hdrlen;\\n    fp = ((unsigned char*)s)-1;\\n    usable = usable-hdrlen-1;\\n    if (usable > sdsTypeMaxSize(type))\\n        usable = sdsTypeMaxSize(type);\\n    switch(type) {\\n        case SDS_TYPE_5: {\\n            *fp = type | (initlen << SDS_TYPE_BITS);\\n            break;\\n        }\\n        case SDS_TYPE_8: {\\n            SDS_HDR_VAR(8,s);  \\/\\/ \\u5173\\u952e\\u4ee3\\u7801\\n            sh->len = initlen;\\n            sh->alloc = usable;\\n            *fp = type;\\n            break;\\n        }\\n        case SDS_TYPE_16: {\\n            SDS_HDR_VAR(16,s); \\/\\/ \\u5173\\u952e\\u4ee3\\u7801\\n            sh->len = initlen;\\n            sh->alloc = usable;\\n            *fp = type;\\n            break;\\n        }\\n        case SDS_TYPE_32: {\\n            SDS_HDR_VAR(32,s); \\/\\/ \\u5173\\u952e\\u4ee3\\u7801\\n            sh->len = initlen;\\n            sh->alloc = usable;\\n            *fp = type;\\n            break;\\n        }\\n        case SDS_TYPE_64: {\\n            SDS_HDR_VAR(64,s); \\/\\/ \\u5173\\u952e\\u4ee3\\u7801\\n            sh->len = initlen;\\n            sh->alloc = usable;\\n            *fp = type;\\n            break;\\n        }\\n    }\\n    if (initlen && init)\\n        memcpy(s, init, initlen);\\n    s[initlen] = \'\\\\0\';\\n    return s;\\n}\\n```\\n\\u5728 sds.h \\u67e5\\u770b\\u5b8f\\u5b9a\\u4e49 SDS_HDR_VAR \\u51fd\\u6570\\n```\\n#define SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));\\n```\\nSDS_HDR_VAR \\u4ee3\\u7801\\u66ff\\u6362\\u540e\\uff0c\\u53d8\\u6210\\uff1a\\n```\\nSDS_HDR_VAR(8,s)  ----> struct sdshdr8 *sh = (void*)((s)-(sizeof(struct sdshd8)))\\n\\nSDS_HDR_VAR(16,s)  ----> struct sdshdr16 *sh = (void*)((s)-(sizeof(struct sdshd16)))\\n\\nSDS_HDR_VAR(32,s)  ----> struct sdshdr32 *sh = (void*)((s)-(sizeof(struct sdshd32)))\\n\\nSDS_HDR_VAR(64,s)  ----> struct sdshdr64 *sh = (void*)((s)-(sizeof(struct sdshd64)))\\n```\\n\\u4ece\\u800c\\u5b9e\\u73b0\\u6839\\u636e\\u4e0d\\u540c\\u5b57\\u7b26\\u4e32\\u7c7b\\u578b\\u53d6\\u5230\\u6b63\\u786e\\u5730\\u5740\\uff0c\\u7136\\u540e\\u8d4b\\u503c\\u3002\\u4e3a\\u4ec0\\u4e48\\u662f\\u8fd9\\u6837\\u5462\\uff0c\\u56e0\\u4e3a\\u5728\\u5b8f\\u5b9a\\u4e49\\u4e2d\\uff0c[`##` \\u8868\\u793a\\u8fde\\u63a5](https:\\/\\/blog.csdn.net\\/wsclinux\\/article\\/details\\/50013973)\\u3002","html":"<p>sdsnew \\u65b9\\u6cd5\\u53ef\\u4ee5\\u521b\\u5efa\\u4e00\\u4e2a sds\\uff0c\\u5728 sds.c \\u6587\\u4ef6\\u4e2d\\uff0c\\u6211\\u4eec\\u770b\\u5230\\u7684\\u6e90\\u7801\\u662f\\uff1a<\\/p>\\n<pre><code>\\/* Create a new sds string starting from a null terminated C string. *\\/\\nsds sdsnew(const char *init) {\\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\\n    return sdsnewlen(init, initlen);\\n}<\\/code><\\/pre>\\n<p>sdsnew \\u5176\\u5b9e\\u8c03\\u7528\\u7684\\u662f\\u65b9\\u6cd5 sdsnewlen \\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u53bb\\u67e5\\u770b sdsnewlen \\u4ee3\\u7801\\u5b9e\\u73b0\\u3002<\\/p>\\n<pre><code>\\/* Create a new sds string with the content specified by the \'init\' pointer\\n * and \'initlen\'.\\n * If NULL is used for \'init\' the string is initialized with zero bytes.\\n * If SDS_NOINIT is used, the buffer is left uninitialized;\\n *\\n * The string is always null-termined (all the sds strings are, always) so\\n * even if you create an sds string with:\\n *\\n * mystring = sdsnewlen(\\"abc\\",3);\\n *\\n * You can print the string with printf() as there is an implicit \\\\0 at the\\n * end of the string. However the string is binary safe and can contain\\n * \\\\0 characters in the middle, as the length is stored in the sds header. *\\/\\nsds sdsnewlen(const void *init, size_t initlen) {\\n    void *sh;\\n    sds s;\\n    char type = sdsReqType(initlen);\\n    \\/* Empty strings are usually created in order to append. Use type 8\\n     * since type 5 is not good at this. *\\/\\n    if (type == SDS_TYPE_5 &amp;&amp; initlen == 0) type = SDS_TYPE_8;\\n    int hdrlen = sdsHdrSize(type);\\n    unsigned char *fp; \\/* flags pointer. *\\/\\n    size_t usable;\\n\\n    sh = s_malloc_usable(hdrlen+initlen+1, &amp;usable); \\/\\/ \\u771f\\u6b63\\u5b58\\u50a8\\u5b57\\u7b26\\u4e32\\u7684\\u5730\\u5740\\n    if (sh == NULL) return NULL;\\n    if (init==SDS_NOINIT)\\n        init = NULL;\\n    else if (!init)\\n        memset(sh, 0, hdrlen+initlen+1);\\n    s = (char*)sh+hdrlen;\\n    fp = ((unsigned char*)s)-1;\\n    usable = usable-hdrlen-1;\\n    if (usable &gt; sdsTypeMaxSize(type))\\n        usable = sdsTypeMaxSize(type);\\n    switch(type) {\\n        case SDS_TYPE_5: {\\n            *fp = type | (initlen &lt;&lt; SDS_TYPE_BITS);\\n            break;\\n        }\\n        case SDS_TYPE_8: {\\n            SDS_HDR_VAR(8,s);  \\/\\/ \\u5173\\u952e\\u4ee3\\u7801\\n            sh-&gt;len = initlen;\\n            sh-&gt;alloc = usable;\\n            *fp = type;\\n            break;\\n        }\\n        case SDS_TYPE_16: {\\n            SDS_HDR_VAR(16,s); \\/\\/ \\u5173\\u952e\\u4ee3\\u7801\\n            sh-&gt;len = initlen;\\n            sh-&gt;alloc = usable;\\n            *fp = type;\\n            break;\\n        }\\n        case SDS_TYPE_32: {\\n            SDS_HDR_VAR(32,s); \\/\\/ \\u5173\\u952e\\u4ee3\\u7801\\n            sh-&gt;len = initlen;\\n            sh-&gt;alloc = usable;\\n            *fp = type;\\n            break;\\n        }\\n        case SDS_TYPE_64: {\\n            SDS_HDR_VAR(64,s); \\/\\/ \\u5173\\u952e\\u4ee3\\u7801\\n            sh-&gt;len = initlen;\\n            sh-&gt;alloc = usable;\\n            *fp = type;\\n            break;\\n        }\\n    }\\n    if (initlen &amp;&amp; init)\\n        memcpy(s, init, initlen);\\n    s[initlen] = \'\\\\0\';\\n    return s;\\n}<\\/code><\\/pre>\\n<p>\\u5728 sds.h \\u67e5\\u770b\\u5b8f\\u5b9a\\u4e49 SDS_HDR_VAR \\u51fd\\u6570<\\/p>\\n<pre><code>#define SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));<\\/code><\\/pre>\\n<p>SDS_HDR_VAR \\u4ee3\\u7801\\u66ff\\u6362\\u540e\\uff0c\\u53d8\\u6210\\uff1a<\\/p>\\n<pre><code>SDS_HDR_VAR(8,s)  ----&gt; struct sdshdr8 *sh = (void*)((s)-(sizeof(struct sdshd8)))\\n\\nSDS_HDR_VAR(16,s)  ----&gt; struct sdshdr16 *sh = (void*)((s)-(sizeof(struct sdshd16)))\\n\\nSDS_HDR_VAR(32,s)  ----&gt; struct sdshdr32 *sh = (void*)((s)-(sizeof(struct sdshd32)))\\n\\nSDS_HDR_VAR(64,s)  ----&gt; struct sdshdr64 *sh = (void*)((s)-(sizeof(struct sdshd64)))<\\/code><\\/pre>\\n<p>\\u4ece\\u800c\\u5b9e\\u73b0\\u6839\\u636e\\u4e0d\\u540c\\u5b57\\u7b26\\u4e32\\u7c7b\\u578b\\u53d6\\u5230\\u6b63\\u786e\\u5730\\u5740\\uff0c\\u7136\\u540e\\u8d4b\\u503c\\u3002\\u4e3a\\u4ec0\\u4e48\\u662f\\u8fd9\\u6837\\u5462\\uff0c\\u56e0\\u4e3a\\u5728\\u5b8f\\u5b9a\\u4e49\\u4e2d\\uff0c<a href=\\"https:\\/\\/blog.csdn.net\\/wsclinux\\/article\\/details\\/50013973\\"><code>##<\\/code> \\u8868\\u793a\\u8fde\\u63a5<\\/a>\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '如果你基本掌握了C语言，但如果没有接触什么Linux C的开发，很有可能是看不懂 SDS 源码的，下面来扫除阅读 SDS 源码几大障碍',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 144,
                'published_at' => '2021-01-17 20:00:00',
                'created_at' => '2021-01-17 20:18:02',
                'updated_at' => '2022-01-09 08:34:59',
                'deleted_at' => NULL,
            ),
            18 => 
            array (
                'id' => 19,
                'category_id' => 13,
                'collection_id' => 0,
                'user_id' => 2,
                'last_user_id' => 1,
                'slug' => 'spring-3lghh',
                'title' => '创建Spring容器方式',
                'subtitle' => '创建Spring容器方式',
                'content' => '{"raw":"* **AnnotationConfigApplicationContext**: \\u4ece\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u57fa\\u4e8eJava\\u7684\\u914d\\u7f6e\\u7c7b\\u4e2d\\u52a0\\u8f7dSpring\\u5e94\\u7528\\u4e0a\\u4e0b\\u6587\\n* **AnnotationConfigWebApplicationContext**: \\u4ece\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u57fa\\u4e8eJava\\u7684\\u914d\\u7f6e\\u7c7b\\u4e2d\\u52a0\\u8f7dSpring Web\\u5e94\\u7528\\u4e0a\\u4e0b\\u6587\\n* **ClassPathXmlApplicationContext**: \\u4ece\\u7c7b\\u8def\\u5f84\\u4e0b\\u7684\\u4e00\\u4e2a\\u6216\\u591a\\u4e2aXML\\u914d\\u7f6e\\u6587\\u4ef6\\u4e2d\\u52a0\\u8f7d \\u4e0a\\u4e0b\\u6587\\u5b9a\\u4e49\\uff0c\\u628a\\u5e94\\u7528\\u4e0a\\u4e0b\\u6587\\u7684\\u5b9a\\u4e49\\u6587\\u4ef6\\u4f5c\\u4e3a\\u7c7b\\u8d44\\u6e90\\n* ** FileSystemXmlApplicationContext:** \\u4ece\\u6587\\u4ef6\\u7cfb\\u7edf\\u4e0b\\u7684\\u4e00\\u4e2a\\u6216\\u591a\\u4e2aXML \\u914d\\u7f6e\\u6587\\u4ef6\\u4e2d\\u52a0\\u8f7d\\u4e0a\\u4e0b\\u6587\\u5b9a\\u4e49\\n* ** XmlWebApplicationContext**: \\u4eceWeb\\u5e94\\u7528\\u4e0b\\u7684\\u4e00\\u4e2a\\u6216\\u591a\\u4e2aXML\\u914d\\u7f6e\\u6587\\u4ef6\\u4e2d\\u52a0\\u8f7d\\u4e0a\\u4e0b\\u6587\\u5b9a\\u4e49","html":"<ul>\\n<li><strong>AnnotationConfigApplicationContext<\\/strong>: \\u4ece\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u57fa\\u4e8eJava\\u7684\\u914d\\u7f6e\\u7c7b\\u4e2d\\u52a0\\u8f7dSpring\\u5e94\\u7528\\u4e0a\\u4e0b\\u6587<\\/li>\\n<li><strong>AnnotationConfigWebApplicationContext<\\/strong>: \\u4ece\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u57fa\\u4e8eJava\\u7684\\u914d\\u7f6e\\u7c7b\\u4e2d\\u52a0\\u8f7dSpring Web\\u5e94\\u7528\\u4e0a\\u4e0b\\u6587<\\/li>\\n<li><strong>ClassPathXmlApplicationContext<\\/strong>: \\u4ece\\u7c7b\\u8def\\u5f84\\u4e0b\\u7684\\u4e00\\u4e2a\\u6216\\u591a\\u4e2aXML\\u914d\\u7f6e\\u6587\\u4ef6\\u4e2d\\u52a0\\u8f7d \\u4e0a\\u4e0b\\u6587\\u5b9a\\u4e49\\uff0c\\u628a\\u5e94\\u7528\\u4e0a\\u4e0b\\u6587\\u7684\\u5b9a\\u4e49\\u6587\\u4ef6\\u4f5c\\u4e3a\\u7c7b\\u8d44\\u6e90<\\/li>\\n<li><strong> FileSystemXmlApplicationContext:<\\/strong> \\u4ece\\u6587\\u4ef6\\u7cfb\\u7edf\\u4e0b\\u7684\\u4e00\\u4e2a\\u6216\\u591a\\u4e2aXML \\u914d\\u7f6e\\u6587\\u4ef6\\u4e2d\\u52a0\\u8f7d\\u4e0a\\u4e0b\\u6587\\u5b9a\\u4e49<\\/li>\\n<li><strong> XmlWebApplicationContext<\\/strong>: \\u4eceWeb\\u5e94\\u7528\\u4e0b\\u7684\\u4e00\\u4e2a\\u6216\\u591a\\u4e2aXML\\u914d\\u7f6e\\u6587\\u4ef6\\u4e2d\\u52a0\\u8f7d\\u4e0a\\u4e0b\\u6587\\u5b9a\\u4e49<\\/li>\\n<\\/ul>"}',
                'page_image' => NULL,
                'meta_description' => '知道Spring自带的多种类型的应用上下文',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 65,
                'published_at' => '2021-01-24 15:00:00',
                'created_at' => '2021-01-24 15:59:52',
                'updated_at' => '2022-01-08 10:27:46',
                'deleted_at' => NULL,
            ),
            19 => 
            array (
                'id' => 20,
                'category_id' => 4,
                'collection_id' => 1,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'c-vs-go7-xmr8h',
                'title' => '【C vs Go】7：指针',
                'subtitle' => '指针对比',
            'content' => '{"raw":"### \\u6307\\u9488\\u7684\\u6982\\u5ff5\\u53ca\\u4f5c\\u7528\\n\\u6307\\u9488\\u672c\\u8d28\\u4e5f\\u662f\\u53d8\\u91cf\\uff0c\\u8fd9\\u79cd\\u53d8\\u91cf\\u7684\\u503c\\u4fdd\\u5b58\\u7684\\u662f\\u53e6\\u4e00\\u4e2a\\u53d8\\u91cf\\u7684\\u5185\\u5b58\\u5730\\u5740\\uff1b\\u53e6\\u5916\\uff0c\\u6307\\u9488\\u7684\\u5360\\u7528\\u5185\\u5b58\\u5927\\u5c0f\\u662f\\u56fa\\u5b9a\\u7684\\uff0864\\u4f4d\\u7684\\u673a\\u5668\\u4e0a\\u53608\\u5b57\\u8282\\uff0c32\\u4f4d\\u7684\\u673a\\u5668\\u4e0a\\u53604\\u5b57\\u8282\\uff09\\n\\n\\u6307\\u9488\\u6709\\u4ec0\\u4e48\\u4f5c\\u7528\\uff0c\\u76f8\\u4fe1\\u6709\\u63a5\\u89e6\\u8fc7\\u6307\\u9488\\u7684\\u540c\\u5b66\\u90fd\\u77e5\\u9053\\u5982\\u4e0b\\u4e24\\u70b9\\uff1a\\n1. **\\u8ba9\\u51fd\\u6570\\u80fd\\u4fee\\u6539\\u6211\\u4eec\\u4f20\\u5165\\u53d8\\u91cf\\u7684\\u503c**  \\n    \\u6709\\u65f6\\u6211\\u4eec\\u628a\\u53c2\\u6570\\u4f20\\u5165\\u51fd\\u6570\\u662f\\u5e0c\\u671b\\u51fd\\u6570\\u80fd\\u6539\\u53d8\\u5b83\\u7684\\u503c\\uff0c\\u4f46\\u5982\\u679c\\u4f20\\u5165\\u53c2\\u6570\\u7684\\u53d8\\u91cf\\u4e0d\\u662f\\u6307\\u9488\\uff0c\\u90a3\\u4e48\\u8be5\\u53c2\\u6570\\u4f1a\\u503c\\u590d\\u5236\\uff0c\\u56e0\\u6b64\\u4efb\\u4f55\\u4fee\\u6539\\u53ea\\u4f5c\\u7528\\u4e8e\\u5176\\u526f\\u672c\\uff0c\\u800c\\u5176\\u539f\\u59cb\\u503c\\u5c06\\u4fdd\\u6301\\u4e0d\\u53d8\\u3002\\n\\n2. ** \\u63d0\\u9ad8\\u7a0b\\u5e8f\\u6267\\u884c\\u6548\\u7387**  \\n    \\u5f53\\u4f20\\u5165\\u51fd\\u6570\\u7684\\u53c2\\u6570\\u662f\\u4e2a\\u6709\\u7740\\u5f88\\u5927\\u5b57\\u8282\\u6570\\u65f6\\uff0c\\u4f20\\u503c\\u7684\\u6210\\u672c\\u4f1a\\u975e\\u5e38\\u9ad8\\u3002\\u8981\\u662f\\u4f20\\u9012\\u7684\\u662f\\u6307\\u9488\\uff0c\\u5c31\\u53ef\\u4ee5\\u8ba9\\u53c2\\u6570\\u7684\\u4f20\\u9012\\u6548\\u7387\\u63d0\\u9ad8\\u5e76\\u4e14\\u53ef\\u4ee5\\u628a\\u5185\\u5bb9\\u4fee\\u6539\\uff0c\\u800c\\u4e14\\u8fd8\\u53ef\\u4ee5\\u8ba9\\u53d8\\u91cf\\u7684\\u751f\\u547d\\u5468\\u671f\\u72ec\\u7acb\\u4e8e\\u4f5c\\u7528\\u57df\\u3002\\n\\t\\t\\n### C\\u6307\\u9488\\u4e0eGo\\u6307\\u9488\\u7684\\u533a\\u522b\\n\\u4e00\\u53e5\\u8bdd\\u6765\\u6307\\u51fa\\u4e24\\u8005\\u4e4b\\u95f4\\u533a\\u522b\\uff1aC\\u6307\\u9488\\u66f4\\u5f3a\\u5927\\uff0cGo\\u6307\\u9488\\u66f4\\u7b80\\u5355\\u7075\\u6d3b\\u3002\\u80fd\\u529b\\u8d8a\\u5927\\uff0c\\u8d23\\u4efb\\u8d8a\\u5927\\uff0cC\\u6307\\u9488\\u66f4\\u5f3a\\u5927\\u7684\\u540c\\u65f6\\uff0c\\u5b83\\u66f4\\u96be\\u4ee5\\u9a7e\\u9a6d\\u3002\\n\\n* C\\u6307\\u9488\\u53ef\\u4ee5\\u8fdb\\u884c\\u8fd0\\u7b97\\uff0c\\u5373\\u628a\\u5730\\u5740\\u503c\\u8fdb\\u884c\\u6539\\u53d8\\uff0c\\u4ece\\u800c\\u8bbf\\u95ee\\u4e0d\\u540c\\u6570\\u636e\\u7684\\u5730\\u5740\\u3002  \\n   \\u7b80\\u5355\\u5b9e\\u4f8b  \\n```c\\n\\t#include <stdio.h>\\n\\t#include <stdlib.h>\\n\\t#include <string.h>\\n\\n\\tint main() {\\n    char *string;\\n    int n = 0;\\n\\n    string = malloc(20);\\n\\n    string[n++] = \'a\';\\n    string[n++] = \'b\';\\n    string[n++] = \'c\';\\n    string[n++] = \'\\\\0\';\\n\\n    printf(\\"string = %s\\\\n\\", string);\\n\\n    string++; \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\n    printf(\\"string++ = %s\\\\n\\", string);\\n }\\n```  \\n\\u8fd0\\u884c\\u7ed3\\u679c\\uff1a  \\n![image.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/17\\/YWTXzpPCe0WeP8bIdxoJEac98Qi9AIz0nhpZXUv9.png)\\n\\n\\n\\n \\u5b9e\\u6218\\u610f\\u4e49\\u7684\\u5b9e\\u4f8b\\uff1a   \\n \\u4ee5\\u4e0b\\u4ee3\\u7801\\u662f\\u4e00\\u4e2a\\u4e8c\\u53c9\\u6811\\u7684\\u5b9e\\u73b0\\uff0c\\u6811\\u7684\\u8282\\u70b9\\u5b58\\u50a8\\u7684\\u6570\\u636e\\u662f\\u652f\\u6301\\u591a\\u6001\\u7684\\uff0c\\u6211\\u53ea\\u4ee5 int \\u7c7b\\u578b\\u4e3a\\u4f8b\\u5b50\\uff0c\\u4f60\\u53ef\\u4ee5\\u628a\\u5b83\\u6539\\u6210 long \\u6216 float \\u6216\\u662f struct\\u3002\\u53e6\\u5916\\uff0c\\u5b9e\\u73b0\\u4e0a\\u4e5f\\u53ea\\u662f\\u521b\\u5efa\\u6839\\u8282\\u70b9\\u4e0e\\u4e24\\u4e2a\\u5de6\\u53f3\\u5b50\\u8282\\u70b9\\uff0c\\u6700\\u540e\\u7528\\u4e2d\\u5e8f\\u904d\\u5386\\n    \\n\\t\\t#include <stdio.h>\\n\\t\\t#include <stdlib.h>\\n\\t\\t#include <string.h>\\n\\n\\t\\ttypedef struct bt {\\n\\t\\t\\t\\tvoid *node;\\n\\t\\t\\t\\tint userSize, totalSize;\\n\\t\\t}btType;\\n\\n\\t\\ttypedef struct childNode {\\n\\t\\t\\t\\tvoid * left, * right;\\n\\t\\t}childNodeT;\\n\\n\\t\\tvoid MapBST(btType *bst)\\n\\t\\t{\\n\\t\\t\\t\\tRecMapBST(bst, bst->node);\\n\\t\\t}\\n    \\/\\/ \\u4e2d\\u5e8f\\u904d\\u5386\\n\\t\\tvoid RecMapBST(btType *top, void *t) {\\n\\t\\t\\tint value;\\n\\t\\t\\tchildNodeT *cn;\\n\\n\\t\\t\\tif (t != NULL) {\\n\\t\\t\\t\\tcn = (childNodeT *) ((char *)t + top->userSize); \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\n\\n\\t\\t\\t\\tvalue = *(int *)t;\\n\\t\\t\\t\\tprintf(\\"%d\\\\n\\", value);\\n\\t\\t\\t\\tRecMapBST(top, cn->left);\\n\\t\\t\\t\\tRecMapBST(top, cn->right);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\tint main() {\\n\\t\\t\\tbtType *bt;\\n\\t\\t\\tchildNodeT *childData;\\n\\n\\t\\t\\tbt = (btType*)malloc(sizeof(btType));\\n\\t\\t\\tbt->node = NULL;\\n\\t\\t\\tbt->userSize = sizeof(int);\\n\\t\\t\\tbt->totalSize = bt->userSize + sizeof(btType);\\n\\n\\t\\t\\tbt->node = malloc(bt->totalSize);\\n\\t\\t\\t*((int*)bt->node) = 2;\\n\\t\\t\\tchildData = (childNodeT *) ((char *)bt->node + bt->userSize); \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\n\\t\\t\\tchildData->left = NULL;\\n\\t\\t\\tchildData->right = NULL;\\n\\n\\t\\t\\tchildNodeT *tmp;\\n\\t\\t\\tchildNodeT *childData2;\\n\\t\\t\\tchildData2 = malloc(bt->totalSize);\\n\\t\\t\\t*((int*)childData2) = 5;\\n\\t\\t\\ttmp = (childNodeT *) ((char *)childData2 + bt->userSize); \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\n\\t\\t\\ttmp->left = NULL;\\n\\t\\t\\ttmp->right = NULL;\\n\\t\\t\\tchildData->left = childData2;\\n\\n\\t\\t\\tchildNodeT *childData3;\\n\\t\\t\\tchildData3 = malloc(bt->totalSize);\\n\\t\\t\\t*((int*)childData3) = 9;\\n\\t\\t\\ttmp = (childNodeT *) ((char *)childData3 + bt->userSize); \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\n\\t\\t\\ttmp->left = NULL;\\n\\t\\t\\ttmp->right = NULL;\\n\\t\\t\\tchildData->right = childData3;\\n\\n\\t\\t\\tMapBST(bt);\\n\\t\\t }\\n\\n\\u4ee5\\u4e0a\\u4ee3\\u7801\\u53d6\\u540d\\u4e3a c_pointer_2.c \\uff0c\\u7f16\\u8bd1\\u6267\\u884c\\u5982\\u56fe\\uff1a  \\n![image.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/17\\/2Bt0JKbafULbPuia4o4oqWHIOZQMznNzoehUcWR6.png)\\n\\n \\n\\n* Go\\u6307\\u9488\\u7684\\u7075\\u6d3b\\u4f53\\u73b0\\u5728\\u7ed3\\u6784\\u4f53\\u4e0a\\uff0cGo\\u57fa\\u672c\\u6570\\u636e\\u7c7b\\u578b\\u7684\\u6307\\u9488\\u662f\\u4e0eC\\u8bed\\u8a00\\u6307\\u9488\\u4e00\\u6837\\u7684  \\n  \\u9996\\u5148\\uff0cGo\\u7ed3\\u6784\\u4f53\\u6307\\u9488\\u4e0d\\u518d\\u9700\\u8981\\u50cfC\\u4e2d\\u9700\\u8981\\u81ea\\u5df1\\u5206\\u914d\\u5185\\u5b58\\uff0c\\u7f16\\u8bd1\\u5668\\u90fd\\u5e2e\\u6211\\u4eec\\u505a\\u597d\\u4e86  \\n\\t    \\n\\t\\tpackage main\\n\\n\\t\\timport \\"fmt\\"\\n\\n\\t\\ttype person struct {\\n\\t\\t\\tage int\\n\\t\\t\\tphone string\\n\\t\\t\\tname string\\n\\t\\t}\\n\\n\\t\\tfunc main() {\\n\\t\\t\\tp := &person{30, \\"13575189555\\", \\"shishao\\"}\\n\\t\\t\\tfmt.Println(\\"person struct - p: \\",  p)\\n\\t\\t\\tfmt.Println(\\"person struct - p->name: \\", p.name)\\n\\n\\t\\t\\tp2 := new(person)\\n\\t\\t\\tfmt.Println(\\"person struct - p2: \\", p2)\\n\\t\\t\\tfmt.Println(\\"person struct - p2->name: \\", p2.name)\\n\\t\\t}\\n\\t\\t\\n \\u4ee5\\u4e0a\\u4ee3\\u7801\\u53d6\\u540d go_pointer.go\\uff0cgo run go_pointer.go\\uff0c\\u8f93\\u51fa\\u5982\\u56fe\\uff1a   \\n ![image.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/15\\/tCuwbjobXWL0XLA7zEFMQOX1k2AoLMi3tPUJUjr4.png)","html":"<h3>\\u6307\\u9488\\u7684\\u6982\\u5ff5\\u53ca\\u4f5c\\u7528<\\/h3>\\n<p>\\u6307\\u9488\\u672c\\u8d28\\u4e5f\\u662f\\u53d8\\u91cf\\uff0c\\u8fd9\\u79cd\\u53d8\\u91cf\\u7684\\u503c\\u4fdd\\u5b58\\u7684\\u662f\\u53e6\\u4e00\\u4e2a\\u53d8\\u91cf\\u7684\\u5185\\u5b58\\u5730\\u5740\\uff1b\\u53e6\\u5916\\uff0c\\u6307\\u9488\\u7684\\u5360\\u7528\\u5185\\u5b58\\u5927\\u5c0f\\u662f\\u56fa\\u5b9a\\u7684\\uff0864\\u4f4d\\u7684\\u673a\\u5668\\u4e0a\\u53608\\u5b57\\u8282\\uff0c32\\u4f4d\\u7684\\u673a\\u5668\\u4e0a\\u53604\\u5b57\\u8282\\uff09<\\/p>\\n<p>\\u6307\\u9488\\u6709\\u4ec0\\u4e48\\u4f5c\\u7528\\uff0c\\u76f8\\u4fe1\\u6709\\u63a5\\u89e6\\u8fc7\\u6307\\u9488\\u7684\\u540c\\u5b66\\u90fd\\u77e5\\u9053\\u5982\\u4e0b\\u4e24\\u70b9\\uff1a<\\/p>\\n<ol>\\n<li>\\n<p><strong>\\u8ba9\\u51fd\\u6570\\u80fd\\u4fee\\u6539\\u6211\\u4eec\\u4f20\\u5165\\u53d8\\u91cf\\u7684\\u503c<\\/strong><br \\/>\\n\\u6709\\u65f6\\u6211\\u4eec\\u628a\\u53c2\\u6570\\u4f20\\u5165\\u51fd\\u6570\\u662f\\u5e0c\\u671b\\u51fd\\u6570\\u80fd\\u6539\\u53d8\\u5b83\\u7684\\u503c\\uff0c\\u4f46\\u5982\\u679c\\u4f20\\u5165\\u53c2\\u6570\\u7684\\u53d8\\u91cf\\u4e0d\\u662f\\u6307\\u9488\\uff0c\\u90a3\\u4e48\\u8be5\\u53c2\\u6570\\u4f1a\\u503c\\u590d\\u5236\\uff0c\\u56e0\\u6b64\\u4efb\\u4f55\\u4fee\\u6539\\u53ea\\u4f5c\\u7528\\u4e8e\\u5176\\u526f\\u672c\\uff0c\\u800c\\u5176\\u539f\\u59cb\\u503c\\u5c06\\u4fdd\\u6301\\u4e0d\\u53d8\\u3002<\\/p>\\n<\\/li>\\n<li>\\n<p><strong> \\u63d0\\u9ad8\\u7a0b\\u5e8f\\u6267\\u884c\\u6548\\u7387<\\/strong><br \\/>\\n\\u5f53\\u4f20\\u5165\\u51fd\\u6570\\u7684\\u53c2\\u6570\\u662f\\u4e2a\\u6709\\u7740\\u5f88\\u5927\\u5b57\\u8282\\u6570\\u65f6\\uff0c\\u4f20\\u503c\\u7684\\u6210\\u672c\\u4f1a\\u975e\\u5e38\\u9ad8\\u3002\\u8981\\u662f\\u4f20\\u9012\\u7684\\u662f\\u6307\\u9488\\uff0c\\u5c31\\u53ef\\u4ee5\\u8ba9\\u53c2\\u6570\\u7684\\u4f20\\u9012\\u6548\\u7387\\u63d0\\u9ad8\\u5e76\\u4e14\\u53ef\\u4ee5\\u628a\\u5185\\u5bb9\\u4fee\\u6539\\uff0c\\u800c\\u4e14\\u8fd8\\u53ef\\u4ee5\\u8ba9\\u53d8\\u91cf\\u7684\\u751f\\u547d\\u5468\\u671f\\u72ec\\u7acb\\u4e8e\\u4f5c\\u7528\\u57df\\u3002<\\/p>\\n<\\/li>\\n<\\/ol>\\n<h3>C\\u6307\\u9488\\u4e0eGo\\u6307\\u9488\\u7684\\u533a\\u522b<\\/h3>\\n<p>\\u4e00\\u53e5\\u8bdd\\u6765\\u6307\\u51fa\\u4e24\\u8005\\u4e4b\\u95f4\\u533a\\u522b\\uff1aC\\u6307\\u9488\\u66f4\\u5f3a\\u5927\\uff0cGo\\u6307\\u9488\\u66f4\\u7b80\\u5355\\u7075\\u6d3b\\u3002\\u80fd\\u529b\\u8d8a\\u5927\\uff0c\\u8d23\\u4efb\\u8d8a\\u5927\\uff0cC\\u6307\\u9488\\u66f4\\u5f3a\\u5927\\u7684\\u540c\\u65f6\\uff0c\\u5b83\\u66f4\\u96be\\u4ee5\\u9a7e\\u9a6d\\u3002<\\/p>\\n<ul>\\n<li>\\n<p>C\\u6307\\u9488\\u53ef\\u4ee5\\u8fdb\\u884c\\u8fd0\\u7b97\\uff0c\\u5373\\u628a\\u5730\\u5740\\u503c\\u8fdb\\u884c\\u6539\\u53d8\\uff0c\\u4ece\\u800c\\u8bbf\\u95ee\\u4e0d\\u540c\\u6570\\u636e\\u7684\\u5730\\u5740\\u3002<br \\/>\\n\\u7b80\\u5355\\u5b9e\\u4f8b  <\\/p>\\n<pre><code class=\\"language-c\\">#include &lt;stdio.h&gt;\\n#include &lt;stdlib.h&gt;\\n#include &lt;string.h&gt;\\n\\nint main() {\\nchar *string;\\nint n = 0;\\n\\nstring = malloc(20);\\n\\nstring[n++] = \'a\';\\nstring[n++] = \'b\';\\nstring[n++] = \'c\';\\nstring[n++] = \'\\\\0\';\\n\\nprintf(\\"string = %s\\\\n\\", string);\\n\\nstring++; \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\nprintf(\\"string++ = %s\\\\n\\", string);\\n}<\\/code><\\/pre>\\n<p>\\u8fd0\\u884c\\u7ed3\\u679c\\uff1a<br \\/>\\n<img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/17\\/YWTXzpPCe0WeP8bIdxoJEac98Qi9AIz0nhpZXUv9.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<p>\\u5b9e\\u6218\\u610f\\u4e49\\u7684\\u5b9e\\u4f8b\\uff1a<br \\/>\\n\\u4ee5\\u4e0b\\u4ee3\\u7801\\u662f\\u4e00\\u4e2a\\u4e8c\\u53c9\\u6811\\u7684\\u5b9e\\u73b0\\uff0c\\u6811\\u7684\\u8282\\u70b9\\u5b58\\u50a8\\u7684\\u6570\\u636e\\u662f\\u652f\\u6301\\u591a\\u6001\\u7684\\uff0c\\u6211\\u53ea\\u4ee5 int \\u7c7b\\u578b\\u4e3a\\u4f8b\\u5b50\\uff0c\\u4f60\\u53ef\\u4ee5\\u628a\\u5b83\\u6539\\u6210 long \\u6216 float \\u6216\\u662f struct\\u3002\\u53e6\\u5916\\uff0c\\u5b9e\\u73b0\\u4e0a\\u4e5f\\u53ea\\u662f\\u521b\\u5efa\\u6839\\u8282\\u70b9\\u4e0e\\u4e24\\u4e2a\\u5de6\\u53f3\\u5b50\\u8282\\u70b9\\uff0c\\u6700\\u540e\\u7528\\u4e2d\\u5e8f\\u904d\\u5386<\\/p>\\n<pre><code>#include &lt;stdio.h&gt;\\n#include &lt;stdlib.h&gt;\\n#include &lt;string.h&gt;\\n\\ntypedef struct bt {\\n        void *node;\\n        int userSize, totalSize;\\n}btType;\\n\\ntypedef struct childNode {\\n        void * left, * right;\\n}childNodeT;\\n\\nvoid MapBST(btType *bst)\\n{\\n        RecMapBST(bst, bst-&gt;node);\\n}<\\/code><\\/pre>\\n<p>\\/\\/ \\u4e2d\\u5e8f\\u904d\\u5386<br \\/>\\nvoid RecMapBST(btType <em>top, void <\\/em>t) {<br \\/>\\nint value;<br \\/>\\nchildNodeT *cn;<\\/p>\\n<pre><code>    if (t != NULL) {\\n        cn = (childNodeT *) ((char *)t + top-&gt;userSize); \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\n\\n        value = *(int *)t;\\n        printf(\\"%d\\\\n\\", value);\\n        RecMapBST(top, cn-&gt;left);\\n        RecMapBST(top, cn-&gt;right);\\n    }\\n}\\n\\nint main() {\\n    btType *bt;\\n    childNodeT *childData;\\n\\n    bt = (btType*)malloc(sizeof(btType));\\n    bt-&gt;node = NULL;\\n    bt-&gt;userSize = sizeof(int);\\n    bt-&gt;totalSize = bt-&gt;userSize + sizeof(btType);\\n\\n    bt-&gt;node = malloc(bt-&gt;totalSize);\\n    *((int*)bt-&gt;node) = 2;\\n    childData = (childNodeT *) ((char *)bt-&gt;node + bt-&gt;userSize); \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\n    childData-&gt;left = NULL;\\n    childData-&gt;right = NULL;\\n\\n    childNodeT *tmp;\\n    childNodeT *childData2;\\n    childData2 = malloc(bt-&gt;totalSize);\\n    *((int*)childData2) = 5;\\n    tmp = (childNodeT *) ((char *)childData2 + bt-&gt;userSize); \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\n    tmp-&gt;left = NULL;\\n    tmp-&gt;right = NULL;\\n    childData-&gt;left = childData2;\\n\\n    childNodeT *childData3;\\n    childData3 = malloc(bt-&gt;totalSize);\\n    *((int*)childData3) = 9;\\n    tmp = (childNodeT *) ((char *)childData3 + bt-&gt;userSize); \\/\\/ \\u6307\\u9488\\u8fd0\\u7b97\\n    tmp-&gt;left = NULL;\\n    tmp-&gt;right = NULL;\\n    childData-&gt;right = childData3;\\n\\n    MapBST(bt);\\n }<\\/code><\\/pre>\\n<\\/li>\\n<\\/ul>\\n<p>\\u4ee5\\u4e0a\\u4ee3\\u7801\\u53d6\\u540d\\u4e3a c_pointer_2.c \\uff0c\\u7f16\\u8bd1\\u6267\\u884c\\u5982\\u56fe\\uff1a<br \\/>\\n<img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/17\\/2Bt0JKbafULbPuia4o4oqWHIOZQMznNzoehUcWR6.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<ul>\\n<li>\\n<p>Go\\u6307\\u9488\\u7684\\u7075\\u6d3b\\u4f53\\u73b0\\u5728\\u7ed3\\u6784\\u4f53\\u4e0a\\uff0cGo\\u57fa\\u672c\\u6570\\u636e\\u7c7b\\u578b\\u7684\\u6307\\u9488\\u662f\\u4e0eC\\u8bed\\u8a00\\u6307\\u9488\\u4e00\\u6837\\u7684<br \\/>\\n\\u9996\\u5148\\uff0cGo\\u7ed3\\u6784\\u4f53\\u6307\\u9488\\u4e0d\\u518d\\u9700\\u8981\\u50cfC\\u4e2d\\u9700\\u8981\\u81ea\\u5df1\\u5206\\u914d\\u5185\\u5b58\\uff0c\\u7f16\\u8bd1\\u5668\\u90fd\\u5e2e\\u6211\\u4eec\\u505a\\u597d\\u4e86  <\\/p>\\n<pre><code>package main\\n\\nimport \\"fmt\\"\\n\\ntype person struct {\\n    age int\\n    phone string\\n    name string\\n}\\n\\nfunc main() {\\n    p := &amp;person{30, \\"13575189555\\", \\"shishao\\"}\\n    fmt.Println(\\"person struct - p: \\",  p)\\n    fmt.Println(\\"person struct - p-&gt;name: \\", p.name)\\n\\n    p2 := new(person)\\n    fmt.Println(\\"person struct - p2: \\", p2)\\n    fmt.Println(\\"person struct - p2-&gt;name: \\", p2.name)\\n}<\\/code><\\/pre>\\n<p>\\u4ee5\\u4e0a\\u4ee3\\u7801\\u53d6\\u540d go_pointer.go\\uff0cgo run go_pointer.go\\uff0c\\u8f93\\u51fa\\u5982\\u56fe\\uff1a<br \\/>\\n<img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/15\\/tCuwbjobXWL0XLA7zEFMQOX1k2AoLMi3tPUJUjr4.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<\\/li>\\n<\\/ul>"}',
                'page_image' => NULL,
                'meta_description' => '指针本质也是变量，这种变量的值保存的是另一个变量的内存地址；另外，指针的占用内存大小是固定的（64位的机器上占8字节，32位的机器上占4字节）。那么，C 与 Go中的指针运用又有哪些区别呢？',
                'is_original' => 1,
                'is_draft' => 0,
                'view_count' => 329,
                'published_at' => '2021-07-10 18:10:00',
                'created_at' => '2021-07-10 11:20:32',
                'updated_at' => '2022-01-09 07:56:20',
                'deleted_at' => NULL,
            ),
            20 => 
            array (
                'id' => 21,
                'category_id' => 12,
                'collection_id' => 6,
                'user_id' => 1,
                'last_user_id' => 2,
                'slug' => 'l9p0w',
                'title' => '做一件有趣的事',
                'subtitle' => '整合《Programming Abstractions in C》、《C Interfaces and Implementations》与 Redis 源码，创造自己的 C lib库',
            'content' => '{"raw":"\\u5f88\\u591a\\u4eba\\u90fd\\u5b66\\u4e60\\u8fc7 C\\u8bed\\u8a00\\uff0c\\u4f46\\u5374\\u4e00\\u76f4\\u6ca1\\u6709\\u6bd4\\u8f83\\u6df1\\u7684\\u9020\\u8be3\\uff0c\\u6700\\u591a\\u4e5f\\u5c31\\u5199\\u5199\\u7b97\\u6cd5\\u3002\\u4e3a\\u4ec0\\u4e48\\u5462\\uff0c\\u539f\\u56e0\\u5927\\u90fd\\u56e0\\u4eba\\u800c\\u5f02\\uff0c\\u5176\\u4e2d\\u4e00\\u4e2a\\u539f\\u56e0\\u53ef\\u80fd\\u662f\\u4ec5\\u628a\\u5b83\\u628a\\u8fd0\\u7528\\u4e8e\\u8868\\u5c42\\uff0c\\u6ca1\\u6709\\u6df1\\u5165\\u4e0e\\u603b\\u7ed3\\uff0c\\u5468\\u800c\\u590d\\u59cb\\u5730\\u628a\\u66fe\\u4eca\\u5199\\u8fc7\\u4ee3\\u7801\\u8fdb\\u884c\\u91cd\\u6784\\uff0c\\u8fdb\\u800c\\u8fdb\\u884c\\u4e00\\u4e9b\\u5c01\\u88c5\\u3002\\n\\n\\u7531\\u4e8e\\u6ca1\\u6709\\u628a\\u8bb8\\u591a\\u91cd\\u590d\\u6027\\u7684\\u5de5\\u4f5c\\u6216\\u529f\\u80fd\\u62bd\\u8c61\\u51fa\\u6765\\uff0c\\u6240\\u4ee5\\u6bcf\\u6b21\\u5199\\u4e2a\\u5c0f\\u529f\\u80fd\\u90fd\\u8981\\u4ece0\\u5f00\\u59cb\\u5199\\uff0c\\u5f80\\u5f80\\u60c5\\u51b5\\u662f\\u5199\\u4e86\\u4e00\\u5927\\u5806\\u7684\\u4ee3\\u7801\\uff0c\\u5374\\u53ea\\u5b9e\\u73b0\\u4e86\\u4e00\\u534a\\u4e0d\\u5230\\u7684\\u529f\\u80fd\\u3002\\u53ef\\u80fd\\u4f60\\u662f\\u5bf9C\\u5145\\u6ee1\\u7740\\u70ed\\u60c5\\u4e0e\\u52a8\\u529b\\uff0c\\u4f46\\u968f\\u7740\\u65f6\\u95f4\\u5bf9\\u4f60\\u7684\\u8003\\u9a8c\\uff0c\\u6e10\\u6e10\\u90a3\\u9897\\u6f8e\\u6e43\\u7684\\u5fc3\\u5c31\\u6c89\\u5bc2\\u4e0b\\u6765\\uff0c\\u540e\\u6765\\u5c31\\u6ca1\\u6709\\u540e\\u6765\\u4e86... \\u6709\\u6ca1\\u6709\\u53ef\\u80fd\\u53bb\\u9003\\u8131\\u4e8e\\u8be5\\u5bbf\\u547d\\u7684\\u65b9\\u6cd5\\u5462\\uff0c\\u5982\\u679c\\u4f60\\u6b63\\u906d\\u9047\\u6b64\\u60c5\\u51b5\\uff1b\\u6216\\u4f60\\u5df2\\u662f\\u4ece0\\u5b66\\u4e60C\\u8bed\\u8a00\\u5230\\u653e\\u5f03\\uff1b\\u6216\\u4f60\\u60f3\\u6539\\u53d8\\u73b0\\u5b66\\u4e60C\\u8bed\\u8a00\\u7684\\u56f0\\u5883\\uff0c\\u63d0\\u9ad8\\u6548\\u7387\\u4e0e\\u4e50\\u8da3\\uff0c\\u90a3\\u4e48\\u5173\\u6ce8\\u6b64\\u7cfb\\u5217\\u5427\\n\\n\\u73b0\\u4ee3\\u5f00\\u53d1\\u7684\\u4e3b\\u6d41\\u662f OOP(Object-oriented programming)\\uff0c\\u5b83\\u63d0\\u9ad8\\u4e86\\u6211\\u4eec\\u5f00\\u53d1\\u7684\\u6548\\u7387\\uff0c\\u4ece\\u800c\\u4e5f\\u6df1\\u523b\\u7684\\u5f71\\u54cd\\u7740\\u4ee3\\u7801\\u7ec4\\u7ec7\\u7ed3\\u6784\\u3002\\u4f46\\u9762\\u5411\\u8fc7\\u7a0b\\u5f0f\\u5f00\\u53d1\\u5728\\u8fd9\\u4e2a\\u7f16\\u7a0b\\u4e16\\u754c\\u91cc\\u4e00\\u76f4\\u5b58\\u5728\\uff0c\\u800c\\u4e14\\u4e5f\\u4fdd\\u5b58\\u5b8c\\u987d\\u5f3a\\u7684\\u751f\\u547d\\u529b\\u3002\\u4f46\\u6709\\u4e00\\u79cd\\u73b0\\u8c61\\u5728\\u9762\\u5411\\u8fc7\\u7a0b\\u5f0f\\u8ba1\\u7b97\\u673a\\u8bed\\u8a00\\u51fa\\u73b0\\uff0c\\u5c31\\u662f\\u628a\\u4ee3\\u7801\\u7ec4\\u7ec7\\u6210\\u9762\\u5411\\u5bf9\\u8c61\\u5f62\\u5f0f\\u6765\\u5f00\\u53d1\\uff0c\\u4ece\\u800c\\u8ba9\\u4ee3\\u7801\\u53ef\\u8bfb\\u4e0e\\u53ef\\u7ef4\\u62a4\\u6027\\u63d0\\u9ad8\\u3002\\n\\n\\u4e5f\\u8bb8\\u5728\\u6b63\\u5f0f\\u7684\\u9762\\u5411\\u5bf9\\u8c61java\\u4e0d\\u65ad\\u98de\\u5feb\\u53d1\\u5c55\\u65f6\\uff0cC\\u7684\\u5f00\\u53d1\\u6a21\\u5f0f\\u4e5f\\u5728\\u6084\\u7136\\u53d1\\u751f\\u7740\\u5fae\\u5999\\u7684\\u53d8\\u5316\\uff0c\\u5f00\\u59cb\\u63a5\\u53e3\\u5316\\u4e0e\\u5bf9\\u8c61\\u5316\\u3002\\u867dC\\u662f\\u4e0d\\u652f\\u6301\\u9762\\u5411\\u5bf9\\u8c61\\u7684\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u5145\\u5206\\u6316\\u6398\\u73b0\\u6709\\u7684\\u8d44\\u6599\\uff0c\\u628aC\\u8bed\\u8a00\\u6309\\u9762\\u5411\\u5bf9\\u8c61\\u7684\\u4e00\\u4e9b\\u7279\\u6027\\u6253\\u9020\\u6210\\u51fa\\u4e00\\u4e2a\\u5177\\u6709\\u9ad8\\u53ef\\u590d\\u7528\\u6027\\u4e0e\\u53ef\\u9605\\u8bfb\\u6027\\u7684C lib\\u3002\\n\\n\\u4efb\\u4f55\\u4e00\\u4e2a\\u4f1f\\u5927\\u7684\\u4e1c\\u897f\\u90fd\\u8981\\u6709\\u7262\\u9760\\u7684\\u57fa\\u77f3\\uff0c\\u672c\\u4f5c\\u8005\\u5b9e\\u5728\\u662f\\u4e2a\\u65e0\\u540d\\u5c0f\\u83dc\\u9e21\\uff0c\\u6240\\u4ee5\\u627e\\u4e86\\u300aProgramming Abstractions in C\\u300b\\u4e66\\u4e2d\\u4ee3\\u7801\\u505a\\u4e3a\\u6b64 lib \\u5e93\\u7684\\u6838\\u5fc3\\u5b9e\\u73b0\\uff1b\\u53e6\\u5916\\uff0c\\u6838\\u5fc3\\u601d\\u60f3\\u4e5f\\u662f\\u4ee5\\u300aProgramming Abstractions in C\\u300b\\u4e3a\\u6307\\u5bfc\\u3002\\u4e3a\\u4ec0\\u4e48\\u9009\\u62e9\\u300aProgramming Abstractions in C\\u300b\\u505a\\u4e3alib\\u5730\\u5730\\u57fa\\u5462\\uff0c\\u5982\\u679c\\u53ef\\u4ee5\\uff0c\\u4f60\\u5e26\\u7740\\u8fd9\\u4e2a\\u95ee\\u9898\\u53bb\\u9605\\u8bfb\\u8be5\\u4e66\\uff0c\\u8bfb\\u540e\\u76f8\\u4fe1\\u4f60\\u4f1a\\u611f\\u53f9\\u8be5\\u6559\\u6388\\u771f\\u7684\\u662f\\u597d\\u6709\\u8ba1\\u7b97\\u673a\\u54f2\\u5b66\\uff0c\\u4ece\\u6b64\\u6df1\\u609f\\u63a5\\u53e3\\u5316\\u4e0e\\u62bd\\u8c61\\u5316\\u601d\\u60f3\\u3002\\u7531\\u4e8e\\u300aProgramming Abstractions in C\\u300b\\u662f\\u505a\\u4e3a\\u6559\\u6750\\u7528\\u7684\\u4e14\\u65f6\\u4ee3\\u4e5f\\u662f\\u6709\\u70b9\\u4e45\\u8fdc\\uff0c\\u56fa\\u52a0\\u4ee5\\u53c2\\u8003\\u300aC Interfaces and Implementations\\u300b\\u4e66\\u4e2d\\u7684\\u63a5\\u53e3\\u5b9e\\u73b0\\u3002\\u300aC Interfaces and Implementations\\u300b\\u6709\\u7740\\u5f88\\u591a\\u4e25\\u8c28\\u7684\\u601d\\u60f3\\uff0c\\u4e3a\\u4ee3\\u7801\\u5c42\\u6b21\\u7684\\u63d0\\u5347\\u6709\\u7740\\u5f88\\u591a\\u88e8\\u76ca\\u3002\\n\\n\\u4e00\\u5ea7\\u5728\\u5c06\\u6765\\u53ef\\u80fd\\u662f\\u5927\\u53a6\\u7684\\u9aa8\\u67b6\\u5750\\u843d\\u4e8e\\u4e00\\u4e2a\\u7262\\u9760\\u7684\\u57fa\\u77f3\\u4e0a\\u4e86\\uff0c\\u4f46\\u8981\\u6709\\u73b0\\u4ee3\\u5316\\u7684\\u5916\\u89c2\\uff0c\\u6211\\u4eec\\u5c31\\u53ea\\u5bf9\\u627e\\u73b0\\u5982\\u4eca\\u88c5\\u9970\\u7684\\u6700\\u597d\\uff08\\u6548\\u7387\\u4e0e\\u53ef\\u8bfb\\u6027\\uff09\\u7684 Redis \\u6765\\u5bf9\\u6211\\u4eec\\u7684\\u5b9e\\u73b0\\u505a\\u4e00\\u4e9b\\u6bd4\\u8f83\\uff0c\\u53d6\\u5176\\u7cbe\\u534e\\u4e3a\\u4e4b\\u6211\\u7528\\u3002\\n\\n\\u4e0b\\u9762\\u662f\\u6211\\u4eec\\u8981\\u521d\\u521b\\u7684\\u4e00\\u4e9b\\u63a5\\u53e3\\uff1a\\n\\n* \\u5185\\u5b58\\u5206\\u914d\\u7684\\u63a5\\u53e3\\n\\t* genlib.h + genlib.c\\n*  \\u7b80\\u5316\\u8bfb\\u5199\\u64cd\\u4f5c\\u7684\\u63a5\\u53e3\\n  *  simpio.h + simpio.c\\n* \\u7b80\\u5316\\u5b57\\u7b26\\u4e32\\u64cd\\u4f5c\\u7684\\u63a5\\u53e3\\n  *  strlib.h + strlib.c","html":"<p>\\u5f88\\u591a\\u4eba\\u90fd\\u5b66\\u4e60\\u8fc7 C\\u8bed\\u8a00\\uff0c\\u4f46\\u5374\\u4e00\\u76f4\\u6ca1\\u6709\\u6bd4\\u8f83\\u6df1\\u7684\\u9020\\u8be3\\uff0c\\u6700\\u591a\\u4e5f\\u5c31\\u5199\\u5199\\u7b97\\u6cd5\\u3002\\u4e3a\\u4ec0\\u4e48\\u5462\\uff0c\\u539f\\u56e0\\u5927\\u90fd\\u56e0\\u4eba\\u800c\\u5f02\\uff0c\\u5176\\u4e2d\\u4e00\\u4e2a\\u539f\\u56e0\\u53ef\\u80fd\\u662f\\u4ec5\\u628a\\u5b83\\u628a\\u8fd0\\u7528\\u4e8e\\u8868\\u5c42\\uff0c\\u6ca1\\u6709\\u6df1\\u5165\\u4e0e\\u603b\\u7ed3\\uff0c\\u5468\\u800c\\u590d\\u59cb\\u5730\\u628a\\u66fe\\u4eca\\u5199\\u8fc7\\u4ee3\\u7801\\u8fdb\\u884c\\u91cd\\u6784\\uff0c\\u8fdb\\u800c\\u8fdb\\u884c\\u4e00\\u4e9b\\u5c01\\u88c5\\u3002<\\/p>\\n<p>\\u7531\\u4e8e\\u6ca1\\u6709\\u628a\\u8bb8\\u591a\\u91cd\\u590d\\u6027\\u7684\\u5de5\\u4f5c\\u6216\\u529f\\u80fd\\u62bd\\u8c61\\u51fa\\u6765\\uff0c\\u6240\\u4ee5\\u6bcf\\u6b21\\u5199\\u4e2a\\u5c0f\\u529f\\u80fd\\u90fd\\u8981\\u4ece0\\u5f00\\u59cb\\u5199\\uff0c\\u5f80\\u5f80\\u60c5\\u51b5\\u662f\\u5199\\u4e86\\u4e00\\u5927\\u5806\\u7684\\u4ee3\\u7801\\uff0c\\u5374\\u53ea\\u5b9e\\u73b0\\u4e86\\u4e00\\u534a\\u4e0d\\u5230\\u7684\\u529f\\u80fd\\u3002\\u53ef\\u80fd\\u4f60\\u662f\\u5bf9C\\u5145\\u6ee1\\u7740\\u70ed\\u60c5\\u4e0e\\u52a8\\u529b\\uff0c\\u4f46\\u968f\\u7740\\u65f6\\u95f4\\u5bf9\\u4f60\\u7684\\u8003\\u9a8c\\uff0c\\u6e10\\u6e10\\u90a3\\u9897\\u6f8e\\u6e43\\u7684\\u5fc3\\u5c31\\u6c89\\u5bc2\\u4e0b\\u6765\\uff0c\\u540e\\u6765\\u5c31\\u6ca1\\u6709\\u540e\\u6765\\u4e86... \\u6709\\u6ca1\\u6709\\u53ef\\u80fd\\u53bb\\u9003\\u8131\\u4e8e\\u8be5\\u5bbf\\u547d\\u7684\\u65b9\\u6cd5\\u5462\\uff0c\\u5982\\u679c\\u4f60\\u6b63\\u906d\\u9047\\u6b64\\u60c5\\u51b5\\uff1b\\u6216\\u4f60\\u5df2\\u662f\\u4ece0\\u5b66\\u4e60C\\u8bed\\u8a00\\u5230\\u653e\\u5f03\\uff1b\\u6216\\u4f60\\u60f3\\u6539\\u53d8\\u73b0\\u5b66\\u4e60C\\u8bed\\u8a00\\u7684\\u56f0\\u5883\\uff0c\\u63d0\\u9ad8\\u6548\\u7387\\u4e0e\\u4e50\\u8da3\\uff0c\\u90a3\\u4e48\\u5173\\u6ce8\\u6b64\\u7cfb\\u5217\\u5427<\\/p>\\n<p>\\u73b0\\u4ee3\\u5f00\\u53d1\\u7684\\u4e3b\\u6d41\\u662f OOP(Object-oriented programming)\\uff0c\\u5b83\\u63d0\\u9ad8\\u4e86\\u6211\\u4eec\\u5f00\\u53d1\\u7684\\u6548\\u7387\\uff0c\\u4ece\\u800c\\u4e5f\\u6df1\\u523b\\u7684\\u5f71\\u54cd\\u7740\\u4ee3\\u7801\\u7ec4\\u7ec7\\u7ed3\\u6784\\u3002\\u4f46\\u9762\\u5411\\u8fc7\\u7a0b\\u5f0f\\u5f00\\u53d1\\u5728\\u8fd9\\u4e2a\\u7f16\\u7a0b\\u4e16\\u754c\\u91cc\\u4e00\\u76f4\\u5b58\\u5728\\uff0c\\u800c\\u4e14\\u4e5f\\u4fdd\\u5b58\\u5b8c\\u987d\\u5f3a\\u7684\\u751f\\u547d\\u529b\\u3002\\u4f46\\u6709\\u4e00\\u79cd\\u73b0\\u8c61\\u5728\\u9762\\u5411\\u8fc7\\u7a0b\\u5f0f\\u8ba1\\u7b97\\u673a\\u8bed\\u8a00\\u51fa\\u73b0\\uff0c\\u5c31\\u662f\\u628a\\u4ee3\\u7801\\u7ec4\\u7ec7\\u6210\\u9762\\u5411\\u5bf9\\u8c61\\u5f62\\u5f0f\\u6765\\u5f00\\u53d1\\uff0c\\u4ece\\u800c\\u8ba9\\u4ee3\\u7801\\u53ef\\u8bfb\\u4e0e\\u53ef\\u7ef4\\u62a4\\u6027\\u63d0\\u9ad8\\u3002<\\/p>\\n<p>\\u4e5f\\u8bb8\\u5728\\u6b63\\u5f0f\\u7684\\u9762\\u5411\\u5bf9\\u8c61java\\u4e0d\\u65ad\\u98de\\u5feb\\u53d1\\u5c55\\u65f6\\uff0cC\\u7684\\u5f00\\u53d1\\u6a21\\u5f0f\\u4e5f\\u5728\\u6084\\u7136\\u53d1\\u751f\\u7740\\u5fae\\u5999\\u7684\\u53d8\\u5316\\uff0c\\u5f00\\u59cb\\u63a5\\u53e3\\u5316\\u4e0e\\u5bf9\\u8c61\\u5316\\u3002\\u867dC\\u662f\\u4e0d\\u652f\\u6301\\u9762\\u5411\\u5bf9\\u8c61\\u7684\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u5145\\u5206\\u6316\\u6398\\u73b0\\u6709\\u7684\\u8d44\\u6599\\uff0c\\u628aC\\u8bed\\u8a00\\u6309\\u9762\\u5411\\u5bf9\\u8c61\\u7684\\u4e00\\u4e9b\\u7279\\u6027\\u6253\\u9020\\u6210\\u51fa\\u4e00\\u4e2a\\u5177\\u6709\\u9ad8\\u53ef\\u590d\\u7528\\u6027\\u4e0e\\u53ef\\u9605\\u8bfb\\u6027\\u7684C lib\\u3002<\\/p>\\n<p>\\u4efb\\u4f55\\u4e00\\u4e2a\\u4f1f\\u5927\\u7684\\u4e1c\\u897f\\u90fd\\u8981\\u6709\\u7262\\u9760\\u7684\\u57fa\\u77f3\\uff0c\\u672c\\u4f5c\\u8005\\u5b9e\\u5728\\u662f\\u4e2a\\u65e0\\u540d\\u5c0f\\u83dc\\u9e21\\uff0c\\u6240\\u4ee5\\u627e\\u4e86\\u300aProgramming Abstractions in C\\u300b\\u4e66\\u4e2d\\u4ee3\\u7801\\u505a\\u4e3a\\u6b64 lib \\u5e93\\u7684\\u6838\\u5fc3\\u5b9e\\u73b0\\uff1b\\u53e6\\u5916\\uff0c\\u6838\\u5fc3\\u601d\\u60f3\\u4e5f\\u662f\\u4ee5\\u300aProgramming Abstractions in C\\u300b\\u4e3a\\u6307\\u5bfc\\u3002\\u4e3a\\u4ec0\\u4e48\\u9009\\u62e9\\u300aProgramming Abstractions in C\\u300b\\u505a\\u4e3alib\\u5730\\u5730\\u57fa\\u5462\\uff0c\\u5982\\u679c\\u53ef\\u4ee5\\uff0c\\u4f60\\u5e26\\u7740\\u8fd9\\u4e2a\\u95ee\\u9898\\u53bb\\u9605\\u8bfb\\u8be5\\u4e66\\uff0c\\u8bfb\\u540e\\u76f8\\u4fe1\\u4f60\\u4f1a\\u611f\\u53f9\\u8be5\\u6559\\u6388\\u771f\\u7684\\u662f\\u597d\\u6709\\u8ba1\\u7b97\\u673a\\u54f2\\u5b66\\uff0c\\u4ece\\u6b64\\u6df1\\u609f\\u63a5\\u53e3\\u5316\\u4e0e\\u62bd\\u8c61\\u5316\\u601d\\u60f3\\u3002\\u7531\\u4e8e\\u300aProgramming Abstractions in C\\u300b\\u662f\\u505a\\u4e3a\\u6559\\u6750\\u7528\\u7684\\u4e14\\u65f6\\u4ee3\\u4e5f\\u662f\\u6709\\u70b9\\u4e45\\u8fdc\\uff0c\\u56fa\\u52a0\\u4ee5\\u53c2\\u8003\\u300aC Interfaces and Implementations\\u300b\\u4e66\\u4e2d\\u7684\\u63a5\\u53e3\\u5b9e\\u73b0\\u3002\\u300aC Interfaces and Implementations\\u300b\\u6709\\u7740\\u5f88\\u591a\\u4e25\\u8c28\\u7684\\u601d\\u60f3\\uff0c\\u4e3a\\u4ee3\\u7801\\u5c42\\u6b21\\u7684\\u63d0\\u5347\\u6709\\u7740\\u5f88\\u591a\\u88e8\\u76ca\\u3002<\\/p>\\n<p>\\u4e00\\u5ea7\\u5728\\u5c06\\u6765\\u53ef\\u80fd\\u662f\\u5927\\u53a6\\u7684\\u9aa8\\u67b6\\u5750\\u843d\\u4e8e\\u4e00\\u4e2a\\u7262\\u9760\\u7684\\u57fa\\u77f3\\u4e0a\\u4e86\\uff0c\\u4f46\\u8981\\u6709\\u73b0\\u4ee3\\u5316\\u7684\\u5916\\u89c2\\uff0c\\u6211\\u4eec\\u5c31\\u53ea\\u5bf9\\u627e\\u73b0\\u5982\\u4eca\\u88c5\\u9970\\u7684\\u6700\\u597d\\uff08\\u6548\\u7387\\u4e0e\\u53ef\\u8bfb\\u6027\\uff09\\u7684 Redis \\u6765\\u5bf9\\u6211\\u4eec\\u7684\\u5b9e\\u73b0\\u505a\\u4e00\\u4e9b\\u6bd4\\u8f83\\uff0c\\u53d6\\u5176\\u7cbe\\u534e\\u4e3a\\u4e4b\\u6211\\u7528\\u3002<\\/p>\\n<p>\\u4e0b\\u9762\\u662f\\u6211\\u4eec\\u8981\\u521d\\u521b\\u7684\\u4e00\\u4e9b\\u63a5\\u53e3\\uff1a<\\/p>\\n<ul>\\n<li>\\u5185\\u5b58\\u5206\\u914d\\u7684\\u63a5\\u53e3\\n<ul>\\n<li>genlib.h + genlib.c<\\/li>\\n<\\/ul><\\/li>\\n<li>\\u7b80\\u5316\\u8bfb\\u5199\\u64cd\\u4f5c\\u7684\\u63a5\\u53e3\\n<ul>\\n<li>simpio.h + simpio.c<\\/li>\\n<\\/ul><\\/li>\\n<li>\\u7b80\\u5316\\u5b57\\u7b26\\u4e32\\u64cd\\u4f5c\\u7684\\u63a5\\u53e3\\n<ul>\\n<li>strlib.h + strlib.c<\\/li>\\n<\\/ul><\\/li>\\n<\\/ul>"}',
                'page_image' => NULL,
                'meta_description' => '整合《Programming Abstractions in C》、《C Interfaces and Implementations》与 Redis 源码，创造自己的 C lib库',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 68,
                'published_at' => '2021-07-13 20:00:00',
                'created_at' => '2021-07-13 16:17:01',
                'updated_at' => '2022-01-07 11:49:43',
                'deleted_at' => NULL,
            ),
            21 => 
            array (
                'id' => 22,
                'category_id' => 12,
                'collection_id' => 2,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'redis-spkfe',
                'title' => 'redis -- 双链表（adlist）',
                'subtitle' => 'A generic doubly linked list implementation',
            'content' => '{"raw":"\\u5f00\\u59cb\\u6211\\u4eec redis \\u6570\\u636e\\u7ed3\\u6784\\u7684\\u7b2c\\u4e8c\\u6b21\\u62c6\\u89e3\\uff0cA generic doubly linked list implementation -- \\u53cc\\u94fe\\u8868\\u72ec\\u7acb\\u3002\\n\\n\\u9996\\u5148\\uff0c\\u4ece redis \\u6e90\\u4ee3\\u7801\\u6587\\u4ef6\\u5939 src \\u91cc\\u62f7\\u8d1d\\u51fa adlist.h \\u4e0e adlist.c \\u4e24\\u4e2a\\u6587\\u4ef6**\\uff08\\u58f0\\u660e\\u4e0b\\uff0c\\u672c\\u7cfb\\u5217\\u6587\\u7ae0\\u9ed8\\u8ba4\\u90fd\\u4f7f\\u7528 redis-6.2 \\u7248\\u672c\\uff0c\\u9664\\u975e\\u53e6\\u5916\\u6807\\u6ce8\\u7248\\u672c\\uff09**\\u3002\\u6253\\u5f00 adlist.c \\u6587\\u4ef6\\uff0c\\u80fd\\u770b\\u5230 include \\u5934\\u6587\\u4ef6\\u5217\\u8868\\u542b\\u6709 zmalloc.h\\uff1b \\u4ece\\u800c\\u4e5f\\u8981\\u5f15\\u5165 zmalloc.c \\u6587\\u4ef6\\u3002\\u7136\\u800c\\uff0czmalloc.c \\u6587\\u4ef6\\u5f15\\u5165\\u4e86 redis \\u4e2d\\u7684 config.h\\u3001atomicvar.h \\u5934\\u6587\\u4ef6\\u3002\\u67e5\\u770b\\u8fd9\\u4e9b\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u53d1\\u73b0\\u5b83\\u4eec\\u4ee3\\u7801\\u91cf\\u5f88\\u591a\\uff0c\\u6b64\\u65f6\\u6211\\u4eec\\u7528\\u4e0d\\u7740\\u5b83\\u4eec\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u5148\\u7565\\u8fc7\\u5b83\\u4eec\\u4ee3\\u7801\\u5185\\u5bb9\\u7684\\u7ec6\\u8282\\uff0c\\u53ea\\u7ba1\\u590d\\u5236\\u5b83\\u4eec\\uff08\\u7edf\\u7edf\\u590d\\u5236\\u5230\\u4e00\\u4e2a\\u6587\\u4ef6\\u5939\\u4e2d\\uff09\\u3002\\n\\n\\u64cd\\u4f5c\\u5230\\u8fd9\\uff0c\\u76ee\\u5f55\\u6587\\u4ef6\\u4e0b\\uff0c\\u603b\\u5171\\u67096\\u4e2a\\u6587\\u4ef6\\uff1aadlist.h\\u3001adlist.c\\u3001zmalloc.h\\u3001zmalloc.c \\u3001atomicvar.h\\u3001config.h\\u3002\\u63a5\\u4e0b\\u6765\\uff0c\\u5199\\u4e2amakefile\\u6587\\u4ef6(\\u53d6\\u540d makefile)\\uff0c\\u5185\\u5bb9\\u5982\\u4e0b\\uff1a\\n\\n```shell\\nCC  := gcc\\nCFLAGS  := -g -I. $(CCFLAGS)\\nSRCS    := $(wildcard *.c) # \\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u7684\\u6240\\u6709\\u7684.c\\u6587\\u4ef6 \\nOBJS    := $(SRCS:.c=.o) # \\u5c06\\u6240\\u6709\\u7684.c\\u6587\\u4ef6\\u540d\\u66ff\\u6362\\u4e3a.o\\nREDISLIB \\t:= libredis.a\\n\\nall:$(REDISLIB) gccr\\n\\n# ***************************************************************\\n# C compilations\\nzmalloc.o: zmalloc.c zmalloc.h\\n\\t$(CC) $(CFLAGS) -c zmalloc.c\\n\\nadlist.o: adlist.c adlist.h\\n\\t$(CC) $(CFLAGS) -c adlist.c\\n\\n$(REDISLIB):$(OBJS)\\n\\t-rm -f $(REDISLIB)\\n\\tar cr $(REDISLIB) $(OBJS)\\n\\tranlib $(REDISLIB)\\n\\n# ***************************************************************\\n# Entry to reconstruct the gccr script\\n\\ngccr: makefile\\n\\t@echo \'#! \\/bin\\/csh -f\' > gccr\\n\\t@echo \'set INCLUDE =\' `pwd` >> gccr\\n\\t@echo \'set REDISLIB = $$INCLUDE\\/libredis.a\' >> gccr\\n\\t@echo \'set LIBRARIES = $$REDISLIB\' >> gccr\\n\\t@echo \'foreach x ($$*)\' >> gccr\\n\\t@echo \'  if (\\"x$$x\\" == \\"x-c\\") then\' >> gccr\\n\\t@echo \'    set LIBRARIES = \\"\\"\' >> gccr\\n\\t@echo \'    break\' >> gccr\\n\\t@echo \'  endif\' >> gccr\\n\\t@echo \'end\' >> gccr\\n\\t@echo \'gcc -g -I$$INCLUDE $$* $$LIBRARIES\' >> gccr\\n\\t@chmod a+x gccr\\n\\t@echo \'[gccr script created]\'\\n\\nclean:\\n\\trm -f *.o\\n\\trm -f $(BINS)\\n\\trm -f $(REDISLIB)\\n\\trm -f gccr\\n```\\n\\n\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\uff0c\\u6267\\u884c\\u547d\\u4ee4\\uff1a`make`\\uff0c\\u4e3b\\u8981\\u4f1a\\u751f\\u6210\\u4e00\\u4e2a shell \\u53ef\\u6267\\u884c\\u6587\\u4ef6 gccr \\u548c\\u53e6\\u5916\\u4e00\\u4e2a C \\u9759\\u6001\\u5e93\\u6587\\u4ef6 libredis.a \\u3002libredis.a \\u9759\\u6001\\u5e93\\u6587\\u4ef6\\u662f\\u6211\\u4eec\\u80fd\\u591f\\u5b9e\\u73b0\\u5355\\u72ec\\u53bb\\u6d4b\\u8bd5\\u6267\\u884c redis \\u91cc\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u4ee3\\u7801\\u7684\\u5173\\u952e\\u3002\\u73b0\\u8ba9\\u6211\\u4eec\\u6253\\u5f00 gccr \\u8fd9\\u4e2a\\u6587\\u4ef6\\uff1a\\n\\n```shell\\n#! \\/bin\\/csh -f\\nset INCLUDE = \\/www\\/redisResourceInAction\\/01-SDS\\nset REDISLIB = $INCLUDE\\/libredis.a\\nset LIBRARIES = ($REDISLIB)\\nforeach x ($*)\\n  if (\\"x$x\\" == \\"x-c\\") then\\n    set LIBRARIES = \\"\\"\\n    break\\n  endif\\nend\\ngcc -g -I$INCLUDE $* $LIBRARIES\\n```\\ngccr\\u6587\\u4ef6\\u5185\\u5bb9\\u5c31\\u662f\\u7eaf shell \\u547d\\u4ee4\\uff0c\\u53ea\\u8981\\u5927\\u6982\\u61c2\\u5f97\\u4e00\\u4e9b shell \\u547d\\u4ee4\\u5c31\\u5927\\u6982\\u77e5\\u9053\\u5b83\\u5728\\u505a\\u4ec0\\u4e48\\u3002\\u8fd9\\u4e2a\\u4e5f\\u4f1a\\u5728\\u540e\\u9762\\u535a\\u6587\\u8fdb\\u884c\\u8be6\\u89e3\\u3002\\n\\n\\u4e3a\\u4e86\\u80fd\\u5728shell\\u547d\\u4ee4\\u884c\\u4e0b\\uff0c\\u76f4\\u63a5\\u6267\\u884cgccr \\uff0c \\u6267\\u884c\\uff1a`mv gccr \\/usr\\/local\\/bin`\\uff0c\\u628a\\u8fd9\\u4e2a\\u6587\\u4ef6\\u653e\\u5165 \\/usr\\/local\\/bin \\u76ee\\u5f55\\u4e0b\\u3002\\u5f53\\u7136\\uff0c\\u4e3a\\u4e86\\u4e0d\\u4e0e\\u4e4b\\u524d\\u7684 gccr \\u6df7\\u6dc6\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4ee5\\u76f8\\u5bf9\\u8def\\u5f84\\u6765\\u6267\\u884c gccr\\u3002\\u540e\\u6587\\u7684\\u793a\\u4f8b\\u5c31\\u662f\\u8fd9\\u4e48\\u505a\\u7684\\u3002\\n\\n\\u81f3\\u6b64\\uff0c\\u53c8\\u5927\\u529f\\u544a\\u6210\\uff0c\\u8fd9\\u7bc7\\u6587\\u7ae0\\u611f\\u89c9\\u662f\\u4e0d\\u662f\\u4e0e**[\\u7b80\\u5355\\u52a8\\u6001\\u5b57\\u7b26\\u4e32 -- SDS](http:\\/\\/www.shishao.site\\/sds-16h4f)**\\u5185\\u5bb9\\u6837\\u5f0f\\u5dee\\u4e0d\\u591a\\u3002\\u8fd9\\u5c31\\u5bf9\\u4e86\\uff0c\\u56e0\\u4e3a\\u524d\\u671f\\u7684redis\\u6570\\u636e\\u7ed3\\u6784\\u62c6\\u89e3\\u7b80\\u5355\\uff0c\\u90fd\\u662f\\u4e9b\\u7b80\\u5355\\u642c\\u8fd0\\u64cd\\u4f5c\\u3002\\n\\n\\u4e0b\\u9762\\u6211\\u4eec\\u8fdb\\u884c\\u521b\\u5efa\\u4e00\\u4e9b\\u6d4b\\u8bd5demo\\uff0c\\u6765\\u68c0\\u67e5\\u6211\\u4eec\\u7684\\u53cc\\u94fe\\u8868(adlist)\\n```\\n#include <stdio.h>\\n#include \\"adlist.h\\"\\n\\ntypedef int intT;\\n\\nint main() {\\n    list *myList;\\n    listIter *iter;\\n    listNode *node;\\n    myList = listCreate();\\n\\n    int i;\\n    intT *num;\\n    for(i = 0; i < 10; i++) {\\n        num = zcalloc(sizeof(intT));\\n        *num = i;\\n        myList = listAddNodeTail(myList, num);\\n    }\\n\\n    int a = 88;\\n    int b = 99;\\n    myList = listAddNodeTail(myList, &a);\\n    myList = listAddNodeTail(myList, &b);\\n\\n    iter = listGetIterator(myList, AL_START_HEAD);\\n    while((node = listNext(iter)) != NULL) {\\n        printf(\\"integer value = %d \\\\n\\", *(int*)listNodeValue(node));\\n    }\\n\\n    listRelease(myList);\\n}\\n```\\n\\u5728\\u6b64\\u6587\\u4ef6\\u76ee\\u5f55\\u4e0b\\uff0c\\u6267\\u884c\\uff1a`gccr demo_1.c -o demo_1`\\uff0c\\u4e00\\u5207\\u6b63\\u5e38\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u518d\\u6267\\u884c\\uff1a`.\\/demo_1`\\n![image.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/20\\/s7suahq3HSxYozSGFm8uro7adQnwP4MlIgbluzi1.png)\\n\\n\\u5982\\u679c\\u5f97\\u5230\\u4e0a\\u56fe\\u7ed3\\u679c\\uff0c\\u90a3\\u4e48adlist\\u6570\\u636e\\u7ed3\\u6784\\u5e93\\u5c31\\u987a\\u5229\\u751f\\u6210\\u4e86\\uff0c\\u4e14\\u80fd\\u6b63\\u5e38\\u7f16\\u8bd1\\u4ee3\\u7801\\u3002\\u5230\\u6b64\\u6211\\u4eec\\u4fbf\\u6253\\u5f00\\u63a2\\u7d22 redis \\u6e90\\u7801\\u7b2c\\u4e8c\\u6247\\u95e8\\u3002\\n\\n\\u9644 [adlist \\u6e90\\u7801](https:\\/\\/github.com\\/shishaoqi\\/redisResourceInAction\\/tree\\/master\\/02-adlist)","html":"<p>\\u5f00\\u59cb\\u6211\\u4eec redis \\u6570\\u636e\\u7ed3\\u6784\\u7684\\u7b2c\\u4e8c\\u6b21\\u62c6\\u89e3\\uff0cA generic doubly linked list implementation -- \\u53cc\\u94fe\\u8868\\u72ec\\u7acb\\u3002<\\/p>\\n<p>\\u9996\\u5148\\uff0c\\u4ece redis \\u6e90\\u4ee3\\u7801\\u6587\\u4ef6\\u5939 src \\u91cc\\u62f7\\u8d1d\\u51fa adlist.h \\u4e0e adlist.c \\u4e24\\u4e2a\\u6587\\u4ef6<strong>\\uff08\\u58f0\\u660e\\u4e0b\\uff0c\\u672c\\u7cfb\\u5217\\u6587\\u7ae0\\u9ed8\\u8ba4\\u90fd\\u4f7f\\u7528 redis-6.2 \\u7248\\u672c\\uff0c\\u9664\\u975e\\u53e6\\u5916\\u6807\\u6ce8\\u7248\\u672c\\uff09<\\/strong>\\u3002\\u6253\\u5f00 adlist.c \\u6587\\u4ef6\\uff0c\\u80fd\\u770b\\u5230 include \\u5934\\u6587\\u4ef6\\u5217\\u8868\\u542b\\u6709 zmalloc.h\\uff1b \\u4ece\\u800c\\u4e5f\\u8981\\u5f15\\u5165 zmalloc.c \\u6587\\u4ef6\\u3002\\u7136\\u800c\\uff0czmalloc.c \\u6587\\u4ef6\\u5f15\\u5165\\u4e86 redis \\u4e2d\\u7684 config.h\\u3001atomicvar.h \\u5934\\u6587\\u4ef6\\u3002\\u67e5\\u770b\\u8fd9\\u4e9b\\u6587\\u4ef6\\uff0c\\u6211\\u4eec\\u53d1\\u73b0\\u5b83\\u4eec\\u4ee3\\u7801\\u91cf\\u5f88\\u591a\\uff0c\\u6b64\\u65f6\\u6211\\u4eec\\u7528\\u4e0d\\u7740\\u5b83\\u4eec\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u5148\\u7565\\u8fc7\\u5b83\\u4eec\\u4ee3\\u7801\\u5185\\u5bb9\\u7684\\u7ec6\\u8282\\uff0c\\u53ea\\u7ba1\\u590d\\u5236\\u5b83\\u4eec\\uff08\\u7edf\\u7edf\\u590d\\u5236\\u5230\\u4e00\\u4e2a\\u6587\\u4ef6\\u5939\\u4e2d\\uff09\\u3002<\\/p>\\n<p>\\u64cd\\u4f5c\\u5230\\u8fd9\\uff0c\\u76ee\\u5f55\\u6587\\u4ef6\\u4e0b\\uff0c\\u603b\\u5171\\u67096\\u4e2a\\u6587\\u4ef6\\uff1aadlist.h\\u3001adlist.c\\u3001zmalloc.h\\u3001zmalloc.c \\u3001atomicvar.h\\u3001config.h\\u3002\\u63a5\\u4e0b\\u6765\\uff0c\\u5199\\u4e2amakefile\\u6587\\u4ef6(\\u53d6\\u540d makefile)\\uff0c\\u5185\\u5bb9\\u5982\\u4e0b\\uff1a<\\/p>\\n<pre><code class=\\"language-shell\\">CC  := gcc\\nCFLAGS  := -g -I. $(CCFLAGS)\\nSRCS    := $(wildcard *.c) # \\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u7684\\u6240\\u6709\\u7684.c\\u6587\\u4ef6 \\nOBJS    := $(SRCS:.c=.o) # \\u5c06\\u6240\\u6709\\u7684.c\\u6587\\u4ef6\\u540d\\u66ff\\u6362\\u4e3a.o\\nREDISLIB    := libredis.a\\n\\nall:$(REDISLIB) gccr\\n\\n# ***************************************************************\\n# C compilations\\nzmalloc.o: zmalloc.c zmalloc.h\\n    $(CC) $(CFLAGS) -c zmalloc.c\\n\\nadlist.o: adlist.c adlist.h\\n    $(CC) $(CFLAGS) -c adlist.c\\n\\n$(REDISLIB):$(OBJS)\\n    -rm -f $(REDISLIB)\\n    ar cr $(REDISLIB) $(OBJS)\\n    ranlib $(REDISLIB)\\n\\n# ***************************************************************\\n# Entry to reconstruct the gccr script\\n\\ngccr: makefile\\n    @echo \'#! \\/bin\\/csh -f\' &gt; gccr\\n    @echo \'set INCLUDE =\' `pwd` &gt;&gt; gccr\\n    @echo \'set REDISLIB = $$INCLUDE\\/libredis.a\' &gt;&gt; gccr\\n    @echo \'set LIBRARIES = $$REDISLIB\' &gt;&gt; gccr\\n    @echo \'foreach x ($$*)\' &gt;&gt; gccr\\n    @echo \'  if (\\"x$$x\\" == \\"x-c\\") then\' &gt;&gt; gccr\\n    @echo \'    set LIBRARIES = \\"\\"\' &gt;&gt; gccr\\n    @echo \'    break\' &gt;&gt; gccr\\n    @echo \'  endif\' &gt;&gt; gccr\\n    @echo \'end\' &gt;&gt; gccr\\n    @echo \'gcc -g -I$$INCLUDE $$* $$LIBRARIES\' &gt;&gt; gccr\\n    @chmod a+x gccr\\n    @echo \'[gccr script created]\'\\n\\nclean:\\n    rm -f *.o\\n    rm -f $(BINS)\\n    rm -f $(REDISLIB)\\n    rm -f gccr<\\/code><\\/pre>\\n<p>\\u5728\\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\uff0c\\u6267\\u884c\\u547d\\u4ee4\\uff1a<code>make<\\/code>\\uff0c\\u4e3b\\u8981\\u4f1a\\u751f\\u6210\\u4e00\\u4e2a shell \\u53ef\\u6267\\u884c\\u6587\\u4ef6 gccr \\u548c\\u53e6\\u5916\\u4e00\\u4e2a C \\u9759\\u6001\\u5e93\\u6587\\u4ef6 libredis.a \\u3002libredis.a \\u9759\\u6001\\u5e93\\u6587\\u4ef6\\u662f\\u6211\\u4eec\\u80fd\\u591f\\u5b9e\\u73b0\\u5355\\u72ec\\u53bb\\u6d4b\\u8bd5\\u6267\\u884c redis \\u91cc\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u4ee3\\u7801\\u7684\\u5173\\u952e\\u3002\\u73b0\\u8ba9\\u6211\\u4eec\\u6253\\u5f00 gccr \\u8fd9\\u4e2a\\u6587\\u4ef6\\uff1a<\\/p>\\n<pre><code class=\\"language-shell\\">#! \\/bin\\/csh -f\\nset INCLUDE = \\/www\\/redisResourceInAction\\/01-SDS\\nset REDISLIB = $INCLUDE\\/libredis.a\\nset LIBRARIES = ($REDISLIB)\\nforeach x ($*)\\n  if (\\"x$x\\" == \\"x-c\\") then\\n    set LIBRARIES = \\"\\"\\n    break\\n  endif\\nend\\ngcc -g -I$INCLUDE $* $LIBRARIES<\\/code><\\/pre>\\n<p>gccr\\u6587\\u4ef6\\u5185\\u5bb9\\u5c31\\u662f\\u7eaf shell \\u547d\\u4ee4\\uff0c\\u53ea\\u8981\\u5927\\u6982\\u61c2\\u5f97\\u4e00\\u4e9b shell \\u547d\\u4ee4\\u5c31\\u5927\\u6982\\u77e5\\u9053\\u5b83\\u5728\\u505a\\u4ec0\\u4e48\\u3002\\u8fd9\\u4e2a\\u4e5f\\u4f1a\\u5728\\u540e\\u9762\\u535a\\u6587\\u8fdb\\u884c\\u8be6\\u89e3\\u3002<\\/p>\\n<p>\\u4e3a\\u4e86\\u80fd\\u5728shell\\u547d\\u4ee4\\u884c\\u4e0b\\uff0c\\u76f4\\u63a5\\u6267\\u884cgccr \\uff0c \\u6267\\u884c\\uff1a<code>mv gccr \\/usr\\/local\\/bin<\\/code>\\uff0c\\u628a\\u8fd9\\u4e2a\\u6587\\u4ef6\\u653e\\u5165 \\/usr\\/local\\/bin \\u76ee\\u5f55\\u4e0b\\u3002\\u5f53\\u7136\\uff0c\\u4e3a\\u4e86\\u4e0d\\u4e0e\\u4e4b\\u524d\\u7684 gccr \\u6df7\\u6dc6\\uff0c\\u6211\\u4eec\\u53ef\\u4ee5\\u4ee5\\u76f8\\u5bf9\\u8def\\u5f84\\u6765\\u6267\\u884c gccr\\u3002\\u540e\\u6587\\u7684\\u793a\\u4f8b\\u5c31\\u662f\\u8fd9\\u4e48\\u505a\\u7684\\u3002<\\/p>\\n<p>\\u81f3\\u6b64\\uff0c\\u53c8\\u5927\\u529f\\u544a\\u6210\\uff0c\\u8fd9\\u7bc7\\u6587\\u7ae0\\u611f\\u89c9\\u662f\\u4e0d\\u662f\\u4e0e<strong><a href=\\"http:\\/\\/www.shishao.site\\/sds-16h4f\\">\\u7b80\\u5355\\u52a8\\u6001\\u5b57\\u7b26\\u4e32 -- SDS<\\/a><\\/strong>\\u5185\\u5bb9\\u6837\\u5f0f\\u5dee\\u4e0d\\u591a\\u3002\\u8fd9\\u5c31\\u5bf9\\u4e86\\uff0c\\u56e0\\u4e3a\\u524d\\u671f\\u7684redis\\u6570\\u636e\\u7ed3\\u6784\\u62c6\\u89e3\\u7b80\\u5355\\uff0c\\u90fd\\u662f\\u4e9b\\u7b80\\u5355\\u642c\\u8fd0\\u64cd\\u4f5c\\u3002<\\/p>\\n<p>\\u4e0b\\u9762\\u6211\\u4eec\\u8fdb\\u884c\\u521b\\u5efa\\u4e00\\u4e9b\\u6d4b\\u8bd5demo\\uff0c\\u6765\\u68c0\\u67e5\\u6211\\u4eec\\u7684\\u53cc\\u94fe\\u8868(adlist)<\\/p>\\n<pre><code>#include &lt;stdio.h&gt;\\n#include \\"adlist.h\\"\\n\\ntypedef int intT;\\n\\nint main() {\\n    list *myList;\\n    listIter *iter;\\n    listNode *node;\\n    myList = listCreate();\\n\\n    int i;\\n    intT *num;\\n    for(i = 0; i &lt; 10; i++) {\\n        num = zcalloc(sizeof(intT));\\n        *num = i;\\n        myList = listAddNodeTail(myList, num);\\n    }\\n\\n    int a = 88;\\n    int b = 99;\\n    myList = listAddNodeTail(myList, &amp;a);\\n    myList = listAddNodeTail(myList, &amp;b);\\n\\n    iter = listGetIterator(myList, AL_START_HEAD);\\n    while((node = listNext(iter)) != NULL) {\\n        printf(\\"integer value = %d \\\\n\\", *(int*)listNodeValue(node));\\n    }\\n\\n    listRelease(myList);\\n}<\\/code><\\/pre>\\n<p>\\u5728\\u6b64\\u6587\\u4ef6\\u76ee\\u5f55\\u4e0b\\uff0c\\u6267\\u884c\\uff1a<code>gccr demo_1.c -o demo_1<\\/code>\\uff0c\\u4e00\\u5207\\u6b63\\u5e38\\u7684\\u60c5\\u51b5\\u4e0b\\uff0c\\u518d\\u6267\\u884c\\uff1a<code>.\\/demo_1<\\/code><br \\/>\\n<img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/07\\/20\\/s7suahq3HSxYozSGFm8uro7adQnwP4MlIgbluzi1.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<p>\\u5982\\u679c\\u5f97\\u5230\\u4e0a\\u56fe\\u7ed3\\u679c\\uff0c\\u90a3\\u4e48adlist\\u6570\\u636e\\u7ed3\\u6784\\u5e93\\u5c31\\u987a\\u5229\\u751f\\u6210\\u4e86\\uff0c\\u4e14\\u80fd\\u6b63\\u5e38\\u7f16\\u8bd1\\u4ee3\\u7801\\u3002\\u5230\\u6b64\\u6211\\u4eec\\u4fbf\\u6253\\u5f00\\u63a2\\u7d22 redis \\u6e90\\u7801\\u7b2c\\u4e8c\\u6247\\u95e8\\u3002<\\/p>\\n<p>\\u9644 <a href=\\"https:\\/\\/github.com\\/shishaoqi\\/redisResourceInAction\\/tree\\/master\\/02-adlist\\">adlist \\u6e90\\u7801<\\/a><\\/p>"}',
                'page_image' => NULL,
                'meta_description' => 'A generic doubly linked list implementation 的拆解',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 141,
                'published_at' => '2021-07-20 19:00:00',
                'created_at' => '2021-07-20 16:34:57',
                'updated_at' => '2022-01-09 12:26:03',
                'deleted_at' => NULL,
            ),
            22 => 
            array (
                'id' => 23,
                'category_id' => 12,
                'collection_id' => 0,
                'user_id' => 2,
                'last_user_id' => 1,
                'slug' => 'c-gafkc',
                'title' => 'C 函数罗列',
                'subtitle' => '把我们既熟悉又陌生的函数做成一份手册',
            'content' => '{"raw":"\\u6709\\u90a3\\u4e48\\u4e00\\u4e9bC\\u51fd\\u6570\\uff0c\\u6211\\u4eec\\u5e38\\u89c1\\u5230\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u5f88\\u719f\\u6089\\uff0c\\u4f46\\u5230\\u60f3\\u81ea\\u5df1\\u52a8\\u624b\\u7528\\u65f6\\uff0c\\u5374\\u5f88\\u964c\\u751f\\u3002\\u8fd9\\u5c31\\u73b0\\u5b9e\\uff0c\\u4ee5\\u4e3a\\u81ea\\u5df1\\u4f1a\\u7684\\uff0c\\u4e8b\\u5b9e\\u53ef\\u80fd\\u672a\\u5fc5\\u4f60\\u80fd\\u505a\\u51fa\\u6765\\u3002\\u4ee5\\u540e\\uff0c\\u6211\\u4f1a\\u5728\\u8fd9\\u7f57\\u5217\\u51fa\\u5404\\u79cd\\u51fd\\u6570\\u3002\\n\\n1. getc  \\n > int getc(FILE \\\\*string)  -- <stdio.h>\\n \\n getc \\u51fd\\u6570\\u4ece\\u6d41 stream \\u83b7\\u53d6\\u4e00\\u4e2a\\u5b57\\u7b26\\uff08\\u8fd4\\u56de\\u7684\\u662f\\u8be5\\u5b57\\u7b26\\u7684 ASCII \\u7801\\uff09\\u3002\\u5f53\\u5b83\\u5230\\u8fbe\\u6587\\u4ef6\\u5c3e\\u6216\\u51fa\\u73b0\\u9519\\u8bef\\u65f6\\uff0c\\u8fd4\\u56deEOF\\uff08\\u5728 stdio.h \\u4e2d\\u6709\\u5b9a\\u4e49\\uff1a#define EOF -1\\uff09\\n\\n2. sscanf  \\n> int sscanf(char \\\\*str, char \\\\*format [, argument, ...])  -- <stddef.h>\\n\\n ##### \\u51fd\\u6570\\u8bf4\\u660e  \\n \\u4ece\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\u4e2d\\u8bfb\\u53d6\\u4e0e\\u6307\\u5b9a\\u683c\\u5f0f\\u76f8\\u7b26\\u7684\\u6570\\u636e\\uff08\\u4ece\\u5b57\\u7b26\\u4e32\\u8bfb\\u53d6\\u683c\\u5f0f\\u5316\\u8f93\\u5165\\uff09\\u3002sscanf()\\u4f1a\\u5c06\\u53c2\\u6570str\\u7684\\u5b57\\u7b26\\u4e32\\u6839\\u636e\\u53c2\\u6570format\\u5b57\\u7b26\\u4e32\\u6765\\u8f6c\\u6362\\u5e76\\u683c\\u5f0f\\u5316\\u6570\\u636e\\u3002\\u683c\\u5f0f\\u8f6c\\u6362\\u5f62\\u5f0f\\u8bf7\\u53c2\\u8003scanf()\\u3002\\u8f6c\\u6362\\u540e\\u7684\\u7ed3\\u679c\\u5b58\\u4e8e\\u5bf9\\u5e94\\u7684\\u53c2\\u6570\\u5185\\u3002\\n \\n ##### \\u8fd4\\u56de\\u503c\\n\\u6210\\u529f\\u5219\\u8fd4\\u56de\\u53c2\\u6570\\u6570\\u76ee\\uff0c\\u5931\\u8d25\\u5219\\u8fd4\\u56de-1\\uff0c\\u9519\\u8bef\\u539f\\u56e0\\u5b58\\u4e8eerrno\\u4e2d\\u3002\\n \\n ##### \\u4ee3\\u7801\\u793a\\u4f8b\\n \\n \\u66f4\\u591a\\u89c1\\uff1a[sscanf]();  [C\\u8bed\\u8a00sscanf\\u51fd\\u6570\\u4f7f\\u7528\\u603b\\u7ed3](https:\\/\\/blog.csdn.net\\/fengxinlinux\\/article\\/details\\/78722526)","html":"<p>\\u6709\\u90a3\\u4e48\\u4e00\\u4e9bC\\u51fd\\u6570\\uff0c\\u6211\\u4eec\\u5e38\\u89c1\\u5230\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u5f88\\u719f\\u6089\\uff0c\\u4f46\\u5230\\u60f3\\u81ea\\u5df1\\u52a8\\u624b\\u7528\\u65f6\\uff0c\\u5374\\u5f88\\u964c\\u751f\\u3002\\u8fd9\\u5c31\\u73b0\\u5b9e\\uff0c\\u4ee5\\u4e3a\\u81ea\\u5df1\\u4f1a\\u7684\\uff0c\\u4e8b\\u5b9e\\u53ef\\u80fd\\u672a\\u5fc5\\u4f60\\u80fd\\u505a\\u51fa\\u6765\\u3002\\u4ee5\\u540e\\uff0c\\u6211\\u4f1a\\u5728\\u8fd9\\u7f57\\u5217\\u51fa\\u5404\\u79cd\\u51fd\\u6570\\u3002<\\/p>\\n<ol>\\n<li>\\n<p>getc  <\\/p>\\n<blockquote>\\n<p>int getc(FILE *string)  -- <stdio.h><\\/p>\\n<\\/blockquote>\\n<p>getc \\u51fd\\u6570\\u4ece\\u6d41 stream \\u83b7\\u53d6\\u4e00\\u4e2a\\u5b57\\u7b26\\uff08\\u8fd4\\u56de\\u7684\\u662f\\u8be5\\u5b57\\u7b26\\u7684 ASCII \\u7801\\uff09\\u3002\\u5f53\\u5b83\\u5230\\u8fbe\\u6587\\u4ef6\\u5c3e\\u6216\\u51fa\\u73b0\\u9519\\u8bef\\u65f6\\uff0c\\u8fd4\\u56deEOF\\uff08\\u5728 stdio.h \\u4e2d\\u6709\\u5b9a\\u4e49\\uff1a#define EOF -1\\uff09<\\/p>\\n<\\/li>\\n<li>\\n<p>sscanf  <\\/p>\\n<blockquote>\\n<p>int sscanf(char *str, char *format [, argument, ...])  -- <stddef.h><\\/p>\\n<\\/blockquote>\\n<h5>\\u51fd\\u6570\\u8bf4\\u660e<\\/h5>\\n<p>\\u4ece\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\u4e2d\\u8bfb\\u53d6\\u4e0e\\u6307\\u5b9a\\u683c\\u5f0f\\u76f8\\u7b26\\u7684\\u6570\\u636e\\uff08\\u4ece\\u5b57\\u7b26\\u4e32\\u8bfb\\u53d6\\u683c\\u5f0f\\u5316\\u8f93\\u5165\\uff09\\u3002sscanf()\\u4f1a\\u5c06\\u53c2\\u6570str\\u7684\\u5b57\\u7b26\\u4e32\\u6839\\u636e\\u53c2\\u6570format\\u5b57\\u7b26\\u4e32\\u6765\\u8f6c\\u6362\\u5e76\\u683c\\u5f0f\\u5316\\u6570\\u636e\\u3002\\u683c\\u5f0f\\u8f6c\\u6362\\u5f62\\u5f0f\\u8bf7\\u53c2\\u8003scanf()\\u3002\\u8f6c\\u6362\\u540e\\u7684\\u7ed3\\u679c\\u5b58\\u4e8e\\u5bf9\\u5e94\\u7684\\u53c2\\u6570\\u5185\\u3002<\\/p>\\n<h5>\\u8fd4\\u56de\\u503c<\\/h5>\\n<p>\\u6210\\u529f\\u5219\\u8fd4\\u56de\\u53c2\\u6570\\u6570\\u76ee\\uff0c\\u5931\\u8d25\\u5219\\u8fd4\\u56de-1\\uff0c\\u9519\\u8bef\\u539f\\u56e0\\u5b58\\u4e8eerrno\\u4e2d\\u3002<\\/p>\\n<h5>\\u4ee3\\u7801\\u793a\\u4f8b<\\/h5>\\n<p>\\u66f4\\u591a\\u89c1\\uff1a[sscanf]();  <a href=\\"https:\\/\\/blog.csdn.net\\/fengxinlinux\\/article\\/details\\/78722526\\">C\\u8bed\\u8a00sscanf\\u51fd\\u6570\\u4f7f\\u7528\\u603b\\u7ed3<\\/a><\\/p>\\n<\\/li>\\n<\\/ol>"}',
                'page_image' => NULL,
                'meta_description' => '有那么一些C函数，我们常见到，所以我们很熟悉，但到想自己动手用时，却很陌生。这就现实，以为自己会的，事实可能未必你能做出来。以后，我会在这罗列出各种函数。',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 245,
                'published_at' => '2021-08-12 20:30:00',
                'created_at' => '2021-08-12 14:25:59',
                'updated_at' => '2022-01-09 07:56:20',
                'deleted_at' => NULL,
            ),
            23 => 
            array (
                'id' => 24,
                'category_id' => 14,
                'collection_id' => 0,
                'user_id' => 2,
                'last_user_id' => 1,
                'slug' => 'tcptransmission-control-protocol-26uqz',
            'title' => 'TCP(Transmission Control Protocol)',
                'subtitle' => 'Transmission Control Protocol',
            'content' => '{"raw":"### TCP(Transmission Control Protocol)\\u4f20\\u8f93\\u63a7\\u5236\\u534f\\u8bae\\n\\nTCP\\u662f\\u4e3b\\u673a\\u5bf9\\u4e3b\\u673a\\u5c42\\u7684\\u4f20\\u8f93\\u63a7\\u5236\\u534f\\u8bae\\uff0c\\u63d0\\u4f9b\\u53ef\\u9760\\u7684\\u8fde\\u63a5\\u670d\\u52a1\\u3002\\n\\n##### \\u5efa\\u7acb\\u8fde\\u63a5\\uff1a\\n\\n\\u4f4d\\u7801\\u5373tcp\\u6807\\u5fd7\\u4f4d\\uff0c\\u67096\\u79cd\\u6807\\u793a\\uff1a  \\n + SYN(synchronous\\u5efa\\u7acb\\u8054\\u673a) \\n + ACK(acknowledgement \\u786e\\u8ba4) \\n + PSH(push\\u4f20\\u9001) \\n + FIN(finish\\u7ed3\\u675f) \\n + RST(reset\\u91cd\\u7f6e) \\n + URG(urgent\\u7d27\\u6025)\\n + Sequence number(\\u987a\\u5e8f\\u53f7\\u7801) \\n + Acknowledge number(\\u786e\\u8ba4\\u53f7\\u7801)\\n\\n\\u91c7\\u7528\\u4e09\\u6b21\\u63e1\\u624b\\u786e\\u8ba4\\u5efa\\u7acb\\u4e00\\u4e2a\\u8fde\\u63a5  \\n\\n\\u7b2c\\u4e00\\u6b21\\u63e1\\u624b\\uff1a\\u4e3b\\u673aA\\u53d1\\u9001\\u4f4d\\u7801\\u4e3asyn\\uff1d1\\uff0c\\u968f\\u673a\\u4ea7\\u751fseq number=1234567\\u7684\\u6570\\u636e\\u5305\\u5230\\u670d\\u52a1\\u5668\\uff0c\\u4e3b\\u673aB\\u7531SYN=1\\u77e5\\u9053\\uff0cA\\u8981\\u6c42\\u5efa\\u7acb\\u8054\\u673a\\uff1b\\n\\n\\u7b2c\\u4e8c\\u6b21\\u63e1\\u624b\\uff1a\\u4e3b\\u673aB\\u6536\\u5230\\u8bf7\\u6c42\\u540e\\u8981\\u786e\\u8ba4\\u8054\\u673a\\u4fe1\\u606f\\uff0c\\u5411A\\u53d1\\u9001ack number=(\\u4e3b\\u673aA\\u7684seq+1)\\uff0csyn=1\\uff0cack=1\\uff0c\\u968f\\u673a\\u4ea7\\u751fseq=7654321\\u7684\\u5305\\uff1b\\n\\n\\u7b2c\\u4e09\\u6b21\\u63e1\\u624b\\uff1a\\u4e3b\\u673aA\\u6536\\u5230\\u540e\\u68c0\\u67e5ack number\\u662f\\u5426\\u6b63\\u786e\\uff0c\\u5373\\u7b2c\\u4e00\\u6b21\\u53d1\\u9001\\u7684seq number+1\\uff0c\\u4ee5\\u53ca\\u4f4d\\u7801ack\\u662f\\u5426\\u4e3a1\\uff0c\\u82e5\\u6b63\\u786e\\uff0c\\u4e3b\\u673aA\\u4f1a\\u518d\\u53d1\\u9001ack number=(\\u4e3b\\u673aB\\u7684seq+1)\\uff0cack=1\\uff0c\\u4e3b\\u673aB\\u6536\\u5230\\u540e\\u786e\\u8ba4seq\\u503c\\u4e0eack=1\\u5219\\u8fde\\u63a5\\u5efa\\u7acb\\u6210\\u529f\\u3002\\n\\n\\n##### \\u65ad\\u5f00\\u8fde\\u63a5","html":"<h3>TCP(Transmission Control Protocol)\\u4f20\\u8f93\\u63a7\\u5236\\u534f\\u8bae<\\/h3>\\n<p>TCP\\u662f\\u4e3b\\u673a\\u5bf9\\u4e3b\\u673a\\u5c42\\u7684\\u4f20\\u8f93\\u63a7\\u5236\\u534f\\u8bae\\uff0c\\u63d0\\u4f9b\\u53ef\\u9760\\u7684\\u8fde\\u63a5\\u670d\\u52a1\\u3002<\\/p>\\n<h5>\\u5efa\\u7acb\\u8fde\\u63a5\\uff1a<\\/h5>\\n<p>\\u4f4d\\u7801\\u5373tcp\\u6807\\u5fd7\\u4f4d\\uff0c\\u67096\\u79cd\\u6807\\u793a\\uff1a  <\\/p>\\n<ul>\\n<li>SYN(synchronous\\u5efa\\u7acb\\u8054\\u673a) <\\/li>\\n<li>ACK(acknowledgement \\u786e\\u8ba4) <\\/li>\\n<li>PSH(push\\u4f20\\u9001) <\\/li>\\n<li>FIN(finish\\u7ed3\\u675f) <\\/li>\\n<li>RST(reset\\u91cd\\u7f6e) <\\/li>\\n<li>URG(urgent\\u7d27\\u6025)<\\/li>\\n<li>Sequence number(\\u987a\\u5e8f\\u53f7\\u7801) <\\/li>\\n<li>Acknowledge number(\\u786e\\u8ba4\\u53f7\\u7801)<\\/li>\\n<\\/ul>\\n<p>\\u91c7\\u7528\\u4e09\\u6b21\\u63e1\\u624b\\u786e\\u8ba4\\u5efa\\u7acb\\u4e00\\u4e2a\\u8fde\\u63a5  <\\/p>\\n<p>\\u7b2c\\u4e00\\u6b21\\u63e1\\u624b\\uff1a\\u4e3b\\u673aA\\u53d1\\u9001\\u4f4d\\u7801\\u4e3asyn\\uff1d1\\uff0c\\u968f\\u673a\\u4ea7\\u751fseq number=1234567\\u7684\\u6570\\u636e\\u5305\\u5230\\u670d\\u52a1\\u5668\\uff0c\\u4e3b\\u673aB\\u7531SYN=1\\u77e5\\u9053\\uff0cA\\u8981\\u6c42\\u5efa\\u7acb\\u8054\\u673a\\uff1b<\\/p>\\n<p>\\u7b2c\\u4e8c\\u6b21\\u63e1\\u624b\\uff1a\\u4e3b\\u673aB\\u6536\\u5230\\u8bf7\\u6c42\\u540e\\u8981\\u786e\\u8ba4\\u8054\\u673a\\u4fe1\\u606f\\uff0c\\u5411A\\u53d1\\u9001ack number=(\\u4e3b\\u673aA\\u7684seq+1)\\uff0csyn=1\\uff0cack=1\\uff0c\\u968f\\u673a\\u4ea7\\u751fseq=7654321\\u7684\\u5305\\uff1b<\\/p>\\n<p>\\u7b2c\\u4e09\\u6b21\\u63e1\\u624b\\uff1a\\u4e3b\\u673aA\\u6536\\u5230\\u540e\\u68c0\\u67e5ack number\\u662f\\u5426\\u6b63\\u786e\\uff0c\\u5373\\u7b2c\\u4e00\\u6b21\\u53d1\\u9001\\u7684seq number+1\\uff0c\\u4ee5\\u53ca\\u4f4d\\u7801ack\\u662f\\u5426\\u4e3a1\\uff0c\\u82e5\\u6b63\\u786e\\uff0c\\u4e3b\\u673aA\\u4f1a\\u518d\\u53d1\\u9001ack number=(\\u4e3b\\u673aB\\u7684seq+1)\\uff0cack=1\\uff0c\\u4e3b\\u673aB\\u6536\\u5230\\u540e\\u786e\\u8ba4seq\\u503c\\u4e0eack=1\\u5219\\u8fde\\u63a5\\u5efa\\u7acb\\u6210\\u529f\\u3002<\\/p>\\n<h5>\\u65ad\\u5f00\\u8fde\\u63a5<\\/h5>"}',
                'page_image' => NULL,
                'meta_description' => 'Transmission Control Protocol 是主机对主机层的传输控制协议，提供可靠的连接服务。',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 55,
                'published_at' => '2021-08-17 17:23:00',
                'created_at' => '2021-08-18 00:19:24',
                'updated_at' => '2022-01-09 10:04:59',
                'deleted_at' => NULL,
            ),
            24 => 
            array (
                'id' => 25,
                'category_id' => 15,
                'collection_id' => 4,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'array-ny42y',
                'title' => '数组（Array）',
                'subtitle' => '什么是数组，各编程语言的数组是指的同一个数组概念吗',
            'content' => '{"raw":"**\\u6570\\u7ec4\\uff08Array\\uff09**\\u662f\\u4e00\\u79cd\\u7ebf\\u6027\\u8868\\u6570\\u636e\\u7ed3\\u6784\\u3002\\u5b83\\u7528\\u4e00\\u7ec4\\u8fde\\u7eed\\u7684\\u5185\\u5b58\\u7a7a\\u95f4\\uff0c\\u6765\\u5b58\\u50a8\\u4e00\\u7ec4\\u5177\\u6709\\u76f8\\u540c\\u7c7b\\u578b\\u7684\\u6570\\u636e\\u3002\\u4ece\\u6570\\u7ec4\\u5b9a\\u4e49\\u6765\\u770b\\uff0c\\u5176\\u6709\\u4e24\\u4e2a\\u8981\\u7d20\\uff1a\\n* \\u7ebf\\u6027\\u8868\\n*  \\u8fde\\u7eed\\u7684\\u5185\\u5b58\\u7a7a\\u95f4\\u4e0e\\u76f8\\u540c\\u7c7b\\u578b\\u7684\\u6570\\u636e\\n\\n\\u800c\\u6b63\\u56e0\\u4e3a\\u8fd9\\u4e24\\u4e2a\\u9650\\u5236\\uff0c\\u6570\\u7ec4\\u624d\\u6709\\u4e86\\u4e00\\u4e2a\\u582a\\u79f0\\u201c\\u6740\\u624b\\u950f\\u201d\\u7684\\u7279\\u6027\\uff1a\\u201c\\u968f\\u673a\\u8bbf\\u95ee\\u201d\\uff1b\\u6570\\u7ec4\\u4e3a\\u4e86\\u80fd\\u4fdd\\u5b58\\u5185\\u5b58\\u6570\\u636e\\u7684\\u8fde\\u7eed\\u6027\\uff0c\\u4f1a\\u5bfc\\u81f4\\u63d2\\u5165\\u3001\\u5220\\u9664\\u4e24\\u4e2a\\u64cd\\u4f5c\\u6bd4\\u8f83\\u4f4e\\u6548\\u3002\\n\\n\\u8003\\u9898\\uff1a\\n  \\u6570\\u7ec4\\u548c\\u94fe\\u8868\\u7684\\u533a\\u522b\\uff1f\\n+ \\u4e0d\\u6070\\u5f53\\u56de\\u7b54\\uff1a\\u94fe\\u8868\\u9002\\u5408\\u63d2\\u5165\\u3001\\u5220\\u9664\\uff0c\\u65f6\\u95f4\\u590d\\u6742\\u5ea6O(1)\\uff1b\\u6570\\u7ec4\\u9002\\u5408\\u67e5\\u627e\\uff0c\\u67e5\\u627e\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e3aO(1)\\u3002\\n\\uff08\\u4e0a\\u8ff0\\u662f\\u4e0d\\u51c6\\u786e\\u7684\\uff1a\\u6570\\u7ec4\\u662f\\u9002\\u5408\\u67e5\\u627e\\u64cd\\u4f5c\\uff0c\\u4f46\\u662f\\u67e5\\u627e\\u7684\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u5e76\\u4e0d\\u4e3aO(1)\\u3002\\u5373\\u4fbf\\u662f\\u6392\\u5e8f\\u7684\\u6570\\u7ec4\\uff0c\\u7528\\u4e8c\\u5206\\u67e5\\u627e\\uff0c\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e5f\\u662fO(logn) \\uff09\\n+ \\u6b63\\u786e\\u56de\\u7b54\\u662f\\uff0c\\u6570\\u7ec4\\u652f\\u6301\\u968f\\u673a\\u8bbf\\u95ee\\uff0c\\u6839\\u636e\\u4e0b\\u6807\\u968f\\u673a\\u8bbf\\u95ee\\u7684\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e3a O(1)","html":"<p><strong>\\u6570\\u7ec4\\uff08Array\\uff09<\\/strong>\\u662f\\u4e00\\u79cd\\u7ebf\\u6027\\u8868\\u6570\\u636e\\u7ed3\\u6784\\u3002\\u5b83\\u7528\\u4e00\\u7ec4\\u8fde\\u7eed\\u7684\\u5185\\u5b58\\u7a7a\\u95f4\\uff0c\\u6765\\u5b58\\u50a8\\u4e00\\u7ec4\\u5177\\u6709\\u76f8\\u540c\\u7c7b\\u578b\\u7684\\u6570\\u636e\\u3002\\u4ece\\u6570\\u7ec4\\u5b9a\\u4e49\\u6765\\u770b\\uff0c\\u5176\\u6709\\u4e24\\u4e2a\\u8981\\u7d20\\uff1a<\\/p>\\n<ul>\\n<li>\\u7ebf\\u6027\\u8868<\\/li>\\n<li>\\u8fde\\u7eed\\u7684\\u5185\\u5b58\\u7a7a\\u95f4\\u4e0e\\u76f8\\u540c\\u7c7b\\u578b\\u7684\\u6570\\u636e<\\/li>\\n<\\/ul>\\n<p>\\u800c\\u6b63\\u56e0\\u4e3a\\u8fd9\\u4e24\\u4e2a\\u9650\\u5236\\uff0c\\u6570\\u7ec4\\u624d\\u6709\\u4e86\\u4e00\\u4e2a\\u582a\\u79f0\\u201c\\u6740\\u624b\\u950f\\u201d\\u7684\\u7279\\u6027\\uff1a\\u201c\\u968f\\u673a\\u8bbf\\u95ee\\u201d\\uff1b\\u6570\\u7ec4\\u4e3a\\u4e86\\u80fd\\u4fdd\\u5b58\\u5185\\u5b58\\u6570\\u636e\\u7684\\u8fde\\u7eed\\u6027\\uff0c\\u4f1a\\u5bfc\\u81f4\\u63d2\\u5165\\u3001\\u5220\\u9664\\u4e24\\u4e2a\\u64cd\\u4f5c\\u6bd4\\u8f83\\u4f4e\\u6548\\u3002<\\/p>\\n<p>\\u8003\\u9898\\uff1a<br \\/>\\n\\u6570\\u7ec4\\u548c\\u94fe\\u8868\\u7684\\u533a\\u522b\\uff1f<\\/p>\\n<ul>\\n<li>\\u4e0d\\u6070\\u5f53\\u56de\\u7b54\\uff1a\\u94fe\\u8868\\u9002\\u5408\\u63d2\\u5165\\u3001\\u5220\\u9664\\uff0c\\u65f6\\u95f4\\u590d\\u6742\\u5ea6O(1)\\uff1b\\u6570\\u7ec4\\u9002\\u5408\\u67e5\\u627e\\uff0c\\u67e5\\u627e\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e3aO(1)\\u3002<br \\/>\\n\\uff08\\u4e0a\\u8ff0\\u662f\\u4e0d\\u51c6\\u786e\\u7684\\uff1a\\u6570\\u7ec4\\u662f\\u9002\\u5408\\u67e5\\u627e\\u64cd\\u4f5c\\uff0c\\u4f46\\u662f\\u67e5\\u627e\\u7684\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u5e76\\u4e0d\\u4e3aO(1)\\u3002\\u5373\\u4fbf\\u662f\\u6392\\u5e8f\\u7684\\u6570\\u7ec4\\uff0c\\u7528\\u4e8c\\u5206\\u67e5\\u627e\\uff0c\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e5f\\u662fO(logn) \\uff09<\\/li>\\n<li>\\u6b63\\u786e\\u56de\\u7b54\\u662f\\uff0c\\u6570\\u7ec4\\u652f\\u6301\\u968f\\u673a\\u8bbf\\u95ee\\uff0c\\u6839\\u636e\\u4e0b\\u6807\\u968f\\u673a\\u8bbf\\u95ee\\u7684\\u65f6\\u95f4\\u590d\\u6742\\u5ea6\\u4e3a O(1)<\\/li>\\n<\\/ul>"}',
                'page_image' => NULL,
                'meta_description' => NULL,
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 198,
                'published_at' => '2021-09-20 12:00:00',
                'created_at' => '2021-09-20 13:16:53',
                'updated_at' => '2022-01-09 07:56:20',
                'deleted_at' => NULL,
            ),
            25 => 
            array (
                'id' => 26,
                'category_id' => 12,
                'collection_id' => 2,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'redis-skiplist-2ywpo',
                'title' => 'redis -- 跳跃表（skiplist）',
                'subtitle' => 'redis 没有使用红黑树，而是使用同等时间复杂度的跳跃表，今个我们就把这部分实现从redis中拆解出来',
            'content' => '{"raw":"\\u5728 redis \\u76845\\u5927\\u6570\\u636e\\u7ed3\\u6784\\u4e2d\\uff0c\\u8df3\\u8dc3\\u8868\\u53ea\\u8fd0\\u7528\\u4e8e\\u6709\\u5e8f\\u96c6\\uff08zset\\uff09\\u4e24\\u79cd\\u7f16\\u7801\\u5b9e\\u73b0\\u4e2d\\u4e00\\u79cd skiplist\\uff08\\u5b57\\u5178 +  \\u8df3\\u8dc3\\u8868\\uff09\\u3002\\u65e2\\u7136\\u662f\\u6570\\u636e\\u7ed3\\u6784\\u4e2d\\u4e00\\u79cd\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u6709\\u5c31\\u5fc5\\u8981\\u4e00\\u63a2\\u7a76\\u7adf\\uff0c\\u66f4\\u4f55\\u51b5\\u662f\\u5df2\\u7ecf\\u662f\\u540d\\u58f0\\u5728\\u5916\\u7684\\u8df3\\u8dc3\\u8868\\u3002\\n\\n\\u8df3\\u8dc3\\u8868\\u5728\\u8ba1\\u7b97\\u673a\\u6559\\u6750\\u4e2d\\uff0c\\u5e76\\u672a\\u88ab\\u63d0\\u53ca\\u5230\\uff0c\\u4e0d\\u514d\\u8fd8\\u6709\\u4e9b\\u4eba\\u4e0d\\u77e5\\u9053\\u3002\\u5982\\u679c\\u8fd8\\u4e0d\\u77e5\\u9053\\u4ec0\\u4e48\\u662f\\u8df3\\u8dc3\\u8868\\uff08\\u53c8\\u7b80\\u79f0\\uff1a\\u8df3\\u8868\\uff09\\uff0c\\u8bf7\\u67e5\\u770b** wiki\\uff08[\\u8df3\\u8dc3\\u5217\\u8868](https:\\/\\/zh.wikipedia.org\\/wiki\\/%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8)\\uff09**\\u3002\\n\\n\\u672c\\u535a\\u6587\\u4e2d\\u7684\\u8df3\\u8dc3\\u8868\\u4ee3\\u7801\\u6587\\u4ef6\\uff1askiplist.h\\u3001skiplist.c \\uff0c\\u662f\\u535a\\u4e3b\\u65b0\\u521b\\u5efa\\u3002\\u5b83\\u4eec\\u5206\\u522b\\u62bd\\u53d6\\u4e8e server.h\\u3001t_zset.c\\u3002\\u5982\\u679c\\u4f60\\u8981\\u4eb2\\u624b\\u4ece redis 6.2 \\u7248\\u672c\\u4ee3\\u7801\\u4e2d\\u62bd\\u53d6\\u4ee3\\u7801\\uff0c\\u8bf7\\u6ce8\\u610f\\uff1aredis.h \\u4e2d\\u7684 zskiplist \\u7ed3\\u6784\\u548c zskiplistNode \\u7ed3\\u6784\\uff0c \\u4ee5\\u53ca t_zset.c \\u4e2d\\u6240\\u6709\\u4ee5 zsl \\u5f00\\u5934\\u7684\\u51fd\\u6570\\uff0c \\u6bd4\\u5982 zslCreate \\u3001 zslInsert \\u3001 zslDeleteNode \\uff0c\\u7b49\\u7b49\\u3002\\u5728\\u628a\\u8981\\u62bd\\u53d6\\u7684\\u4ee3\\u7801\\u90fd\\u590d\\u5236\\u5230 skiplist.h\\u3001skiplist.c \\u6587\\u4ef6\\u91cc\\u540e\\uff0c\\u8fdb\\u884c\\u4e00\\u67e5\\u7f3a\\u8865\\u6f0f\\u540e\\uff0c\\u6700\\u540e\\u5b9a\\u4f4d skiplist.h \\u8981\\u4f9d\\u8d56 sds.h\\u3001dict.h \\u5934\\u6587\\u4ef6\\uff0c\\u4e8e\\u662f\\u4e5f\\u628a 01-SDS \\u4e0e 02-adlist \\u6e90\\u4ee3\\u7801\\u90fd\\u52a0\\u8f7d\\u8fdb\\u6765\\uff0c\\u5f62\\u6210\\u5982\\u4e0b\\u6587\\u4ef6\\u5217\\u8868\\uff1a\\n![image.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/09\\/20\\/lnHkz7JSZsr4q621TtR6DRAo1Q49a8t10d0yDIYA.png)\\n\\n\\u6587\\u4ef6\\u5217\\u8868\\u4e2d\\uff0c\\u53e6\\u5916\\u6dfb\\u52a0\\u7684\\u6587\\u4ef6\\u6709\\uff1a\\n1. README.md -- \\u8df3\\u8dc3\\u8868\\u4e0e Redis \\u5173\\u7cfb\\u7684\\u8bf4\\u660e\\n2. makefile -- \\u751f\\u6210\\u9759\\u6001\\u5e93\\u4e0e gccr \\u547d\\u4ee4\\u811a\\u672c\\n3. test-skiplist -- \\u8df3\\u8dc3\\u8868\\u63a5\\u53e3\\u7684\\u6d4b\\u8bd5\\n\\n### \\u7f16\\u5199 makefile\\n```\\nCC  := gcc\\nCFLAGS  := -g -I. $(CCFLAGS)\\nSRCS    := $(wildcard *.c) # \\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u7684\\u6240\\u6709\\u7684.c\\u6587\\u4ef6 \\nOBJS    := $(SRCS:.c=.o) # \\u5c06\\u6240\\u6709\\u7684.c\\u6587\\u4ef6\\u540d\\u66ff\\u6362\\u4e3a.o\\nREDISLIB \\t:= libredis.a\\n\\nall:$(REDISLIB) gccr\\n\\n# ***************************************************************\\n# C compilations\\nmt19937.o: mt19937.c mt19937.h\\n\\t$(CC) $(CFLAGS) -c mt19937.c\\n\\nredisassert.o: redisassert.c redisassert.h\\n\\t$(CC) $(CFLAGS) -c redisassert.c\\n\\nsds.o: sds.c sds.h\\n\\t$(CC) $(CFLAGS) -c sds.c\\n\\nzmalloc.o: zmalloc.c zmalloc.h\\n\\t$(CC) $(CFLAGS) -c zmalloc.c\\n\\ndict.o: dict.c dict.h  siphash.c\\n\\t$(CC) $(CFLAGS) -c dict.c\\n\\nskiplist.o: skiplist.c skiplist.h\\n\\t$(CC) $(CFLAGS) -c skiplist.c\\n\\n$(REDISLIB):$(OBJS)\\n\\t-rm -f $(REDISLIB)\\n\\tar cr $(REDISLIB) $(OBJS)\\n\\tranlib $(REDISLIB)\\n\\n# ***************************************************************\\n# Entry to reconstruct the gccr script\\n\\ngccr: makefile\\n\\t@echo \'#! \\/bin\\/csh -f\' > gccr\\n\\t@echo \'set INCLUDE =\' `pwd` >> gccr\\n\\t@echo \'set REDISLIB = $$INCLUDE\\/libredis.a\' >> gccr\\n\\t@echo \'set LIBRARIES = $$REDISLIB\' >> gccr\\n\\t@echo \'foreach x ($$*)\' >> gccr\\n\\t@echo \'  if (\\"x$$x\\" == \\"x-c\\") then\' >> gccr\\n\\t@echo \'    set LIBRARIES = \\"\\"\' >> gccr\\n\\t@echo \'    break\' >> gccr\\n\\t@echo \'  endif\' >> gccr\\n\\t@echo \'end\' >> gccr\\n\\t@echo \'gcc -g -I$$INCLUDE $$* $$LIBRARIES\' >> gccr\\n\\t@chmod a+x gccr\\n\\t@echo \'[gccr script created]\'\\n\\nclean:\\n\\trm -f *.o\\n\\trm -f $(BINS)\\n\\trm -f $(REDISLIB)\\n\\trm -f gccr\\n```\\n\\nmakefile \\u662f\\u6211\\u4eec\\u6bcf\\u6b21\\u628a\\u8981\\u62bd\\u53d6\\u7684\\u4ee3\\u7801\\u5b8c\\u6210\\u540e\\uff0c\\u91cd\\u70b9\\u8981\\u7f16\\u5199\\u7684\\u6587\\u4ef6\\uff0c\\u6240\\u4ee5\\u5982\\u679c\\u6ca1\\u80fd\\u638c\\u63e1 makefile \\u6587\\u4ef6\\u7684\\u5c0f\\u4f19\\u4f34\\u4eec\\u5f97\\u52a0\\u628a\\u52b2\\uff0c\\u81f3\\u5c11\\u80fd\\u505a\\u5230\\u4f9d\\u846b\\u82a6\\u753b\\u74e2\\uff0c\\u8fd9\\u6837\\u4f60\\u5c31\\u80fd\\u62c6\\u89e3\\u4ee3\\u7801\\u81ea\\u5df1\\u628a\\u9759\\u6001\\u5e93\\u751f\\u6210\\u51fa\\u6765\\u3002\\n\\n\\u628a makefile \\u6587\\u4ef6\\u505a\\u597d\\u540e\\uff0c\\u5728 04-skiplist \\u76ee\\u5f55\\u4e0b\\u6267\\u884c `make` \\u547d\\u4ee4\\uff0c\\u521b\\u5efa\\u51fa libredis.a \\u9759\\u6001\\u5e93\\u6587\\u4ef6\\u4e0e gccr \\u811a\\u672c\\u6587\\u4ef6\\u3002\\n\\n### \\u8df3\\u8dc3\\u8868\\u7684\\u63a5\\u53e3\\u6d4b\\u8bd5","html":"<p>\\u5728 redis \\u76845\\u5927\\u6570\\u636e\\u7ed3\\u6784\\u4e2d\\uff0c\\u8df3\\u8dc3\\u8868\\u53ea\\u8fd0\\u7528\\u4e8e\\u6709\\u5e8f\\u96c6\\uff08zset\\uff09\\u4e24\\u79cd\\u7f16\\u7801\\u5b9e\\u73b0\\u4e2d\\u4e00\\u79cd skiplist\\uff08\\u5b57\\u5178 +  \\u8df3\\u8dc3\\u8868\\uff09\\u3002\\u65e2\\u7136\\u662f\\u6570\\u636e\\u7ed3\\u6784\\u4e2d\\u4e00\\u79cd\\uff0c\\u90a3\\u4e48\\u6211\\u4eec\\u6709\\u5c31\\u5fc5\\u8981\\u4e00\\u63a2\\u7a76\\u7adf\\uff0c\\u66f4\\u4f55\\u51b5\\u662f\\u5df2\\u7ecf\\u662f\\u540d\\u58f0\\u5728\\u5916\\u7684\\u8df3\\u8dc3\\u8868\\u3002<\\/p>\\n<p>\\u8df3\\u8dc3\\u8868\\u5728\\u8ba1\\u7b97\\u673a\\u6559\\u6750\\u4e2d\\uff0c\\u5e76\\u672a\\u88ab\\u63d0\\u53ca\\u5230\\uff0c\\u4e0d\\u514d\\u8fd8\\u6709\\u4e9b\\u4eba\\u4e0d\\u77e5\\u9053\\u3002\\u5982\\u679c\\u8fd8\\u4e0d\\u77e5\\u9053\\u4ec0\\u4e48\\u662f\\u8df3\\u8dc3\\u8868\\uff08\\u53c8\\u7b80\\u79f0\\uff1a\\u8df3\\u8868\\uff09\\uff0c\\u8bf7\\u67e5\\u770b<strong> wiki\\uff08<a href=\\"https:\\/\\/zh.wikipedia.org\\/wiki\\/%E8%B7%B3%E8%B7%83%E5%88%97%E8%A1%A8\\">\\u8df3\\u8dc3\\u5217\\u8868<\\/a>\\uff09<\\/strong>\\u3002<\\/p>\\n<p>\\u672c\\u535a\\u6587\\u4e2d\\u7684\\u8df3\\u8dc3\\u8868\\u4ee3\\u7801\\u6587\\u4ef6\\uff1askiplist.h\\u3001skiplist.c \\uff0c\\u662f\\u535a\\u4e3b\\u65b0\\u521b\\u5efa\\u3002\\u5b83\\u4eec\\u5206\\u522b\\u62bd\\u53d6\\u4e8e server.h\\u3001t_zset.c\\u3002\\u5982\\u679c\\u4f60\\u8981\\u4eb2\\u624b\\u4ece redis 6.2 \\u7248\\u672c\\u4ee3\\u7801\\u4e2d\\u62bd\\u53d6\\u4ee3\\u7801\\uff0c\\u8bf7\\u6ce8\\u610f\\uff1aredis.h \\u4e2d\\u7684 zskiplist \\u7ed3\\u6784\\u548c zskiplistNode \\u7ed3\\u6784\\uff0c \\u4ee5\\u53ca t_zset.c \\u4e2d\\u6240\\u6709\\u4ee5 zsl \\u5f00\\u5934\\u7684\\u51fd\\u6570\\uff0c \\u6bd4\\u5982 zslCreate \\u3001 zslInsert \\u3001 zslDeleteNode \\uff0c\\u7b49\\u7b49\\u3002\\u5728\\u628a\\u8981\\u62bd\\u53d6\\u7684\\u4ee3\\u7801\\u90fd\\u590d\\u5236\\u5230 skiplist.h\\u3001skiplist.c \\u6587\\u4ef6\\u91cc\\u540e\\uff0c\\u8fdb\\u884c\\u4e00\\u67e5\\u7f3a\\u8865\\u6f0f\\u540e\\uff0c\\u6700\\u540e\\u5b9a\\u4f4d skiplist.h \\u8981\\u4f9d\\u8d56 sds.h\\u3001dict.h \\u5934\\u6587\\u4ef6\\uff0c\\u4e8e\\u662f\\u4e5f\\u628a 01-SDS \\u4e0e 02-adlist \\u6e90\\u4ee3\\u7801\\u90fd\\u52a0\\u8f7d\\u8fdb\\u6765\\uff0c\\u5f62\\u6210\\u5982\\u4e0b\\u6587\\u4ef6\\u5217\\u8868\\uff1a<br \\/>\\n<img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/09\\/20\\/lnHkz7JSZsr4q621TtR6DRAo1Q49a8t10d0yDIYA.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<p>\\u6587\\u4ef6\\u5217\\u8868\\u4e2d\\uff0c\\u53e6\\u5916\\u6dfb\\u52a0\\u7684\\u6587\\u4ef6\\u6709\\uff1a<\\/p>\\n<ol>\\n<li>README.md -- \\u8df3\\u8dc3\\u8868\\u4e0e Redis \\u5173\\u7cfb\\u7684\\u8bf4\\u660e<\\/li>\\n<li>makefile -- \\u751f\\u6210\\u9759\\u6001\\u5e93\\u4e0e gccr \\u547d\\u4ee4\\u811a\\u672c<\\/li>\\n<li>test-skiplist -- \\u8df3\\u8dc3\\u8868\\u63a5\\u53e3\\u7684\\u6d4b\\u8bd5<\\/li>\\n<\\/ol>\\n<h3>\\u7f16\\u5199 makefile<\\/h3>\\n<pre><code>CC  := gcc\\nCFLAGS  := -g -I. $(CCFLAGS)\\nSRCS    := $(wildcard *.c) # \\u5f53\\u524d\\u76ee\\u5f55\\u4e0b\\u7684\\u6240\\u6709\\u7684.c\\u6587\\u4ef6 \\nOBJS    := $(SRCS:.c=.o) # \\u5c06\\u6240\\u6709\\u7684.c\\u6587\\u4ef6\\u540d\\u66ff\\u6362\\u4e3a.o\\nREDISLIB    := libredis.a\\n\\nall:$(REDISLIB) gccr\\n\\n# ***************************************************************\\n# C compilations\\nmt19937.o: mt19937.c mt19937.h\\n    $(CC) $(CFLAGS) -c mt19937.c\\n\\nredisassert.o: redisassert.c redisassert.h\\n    $(CC) $(CFLAGS) -c redisassert.c\\n\\nsds.o: sds.c sds.h\\n    $(CC) $(CFLAGS) -c sds.c\\n\\nzmalloc.o: zmalloc.c zmalloc.h\\n    $(CC) $(CFLAGS) -c zmalloc.c\\n\\ndict.o: dict.c dict.h  siphash.c\\n    $(CC) $(CFLAGS) -c dict.c\\n\\nskiplist.o: skiplist.c skiplist.h\\n    $(CC) $(CFLAGS) -c skiplist.c\\n\\n$(REDISLIB):$(OBJS)\\n    -rm -f $(REDISLIB)\\n    ar cr $(REDISLIB) $(OBJS)\\n    ranlib $(REDISLIB)\\n\\n# ***************************************************************\\n# Entry to reconstruct the gccr script\\n\\ngccr: makefile\\n    @echo \'#! \\/bin\\/csh -f\' &gt; gccr\\n    @echo \'set INCLUDE =\' `pwd` &gt;&gt; gccr\\n    @echo \'set REDISLIB = $$INCLUDE\\/libredis.a\' &gt;&gt; gccr\\n    @echo \'set LIBRARIES = $$REDISLIB\' &gt;&gt; gccr\\n    @echo \'foreach x ($$*)\' &gt;&gt; gccr\\n    @echo \'  if (\\"x$$x\\" == \\"x-c\\") then\' &gt;&gt; gccr\\n    @echo \'    set LIBRARIES = \\"\\"\' &gt;&gt; gccr\\n    @echo \'    break\' &gt;&gt; gccr\\n    @echo \'  endif\' &gt;&gt; gccr\\n    @echo \'end\' &gt;&gt; gccr\\n    @echo \'gcc -g -I$$INCLUDE $$* $$LIBRARIES\' &gt;&gt; gccr\\n    @chmod a+x gccr\\n    @echo \'[gccr script created]\'\\n\\nclean:\\n    rm -f *.o\\n    rm -f $(BINS)\\n    rm -f $(REDISLIB)\\n    rm -f gccr<\\/code><\\/pre>\\n<p>makefile \\u662f\\u6211\\u4eec\\u6bcf\\u6b21\\u628a\\u8981\\u62bd\\u53d6\\u7684\\u4ee3\\u7801\\u5b8c\\u6210\\u540e\\uff0c\\u91cd\\u70b9\\u8981\\u7f16\\u5199\\u7684\\u6587\\u4ef6\\uff0c\\u6240\\u4ee5\\u5982\\u679c\\u6ca1\\u80fd\\u638c\\u63e1 makefile \\u6587\\u4ef6\\u7684\\u5c0f\\u4f19\\u4f34\\u4eec\\u5f97\\u52a0\\u628a\\u52b2\\uff0c\\u81f3\\u5c11\\u80fd\\u505a\\u5230\\u4f9d\\u846b\\u82a6\\u753b\\u74e2\\uff0c\\u8fd9\\u6837\\u4f60\\u5c31\\u80fd\\u62c6\\u89e3\\u4ee3\\u7801\\u81ea\\u5df1\\u628a\\u9759\\u6001\\u5e93\\u751f\\u6210\\u51fa\\u6765\\u3002<\\/p>\\n<p>\\u628a makefile \\u6587\\u4ef6\\u505a\\u597d\\u540e\\uff0c\\u5728 04-skiplist \\u76ee\\u5f55\\u4e0b\\u6267\\u884c <code>make<\\/code> \\u547d\\u4ee4\\uff0c\\u521b\\u5efa\\u51fa libredis.a \\u9759\\u6001\\u5e93\\u6587\\u4ef6\\u4e0e gccr \\u811a\\u672c\\u6587\\u4ef6\\u3002<\\/p>\\n<h3>\\u8df3\\u8dc3\\u8868\\u7684\\u63a5\\u53e3\\u6d4b\\u8bd5<\\/h3>"}',
                'page_image' => NULL,
                'meta_description' => 'redis 没有使用红黑树，而是使用同等时间复杂度的跳跃表，这是为什么呢',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 66,
                'published_at' => '2021-09-20 21:30:00',
                'created_at' => '2021-09-20 22:09:24',
                'updated_at' => '2022-01-09 06:29:40',
                'deleted_at' => NULL,
            ),
            26 => 
            array (
                'id' => 27,
                'category_id' => 16,
                'collection_id' => 9,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'lab-1-booting-a-pc-cqox0',
                'title' => 'Lab 1: Booting a PC',
                'subtitle' => 'Lab 1: Booting a PC',
            'content' => '{"raw":"# Lab 1: Booting a PC\\nDue  Thersday, September 13, 2018\\n\\n## \\u7b80\\u4ecb\\n\\u8fd9\\u4e2a\\u5b9e\\u9a8c\\u5206\\u4e3a\\u4e09\\u4e2a\\u90e8\\u5206\\uff1a\\n1.  \\u7b2c\\u4e00\\u90e8\\u5206\\u4e13\\u6ce8\\u4e8e\\u719f\\u6089 x86 \\u6c47\\u7f16\\u8bed\\u8a00\\u3001QEMU x86 \\u4eff\\u771f\\u5668\\u548c PC \\u7684\\u5f00\\u673a\\u5f15\\u5bfc\\u7a0b\\u5e8f\\u3002\\n2.  \\u7b2c\\u4e8c\\u90e8\\u5206\\u68c0\\u67e5\\u6211\\u4eec 6.828 \\u5185\\u6838\\u7684\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\uff0c\\u5b83\\u4f4d\\u4e8e lab \\u76ee\\u5f55\\u4e0b\\u7684 boot \\u6587\\u4ef6\\u5939\\u4e0b\\n3.  \\u7b2c\\u4e09\\u90e8\\u5206\\u6df1\\u5165\\u63a2\\u8ba8\\u4e86\\u6211\\u4eec 6.828 \\u5185\\u6838\\u672c\\u8eab\\u521d\\u59cb\\u6a21\\u677f\\uff0c\\u540d\\u4e3a JOS\\uff0c\\u5b83\\u4f4d\\u4e8e kernel \\u76ee\\u5f55\\u4e0b\\n\\n## \\u8f6f\\u4ef6\\u8bbe\\u7f6e\\n\\u60a8\\u5728\\u672c\\u8bfe\\u7a0b\\u4e2d\\u548c\\u540e\\u7eed\\u5b9e\\u9a8c\\u8fc7\\u7a0b\\u4e2d\\u6240\\u9700\\u7684\\u6587\\u4ef6\\u662f\\u4f7f\\u7528 Git \\u7248\\u672c\\u63a7\\u5236\\u7cfb\\u7edf\\u5206\\u53d1\\u7684\\u3002\\u8981\\u4e86\\u89e3\\u6709\\u5173 Git \\u7684\\u66f4\\u591a\\u4fe1\\u606f\\uff0c\\u8bf7\\u67e5\\u770b** [Git \\u7528\\u6237\\u624b\\u518c](http:\\/\\/www.kernel.org\\/pub\\/software\\/scm\\/git\\/docs\\/user-manual.html)**\\uff0c\\u6216\\u8005\\uff0c\\u5982\\u679c\\u60a8\\u5df2\\u7ecf\\u719f\\u6089\\u5176\\u4ed6\\u7248\\u672c\\u63a7\\u5236\\u7cfb\\u7edf\\uff0c\\u60a8\\u53ef\\u80fd\\u4f1a\\u53d1\\u73b0\\u8fd9\\u7bc7 [ CS-oriented overview of Git](http:\\/\\/eagain.net\\/articles\\/git-for-computer-scientists\\/) \\u5f88\\u6709\\u7528\\u3002\\n\\n\\u672c\\u8bfe\\u7a0b Git \\u5b58\\u50a8\\u5e93\\u7684 URL \\u662f [https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/jos.git](https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/jos.git)\\u3002\\u8981\\u5728\\u4f60\\u7684 Athena \\u5e10\\u6237\\u4e2d\\u5b89\\u88c5\\u6587\\u4ef6\\uff0c\\u4f60\\u9700\\u8981\\u901a\\u8fc7\\u8fd0\\u884c\\u4ee5\\u4e0b\\u547d\\u4ee4\\u6765\\u514b\\u9686\\u8bfe\\u7a0b\\u5b58\\u50a8\\u5e93\\u3002\\u4f60\\u5fc5\\u987b\\u4f7f\\u7528 X86 Athena \\u673a\\u5668\\uff1b\\u5373\\uff0c`uname -s` \\u8981\\u6709 i386 GNU\\/Linux or i686 GNU\\/Linux or x86_64 GNU\\/Linux \\u76f8\\u5173\\u5b57\\u773c\\u3002\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528 ssh -X athena.dialup.mit.edu \\u767b\\u5f55\\u5230\\u516c\\u5171 Athena \\u4e3b\\u673a\\u3002\\n```\\nathena% mkdir ~\\/6.828\\nathena% cd ~\\/6.828\\nathena% add git\\nathena% git clone https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/jos.git lab\\nCloning into lab...\\nathena% cd lab\\nathena% \\n```\\nGit \\u5141\\u8bb8\\u60a8\\u8ddf\\u8e2a\\u5bf9\\u4ee3\\u7801\\u6240\\u505a\\u7684\\u66f4\\u6539\\u3002\\u4f8b\\u5982\\uff0c\\u5982\\u679c\\u60a8\\u5b8c\\u6210\\u4e86\\u5176\\u4e2d\\u4e00\\u9879\\u7ec3\\u4e60\\uff0c\\u5e76\\u4e14\\u60f3\\u8981\\u68c0\\u67e5\\u60a8\\u7684\\u8fdb\\u5ea6\\uff0c\\u60a8\\u53ef\\u4ee5\\u901a\\u8fc7\\u8fd0\\u884c\\u4ee5\\u4e0b\\u547d\\u4ee4\\u63d0\\u4ea4\\u60a8\\u7684\\u66f4\\u6539\\uff1a\\n```\\nathena% git commit -am \'my solution for lab1 exercise 9\'\\nCreated commit 60d2135: my solution for lab1 exercise 9\\n 1 files changed, 1 insertions(+), 0 deletions(-)\\nathena% \\n```\\n\\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528 git diff \\u547d\\u4ee4\\u67e5\\u770b\\u4f60\\u7684\\u66f4\\u6539\\u3002\\u8fd0\\u884c git diff \\u5c06\\u663e\\u793a\\u81ea\\u4e0a\\u6b21\\u63d0\\u4ea4\\u4ee5\\u6765\\u5bf9\\u4ee3\\u7801\\u7684\\u66f4\\u6539\\uff0c\\u800c git diff origin\\/lab1 \\u5c06\\u663e\\u793a\\u76f8\\u5bf9\\u4e8e\\u4e3a\\u672c\\u5b9e\\u9a8c\\u5ba4\\u63d0\\u4f9b\\u7684\\u521d\\u59cb\\u4ee3\\u7801\\u7684\\u66f4\\u6539\\u3002\\u5728\\u8fd9\\u91cc\\uff0corigin\\/lab1 \\u662f git \\u5206\\u652f\\u7684\\u540d\\u79f0\\uff0c\\u5176\\u4e2d\\u5305\\u542b\\u60a8\\u4ece\\u6211\\u4eec\\u7684\\u670d\\u52a1\\u5668\\u4e0b\\u8f7d\\u7684\\u7528\\u4e8e\\u6b64\\u4f5c\\u4e1a\\u7684\\u521d\\u59cb\\u4ee3\\u7801\\u3002\\n\\n\\u5982\\u679c\\u60a8\\u5728\\u975e Athena \\u673a\\u5668\\u4e0a\\u5de5\\u4f5c\\uff0c\\u5219\\u9700\\u8981\\u6309\\u7167\\u5de5\\u5177\\u9875\\u9762\\u4e0a\\u7684\\u8bf4\\u660e\\u5b89\\u88c5 qemu \\u548c gcc\\u3002\\u6211\\u4eec\\u5df2\\u7ecf\\u5bf9 qemu \\u8fdb\\u884c\\u4e86\\u4e00\\u4e9b\\u6709\\u7528\\u7684\\u8c03\\u8bd5\\u66f4\\u6539\\uff0c\\u5e76\\u4e14\\u4e00\\u4e9b\\u540e\\u6765\\u7684\\u5b9e\\u9a8c\\u5ba4\\u4f9d\\u8d56\\u4e8e\\u8fd9\\u4e9b\\u8865\\u4e01\\uff0c\\u56e0\\u6b64\\u60a8\\u5fc5\\u987b\\u6784\\u5efa\\u81ea\\u5df1\\u7684\\u3002\\u5982\\u679c\\u60a8\\u7684\\u673a\\u5668\\u4f7f\\u7528\\u672c\\u673a ELF \\u5de5\\u5177\\u94fe\\uff08\\u4f8b\\u5982 Linux \\u548c\\u5927\\u591a\\u6570 BSD\\uff0c\\u4f46\\u7279\\u522b\\u662f\\u4e0d\\u662f OS X\\uff09\\uff0c\\u60a8\\u53ef\\u4ee5\\u7b80\\u5355\\u5730\\u4ece\\u5305\\u7ba1\\u7406\\u5668\\u5b89\\u88c5 gcc\\u3002 \\u5426\\u5219\\uff0c\\u8bf7\\u6309\\u7167\\u5de5\\u5177\\u9875\\u9762\\u4e0a\\u7684\\u8bf4\\u660e\\u8fdb\\u884c\\u64cd\\u4f5c\\u3002\\n\\n## Hand-In Procedure\\n......(\\u7565\\u8fc7)\\n\\n## Part 1\\uff1aPC Bootstrap\\n\\u7b2c\\u4e00\\u4e2a\\u7ec3\\u4e60\\u7684\\u76ee\\u7684\\u662f\\u5411\\u4f60\\u4ecb\\u7ecd x86 \\u6c47\\u7f16\\u8bed\\u8a00\\u548c PC \\u5f15\\u5bfc\\u7a0b\\u5e8f\\uff0c\\u5e76\\u8ba9\\u4f60\\u5f00\\u59cb\\u4f7f\\u7528 QEMU \\u548c QEMU\\/GDB \\u8c03\\u8bd5\\u3002\\u4f60\\u4e0d\\u5fc5\\u4e3a\\u8fd9\\u6b21\\u5b9e\\u9a8c\\u5199\\u4efb\\u4f55\\u4ee3\\u7801\\uff0c\\u4f46\\u4f60\\u65e0\\u8bba\\u5982\\u4f55\\u90fd\\u5e94\\u8be5\\u901a\\u8fc7\\u5b83\\u6765\\u8ba9\\u4f60\\u7406\\u89e3\\u77e5\\u8bc6\\u70b9\\uff0c\\u5e76\\u51c6\\u5907\\u597d\\u56de\\u7b54\\u4e0b\\u9762\\u7684\\u95ee\\u9898\\u3002\\n### Getting Started with X86 assembly\\n\\u5982\\u679c\\u4f60\\u8fd8\\u4e0d\\u719f\\u6089 X86 \\u6c47\\u7f16\\u8bed\\u8a00\\uff0c\\u5728\\u8fd9\\u8bfe\\u7a0b\\u4e2d\\u4f60\\u5c06\\u4f1a\\u5f88\\u5feb\\u719f\\u6089\\u5b83\\u3002**[PC Assembly Language Book](https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/readings\\/pcasm-book.pdf) **\\u4e00\\u4e2a\\u4e0d\\u9519\\u7684\\u5165\\u95e8\\u4e66\\u7c4d\\uff0c\\u8fd9\\u672c\\u4e66\\u4e3a\\u4f60\\u63d0\\u4f9b\\u4e86\\u65b0\\u65e7\\u6750\\u6599\\u7684\\u5bf9\\u7167\\u3002\\n\\n\\u6ce8\\u610f\\uff1a\\u4e0d\\u5e78\\u7684\\u662f\\uff0c\\u672c\\u4e66\\u4e2d\\u7684\\u793a\\u4f8b\\u662f\\u4e3aNASM\\u6c47\\u7f16\\u7a0b\\u5e8f\\u7f16\\u5199\\u7684\\uff0c\\u800c\\u6211\\u4eec\\u5c06\\u4f7f\\u7528GNU\\u6c47\\u7f16\\u7a0b\\u5e8f\\u3002NASM\\u4f7f\\u7528\\u6240\\u8c13\\u7684Intel\\u8bed\\u6cd5\\uff0c\\u800cGNU\\u4f7f\\u7528AT&T\\u8bed\\u6cd5\\u3002\\u867d\\u7136\\u8bed\\u4e49\\u4e0a\\u662f\\u7b49\\u4ef7\\u7684\\uff0c\\u4f46\\u7a0b\\u5e8f\\u96c6\\u6587\\u4ef6\\u4f1a\\u6709\\u5f88\\u5927\\u4e0d\\u540c\\uff0c\\u81f3\\u5c11\\u8868\\u9762\\u4e0a\\u662f\\u5982\\u6b64\\uff0c\\u8fd9\\u53d6\\u51b3\\u4e8e\\u4f7f\\u7528\\u7684\\u8bed\\u6cd5\\u3002\\u5e78\\u8fd0\\u7684\\u662f\\uff0c\\u4e24\\u8005\\u4e4b\\u95f4\\u7684\\u8f6c\\u6362\\u975e\\u5e38\\u7b80\\u5355\\uff0cBrennan\\u7684** [ennan\'s Guide to Inline Assembly](http:\\/\\/www.delorie.com\\/djgpp\\/doc\\/brennan\\/brennan_att_inline_djgpp.html)**\\u8fdb\\u884c\\u4e86\\u4ecb\\u7ecd\\u3002\\n\\n> \\u7ec3\\u4e601. \\u719f\\u6089 6.828 \\u53c2\\u8003\\u9875\\u4e0a\\u6240\\u63d0\\u4f9b\\u7684\\u6c47\\u7f16\\u6750\\u6599\\u3002\\u4f60\\u6ca1\\u6709\\u5fc5\\u8981\\u73b0\\u5728\\u8bfb\\u5b83\\u4eec\\uff0c\\u4f46\\u9605\\u8bfb\\u548c\\u7f16\\u5199 x86 \\u7a0b\\u5e8f\\u96c6\\u65f6\\uff0c\\u4f60\\u51e0\\u4e4e\\u80af\\u5b9a\\u4f1a\\u5e0c\\u671b\\u53c2\\u8003\\u5176\\u4e2d\\u7684\\u4e00\\u4e9b\\u8d44\\u6599\\u3002\\n> \\u6211\\u4eec\\u5efa\\u8bae\\u9605\\u8bfbBrennan\\u7684** [Brennan\'s Guide to Inline Assembly](http:\\/\\/www.delorie.com\\/djgpp\\/doc\\/brennan\\/brennan_att_inline_djgpp.html)** \\u4e2d\\u7684\\u201c\\u8bed\\u6cd5\\u201d\\u4e00\\u8282\\u3002\\u5b83\\u5bf9\\u6211\\u4eec\\u5c06\\u5728JOS\\u4e2d\\u4e0eGNU\\u6c47\\u7f16\\u7a0b\\u5e8f\\u4e00\\u8d77\\u4f7f\\u7528\\u7684AT&T\\u6c47\\u7f16\\u8bed\\u6cd5\\u7ed9\\u51fa\\u4e86\\u4e00\\u4e2a\\u5f88\\u597d\\u7684\\uff08\\u800c\\u4e14\\u975e\\u5e38\\u7b80\\u77ed\\u7684\\uff09\\u63cf\\u8ff0\\u3002\\n\\n\\u5f53\\u7136\\uff0cx86 \\u6c47\\u7f16\\u8bed\\u8a00\\u7f16\\u7a0b\\u7684\\u6743\\u5a01\\u53c2\\u8003\\u662f Intel \\u7684\\u6307\\u4ee4\\u96c6\\u67b6\\u6784\\u53c2\\u8003\\uff0c\\u60a8\\u53ef\\u4ee5\\u5728 6.828 \\u53c2\\u8003\\u9875\\u4e0a\\u627e\\u5230\\u4e24\\u79cd\\u7248\\u672c\\uff1a\\u65e7\\u7684 80386 \\u7a0b\\u5e8f\\u5458\\u53c2\\u8003\\u624b\\u518c\\u7684 HTML \\u7248\\u672c\\uff0c\\u76f8\\u8f83\\u4e8e\\u6700\\u8fd1\\u7684\\u624b\\u518c\\uff0c\\u5b83\\u66f4\\u77ed\\u66f4\\u5bb9\\u6613\\u5bfc\\u822a\\uff0c\\u800c\\u4e14\\u63cf\\u8ff0\\u4e86\\u6211\\u4eec\\u5c06\\u5728 6.828 \\u4e2d\\u4f7f\\u7528\\u7684\\u6240\\u6709 x86 \\u5904\\u7406\\u5668\\u529f\\u80fd\\uff1b\\u4ee5\\u53ca\\u6765\\u81ea\\u82f1\\u7279\\u5c14\\u7684\\u5b8c\\u6574\\u3001\\u6700\\u65b0\\u548c\\u6700\\u597d\\u7684 IA-32 \\u82f1\\u7279\\u5c14\\u67b6\\u6784\\u8f6f\\u4ef6\\u5f00\\u53d1\\u4eba\\u5458\\u624b\\u518c\\uff0c\\u6db5\\u76d6\\u4e86\\u6211\\u4eec\\u5728\\u8bfe\\u5802\\u4e0a\\u4e0d\\u9700\\u8981\\u4f46\\u60a8\\u53ef\\u80fd\\u6709\\u5174\\u8da3\\u4e86\\u89e3\\u7684\\u6700\\u65b0\\u5904\\u7406\\u5668\\u7684\\u6240\\u6709\\u529f\\u80fd\\u3002 AMD \\u63d0\\u4f9b\\u4e86\\u4e00\\u5957\\u7b49\\u6548\\uff08\\u901a\\u5e38\\u66f4\\u53cb\\u597d\\uff09\\u7684\\u624b\\u518c\\u3002 \\u4fdd\\u5b58 Intel\\/AMD \\u67b6\\u6784\\u624b\\u518c\\u4ee5\\u5907\\u540e\\u7528\\uff0c\\u6216\\u5728\\u60a8\\u60f3\\u8981\\u67e5\\u627e\\u7279\\u5b9a\\u5904\\u7406\\u5668\\u529f\\u80fd\\u6216\\u6307\\u4ee4\\u7684\\u6700\\u7ec8\\u89e3\\u91ca\\u65f6\\u5c06\\u5176\\u7528\\u4f5c\\u53c2\\u8003\\u3002\\n\\n### Simulating the x86\\n\\u505a\\u4e3a\\u5728\\u771f\\u5b9ePC\\u4e0a\\u5f00\\u53d1\\u4e00\\u4e2a\\u64cd\\u4f5c\\u7cfb\\u7edf\\u7684\\u4ee3\\u66ff\\uff0c\\u6211\\u4eec\\u81ea\\u4fe1\\u7684\\u4f7f\\u7528\\u4e00\\u4e2a\\u7a0b\\u5e8f\\u6765\\u6a21\\u62df PC\\uff1a\\u4f60\\u5728\\u6a21\\u62df\\u5668\\u4e0a\\u5199\\u7684\\u4ee3\\u7801\\uff0c\\u5c06\\u4f1a\\u50cf\\u5728\\u771f\\u5b9e PC \\u4e0a\\u4e00\\u6837\\u542f\\u52a8\\u3002\\u4f7f\\u7528\\u6a21\\u62df\\u5668\\u53ef\\u4ee5\\u7b80\\u5316\\u8c03\\u8bd5\\uff0c\\u4f8b\\u5982\\uff0c\\u4f60\\u80fd\\u5728 x86 \\u6a21\\u62df\\u5668\\u91cc\\u8bbe\\u7f6e\\u65ad\\u70b9\\uff0c\\u800c\\u5728 x86 \\u7684\\u7845\\u7248\\u672c\\u5f88\\u96be\\u505a\\u5230\\u8fd9\\u4e00\\u70b9\\u3002\\n\\n\\u5728 6.828 \\u6211\\u4eec\\u4f1a\\u4f7f\\u7528 \\u73b0\\u4ee3\\u4e14\\u76f8\\u5bf9\\u5feb\\u901f QEMU \\u6a21\\u62df\\u5668\\u3002\\u867d\\u7136 QEMU \\u7684\\u5185\\u7f6e\\u76d1\\u89c6\\u5668\\u4ec5\\u63d0\\u4f9b\\u6709\\u9650\\u7684\\u8c03\\u8bd5\\u652f\\u6301\\uff0c\\u4f46 QEMU \\u53ef\\u4ee5\\u5145\\u5f53 GNU \\u8c03\\u8bd5\\u5668 (GDB) \\u7684\\u8fdc\\u7a0b\\u8c03\\u8bd5\\u76ee\\u6807\\uff0c\\u6211\\u4eec\\u5c06\\u5728\\u672c\\u5b9e\\u9a8c\\u5ba4\\u4e2d\\u4f7f\\u7528\\u5b83\\u6765\\u9010\\u6b65\\u5b8c\\u6210\\u65e9\\u671f\\u542f\\u52a8\\u8fc7\\u7a0b\\u3002\\n\\n\\u9996\\u5148\\uff0c\\u6309\\u7167\\u4e0a\\u9762\\u201c\\u8f6f\\u4ef6\\u8bbe\\u7f6e\\u201d\\u4e2d\\u7684\\u63cf\\u8ff0\\uff0c\\u5c06Lab1 \\u6587\\u4ef6\\u89e3\\u538b\\u5230\\u4f60\\u81ea\\u5df1\\u5728 Athena \\u4e0a\\u7684\\u76ee\\u5f55\\u4e2d\\uff0c\\u7136\\u540e\\u5728\\u76ee\\u5f55\\u4e2d\\u952e\\u5165 make (\\u6216\\u5728 BSD \\u7cfb\\u7edf\\u4e0a\\u4e3a gmake)\\u53bb\\u6784\\u5efa\\u4f60\\u8981\\u542f\\u52a8\\u7684\\u6700\\u5c0f 6.828 \\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u548c\\u5185\\u6838\\u3002\\uff08\\u5c06\\u6211\\u4eec\\u5728\\u8fd9\\u91cc\\u8fd0\\u884c\\u7684\\u4ee3\\u7801\\u79f0\\u4e3a\\u201c\\u5185\\u6838\\u201d\\u6709\\u70b9\\u6177\\u6168\\uff0c\\u4f46\\u6211\\u4eec\\u5c06\\u5728\\u6574\\u4e2a\\u5b66\\u671f\\u5145\\u5b9e\\u5b83\\u3002\\uff09\\n```\\nathena% cd lab\\nathena% make\\n+ as kern\\/entry.S\\n+ cc kern\\/entrypgdir.c\\n+ cc kern\\/init.c\\n+ cc kern\\/console.c\\n+ cc kern\\/monitor.c\\n+ cc kern\\/printf.c\\n+ cc kern\\/kdebug.c\\n+ cc lib\\/printfmt.c\\n+ cc lib\\/readline.c\\n+ cc lib\\/string.c\\n+ ld obj\\/kern\\/kernel\\n+ as boot\\/boot.S\\n+ cc -Os boot\\/main.c\\n+ ld boot\\/boot\\nboot block is 380 bytes (max 510)\\n+ mk obj\\/kern\\/kernel.img\\n```\\n(\\u5982\\u679c\\u4f60\\u5f97\\u5230\\u7c7b\\u4f3c\\u201cundefined reference to `__udivdi3\'\\u201d\\u8fd9\\u6837\\u7684\\u9519\\u8bef\\uff0c\\u4f60\\u53ef\\u80fd\\u6ca1\\u6709 32 \\u4f4d\\u7684 gcc multilib\\u3002\\u5982\\u679c\\u4f60\\u8fd0\\u884c\\u7684\\u662f Debian \\u6216 Ubuntu\\uff0c\\u8bf7\\u5c1d\\u8bd5\\u5b89\\u88c5 gcc-multilib \\u5305)\\n\\u73b0\\u5728\\u60a8\\u5df2\\u51c6\\u5907\\u597d\\u8fd0\\u884c QEMU\\uff0c\\u63d0\\u4f9b\\u4e0a\\u9762\\u521b\\u5efa\\u7684\\u6587\\u4ef6 obj\\/kern\\/kernel.img \\u4f5c\\u4e3a\\u6a21\\u62df PC \\u7684\\u201c\\u865a\\u62df\\u786c\\u76d8\\u201d\\u7684\\u5185\\u5bb9\\u3002 \\u8fd9\\u4e2a\\u786c\\u76d8\\u6620\\u50cf\\u5305\\u542b\\u6211\\u4eec\\u7684\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\uff08obj\\/boot\\/boot\\uff09\\u548c\\u6211\\u4eec\\u7684\\u5185\\u6838\\uff08obj\\/kernel\\uff09\\u3002\\n```\\nathena% make qemu\\n```\\nor\\n```\\nathena% make qemu-nox\\n```\\n\\u8fd9\\u5c06\\u4f7f\\u7528\\u8bbe\\u7f6e\\u786c\\u76d8\\u548c\\u76f4\\u63a5\\u4e32\\u884c\\u7aef\\u53e3\\u8f93\\u51fa\\u5230\\u7ec8\\u7aef\\u4e24\\u9879\\u9009\\u9879\\u6765\\u6267\\u884c QEMU\\u3002\\u4e00\\u4e9b\\u6587\\u672c\\u5185\\u5bb9\\u5c06\\u8f93\\u51fa\\u5230 QEMU \\u7a97\\u53e3\\u4e2d\\uff1a\\n```\\nBooting from Hard Disk...\\n6828 decimal is XXX octal!\\nentering test_backtrace 5\\nentering test_backtrace 4\\nentering test_backtrace 3\\nentering test_backtrace 2\\nentering test_backtrace 1\\nentering test_backtrace 0\\nleaving test_backtrace 0\\nleaving test_backtrace 1\\nleaving test_backtrace 2\\nleaving test_backtrace 3\\nleaving test_backtrace 4\\nleaving test_backtrace 5\\nWelcome to the JOS kernel monitor!\\nType \'help\' for a list of commands.\\nK>\\n```\\n\\u4ee5\\u4e0a\\u5185\\u5bb9\\u90fd\\u662f\\u7531\\u6211\\u4eec\\u7b80\\u5355 JOS \\u5185\\u6838\\u8f93\\u51fa\\u7684\\u3002K> \\u63d0\\u793a\\u7b26\\u662f\\u7531\\u6211\\u4eec\\u5185\\u6838\\u5305\\u542b\\u7684\\u5c0f\\u76d1\\u63a7\\u5668\\u6216\\u4ea4\\u4e92\\u7a0b\\u5e8f\\u8f93\\u51fa\\u7684\\u3002\\u5982\\u679c\\u60a8\\u4f7f\\u7528 make qemu\\uff0c\\u5185\\u6838\\u6253\\u5370\\u7684\\u8fd9\\u4e9b\\u884c\\u5c06\\u51fa\\u73b0\\u5728\\u60a8\\u8fd0\\u884c QEMU \\u7684\\u5e38\\u89c4 shell \\u7a97\\u53e3\\u548c QEMU \\u663e\\u793a\\u7a97\\u53e3\\u4e2d\\u3002\\u8fd9\\u662f\\u56e0\\u4e3a\\u51fa\\u4e8e\\u6d4b\\u8bd5\\u548c\\u5b9e\\u9a8c\\u5ba4\\u8bc4\\u5206\\u7684\\u76ee\\u7684\\uff0c\\u6211\\u4eec\\u8bbe\\u7f6e\\u4e86 JOS \\u5185\\u6838\\uff0c\\u4e0d\\u4ec5\\u5c06\\u5176\\u63a7\\u5236\\u53f0\\u8f93\\u51fa\\u5199\\u5165\\u865a\\u62df VGA \\u663e\\u793a\\u5668\\uff08\\u5982 QEMU \\u7a97\\u53e3\\u4e2d\\u6240\\u793a\\uff09\\uff0c\\u4e5f\\u53ef\\u4ee5\\u8fde\\u63a5\\u5230\\u6a21\\u62df PC \\u7684\\u865a\\u62df\\u4e32\\u53e3\\uff0cQEMU \\u53cd\\u8fc7\\u6765\\u8f93\\u51fa\\u5230\\u5b83\\u81ea\\u5df1\\u7684\\u6807\\u51c6\\u8f93\\u51fa\\u3002\\u540c\\u6837\\uff0cJOS \\u5185\\u6838\\u5c06\\u4ece\\u952e\\u76d8\\u548c\\u4e32\\u884c\\u7aef\\u53e3\\u83b7\\u53d6\\u8f93\\u5165\\uff0c\\u56e0\\u6b64\\u60a8\\u53ef\\u4ee5\\u5728 VGA \\u663e\\u793a\\u7a97\\u53e3\\u6216\\u8fd0\\u884c QEMU \\u7684\\u7ec8\\u7aef\\u4e2d\\u7ed9\\u5b83\\u547d\\u4ee4\\u3002 \\u6216\\u8005\\uff0c\\u60a8\\u53ef\\u4ee5\\u901a\\u8fc7\\u8fd0\\u884c make qemu-nox \\u6765\\u4f7f\\u7528\\u6ca1\\u6709\\u865a\\u62df VGA \\u7684\\u4e32\\u884c\\u63a7\\u5236\\u53f0\\u3002 \\u5982\\u679c\\u60a8\\u901a\\u8fc7 SSH \\u8fde\\u63a5\\u5230 Athena \\u62e8\\u53f7\\uff0c\\u8fd9\\u53ef\\u80fd\\u4f1a\\u5f88\\u65b9\\u4fbf\\u3002 \\u8981\\u9000\\u51fa qemu\\uff0c\\u8bf7\\u952e\\u5165 Ctrl+a x\\u3002\\n\\n\\u53ea\\u6709\\u4e24\\u4e2a\\u547d\\u4ee4\\u53ef\\u4ee5\\u63d0\\u4f9b\\u7ed9\\u5185\\u6838\\u76d1\\u89c6\\u5668\\uff0chelp \\u548c kerninfo\\u3002\\n\\n```\\nK> help\\nhelp - display this list of commands\\nkerninfo - display information about the kernel\\nK> kerninfo\\nSpecial kernel symbols:\\n  entry  f010000c (virt)  0010000c (phys)\\n  etext  f0101a75 (virt)  00101a75 (phys)\\n  edata  f0112300 (virt)  00112300 (phys)\\n  end    f0112960 (virt)  00112960 (phys)\\nKernel executable memory footprint: 75KB\\nK>\\n```\\nhelp \\u547d\\u4ee4\\u7684\\u610f\\u601d\\u5f88\\u660e\\u663e\\uff0c\\u6211\\u4eec\\u5c06\\u7b80\\u77ed\\u5730\\u8ba8\\u8bba\\u4e0b kerninfo \\u547d\\u4ee4\\u6253\\u5370\\u51fa\\u5185\\u5bb9\\u7684\\u542b\\u4e49\\u3002\\u867d\\u7136\\u5f88\\u7b80\\u5355\\uff0c\\u4f46\\u8981\\u91cd\\u70b9\\u6ce8\\u610f\\u8fd9\\u4e2a\\u5185\\u6838\\u76d1\\u89c6\\u5668\\u201c\\u76f4\\u63a5\\u201d\\u5728\\u6a21\\u62df PC \\u7684\\u201c\\u539f\\u59cb\\uff08\\u865a\\u62df\\uff09\\u786c\\u4ef6\\u201d\\u4e0a\\u8fd0\\u884c\\u3002\\u8fd9\\u610f\\u5473\\u7740\\u60a8\\u5e94\\u8be5\\u80fd\\u591f\\u5c06 obj\\/kern\\/kernel.img \\u7684\\u5185\\u5bb9\\u590d\\u5236\\u5230\\u771f\\u5b9e\\u786c\\u76d8\\u7684\\u524d\\u51e0\\u4e2a\\u6247\\u533a\\uff0c\\u5c06\\u8be5\\u786c\\u76d8\\u63d2\\u5165\\u771f\\u5b9e PC\\uff0c\\u542f\\u52a8\\u5b83\\uff0c\\u7136\\u540e\\uff08\\u5728 PC \\u7684\\u771f\\u5b9e\\u5c4f\\u5e55\\u4e0a\\uff09\\u770b\\u5230\\u5b8c\\u5168\\u76f8\\u540c\\u7684\\u5185\\u5bb9\\uff0c\\u540c\\u4f60\\u5728 QEMU \\u7a97\\u53e3\\u4e2d\\u6240\\u505a\\u7684\\u4e00\\u6837\\u3002\\uff08\\u6211\\u4eec\\u4e0d\\u5efa\\u8bae\\u4f60\\u5728\\u771f\\u673a\\u6267\\u884c\\u6b64\\u64cd\\u4f5c\\uff0c\\u5f53\\u771f\\u673a\\u7684\\u786c\\u76d8\\u4e0a\\u6709\\u7740\\u6709\\u7528\\u6570\\u636e\\u3002\\u56e0\\u4e3a\\u5c06 kernel.img \\u590d\\u5236\\u5230\\u5176\\u786c\\u76d8\\u7684\\u5f00\\u5934\\u4f1a\\u7834\\u574f\\u4e3b\\u5f15\\u5bfc\\u8bb0\\u5f55\\u548c\\u7b2c\\u4e00\\u4e2a\\u5206\\u533a\\u7684\\u5f00\\u5934\\uff0c\\u4ece\\u800c\\u5bfc\\u81f4\\u786c\\u76d8\\u4e0a\\u4fdd\\u5b58\\u7684\\u4e00\\u5207\\u6570\\u636e\\u90fd\\u5c06\\u4e22\\u5931\\uff01\\uff09\\n\\n### The PC\'s Physical Address Space\\n\\u6211\\u4eec\\u73b0\\u5728\\u5c06\\u6df1\\u5165\\u4e86\\u89e3\\u6709\\u5173PC\\u5982\\u4f55\\u542f\\u52a8\\u7684\\u66f4\\u591a\\u7ec6\\u8282\\u3002PC \\u7684\\u5904\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u662f\\u786c\\u8fde\\u7ebf\\u7684\\uff0c\\u5177\\u6709\\u4ee5\\u4e0b\\u603b\\u4f53\\u5e03\\u5c40\\uff1a\\n\\n![image.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/17\\/lZTKpCfJhchqGQdYL14gW4BS6ArI6x2h4W9T6tpd.png)\\n\\n\\u7b2c\\u4e00\\u6279\\u57fa\\u4e8e 16 \\u4f4d Intel 8088 \\u5904\\u7406\\u5668\\u7684 PC \\u53ea\\u80fd\\u5bfb\\u5740 1MB \\u7684\\u7269\\u7406\\u5185\\u5b58\\u3002\\u56e0\\u6b64\\uff0c\\u65e9\\u671f PC \\u7684\\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u5c06\\u4ece 0x00000000 \\u5f00\\u59cb\\uff0c\\u4f46\\u4ee5 0x000FFFFF \\u800c\\u4e0d\\u662f 0xFFFFFFFF \\u7ed3\\u675f\\u3002\\u6807\\u8bb0\\u4e3a\\u201c\\u4f4e\\u5185\\u5b58\\u201d\\u7684 640KB \\u533a\\u57df\\u662f\\u65e9\\u671f PC \\u53ef\\u4ee5\\u4f7f\\u7528\\u7684\\u552f\\u4e00\\u968f\\u673a\\u5b58\\u53d6\\u5b58\\u50a8\\u5668 (RAM);\\u4e8b\\u5b9e\\u4e0a\\uff0c\\u6700\\u65e9\\u7684 PC \\u53ea\\u80fd\\u914d\\u7f6e 16KB\\u300132KB \\u6216 64KB \\u7684 RAM\\uff01\\n\\n\\u4ece 0x000A0000 \\u5230 0x000FFFFF \\u7684 384KB \\u533a\\u57df\\u7531\\u786c\\u4ef6\\u4fdd\\u7559\\uff0c\\u7528\\u4e8e\\u7279\\u6b8a\\u7528\\u9014\\uff0c\\u4f8b\\u5982\\u89c6\\u9891\\u663e\\u793a\\u7f13\\u51b2\\u533a\\u548c\\u4fdd\\u5b58\\u5728\\u975e\\u6613\\u5931\\u6027\\u5b58\\u50a8\\u5668\\u4e2d\\u7684\\u56fa\\u4ef6\\u3002\\u8fd9\\u4e2a\\u4fdd\\u7559\\u533a\\u57df\\u6700\\u91cd\\u8981\\u7684\\u90e8\\u5206\\u662f\\u57fa\\u672c\\u8f93\\u5165\\/\\u8f93\\u51fa\\u7cfb\\u7edf (BIOS)\\uff0c\\u5b83\\u5360\\u636e\\u4e86\\u4ece 0x000F0000 \\u5230 0x000FFFFF \\u7684 64KB \\u533a\\u57df\\u3002\\u5728\\u65e9\\u671f\\u7684 PC \\u4e2d\\uff0cBIOS \\u4fdd\\u5b58\\u5728\\u771f\\u6b63\\u7684\\u53ea\\u8bfb\\u5b58\\u50a8\\u5668 (ROM) \\u4e2d\\uff0c\\u4f46\\u5f53\\u524d\\u7684 PC \\u5c06 BIOS \\u5b58\\u50a8\\u5728\\u53ef\\u66f4\\u65b0\\u7684\\u95ea\\u5b58\\u4e2d\\u3002BIOS \\u8d1f\\u8d23\\u6267\\u884c\\u57fa\\u672c\\u7684\\u7cfb\\u7edf\\u521d\\u59cb\\u5316\\uff0c\\u4f8b\\u5982\\u6fc0\\u6d3b\\u663e\\u5361\\u548c\\u68c0\\u67e5\\u5b89\\u88c5\\u7684\\u5185\\u5b58\\u91cf\\u3002\\u6267\\u884c\\u6b64\\u521d\\u59cb\\u5316\\u540e\\uff0cBIOS \\u4ece\\u8f6f\\u76d8\\u3001\\u786c\\u76d8\\u3001CD-ROM \\u6216\\u7f51\\u7edc\\u7b49\\u9002\\u5f53\\u4f4d\\u7f6e\\u52a0\\u8f7d\\u64cd\\u4f5c\\u7cfb\\u7edf\\uff0c\\u5e76\\u5c06\\u673a\\u5668\\u7684\\u63a7\\u5236\\u6743\\u4ea4\\u7ed9\\u64cd\\u4f5c\\u7cfb\\u7edf\\u3002\\n\\n\\u5f53\\u82f1\\u7279\\u5c14\\u7ec8\\u4e8e\\u7528\\u5206\\u522b\\u652f\\u6301 16MB \\u548c 4GB \\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u7684 80286 \\u548c 80386 \\u5904\\u7406\\u5668\\u201c\\u6253\\u7834\\u4e86 1MB \\u7684\\u969c\\u788d\\u201d\\u65f6\\uff0cPC \\u67b6\\u6784\\u5e08\\u4ecd\\u7136\\u4fdd\\u7559\\u4e86\\u4f4e 1MB \\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u7684\\u539f\\u59cb\\u5e03\\u5c40\\uff0c\\u4ee5\\u786e\\u4fdd\\u5411\\u540e\\u517c\\u5bb9 \\u73b0\\u6709\\u7684\\u8f6f\\u4ef6\\u3002 \\u56e0\\u6b64\\uff0c\\u73b0\\u4ee3 PC \\u5728\\u7269\\u7406\\u5185\\u5b58\\u4e2d\\u4ece 0x000A0000 \\u5230 0x00100000 \\u6709\\u4e00\\u4e2a\\u201c\\u6d1e\\u201d\\uff0c\\u5c06 RAM \\u5206\\u4e3a\\u201c\\u4f4e\\u201d\\u6216\\u201c\\u5e38\\u89c4\\u5185\\u5b58\\u201d\\uff08\\u524d 640KB\\uff09\\u548c\\u201c\\u6269\\u5c55\\u5185\\u5b58\\u201d\\uff08\\u5176\\u4ed6\\u6240\\u6709\\u5185\\u5bb9\\uff09\\u3002 \\u6b64\\u5916\\uff0c\\u4f4d\\u4e8e PC 32 \\u4f4d\\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u6700\\u9876\\u7aef\\u7684\\u4e00\\u4e9b\\u7a7a\\u95f4\\uff0c\\u9996\\u5148\\u662f\\u7269\\u7406 RAM\\uff0c\\u73b0\\u5728\\u901a\\u5e38\\u7531 BIOS \\u4fdd\\u7559\\u4f9b 32 \\u4f4d PCI \\u8bbe\\u5907\\u4f7f\\u7528\\u3002\\n\\n\\u6700\\u8fd1\\u7684 x86 \\u5904\\u7406\\u5668\\u53ef\\u4ee5\\u652f\\u6301\\u8d85\\u8fc7 4GB \\u7684\\u7269\\u7406 RAM\\uff0c\\u56e0\\u6b64 RAM \\u53ef\\u4ee5\\u8fdb\\u4e00\\u6b65\\u6269\\u5c55\\u5230 0xFFFFFFFF \\u4ee5\\u4e0a\\u3002 \\u5728\\u8fd9\\u79cd\\u60c5\\u51b5\\u4e0b\\uff0cBIOS \\u5fc5\\u987b\\u5b89\\u6392\\u5728 32 \\u4f4d\\u53ef\\u5bfb\\u5740\\u533a\\u57df\\u9876\\u90e8\\u7684\\u7cfb\\u7edf RAM \\u4e2d\\u7559\\u4e0b\\u7b2c\\u4e8c\\u4e2a\\u5b54\\uff0c\\u4ee5\\u4fbf\\u4e3a\\u8fd9\\u4e9b 32 \\u4f4d\\u8bbe\\u5907\\u7684\\u6620\\u5c04\\u7559\\u51fa\\u7a7a\\u95f4\\u3002 \\u7531\\u4e8e\\u8bbe\\u8ba1\\u9650\\u5236\\uff0cJOS \\u65e0\\u8bba\\u5982\\u4f55\\u53ea\\u80fd\\u4f7f\\u7528 PC \\u7269\\u7406\\u5185\\u5b58\\u7684\\u524d 256MB\\uff0c\\u56e0\\u6b64\\u73b0\\u5728\\u6211\\u4eec\\u5047\\u8bbe\\u6240\\u6709 PC \\u90fd\\u201c\\u53ea\\u6709\\u201d\\u4e00\\u4e2a 32 \\u4f4d\\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u3002 \\u4f46\\u662f\\u5904\\u7406\\u590d\\u6742\\u7684\\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u548c\\u7ecf\\u8fc7\\u591a\\u5e74\\u53d1\\u5c55\\u7684\\u786c\\u4ef6\\u7ec4\\u7ec7\\u7684\\u5176\\u4ed6\\u65b9\\u9762\\u662f\\u64cd\\u4f5c\\u7cfb\\u7edf\\u5f00\\u53d1\\u7684\\u91cd\\u8981\\u5b9e\\u9645\\u6311\\u6218\\u4e4b\\u4e00\\u3002\\n\\n### The ROM BIOS\\n\\n\\u5728\\u5b9e\\u9a8c\\u5ba4\\u7684\\u8fd9\\u4e00\\u90e8\\u5206\\u4e2d\\uff0c\\u4f60\\u5c06\\u4f7f\\u7528 QEMU \\u7684\\u8c03\\u8bd5\\u5de5\\u5177\\u6765\\u7814\\u7a76\\u517c\\u5bb9 IA-32 \\u7684\\u8ba1\\u7b97\\u673a\\u5982\\u4f55\\u542f\\u52a8\\u3002\\n\\n\\u6253\\u5f00\\u4e24\\u4e2a\\u7ec8\\u7aef\\u7a97\\u53e3\\u5e76\\u5c06\\u4e24\\u4e2a shell \\u90fd cd \\u5230\\u60a8\\u7684\\u5b9e\\u9a8c\\u5ba4\\u76ee\\u5f55\\u4e2d\\u3002 \\u7b2c\\u4e00\\u4e2a\\u7ec8\\u7aef\\u4e2d\\uff0c\\u8f93\\u5165make qemu-gdb\\uff08\\u6216make qemu-nox-gdb\\uff09\\u3002 \\u8fd9\\u5c06\\u542f\\u52a8 QEMU\\uff0c\\u4f46 QEMU \\u5728\\u5904\\u7406\\u5668\\u6267\\u884c\\u7b2c\\u4e00\\u6761\\u6307\\u4ee4\\u4e4b\\u524d\\u505c\\u6b62\\u5e76\\u7b49\\u5f85\\u6765\\u81ea GDB \\u7684\\u8c03\\u8bd5\\u8fde\\u63a5\\u3002 \\u5728\\u7b2c\\u4e8c\\u4e2a\\u7ec8\\u7aef\\u4e2d\\uff0c\\u4ece\\u4f60\\u8fd0\\u884c make \\u7684\\u540c\\u4e00\\u76ee\\u5f55\\u4e2d\\uff0c\\u8fd0\\u884c make gdb\\u3002\\u4f60\\u4f1a\\u770b\\u5230\\u8fd9\\u6837\\u7684\\u4e1c\\u897f\\uff1a\\n```\\nathena% make gdb\\nGNU gdb (GDB) 6.8-debian\\nCopyright (C) 2008 Free Software Foundation, Inc.\\nLicense GPLv3+: GNU GPL version 3 or later <http:\\/\\/gnu.org\\/licenses\\/gpl.html>\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.  Type \\"show copying\\"\\nand \\"show warranty\\" for details.\\nThis GDB was configured as \\"i486-linux-gnu\\".\\n+ target remote localhost:26000\\nThe target architecture is assumed to be i8086\\n[f000:fff0] 0xffff0:\\tljmp   $0xf000,$0xe05b\\n0x0000fff0 in ?? ()\\n+ symbol-file obj\\/kern\\/kernel\\n(gdb) \\n```\\n\\u6211\\u4eec\\u63d0\\u4f9b\\u4e86\\u4e00\\u4e2a .gdbinit \\u6587\\u4ef6\\uff0c\\u7528\\u4e8e\\u8bbe\\u7f6e GDB \\u4ee5\\u8c03\\u8bd5\\u65e9\\u671f\\u542f\\u52a8\\u671f\\u95f4\\u4f7f\\u7528\\u7684 16 \\u4f4d\\u4ee3\\u7801\\uff0c\\u5e76\\u6307\\u793a\\u5b83\\u9644\\u52a0\\u5230\\u4fa6\\u542c QEMU\\u3002\\uff08\\u5982\\u679c\\u5b83\\u4e0d\\u8d77\\u4f5c\\u7528\\uff0c\\u60a8\\u53ef\\u80fd\\u9700\\u8981\\u5728\\u60a8\\u7684\\u4e3b\\u76ee\\u5f55\\u4e2d\\u7684 .gdbinit \\u4e2d\\u6dfb\\u52a0\\u4e00\\u4e2a add-auto-load-safe-path \\u4ee5\\u8bf4\\u670d gdb \\u5904\\u7406\\u6211\\u4eec\\u63d0\\u4f9b\\u7684 .gdbinit \\u3002 gdb \\u4f1a\\u544a\\u8bc9\\u4f60\\u662f\\u5426\\u5fc5\\u987b\\u8fd9\\u6837\\u505a\\uff09\\n\\n\\u4e0b\\u9762\\u8fd9\\u884c\\uff1a\\n```\\n[f000:fff0] 0xffff0:\\tljmp   $0xf000,$0xe05b\\n```\\n\\u662f GDB \\u5bf9\\u8981\\u6267\\u884c\\u7684\\u7b2c\\u4e00\\u6761\\u6307\\u4ee4\\u7684\\u53cd\\u6c47\\u7f16\\u3002\\u4ece\\u8fd9\\u4e2a\\u8f93\\u51fa\\u53ef\\u4ee5\\u5f97\\u51fa\\u4ee5\\u4e0b\\u51e0\\u4e2a\\u7ed3\\u8bba\\uff1a\\n+ IBM PC \\u5728\\u7269\\u7406\\u5730\\u5740 0x000ffff0 \\u5904\\u5f00\\u59cb\\u6267\\u884c\\uff0c\\u8be5\\u5730\\u5740\\u4f4d\\u4e8e\\u4e3a ROM BIOS \\u4fdd\\u7559\\u7684 64KB \\u533a\\u57df\\u7684\\u6700\\u9876\\u90e8\\u3002\\n+ PC \\u4ee5 CS = 0xf000 \\u548c IP = 0xfff0 \\u5f00\\u59cb\\u6267\\u884c\\u3002\\n+ \\u8981\\u6267\\u884c\\u7684\\u7b2c\\u4e00\\u6761\\u6307\\u4ee4\\u662fjmp\\u6307\\u4ee4\\uff0c\\u5b83\\u8df3\\u8f6c\\u5230\\u5206\\u6bb5\\u5730\\u5740CS = 0xf000\\u548cIP = 0xe05b\\u3002\\n\\nQEMU \\u4e3a\\u4ec0\\u4e48\\u8fd9\\u6837\\u542f\\u52a8\\uff1f \\u8fd9\\u5c31\\u662f\\u82f1\\u7279\\u5c14\\u8bbe\\u8ba1 8088 \\u5904\\u7406\\u5668\\u7684\\u65b9\\u5f0f\\uff0cIBM \\u5728\\u5176\\u539f\\u59cb PC \\u4e2d\\u4f7f\\u7528\\u4e86\\u8be5\\u5904\\u7406\\u5668\\u3002\\u56e0\\u4e3a\\u7269\\u7406\\u5730\\u5740\\u4ece0x000f0000-0x000fffff \\u4e0e BIOS \\u662f\\u786c\\u7ebf\\u8fde\\u63a5\\uff0c\\u8fd9\\u4e2a\\u8bbe\\u8ba1\\u4fdd\\u8bc1\\u4e86 BIOS \\u5728\\u673a\\u5668\\u542f\\u52a8\\u540e\\u80fd\\u83b7\\u5f97\\u63a7\\u5236\\uff0c\\u7cfb\\u7edf\\u91cd\\u542f\\u52a8\\u4e5f\\u662f\\u3002\\u6b64\\u8bbe\\u8ba1\\u81f3\\u5173\\u91cd\\u8981\\uff0c\\u56e0\\u4e3a\\u7535\\u6e90\\u6253\\u5f00\\u540e\\u5728\\u673a\\u5668\\u7684 RAM \\u4e2d\\u6ca1\\u6709\\u5176\\u5b83\\u8f6f\\u4ef6\\u80fd\\u88ab\\u5904\\u7406\\u5668\\u6267\\u884c\\u3002QUME \\u4eff\\u771f\\u5668\\u9644\\u5e26\\u81ea\\u5df1\\u7684BIOS\\uff0c\\u5b83\\u4f4d\\u4e8e\\u5904\\u7406\\u5668\\u6a21\\u62df\\u7269\\u7406\\u5730\\u5740\\u7684\\u7a7a\\u95f4\\u4e2d\\u3002\\u5728\\u5904\\u7406\\u5668\\u590d\\u4f4d\\u65f6\\uff0c\\uff08\\u6a21\\u62df\\uff09\\u5904\\u7406\\u5668\\u8fdb\\u5165\\u771f\\u5b9e\\u6a21\\u5f0f\\uff0c\\u5c06CS\\u8bbe\\u7f6e\\u4e3a0xF000\\u4ee5\\u53caIP\\u8bbe\\u7f6e\\u4e3a0xFFF0\\uff0c\\u4ee5\\u4fbf\\u6267\\u884c\\u5f00\\u59cb\\uff08CS:IP\\uff09\\u6bb5\\u5730\\u5740\\u3002\\u6bb5\\u5730\\u57400xF000:FFF0\\u5982\\u4f55\\u8f6c\\u5316\\u4e3a\\u7269\\u7406\\u5730\\u5740\\u5462\\uff1f\\n\\n\\u4e3a\\u4e86\\u80fd\\u56de\\u7b54\\u4e0a\\u9762\\u7684\\u95ee\\u9898\\uff0c\\u6211\\u4eec\\u9700\\u8981\\u77e5\\u9053\\u70b9\\u771f\\u5b9e\\u6a21\\u5f0f\\u4e0b\\u7684\\u5bfb\\u5740\\u65b9\\u5f0f\\u3002\\u771f\\u5b9e\\u6a21\\u5f0f\\uff08PC\\u542f\\u52a8\\u65f6\\u8fdb\\u5165\\uff09\\uff0c\\u5730\\u5740\\u7684\\u8f6c\\u6362\\u5de5\\u4f5c\\u6839\\u636e\\u516c\\u5f0f\\uff1aphysical address = 16 * segment + offset\\u3002\\u6240\\u4ee5\\uff0c\\u5f53PC\\u5c06CS\\u8bbe\\u7f6e\\u4e3a0xF000\\u548cIP\\u4e3a0xFFF0\\u65f6\\uff0c\\u6240\\u5f15\\u7528\\u7684\\u7269\\u7406\\u5730\\u5740\\u662f\\uff1a\\n```\\n16 * 0xf000 + 0xfff0      # in hex multiplication by 16 is\\n   =  0xf0000 + 0xfff0    # easy--just append a 0.\\n   =  0xffff0 \\n```\\n0xFFFF0\\u662f16\\u4e2a\\u5b57\\u8282\\u7684\\uff0c\\u4f4d\\u4e8eBIOS\\u672b\\u5c3e\\uff080x100000\\uff09\\u3002\\u56e0\\u6b64\\uff0c\\u6211\\u4eec\\u4e0d\\u5e94\\u8be5\\u611f\\u5230\\u60ca\\u8bb6\\u7684\\u662f\\uff0cBIOS\\u6240\\u505a\\u7684\\u7b2c\\u4e00\\u4ef6\\u4e8b\\u662fJMP\\u5411\\u540e\\u5230BIOS\\u4e2d\\u7684\\u65e9\\u671f\\u4f4d\\u7f6e;\\u6bd5\\u7adf\\u5b83\\u53ef\\u4ee5\\u572816\\u4e2a\\u5b57\\u8282\\u4e2d\\u5b8c\\u6210\\u591a\\u5c11\\uff1f\\n\\n> \\u7ec3\\u4e60 2\\uff1a\\u4f7f\\u7528GDB\\u7684SI\\uff08\\u6b65\\u9aa4\\u6307\\u4ee4\\uff09\\u547d\\u4ee4\\u8ffd\\u8e2aROM BIOS\\u4e86\\u89e3\\u66f4\\u591a\\u8bf4\\u660e\\uff0c\\u5e76\\u8bd5\\u56fe\\u731c\\u6d4b\\u5b83\\u53ef\\u80fd\\u505a\\u4ec0\\u4e48\\u3002\\u60a8\\u53ef\\u80fd\\u5e0c\\u671b\\u67e5\\u770b[**Phil Storrs I \\/ O\\u7aef\\u53e3\\u63cf\\u8ff0**](http:\\/\\/web.archive.org\\/web\\/20040404164813\\/members.iweb.net.au\\/~pstorr\\/pcbook\\/book2\\/book2.htm)\\uff0c\\u4ee5\\u53ca[**6.828**](https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/reference.html)\\u53c2\\u8003\\u8d44\\u6599\\u9875\\u9762\\u4e0a\\u7684\\u5176\\u4ed6\\u6750\\u6599\\u3002\\u65e0\\u9700\\u5f04\\u61c2\\u6240\\u6709\\u7684\\u7ec6\\u8282\\uff0c\\u53ea\\u8981\\u660e\\u767dBIOS\\u9996\\u5148\\u505a\\u7684\\u662f\\u4ec0\\u4e48\\u3002\\n\\n\\u5f53BIOS\\u8fd0\\u884c\\u65f6\\uff0c\\u5b83\\u4f1a\\u8bbe\\u7f6e\\u4e00\\u4e2a\\u4e2d\\u65ad\\u63cf\\u8ff0\\u7b26\\u8868\\u5e76\\u521d\\u59cb\\u5316\\u8bf8\\u5982VGA\\u663e\\u793a\\u7b49\\u5404\\u79cd\\u8bbe\\u5907\\u3002\\u60a8\\u5728QEMU\\u7a97\\u53e3\\u4e2d\\u770b\\u5230\\u7684\\u201c\\u8d77\\u59cbSeabios\\u201d\\u6d88\\u606f\\u7684\\u6765\\u81eaVGA\\u3002\\n\\n\\u521d\\u59cb\\u5316PCI\\u603b\\u7ebf\\u548cBIOS\\u4e86\\u89e3\\u7684\\u6240\\u6709\\u91cd\\u8981\\u8bbe\\u5907\\u540e\\uff0c\\u5b83\\u641c\\u7d22\\u53ef\\u542f\\u52a8\\u8bbe\\u5907\\uff0c\\u5982\\u8f6f\\u76d8\\uff0c\\u786c\\u76d8\\u9a71\\u52a8\\u5668\\u6216CD-ROM\\u3002\\u6700\\u7ec8\\uff0c\\u5f53\\u5b83\\u627e\\u5230\\u53ef\\u542f\\u52a8\\u78c1\\u76d8\\u65f6\\uff0cBIOS\\u5c06\\u4ece\\u78c1\\u76d8\\u8bfb\\u53d6\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u5e76\\u628a\\u63a7\\u5236\\u6743\\u4ea4\\u7ed9\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u3002\\n\\n## Part 2: The Boot Loader\\nPC\\u7684\\u8f6f\\u76d8\\u548c\\u786c\\u76d8\\u5212\\u5206\\u6210512\\u5b57\\u8282\\u4e00\\u533a\\u57df\\uff0c\\u79f0\\u4e3a\\u6247\\u533a\\u3002\\u6247\\u533a\\u662f\\u786c\\u76d8\\u8fd0\\u8f6c\\u7684\\u6700\\u5c0f\\u9897\\u7c92\\uff1a\\u6bcf\\u6b21\\u8bfb\\u6216\\u5199\\u64cd\\u4f5c\\u5fc5\\u987b\\u4ee5\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u6247\\u533a\\u4e3a\\u5927\\u5c0f\\u4e14\\u4e0e\\u6247\\u533a\\u8fb9\\u754c\\u5bf9\\u9f50\\u3002\\u5982\\u679c\\u78c1\\u76d8\\u53ef\\u542f\\u52a8\\uff0c\\u5219\\u7b2c\\u4e00\\u4e2a\\u6247\\u533a\\u79f0\\u4e3a\\u5f15\\u5bfc\\u6247\\u533a\\uff0c\\u56e0\\u4e3a\\u8fd9\\u662f\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u4ee3\\u7801\\u6240\\u5728\\u7684\\u4f4d\\u7f6e\\u3002\\u5f53BIOS\\u627e\\u5230\\u53ef\\u542f\\u52a8\\u8f6f\\u76d8\\u6216\\u786c\\u76d8\\u65f6\\uff0c\\u5b83\\u5c06512\\u5b57\\u8282\\u5f15\\u5bfc\\u6247\\u533a\\u52a0\\u8f7d\\u5230\\u7269\\u7406\\u5730\\u57400x7c00\\u81f30x7dff\\u7684\\u5185\\u5b58\\u4e2d\\uff0c\\u7136\\u540e\\u4f7f\\u7528JMP\\u6307\\u4ee4\\u5c06CS:IP\\u8bbe\\u7f6e\\u4e3a0000:7C00\\uff0c\\u5c06\\u63a7\\u5236\\u4f20\\u9012\\u7ed9\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u3002\\u4e0eBIOS\\u52a0\\u8f7d\\u5730\\u5740\\u4e00\\u6837\\uff0c\\u8fd9\\u4e9b\\u5730\\u5740\\u662f\\u76f8\\u5f53\\u4efb\\u610f\\u7684 - \\u4f46\\u5b83\\u4eec\\u662f\\u56fa\\u5b9a\\u548c\\u6807\\u51c6\\u5316\\u7684PC\\n\\n\\u5728PC\\u6f14\\u53d8\\u671f\\u95f4\\uff0c\\u4eceCD-ROM\\u542f\\u52a8\\u80fd\\u529b\\u591a\\u4e86\\u8bb8\\u591a\\uff0c\\u56e0\\u6b64\\uff0cPC\\u67b6\\u6784\\u5e08\\u501f\\u6b64\\u673a\\u4f1a\\u7a0d\\u5fae\\u91cd\\u65b0\\u601d\\u8003\\u542f\\u52a8\\u7a0b\\u5e8f\\u3002","html":"<h1>Lab 1: Booting a PC<\\/h1>\\n<p>Due  Thersday, September 13, 2018<\\/p>\\n<h2>\\u7b80\\u4ecb<\\/h2>\\n<p>\\u8fd9\\u4e2a\\u5b9e\\u9a8c\\u5206\\u4e3a\\u4e09\\u4e2a\\u90e8\\u5206\\uff1a<\\/p>\\n<ol>\\n<li>\\u7b2c\\u4e00\\u90e8\\u5206\\u4e13\\u6ce8\\u4e8e\\u719f\\u6089 x86 \\u6c47\\u7f16\\u8bed\\u8a00\\u3001QEMU x86 \\u4eff\\u771f\\u5668\\u548c PC \\u7684\\u5f00\\u673a\\u5f15\\u5bfc\\u7a0b\\u5e8f\\u3002<\\/li>\\n<li>\\u7b2c\\u4e8c\\u90e8\\u5206\\u68c0\\u67e5\\u6211\\u4eec 6.828 \\u5185\\u6838\\u7684\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\uff0c\\u5b83\\u4f4d\\u4e8e lab \\u76ee\\u5f55\\u4e0b\\u7684 boot \\u6587\\u4ef6\\u5939\\u4e0b<\\/li>\\n<li>\\u7b2c\\u4e09\\u90e8\\u5206\\u6df1\\u5165\\u63a2\\u8ba8\\u4e86\\u6211\\u4eec 6.828 \\u5185\\u6838\\u672c\\u8eab\\u521d\\u59cb\\u6a21\\u677f\\uff0c\\u540d\\u4e3a JOS\\uff0c\\u5b83\\u4f4d\\u4e8e kernel \\u76ee\\u5f55\\u4e0b<\\/li>\\n<\\/ol>\\n<h2>\\u8f6f\\u4ef6\\u8bbe\\u7f6e<\\/h2>\\n<p>\\u60a8\\u5728\\u672c\\u8bfe\\u7a0b\\u4e2d\\u548c\\u540e\\u7eed\\u5b9e\\u9a8c\\u8fc7\\u7a0b\\u4e2d\\u6240\\u9700\\u7684\\u6587\\u4ef6\\u662f\\u4f7f\\u7528 Git \\u7248\\u672c\\u63a7\\u5236\\u7cfb\\u7edf\\u5206\\u53d1\\u7684\\u3002\\u8981\\u4e86\\u89e3\\u6709\\u5173 Git \\u7684\\u66f4\\u591a\\u4fe1\\u606f\\uff0c\\u8bf7\\u67e5\\u770b<strong> <a href=\\"http:\\/\\/www.kernel.org\\/pub\\/software\\/scm\\/git\\/docs\\/user-manual.html\\">Git \\u7528\\u6237\\u624b\\u518c<\\/a><\\/strong>\\uff0c\\u6216\\u8005\\uff0c\\u5982\\u679c\\u60a8\\u5df2\\u7ecf\\u719f\\u6089\\u5176\\u4ed6\\u7248\\u672c\\u63a7\\u5236\\u7cfb\\u7edf\\uff0c\\u60a8\\u53ef\\u80fd\\u4f1a\\u53d1\\u73b0\\u8fd9\\u7bc7 <a href=\\"http:\\/\\/eagain.net\\/articles\\/git-for-computer-scientists\\/\\"> CS-oriented overview of Git<\\/a> \\u5f88\\u6709\\u7528\\u3002<\\/p>\\n<p>\\u672c\\u8bfe\\u7a0b Git \\u5b58\\u50a8\\u5e93\\u7684 URL \\u662f <a href=\\"https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/jos.git\\">https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/jos.git<\\/a>\\u3002\\u8981\\u5728\\u4f60\\u7684 Athena \\u5e10\\u6237\\u4e2d\\u5b89\\u88c5\\u6587\\u4ef6\\uff0c\\u4f60\\u9700\\u8981\\u901a\\u8fc7\\u8fd0\\u884c\\u4ee5\\u4e0b\\u547d\\u4ee4\\u6765\\u514b\\u9686\\u8bfe\\u7a0b\\u5b58\\u50a8\\u5e93\\u3002\\u4f60\\u5fc5\\u987b\\u4f7f\\u7528 X86 Athena \\u673a\\u5668\\uff1b\\u5373\\uff0c<code>uname -s<\\/code> \\u8981\\u6709 i386 GNU\\/Linux or i686 GNU\\/Linux or x86_64 GNU\\/Linux \\u76f8\\u5173\\u5b57\\u773c\\u3002\\u4f60\\u53ef\\u4ee5\\u4f7f\\u7528 ssh -X athena.dialup.mit.edu \\u767b\\u5f55\\u5230\\u516c\\u5171 Athena \\u4e3b\\u673a\\u3002<\\/p>\\n<pre><code>athena% mkdir ~\\/6.828\\nathena% cd ~\\/6.828\\nathena% add git\\nathena% git clone https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/jos.git lab\\nCloning into lab...\\nathena% cd lab\\nathena% <\\/code><\\/pre>\\n<p>Git \\u5141\\u8bb8\\u60a8\\u8ddf\\u8e2a\\u5bf9\\u4ee3\\u7801\\u6240\\u505a\\u7684\\u66f4\\u6539\\u3002\\u4f8b\\u5982\\uff0c\\u5982\\u679c\\u60a8\\u5b8c\\u6210\\u4e86\\u5176\\u4e2d\\u4e00\\u9879\\u7ec3\\u4e60\\uff0c\\u5e76\\u4e14\\u60f3\\u8981\\u68c0\\u67e5\\u60a8\\u7684\\u8fdb\\u5ea6\\uff0c\\u60a8\\u53ef\\u4ee5\\u901a\\u8fc7\\u8fd0\\u884c\\u4ee5\\u4e0b\\u547d\\u4ee4\\u63d0\\u4ea4\\u60a8\\u7684\\u66f4\\u6539\\uff1a<\\/p>\\n<pre><code>athena% git commit -am \'my solution for lab1 exercise 9\'\\nCreated commit 60d2135: my solution for lab1 exercise 9\\n 1 files changed, 1 insertions(+), 0 deletions(-)\\nathena% <\\/code><\\/pre>\\n<p>\\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528 git diff \\u547d\\u4ee4\\u67e5\\u770b\\u4f60\\u7684\\u66f4\\u6539\\u3002\\u8fd0\\u884c git diff \\u5c06\\u663e\\u793a\\u81ea\\u4e0a\\u6b21\\u63d0\\u4ea4\\u4ee5\\u6765\\u5bf9\\u4ee3\\u7801\\u7684\\u66f4\\u6539\\uff0c\\u800c git diff origin\\/lab1 \\u5c06\\u663e\\u793a\\u76f8\\u5bf9\\u4e8e\\u4e3a\\u672c\\u5b9e\\u9a8c\\u5ba4\\u63d0\\u4f9b\\u7684\\u521d\\u59cb\\u4ee3\\u7801\\u7684\\u66f4\\u6539\\u3002\\u5728\\u8fd9\\u91cc\\uff0corigin\\/lab1 \\u662f git \\u5206\\u652f\\u7684\\u540d\\u79f0\\uff0c\\u5176\\u4e2d\\u5305\\u542b\\u60a8\\u4ece\\u6211\\u4eec\\u7684\\u670d\\u52a1\\u5668\\u4e0b\\u8f7d\\u7684\\u7528\\u4e8e\\u6b64\\u4f5c\\u4e1a\\u7684\\u521d\\u59cb\\u4ee3\\u7801\\u3002<\\/p>\\n<p>\\u5982\\u679c\\u60a8\\u5728\\u975e Athena \\u673a\\u5668\\u4e0a\\u5de5\\u4f5c\\uff0c\\u5219\\u9700\\u8981\\u6309\\u7167\\u5de5\\u5177\\u9875\\u9762\\u4e0a\\u7684\\u8bf4\\u660e\\u5b89\\u88c5 qemu \\u548c gcc\\u3002\\u6211\\u4eec\\u5df2\\u7ecf\\u5bf9 qemu \\u8fdb\\u884c\\u4e86\\u4e00\\u4e9b\\u6709\\u7528\\u7684\\u8c03\\u8bd5\\u66f4\\u6539\\uff0c\\u5e76\\u4e14\\u4e00\\u4e9b\\u540e\\u6765\\u7684\\u5b9e\\u9a8c\\u5ba4\\u4f9d\\u8d56\\u4e8e\\u8fd9\\u4e9b\\u8865\\u4e01\\uff0c\\u56e0\\u6b64\\u60a8\\u5fc5\\u987b\\u6784\\u5efa\\u81ea\\u5df1\\u7684\\u3002\\u5982\\u679c\\u60a8\\u7684\\u673a\\u5668\\u4f7f\\u7528\\u672c\\u673a ELF \\u5de5\\u5177\\u94fe\\uff08\\u4f8b\\u5982 Linux \\u548c\\u5927\\u591a\\u6570 BSD\\uff0c\\u4f46\\u7279\\u522b\\u662f\\u4e0d\\u662f OS X\\uff09\\uff0c\\u60a8\\u53ef\\u4ee5\\u7b80\\u5355\\u5730\\u4ece\\u5305\\u7ba1\\u7406\\u5668\\u5b89\\u88c5 gcc\\u3002 \\u5426\\u5219\\uff0c\\u8bf7\\u6309\\u7167\\u5de5\\u5177\\u9875\\u9762\\u4e0a\\u7684\\u8bf4\\u660e\\u8fdb\\u884c\\u64cd\\u4f5c\\u3002<\\/p>\\n<h2>Hand-In Procedure<\\/h2>\\n<p>......(\\u7565\\u8fc7)<\\/p>\\n<h2>Part 1\\uff1aPC Bootstrap<\\/h2>\\n<p>\\u7b2c\\u4e00\\u4e2a\\u7ec3\\u4e60\\u7684\\u76ee\\u7684\\u662f\\u5411\\u4f60\\u4ecb\\u7ecd x86 \\u6c47\\u7f16\\u8bed\\u8a00\\u548c PC \\u5f15\\u5bfc\\u7a0b\\u5e8f\\uff0c\\u5e76\\u8ba9\\u4f60\\u5f00\\u59cb\\u4f7f\\u7528 QEMU \\u548c QEMU\\/GDB \\u8c03\\u8bd5\\u3002\\u4f60\\u4e0d\\u5fc5\\u4e3a\\u8fd9\\u6b21\\u5b9e\\u9a8c\\u5199\\u4efb\\u4f55\\u4ee3\\u7801\\uff0c\\u4f46\\u4f60\\u65e0\\u8bba\\u5982\\u4f55\\u90fd\\u5e94\\u8be5\\u901a\\u8fc7\\u5b83\\u6765\\u8ba9\\u4f60\\u7406\\u89e3\\u77e5\\u8bc6\\u70b9\\uff0c\\u5e76\\u51c6\\u5907\\u597d\\u56de\\u7b54\\u4e0b\\u9762\\u7684\\u95ee\\u9898\\u3002<\\/p>\\n<h3>Getting Started with X86 assembly<\\/h3>\\n<p>\\u5982\\u679c\\u4f60\\u8fd8\\u4e0d\\u719f\\u6089 X86 \\u6c47\\u7f16\\u8bed\\u8a00\\uff0c\\u5728\\u8fd9\\u8bfe\\u7a0b\\u4e2d\\u4f60\\u5c06\\u4f1a\\u5f88\\u5feb\\u719f\\u6089\\u5b83\\u3002<strong><a href=\\"https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/readings\\/pcasm-book.pdf\\">PC Assembly Language Book<\\/a> <\\/strong>\\u4e00\\u4e2a\\u4e0d\\u9519\\u7684\\u5165\\u95e8\\u4e66\\u7c4d\\uff0c\\u8fd9\\u672c\\u4e66\\u4e3a\\u4f60\\u63d0\\u4f9b\\u4e86\\u65b0\\u65e7\\u6750\\u6599\\u7684\\u5bf9\\u7167\\u3002<\\/p>\\n<p>\\u6ce8\\u610f\\uff1a\\u4e0d\\u5e78\\u7684\\u662f\\uff0c\\u672c\\u4e66\\u4e2d\\u7684\\u793a\\u4f8b\\u662f\\u4e3aNASM\\u6c47\\u7f16\\u7a0b\\u5e8f\\u7f16\\u5199\\u7684\\uff0c\\u800c\\u6211\\u4eec\\u5c06\\u4f7f\\u7528GNU\\u6c47\\u7f16\\u7a0b\\u5e8f\\u3002NASM\\u4f7f\\u7528\\u6240\\u8c13\\u7684Intel\\u8bed\\u6cd5\\uff0c\\u800cGNU\\u4f7f\\u7528AT&amp;T\\u8bed\\u6cd5\\u3002\\u867d\\u7136\\u8bed\\u4e49\\u4e0a\\u662f\\u7b49\\u4ef7\\u7684\\uff0c\\u4f46\\u7a0b\\u5e8f\\u96c6\\u6587\\u4ef6\\u4f1a\\u6709\\u5f88\\u5927\\u4e0d\\u540c\\uff0c\\u81f3\\u5c11\\u8868\\u9762\\u4e0a\\u662f\\u5982\\u6b64\\uff0c\\u8fd9\\u53d6\\u51b3\\u4e8e\\u4f7f\\u7528\\u7684\\u8bed\\u6cd5\\u3002\\u5e78\\u8fd0\\u7684\\u662f\\uff0c\\u4e24\\u8005\\u4e4b\\u95f4\\u7684\\u8f6c\\u6362\\u975e\\u5e38\\u7b80\\u5355\\uff0cBrennan\\u7684<strong> <a href=\\"http:\\/\\/www.delorie.com\\/djgpp\\/doc\\/brennan\\/brennan_att_inline_djgpp.html\\">ennan\'s Guide to Inline Assembly<\\/a><\\/strong>\\u8fdb\\u884c\\u4e86\\u4ecb\\u7ecd\\u3002<\\/p>\\n<blockquote>\\n<p>\\u7ec3\\u4e601. \\u719f\\u6089 6.828 \\u53c2\\u8003\\u9875\\u4e0a\\u6240\\u63d0\\u4f9b\\u7684\\u6c47\\u7f16\\u6750\\u6599\\u3002\\u4f60\\u6ca1\\u6709\\u5fc5\\u8981\\u73b0\\u5728\\u8bfb\\u5b83\\u4eec\\uff0c\\u4f46\\u9605\\u8bfb\\u548c\\u7f16\\u5199 x86 \\u7a0b\\u5e8f\\u96c6\\u65f6\\uff0c\\u4f60\\u51e0\\u4e4e\\u80af\\u5b9a\\u4f1a\\u5e0c\\u671b\\u53c2\\u8003\\u5176\\u4e2d\\u7684\\u4e00\\u4e9b\\u8d44\\u6599\\u3002<br \\/>\\n\\u6211\\u4eec\\u5efa\\u8bae\\u9605\\u8bfbBrennan\\u7684<strong> <a href=\\"http:\\/\\/www.delorie.com\\/djgpp\\/doc\\/brennan\\/brennan_att_inline_djgpp.html\\">Brennan\'s Guide to Inline Assembly<\\/a><\\/strong> \\u4e2d\\u7684\\u201c\\u8bed\\u6cd5\\u201d\\u4e00\\u8282\\u3002\\u5b83\\u5bf9\\u6211\\u4eec\\u5c06\\u5728JOS\\u4e2d\\u4e0eGNU\\u6c47\\u7f16\\u7a0b\\u5e8f\\u4e00\\u8d77\\u4f7f\\u7528\\u7684AT&amp;T\\u6c47\\u7f16\\u8bed\\u6cd5\\u7ed9\\u51fa\\u4e86\\u4e00\\u4e2a\\u5f88\\u597d\\u7684\\uff08\\u800c\\u4e14\\u975e\\u5e38\\u7b80\\u77ed\\u7684\\uff09\\u63cf\\u8ff0\\u3002<\\/p>\\n<\\/blockquote>\\n<p>\\u5f53\\u7136\\uff0cx86 \\u6c47\\u7f16\\u8bed\\u8a00\\u7f16\\u7a0b\\u7684\\u6743\\u5a01\\u53c2\\u8003\\u662f Intel \\u7684\\u6307\\u4ee4\\u96c6\\u67b6\\u6784\\u53c2\\u8003\\uff0c\\u60a8\\u53ef\\u4ee5\\u5728 6.828 \\u53c2\\u8003\\u9875\\u4e0a\\u627e\\u5230\\u4e24\\u79cd\\u7248\\u672c\\uff1a\\u65e7\\u7684 80386 \\u7a0b\\u5e8f\\u5458\\u53c2\\u8003\\u624b\\u518c\\u7684 HTML \\u7248\\u672c\\uff0c\\u76f8\\u8f83\\u4e8e\\u6700\\u8fd1\\u7684\\u624b\\u518c\\uff0c\\u5b83\\u66f4\\u77ed\\u66f4\\u5bb9\\u6613\\u5bfc\\u822a\\uff0c\\u800c\\u4e14\\u63cf\\u8ff0\\u4e86\\u6211\\u4eec\\u5c06\\u5728 6.828 \\u4e2d\\u4f7f\\u7528\\u7684\\u6240\\u6709 x86 \\u5904\\u7406\\u5668\\u529f\\u80fd\\uff1b\\u4ee5\\u53ca\\u6765\\u81ea\\u82f1\\u7279\\u5c14\\u7684\\u5b8c\\u6574\\u3001\\u6700\\u65b0\\u548c\\u6700\\u597d\\u7684 IA-32 \\u82f1\\u7279\\u5c14\\u67b6\\u6784\\u8f6f\\u4ef6\\u5f00\\u53d1\\u4eba\\u5458\\u624b\\u518c\\uff0c\\u6db5\\u76d6\\u4e86\\u6211\\u4eec\\u5728\\u8bfe\\u5802\\u4e0a\\u4e0d\\u9700\\u8981\\u4f46\\u60a8\\u53ef\\u80fd\\u6709\\u5174\\u8da3\\u4e86\\u89e3\\u7684\\u6700\\u65b0\\u5904\\u7406\\u5668\\u7684\\u6240\\u6709\\u529f\\u80fd\\u3002 AMD \\u63d0\\u4f9b\\u4e86\\u4e00\\u5957\\u7b49\\u6548\\uff08\\u901a\\u5e38\\u66f4\\u53cb\\u597d\\uff09\\u7684\\u624b\\u518c\\u3002 \\u4fdd\\u5b58 Intel\\/AMD \\u67b6\\u6784\\u624b\\u518c\\u4ee5\\u5907\\u540e\\u7528\\uff0c\\u6216\\u5728\\u60a8\\u60f3\\u8981\\u67e5\\u627e\\u7279\\u5b9a\\u5904\\u7406\\u5668\\u529f\\u80fd\\u6216\\u6307\\u4ee4\\u7684\\u6700\\u7ec8\\u89e3\\u91ca\\u65f6\\u5c06\\u5176\\u7528\\u4f5c\\u53c2\\u8003\\u3002<\\/p>\\n<h3>Simulating the x86<\\/h3>\\n<p>\\u505a\\u4e3a\\u5728\\u771f\\u5b9ePC\\u4e0a\\u5f00\\u53d1\\u4e00\\u4e2a\\u64cd\\u4f5c\\u7cfb\\u7edf\\u7684\\u4ee3\\u66ff\\uff0c\\u6211\\u4eec\\u81ea\\u4fe1\\u7684\\u4f7f\\u7528\\u4e00\\u4e2a\\u7a0b\\u5e8f\\u6765\\u6a21\\u62df PC\\uff1a\\u4f60\\u5728\\u6a21\\u62df\\u5668\\u4e0a\\u5199\\u7684\\u4ee3\\u7801\\uff0c\\u5c06\\u4f1a\\u50cf\\u5728\\u771f\\u5b9e PC \\u4e0a\\u4e00\\u6837\\u542f\\u52a8\\u3002\\u4f7f\\u7528\\u6a21\\u62df\\u5668\\u53ef\\u4ee5\\u7b80\\u5316\\u8c03\\u8bd5\\uff0c\\u4f8b\\u5982\\uff0c\\u4f60\\u80fd\\u5728 x86 \\u6a21\\u62df\\u5668\\u91cc\\u8bbe\\u7f6e\\u65ad\\u70b9\\uff0c\\u800c\\u5728 x86 \\u7684\\u7845\\u7248\\u672c\\u5f88\\u96be\\u505a\\u5230\\u8fd9\\u4e00\\u70b9\\u3002<\\/p>\\n<p>\\u5728 6.828 \\u6211\\u4eec\\u4f1a\\u4f7f\\u7528 \\u73b0\\u4ee3\\u4e14\\u76f8\\u5bf9\\u5feb\\u901f QEMU \\u6a21\\u62df\\u5668\\u3002\\u867d\\u7136 QEMU \\u7684\\u5185\\u7f6e\\u76d1\\u89c6\\u5668\\u4ec5\\u63d0\\u4f9b\\u6709\\u9650\\u7684\\u8c03\\u8bd5\\u652f\\u6301\\uff0c\\u4f46 QEMU \\u53ef\\u4ee5\\u5145\\u5f53 GNU \\u8c03\\u8bd5\\u5668 (GDB) \\u7684\\u8fdc\\u7a0b\\u8c03\\u8bd5\\u76ee\\u6807\\uff0c\\u6211\\u4eec\\u5c06\\u5728\\u672c\\u5b9e\\u9a8c\\u5ba4\\u4e2d\\u4f7f\\u7528\\u5b83\\u6765\\u9010\\u6b65\\u5b8c\\u6210\\u65e9\\u671f\\u542f\\u52a8\\u8fc7\\u7a0b\\u3002<\\/p>\\n<p>\\u9996\\u5148\\uff0c\\u6309\\u7167\\u4e0a\\u9762\\u201c\\u8f6f\\u4ef6\\u8bbe\\u7f6e\\u201d\\u4e2d\\u7684\\u63cf\\u8ff0\\uff0c\\u5c06Lab1 \\u6587\\u4ef6\\u89e3\\u538b\\u5230\\u4f60\\u81ea\\u5df1\\u5728 Athena \\u4e0a\\u7684\\u76ee\\u5f55\\u4e2d\\uff0c\\u7136\\u540e\\u5728\\u76ee\\u5f55\\u4e2d\\u952e\\u5165 make (\\u6216\\u5728 BSD \\u7cfb\\u7edf\\u4e0a\\u4e3a gmake)\\u53bb\\u6784\\u5efa\\u4f60\\u8981\\u542f\\u52a8\\u7684\\u6700\\u5c0f 6.828 \\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u548c\\u5185\\u6838\\u3002\\uff08\\u5c06\\u6211\\u4eec\\u5728\\u8fd9\\u91cc\\u8fd0\\u884c\\u7684\\u4ee3\\u7801\\u79f0\\u4e3a\\u201c\\u5185\\u6838\\u201d\\u6709\\u70b9\\u6177\\u6168\\uff0c\\u4f46\\u6211\\u4eec\\u5c06\\u5728\\u6574\\u4e2a\\u5b66\\u671f\\u5145\\u5b9e\\u5b83\\u3002\\uff09<\\/p>\\n<pre><code>athena% cd lab\\nathena% make\\n+ as kern\\/entry.S\\n+ cc kern\\/entrypgdir.c\\n+ cc kern\\/init.c\\n+ cc kern\\/console.c\\n+ cc kern\\/monitor.c\\n+ cc kern\\/printf.c\\n+ cc kern\\/kdebug.c\\n+ cc lib\\/printfmt.c\\n+ cc lib\\/readline.c\\n+ cc lib\\/string.c\\n+ ld obj\\/kern\\/kernel\\n+ as boot\\/boot.S\\n+ cc -Os boot\\/main.c\\n+ ld boot\\/boot\\nboot block is 380 bytes (max 510)\\n+ mk obj\\/kern\\/kernel.img<\\/code><\\/pre>\\n<p>(\\u5982\\u679c\\u4f60\\u5f97\\u5230\\u7c7b\\u4f3c\\u201cundefined reference to `__udivdi3\'\\u201d\\u8fd9\\u6837\\u7684\\u9519\\u8bef\\uff0c\\u4f60\\u53ef\\u80fd\\u6ca1\\u6709 32 \\u4f4d\\u7684 gcc multilib\\u3002\\u5982\\u679c\\u4f60\\u8fd0\\u884c\\u7684\\u662f Debian \\u6216 Ubuntu\\uff0c\\u8bf7\\u5c1d\\u8bd5\\u5b89\\u88c5 gcc-multilib \\u5305)<br \\/>\\n\\u73b0\\u5728\\u60a8\\u5df2\\u51c6\\u5907\\u597d\\u8fd0\\u884c QEMU\\uff0c\\u63d0\\u4f9b\\u4e0a\\u9762\\u521b\\u5efa\\u7684\\u6587\\u4ef6 obj\\/kern\\/kernel.img \\u4f5c\\u4e3a\\u6a21\\u62df PC \\u7684\\u201c\\u865a\\u62df\\u786c\\u76d8\\u201d\\u7684\\u5185\\u5bb9\\u3002 \\u8fd9\\u4e2a\\u786c\\u76d8\\u6620\\u50cf\\u5305\\u542b\\u6211\\u4eec\\u7684\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\uff08obj\\/boot\\/boot\\uff09\\u548c\\u6211\\u4eec\\u7684\\u5185\\u6838\\uff08obj\\/kernel\\uff09\\u3002<\\/p>\\n<pre><code>athena% make qemu<\\/code><\\/pre>\\n<p>or<\\/p>\\n<pre><code>athena% make qemu-nox<\\/code><\\/pre>\\n<p>\\u8fd9\\u5c06\\u4f7f\\u7528\\u8bbe\\u7f6e\\u786c\\u76d8\\u548c\\u76f4\\u63a5\\u4e32\\u884c\\u7aef\\u53e3\\u8f93\\u51fa\\u5230\\u7ec8\\u7aef\\u4e24\\u9879\\u9009\\u9879\\u6765\\u6267\\u884c QEMU\\u3002\\u4e00\\u4e9b\\u6587\\u672c\\u5185\\u5bb9\\u5c06\\u8f93\\u51fa\\u5230 QEMU \\u7a97\\u53e3\\u4e2d\\uff1a<\\/p>\\n<pre><code>Booting from Hard Disk...\\n6828 decimal is XXX octal!\\nentering test_backtrace 5\\nentering test_backtrace 4\\nentering test_backtrace 3\\nentering test_backtrace 2\\nentering test_backtrace 1\\nentering test_backtrace 0\\nleaving test_backtrace 0\\nleaving test_backtrace 1\\nleaving test_backtrace 2\\nleaving test_backtrace 3\\nleaving test_backtrace 4\\nleaving test_backtrace 5\\nWelcome to the JOS kernel monitor!\\nType \'help\' for a list of commands.\\nK&gt;<\\/code><\\/pre>\\n<p>\\u4ee5\\u4e0a\\u5185\\u5bb9\\u90fd\\u662f\\u7531\\u6211\\u4eec\\u7b80\\u5355 JOS \\u5185\\u6838\\u8f93\\u51fa\\u7684\\u3002K&gt; \\u63d0\\u793a\\u7b26\\u662f\\u7531\\u6211\\u4eec\\u5185\\u6838\\u5305\\u542b\\u7684\\u5c0f\\u76d1\\u63a7\\u5668\\u6216\\u4ea4\\u4e92\\u7a0b\\u5e8f\\u8f93\\u51fa\\u7684\\u3002\\u5982\\u679c\\u60a8\\u4f7f\\u7528 make qemu\\uff0c\\u5185\\u6838\\u6253\\u5370\\u7684\\u8fd9\\u4e9b\\u884c\\u5c06\\u51fa\\u73b0\\u5728\\u60a8\\u8fd0\\u884c QEMU \\u7684\\u5e38\\u89c4 shell \\u7a97\\u53e3\\u548c QEMU \\u663e\\u793a\\u7a97\\u53e3\\u4e2d\\u3002\\u8fd9\\u662f\\u56e0\\u4e3a\\u51fa\\u4e8e\\u6d4b\\u8bd5\\u548c\\u5b9e\\u9a8c\\u5ba4\\u8bc4\\u5206\\u7684\\u76ee\\u7684\\uff0c\\u6211\\u4eec\\u8bbe\\u7f6e\\u4e86 JOS \\u5185\\u6838\\uff0c\\u4e0d\\u4ec5\\u5c06\\u5176\\u63a7\\u5236\\u53f0\\u8f93\\u51fa\\u5199\\u5165\\u865a\\u62df VGA \\u663e\\u793a\\u5668\\uff08\\u5982 QEMU \\u7a97\\u53e3\\u4e2d\\u6240\\u793a\\uff09\\uff0c\\u4e5f\\u53ef\\u4ee5\\u8fde\\u63a5\\u5230\\u6a21\\u62df PC \\u7684\\u865a\\u62df\\u4e32\\u53e3\\uff0cQEMU \\u53cd\\u8fc7\\u6765\\u8f93\\u51fa\\u5230\\u5b83\\u81ea\\u5df1\\u7684\\u6807\\u51c6\\u8f93\\u51fa\\u3002\\u540c\\u6837\\uff0cJOS \\u5185\\u6838\\u5c06\\u4ece\\u952e\\u76d8\\u548c\\u4e32\\u884c\\u7aef\\u53e3\\u83b7\\u53d6\\u8f93\\u5165\\uff0c\\u56e0\\u6b64\\u60a8\\u53ef\\u4ee5\\u5728 VGA \\u663e\\u793a\\u7a97\\u53e3\\u6216\\u8fd0\\u884c QEMU \\u7684\\u7ec8\\u7aef\\u4e2d\\u7ed9\\u5b83\\u547d\\u4ee4\\u3002 \\u6216\\u8005\\uff0c\\u60a8\\u53ef\\u4ee5\\u901a\\u8fc7\\u8fd0\\u884c make qemu-nox \\u6765\\u4f7f\\u7528\\u6ca1\\u6709\\u865a\\u62df VGA \\u7684\\u4e32\\u884c\\u63a7\\u5236\\u53f0\\u3002 \\u5982\\u679c\\u60a8\\u901a\\u8fc7 SSH \\u8fde\\u63a5\\u5230 Athena \\u62e8\\u53f7\\uff0c\\u8fd9\\u53ef\\u80fd\\u4f1a\\u5f88\\u65b9\\u4fbf\\u3002 \\u8981\\u9000\\u51fa qemu\\uff0c\\u8bf7\\u952e\\u5165 Ctrl+a x\\u3002<\\/p>\\n<p>\\u53ea\\u6709\\u4e24\\u4e2a\\u547d\\u4ee4\\u53ef\\u4ee5\\u63d0\\u4f9b\\u7ed9\\u5185\\u6838\\u76d1\\u89c6\\u5668\\uff0chelp \\u548c kerninfo\\u3002<\\/p>\\n<pre><code>K&gt; help\\nhelp - display this list of commands\\nkerninfo - display information about the kernel\\nK&gt; kerninfo\\nSpecial kernel symbols:\\n  entry  f010000c (virt)  0010000c (phys)\\n  etext  f0101a75 (virt)  00101a75 (phys)\\n  edata  f0112300 (virt)  00112300 (phys)\\n  end    f0112960 (virt)  00112960 (phys)\\nKernel executable memory footprint: 75KB\\nK&gt;<\\/code><\\/pre>\\n<p>help \\u547d\\u4ee4\\u7684\\u610f\\u601d\\u5f88\\u660e\\u663e\\uff0c\\u6211\\u4eec\\u5c06\\u7b80\\u77ed\\u5730\\u8ba8\\u8bba\\u4e0b kerninfo \\u547d\\u4ee4\\u6253\\u5370\\u51fa\\u5185\\u5bb9\\u7684\\u542b\\u4e49\\u3002\\u867d\\u7136\\u5f88\\u7b80\\u5355\\uff0c\\u4f46\\u8981\\u91cd\\u70b9\\u6ce8\\u610f\\u8fd9\\u4e2a\\u5185\\u6838\\u76d1\\u89c6\\u5668\\u201c\\u76f4\\u63a5\\u201d\\u5728\\u6a21\\u62df PC \\u7684\\u201c\\u539f\\u59cb\\uff08\\u865a\\u62df\\uff09\\u786c\\u4ef6\\u201d\\u4e0a\\u8fd0\\u884c\\u3002\\u8fd9\\u610f\\u5473\\u7740\\u60a8\\u5e94\\u8be5\\u80fd\\u591f\\u5c06 obj\\/kern\\/kernel.img \\u7684\\u5185\\u5bb9\\u590d\\u5236\\u5230\\u771f\\u5b9e\\u786c\\u76d8\\u7684\\u524d\\u51e0\\u4e2a\\u6247\\u533a\\uff0c\\u5c06\\u8be5\\u786c\\u76d8\\u63d2\\u5165\\u771f\\u5b9e PC\\uff0c\\u542f\\u52a8\\u5b83\\uff0c\\u7136\\u540e\\uff08\\u5728 PC \\u7684\\u771f\\u5b9e\\u5c4f\\u5e55\\u4e0a\\uff09\\u770b\\u5230\\u5b8c\\u5168\\u76f8\\u540c\\u7684\\u5185\\u5bb9\\uff0c\\u540c\\u4f60\\u5728 QEMU \\u7a97\\u53e3\\u4e2d\\u6240\\u505a\\u7684\\u4e00\\u6837\\u3002\\uff08\\u6211\\u4eec\\u4e0d\\u5efa\\u8bae\\u4f60\\u5728\\u771f\\u673a\\u6267\\u884c\\u6b64\\u64cd\\u4f5c\\uff0c\\u5f53\\u771f\\u673a\\u7684\\u786c\\u76d8\\u4e0a\\u6709\\u7740\\u6709\\u7528\\u6570\\u636e\\u3002\\u56e0\\u4e3a\\u5c06 kernel.img \\u590d\\u5236\\u5230\\u5176\\u786c\\u76d8\\u7684\\u5f00\\u5934\\u4f1a\\u7834\\u574f\\u4e3b\\u5f15\\u5bfc\\u8bb0\\u5f55\\u548c\\u7b2c\\u4e00\\u4e2a\\u5206\\u533a\\u7684\\u5f00\\u5934\\uff0c\\u4ece\\u800c\\u5bfc\\u81f4\\u786c\\u76d8\\u4e0a\\u4fdd\\u5b58\\u7684\\u4e00\\u5207\\u6570\\u636e\\u90fd\\u5c06\\u4e22\\u5931\\uff01\\uff09<\\/p>\\n<h3>The PC\'s Physical Address Space<\\/h3>\\n<p>\\u6211\\u4eec\\u73b0\\u5728\\u5c06\\u6df1\\u5165\\u4e86\\u89e3\\u6709\\u5173PC\\u5982\\u4f55\\u542f\\u52a8\\u7684\\u66f4\\u591a\\u7ec6\\u8282\\u3002PC \\u7684\\u5904\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u662f\\u786c\\u8fde\\u7ebf\\u7684\\uff0c\\u5177\\u6709\\u4ee5\\u4e0b\\u603b\\u4f53\\u5e03\\u5c40\\uff1a<\\/p>\\n<p><img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/17\\/lZTKpCfJhchqGQdYL14gW4BS6ArI6x2h4W9T6tpd.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<p>\\u7b2c\\u4e00\\u6279\\u57fa\\u4e8e 16 \\u4f4d Intel 8088 \\u5904\\u7406\\u5668\\u7684 PC \\u53ea\\u80fd\\u5bfb\\u5740 1MB \\u7684\\u7269\\u7406\\u5185\\u5b58\\u3002\\u56e0\\u6b64\\uff0c\\u65e9\\u671f PC \\u7684\\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u5c06\\u4ece 0x00000000 \\u5f00\\u59cb\\uff0c\\u4f46\\u4ee5 0x000FFFFF \\u800c\\u4e0d\\u662f 0xFFFFFFFF \\u7ed3\\u675f\\u3002\\u6807\\u8bb0\\u4e3a\\u201c\\u4f4e\\u5185\\u5b58\\u201d\\u7684 640KB \\u533a\\u57df\\u662f\\u65e9\\u671f PC \\u53ef\\u4ee5\\u4f7f\\u7528\\u7684\\u552f\\u4e00\\u968f\\u673a\\u5b58\\u53d6\\u5b58\\u50a8\\u5668 (RAM);\\u4e8b\\u5b9e\\u4e0a\\uff0c\\u6700\\u65e9\\u7684 PC \\u53ea\\u80fd\\u914d\\u7f6e 16KB\\u300132KB \\u6216 64KB \\u7684 RAM\\uff01<\\/p>\\n<p>\\u4ece 0x000A0000 \\u5230 0x000FFFFF \\u7684 384KB \\u533a\\u57df\\u7531\\u786c\\u4ef6\\u4fdd\\u7559\\uff0c\\u7528\\u4e8e\\u7279\\u6b8a\\u7528\\u9014\\uff0c\\u4f8b\\u5982\\u89c6\\u9891\\u663e\\u793a\\u7f13\\u51b2\\u533a\\u548c\\u4fdd\\u5b58\\u5728\\u975e\\u6613\\u5931\\u6027\\u5b58\\u50a8\\u5668\\u4e2d\\u7684\\u56fa\\u4ef6\\u3002\\u8fd9\\u4e2a\\u4fdd\\u7559\\u533a\\u57df\\u6700\\u91cd\\u8981\\u7684\\u90e8\\u5206\\u662f\\u57fa\\u672c\\u8f93\\u5165\\/\\u8f93\\u51fa\\u7cfb\\u7edf (BIOS)\\uff0c\\u5b83\\u5360\\u636e\\u4e86\\u4ece 0x000F0000 \\u5230 0x000FFFFF \\u7684 64KB \\u533a\\u57df\\u3002\\u5728\\u65e9\\u671f\\u7684 PC \\u4e2d\\uff0cBIOS \\u4fdd\\u5b58\\u5728\\u771f\\u6b63\\u7684\\u53ea\\u8bfb\\u5b58\\u50a8\\u5668 (ROM) \\u4e2d\\uff0c\\u4f46\\u5f53\\u524d\\u7684 PC \\u5c06 BIOS \\u5b58\\u50a8\\u5728\\u53ef\\u66f4\\u65b0\\u7684\\u95ea\\u5b58\\u4e2d\\u3002BIOS \\u8d1f\\u8d23\\u6267\\u884c\\u57fa\\u672c\\u7684\\u7cfb\\u7edf\\u521d\\u59cb\\u5316\\uff0c\\u4f8b\\u5982\\u6fc0\\u6d3b\\u663e\\u5361\\u548c\\u68c0\\u67e5\\u5b89\\u88c5\\u7684\\u5185\\u5b58\\u91cf\\u3002\\u6267\\u884c\\u6b64\\u521d\\u59cb\\u5316\\u540e\\uff0cBIOS \\u4ece\\u8f6f\\u76d8\\u3001\\u786c\\u76d8\\u3001CD-ROM \\u6216\\u7f51\\u7edc\\u7b49\\u9002\\u5f53\\u4f4d\\u7f6e\\u52a0\\u8f7d\\u64cd\\u4f5c\\u7cfb\\u7edf\\uff0c\\u5e76\\u5c06\\u673a\\u5668\\u7684\\u63a7\\u5236\\u6743\\u4ea4\\u7ed9\\u64cd\\u4f5c\\u7cfb\\u7edf\\u3002<\\/p>\\n<p>\\u5f53\\u82f1\\u7279\\u5c14\\u7ec8\\u4e8e\\u7528\\u5206\\u522b\\u652f\\u6301 16MB \\u548c 4GB \\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u7684 80286 \\u548c 80386 \\u5904\\u7406\\u5668\\u201c\\u6253\\u7834\\u4e86 1MB \\u7684\\u969c\\u788d\\u201d\\u65f6\\uff0cPC \\u67b6\\u6784\\u5e08\\u4ecd\\u7136\\u4fdd\\u7559\\u4e86\\u4f4e 1MB \\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u7684\\u539f\\u59cb\\u5e03\\u5c40\\uff0c\\u4ee5\\u786e\\u4fdd\\u5411\\u540e\\u517c\\u5bb9 \\u73b0\\u6709\\u7684\\u8f6f\\u4ef6\\u3002 \\u56e0\\u6b64\\uff0c\\u73b0\\u4ee3 PC \\u5728\\u7269\\u7406\\u5185\\u5b58\\u4e2d\\u4ece 0x000A0000 \\u5230 0x00100000 \\u6709\\u4e00\\u4e2a\\u201c\\u6d1e\\u201d\\uff0c\\u5c06 RAM \\u5206\\u4e3a\\u201c\\u4f4e\\u201d\\u6216\\u201c\\u5e38\\u89c4\\u5185\\u5b58\\u201d\\uff08\\u524d 640KB\\uff09\\u548c\\u201c\\u6269\\u5c55\\u5185\\u5b58\\u201d\\uff08\\u5176\\u4ed6\\u6240\\u6709\\u5185\\u5bb9\\uff09\\u3002 \\u6b64\\u5916\\uff0c\\u4f4d\\u4e8e PC 32 \\u4f4d\\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u6700\\u9876\\u7aef\\u7684\\u4e00\\u4e9b\\u7a7a\\u95f4\\uff0c\\u9996\\u5148\\u662f\\u7269\\u7406 RAM\\uff0c\\u73b0\\u5728\\u901a\\u5e38\\u7531 BIOS \\u4fdd\\u7559\\u4f9b 32 \\u4f4d PCI \\u8bbe\\u5907\\u4f7f\\u7528\\u3002<\\/p>\\n<p>\\u6700\\u8fd1\\u7684 x86 \\u5904\\u7406\\u5668\\u53ef\\u4ee5\\u652f\\u6301\\u8d85\\u8fc7 4GB \\u7684\\u7269\\u7406 RAM\\uff0c\\u56e0\\u6b64 RAM \\u53ef\\u4ee5\\u8fdb\\u4e00\\u6b65\\u6269\\u5c55\\u5230 0xFFFFFFFF \\u4ee5\\u4e0a\\u3002 \\u5728\\u8fd9\\u79cd\\u60c5\\u51b5\\u4e0b\\uff0cBIOS \\u5fc5\\u987b\\u5b89\\u6392\\u5728 32 \\u4f4d\\u53ef\\u5bfb\\u5740\\u533a\\u57df\\u9876\\u90e8\\u7684\\u7cfb\\u7edf RAM \\u4e2d\\u7559\\u4e0b\\u7b2c\\u4e8c\\u4e2a\\u5b54\\uff0c\\u4ee5\\u4fbf\\u4e3a\\u8fd9\\u4e9b 32 \\u4f4d\\u8bbe\\u5907\\u7684\\u6620\\u5c04\\u7559\\u51fa\\u7a7a\\u95f4\\u3002 \\u7531\\u4e8e\\u8bbe\\u8ba1\\u9650\\u5236\\uff0cJOS \\u65e0\\u8bba\\u5982\\u4f55\\u53ea\\u80fd\\u4f7f\\u7528 PC \\u7269\\u7406\\u5185\\u5b58\\u7684\\u524d 256MB\\uff0c\\u56e0\\u6b64\\u73b0\\u5728\\u6211\\u4eec\\u5047\\u8bbe\\u6240\\u6709 PC \\u90fd\\u201c\\u53ea\\u6709\\u201d\\u4e00\\u4e2a 32 \\u4f4d\\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u3002 \\u4f46\\u662f\\u5904\\u7406\\u590d\\u6742\\u7684\\u7269\\u7406\\u5730\\u5740\\u7a7a\\u95f4\\u548c\\u7ecf\\u8fc7\\u591a\\u5e74\\u53d1\\u5c55\\u7684\\u786c\\u4ef6\\u7ec4\\u7ec7\\u7684\\u5176\\u4ed6\\u65b9\\u9762\\u662f\\u64cd\\u4f5c\\u7cfb\\u7edf\\u5f00\\u53d1\\u7684\\u91cd\\u8981\\u5b9e\\u9645\\u6311\\u6218\\u4e4b\\u4e00\\u3002<\\/p>\\n<h3>The ROM BIOS<\\/h3>\\n<p>\\u5728\\u5b9e\\u9a8c\\u5ba4\\u7684\\u8fd9\\u4e00\\u90e8\\u5206\\u4e2d\\uff0c\\u4f60\\u5c06\\u4f7f\\u7528 QEMU \\u7684\\u8c03\\u8bd5\\u5de5\\u5177\\u6765\\u7814\\u7a76\\u517c\\u5bb9 IA-32 \\u7684\\u8ba1\\u7b97\\u673a\\u5982\\u4f55\\u542f\\u52a8\\u3002<\\/p>\\n<p>\\u6253\\u5f00\\u4e24\\u4e2a\\u7ec8\\u7aef\\u7a97\\u53e3\\u5e76\\u5c06\\u4e24\\u4e2a shell \\u90fd cd \\u5230\\u60a8\\u7684\\u5b9e\\u9a8c\\u5ba4\\u76ee\\u5f55\\u4e2d\\u3002 \\u7b2c\\u4e00\\u4e2a\\u7ec8\\u7aef\\u4e2d\\uff0c\\u8f93\\u5165make qemu-gdb\\uff08\\u6216make qemu-nox-gdb\\uff09\\u3002 \\u8fd9\\u5c06\\u542f\\u52a8 QEMU\\uff0c\\u4f46 QEMU \\u5728\\u5904\\u7406\\u5668\\u6267\\u884c\\u7b2c\\u4e00\\u6761\\u6307\\u4ee4\\u4e4b\\u524d\\u505c\\u6b62\\u5e76\\u7b49\\u5f85\\u6765\\u81ea GDB \\u7684\\u8c03\\u8bd5\\u8fde\\u63a5\\u3002 \\u5728\\u7b2c\\u4e8c\\u4e2a\\u7ec8\\u7aef\\u4e2d\\uff0c\\u4ece\\u4f60\\u8fd0\\u884c make \\u7684\\u540c\\u4e00\\u76ee\\u5f55\\u4e2d\\uff0c\\u8fd0\\u884c make gdb\\u3002\\u4f60\\u4f1a\\u770b\\u5230\\u8fd9\\u6837\\u7684\\u4e1c\\u897f\\uff1a<\\/p>\\n<pre><code>athena% make gdb\\nGNU gdb (GDB) 6.8-debian\\nCopyright (C) 2008 Free Software Foundation, Inc.\\nLicense GPLv3+: GNU GPL version 3 or later &lt;http:\\/\\/gnu.org\\/licenses\\/gpl.html&gt;\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.  Type \\"show copying\\"\\nand \\"show warranty\\" for details.\\nThis GDB was configured as \\"i486-linux-gnu\\".\\n+ target remote localhost:26000\\nThe target architecture is assumed to be i8086\\n[f000:fff0] 0xffff0:    ljmp   $0xf000,$0xe05b\\n0x0000fff0 in ?? ()\\n+ symbol-file obj\\/kern\\/kernel\\n(gdb) <\\/code><\\/pre>\\n<p>\\u6211\\u4eec\\u63d0\\u4f9b\\u4e86\\u4e00\\u4e2a .gdbinit \\u6587\\u4ef6\\uff0c\\u7528\\u4e8e\\u8bbe\\u7f6e GDB \\u4ee5\\u8c03\\u8bd5\\u65e9\\u671f\\u542f\\u52a8\\u671f\\u95f4\\u4f7f\\u7528\\u7684 16 \\u4f4d\\u4ee3\\u7801\\uff0c\\u5e76\\u6307\\u793a\\u5b83\\u9644\\u52a0\\u5230\\u4fa6\\u542c QEMU\\u3002\\uff08\\u5982\\u679c\\u5b83\\u4e0d\\u8d77\\u4f5c\\u7528\\uff0c\\u60a8\\u53ef\\u80fd\\u9700\\u8981\\u5728\\u60a8\\u7684\\u4e3b\\u76ee\\u5f55\\u4e2d\\u7684 .gdbinit \\u4e2d\\u6dfb\\u52a0\\u4e00\\u4e2a add-auto-load-safe-path \\u4ee5\\u8bf4\\u670d gdb \\u5904\\u7406\\u6211\\u4eec\\u63d0\\u4f9b\\u7684 .gdbinit \\u3002 gdb \\u4f1a\\u544a\\u8bc9\\u4f60\\u662f\\u5426\\u5fc5\\u987b\\u8fd9\\u6837\\u505a\\uff09<\\/p>\\n<p>\\u4e0b\\u9762\\u8fd9\\u884c\\uff1a<\\/p>\\n<pre><code>[f000:fff0] 0xffff0:    ljmp   $0xf000,$0xe05b<\\/code><\\/pre>\\n<p>\\u662f GDB \\u5bf9\\u8981\\u6267\\u884c\\u7684\\u7b2c\\u4e00\\u6761\\u6307\\u4ee4\\u7684\\u53cd\\u6c47\\u7f16\\u3002\\u4ece\\u8fd9\\u4e2a\\u8f93\\u51fa\\u53ef\\u4ee5\\u5f97\\u51fa\\u4ee5\\u4e0b\\u51e0\\u4e2a\\u7ed3\\u8bba\\uff1a<\\/p>\\n<ul>\\n<li>IBM PC \\u5728\\u7269\\u7406\\u5730\\u5740 0x000ffff0 \\u5904\\u5f00\\u59cb\\u6267\\u884c\\uff0c\\u8be5\\u5730\\u5740\\u4f4d\\u4e8e\\u4e3a ROM BIOS \\u4fdd\\u7559\\u7684 64KB \\u533a\\u57df\\u7684\\u6700\\u9876\\u90e8\\u3002<\\/li>\\n<li>PC \\u4ee5 CS = 0xf000 \\u548c IP = 0xfff0 \\u5f00\\u59cb\\u6267\\u884c\\u3002<\\/li>\\n<li>\\u8981\\u6267\\u884c\\u7684\\u7b2c\\u4e00\\u6761\\u6307\\u4ee4\\u662fjmp\\u6307\\u4ee4\\uff0c\\u5b83\\u8df3\\u8f6c\\u5230\\u5206\\u6bb5\\u5730\\u5740CS = 0xf000\\u548cIP = 0xe05b\\u3002<\\/li>\\n<\\/ul>\\n<p>QEMU \\u4e3a\\u4ec0\\u4e48\\u8fd9\\u6837\\u542f\\u52a8\\uff1f \\u8fd9\\u5c31\\u662f\\u82f1\\u7279\\u5c14\\u8bbe\\u8ba1 8088 \\u5904\\u7406\\u5668\\u7684\\u65b9\\u5f0f\\uff0cIBM \\u5728\\u5176\\u539f\\u59cb PC \\u4e2d\\u4f7f\\u7528\\u4e86\\u8be5\\u5904\\u7406\\u5668\\u3002\\u56e0\\u4e3a\\u7269\\u7406\\u5730\\u5740\\u4ece0x000f0000-0x000fffff \\u4e0e BIOS \\u662f\\u786c\\u7ebf\\u8fde\\u63a5\\uff0c\\u8fd9\\u4e2a\\u8bbe\\u8ba1\\u4fdd\\u8bc1\\u4e86 BIOS \\u5728\\u673a\\u5668\\u542f\\u52a8\\u540e\\u80fd\\u83b7\\u5f97\\u63a7\\u5236\\uff0c\\u7cfb\\u7edf\\u91cd\\u542f\\u52a8\\u4e5f\\u662f\\u3002\\u6b64\\u8bbe\\u8ba1\\u81f3\\u5173\\u91cd\\u8981\\uff0c\\u56e0\\u4e3a\\u7535\\u6e90\\u6253\\u5f00\\u540e\\u5728\\u673a\\u5668\\u7684 RAM \\u4e2d\\u6ca1\\u6709\\u5176\\u5b83\\u8f6f\\u4ef6\\u80fd\\u88ab\\u5904\\u7406\\u5668\\u6267\\u884c\\u3002QUME \\u4eff\\u771f\\u5668\\u9644\\u5e26\\u81ea\\u5df1\\u7684BIOS\\uff0c\\u5b83\\u4f4d\\u4e8e\\u5904\\u7406\\u5668\\u6a21\\u62df\\u7269\\u7406\\u5730\\u5740\\u7684\\u7a7a\\u95f4\\u4e2d\\u3002\\u5728\\u5904\\u7406\\u5668\\u590d\\u4f4d\\u65f6\\uff0c\\uff08\\u6a21\\u62df\\uff09\\u5904\\u7406\\u5668\\u8fdb\\u5165\\u771f\\u5b9e\\u6a21\\u5f0f\\uff0c\\u5c06CS\\u8bbe\\u7f6e\\u4e3a0xF000\\u4ee5\\u53caIP\\u8bbe\\u7f6e\\u4e3a0xFFF0\\uff0c\\u4ee5\\u4fbf\\u6267\\u884c\\u5f00\\u59cb\\uff08CS:IP\\uff09\\u6bb5\\u5730\\u5740\\u3002\\u6bb5\\u5730\\u57400xF000:FFF0\\u5982\\u4f55\\u8f6c\\u5316\\u4e3a\\u7269\\u7406\\u5730\\u5740\\u5462\\uff1f<\\/p>\\n<p>\\u4e3a\\u4e86\\u80fd\\u56de\\u7b54\\u4e0a\\u9762\\u7684\\u95ee\\u9898\\uff0c\\u6211\\u4eec\\u9700\\u8981\\u77e5\\u9053\\u70b9\\u771f\\u5b9e\\u6a21\\u5f0f\\u4e0b\\u7684\\u5bfb\\u5740\\u65b9\\u5f0f\\u3002\\u771f\\u5b9e\\u6a21\\u5f0f\\uff08PC\\u542f\\u52a8\\u65f6\\u8fdb\\u5165\\uff09\\uff0c\\u5730\\u5740\\u7684\\u8f6c\\u6362\\u5de5\\u4f5c\\u6839\\u636e\\u516c\\u5f0f\\uff1aphysical address = 16 * segment + offset\\u3002\\u6240\\u4ee5\\uff0c\\u5f53PC\\u5c06CS\\u8bbe\\u7f6e\\u4e3a0xF000\\u548cIP\\u4e3a0xFFF0\\u65f6\\uff0c\\u6240\\u5f15\\u7528\\u7684\\u7269\\u7406\\u5730\\u5740\\u662f\\uff1a<\\/p>\\n<pre><code>16 * 0xf000 + 0xfff0      # in hex multiplication by 16 is\\n   =  0xf0000 + 0xfff0    # easy--just append a 0.\\n   =  0xffff0 <\\/code><\\/pre>\\n<p>0xFFFF0\\u662f16\\u4e2a\\u5b57\\u8282\\u7684\\uff0c\\u4f4d\\u4e8eBIOS\\u672b\\u5c3e\\uff080x100000\\uff09\\u3002\\u56e0\\u6b64\\uff0c\\u6211\\u4eec\\u4e0d\\u5e94\\u8be5\\u611f\\u5230\\u60ca\\u8bb6\\u7684\\u662f\\uff0cBIOS\\u6240\\u505a\\u7684\\u7b2c\\u4e00\\u4ef6\\u4e8b\\u662fJMP\\u5411\\u540e\\u5230BIOS\\u4e2d\\u7684\\u65e9\\u671f\\u4f4d\\u7f6e;\\u6bd5\\u7adf\\u5b83\\u53ef\\u4ee5\\u572816\\u4e2a\\u5b57\\u8282\\u4e2d\\u5b8c\\u6210\\u591a\\u5c11\\uff1f<\\/p>\\n<blockquote>\\n<p>\\u7ec3\\u4e60 2\\uff1a\\u4f7f\\u7528GDB\\u7684SI\\uff08\\u6b65\\u9aa4\\u6307\\u4ee4\\uff09\\u547d\\u4ee4\\u8ffd\\u8e2aROM BIOS\\u4e86\\u89e3\\u66f4\\u591a\\u8bf4\\u660e\\uff0c\\u5e76\\u8bd5\\u56fe\\u731c\\u6d4b\\u5b83\\u53ef\\u80fd\\u505a\\u4ec0\\u4e48\\u3002\\u60a8\\u53ef\\u80fd\\u5e0c\\u671b\\u67e5\\u770b<a href=\\"http:\\/\\/web.archive.org\\/web\\/20040404164813\\/members.iweb.net.au\\/~pstorr\\/pcbook\\/book2\\/book2.htm\\"><strong>Phil Storrs I \\/ O\\u7aef\\u53e3\\u63cf\\u8ff0<\\/strong><\\/a>\\uff0c\\u4ee5\\u53ca<a href=\\"https:\\/\\/pdos.csail.mit.edu\\/6.828\\/2018\\/reference.html\\"><strong>6.828<\\/strong><\\/a>\\u53c2\\u8003\\u8d44\\u6599\\u9875\\u9762\\u4e0a\\u7684\\u5176\\u4ed6\\u6750\\u6599\\u3002\\u65e0\\u9700\\u5f04\\u61c2\\u6240\\u6709\\u7684\\u7ec6\\u8282\\uff0c\\u53ea\\u8981\\u660e\\u767dBIOS\\u9996\\u5148\\u505a\\u7684\\u662f\\u4ec0\\u4e48\\u3002<\\/p>\\n<\\/blockquote>\\n<p>\\u5f53BIOS\\u8fd0\\u884c\\u65f6\\uff0c\\u5b83\\u4f1a\\u8bbe\\u7f6e\\u4e00\\u4e2a\\u4e2d\\u65ad\\u63cf\\u8ff0\\u7b26\\u8868\\u5e76\\u521d\\u59cb\\u5316\\u8bf8\\u5982VGA\\u663e\\u793a\\u7b49\\u5404\\u79cd\\u8bbe\\u5907\\u3002\\u60a8\\u5728QEMU\\u7a97\\u53e3\\u4e2d\\u770b\\u5230\\u7684\\u201c\\u8d77\\u59cbSeabios\\u201d\\u6d88\\u606f\\u7684\\u6765\\u81eaVGA\\u3002<\\/p>\\n<p>\\u521d\\u59cb\\u5316PCI\\u603b\\u7ebf\\u548cBIOS\\u4e86\\u89e3\\u7684\\u6240\\u6709\\u91cd\\u8981\\u8bbe\\u5907\\u540e\\uff0c\\u5b83\\u641c\\u7d22\\u53ef\\u542f\\u52a8\\u8bbe\\u5907\\uff0c\\u5982\\u8f6f\\u76d8\\uff0c\\u786c\\u76d8\\u9a71\\u52a8\\u5668\\u6216CD-ROM\\u3002\\u6700\\u7ec8\\uff0c\\u5f53\\u5b83\\u627e\\u5230\\u53ef\\u542f\\u52a8\\u78c1\\u76d8\\u65f6\\uff0cBIOS\\u5c06\\u4ece\\u78c1\\u76d8\\u8bfb\\u53d6\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u5e76\\u628a\\u63a7\\u5236\\u6743\\u4ea4\\u7ed9\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u3002<\\/p>\\n<h2>Part 2: The Boot Loader<\\/h2>\\n<p>PC\\u7684\\u8f6f\\u76d8\\u548c\\u786c\\u76d8\\u5212\\u5206\\u6210512\\u5b57\\u8282\\u4e00\\u533a\\u57df\\uff0c\\u79f0\\u4e3a\\u6247\\u533a\\u3002\\u6247\\u533a\\u662f\\u786c\\u76d8\\u8fd0\\u8f6c\\u7684\\u6700\\u5c0f\\u9897\\u7c92\\uff1a\\u6bcf\\u6b21\\u8bfb\\u6216\\u5199\\u64cd\\u4f5c\\u5fc5\\u987b\\u4ee5\\u4e00\\u4e2a\\u6216\\u591a\\u4e2a\\u6247\\u533a\\u4e3a\\u5927\\u5c0f\\u4e14\\u4e0e\\u6247\\u533a\\u8fb9\\u754c\\u5bf9\\u9f50\\u3002\\u5982\\u679c\\u78c1\\u76d8\\u53ef\\u542f\\u52a8\\uff0c\\u5219\\u7b2c\\u4e00\\u4e2a\\u6247\\u533a\\u79f0\\u4e3a\\u5f15\\u5bfc\\u6247\\u533a\\uff0c\\u56e0\\u4e3a\\u8fd9\\u662f\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u4ee3\\u7801\\u6240\\u5728\\u7684\\u4f4d\\u7f6e\\u3002\\u5f53BIOS\\u627e\\u5230\\u53ef\\u542f\\u52a8\\u8f6f\\u76d8\\u6216\\u786c\\u76d8\\u65f6\\uff0c\\u5b83\\u5c06512\\u5b57\\u8282\\u5f15\\u5bfc\\u6247\\u533a\\u52a0\\u8f7d\\u5230\\u7269\\u7406\\u5730\\u57400x7c00\\u81f30x7dff\\u7684\\u5185\\u5b58\\u4e2d\\uff0c\\u7136\\u540e\\u4f7f\\u7528JMP\\u6307\\u4ee4\\u5c06CS:IP\\u8bbe\\u7f6e\\u4e3a0000:7C00\\uff0c\\u5c06\\u63a7\\u5236\\u4f20\\u9012\\u7ed9\\u5f15\\u5bfc\\u52a0\\u8f7d\\u7a0b\\u5e8f\\u3002\\u4e0eBIOS\\u52a0\\u8f7d\\u5730\\u5740\\u4e00\\u6837\\uff0c\\u8fd9\\u4e9b\\u5730\\u5740\\u662f\\u76f8\\u5f53\\u4efb\\u610f\\u7684 - \\u4f46\\u5b83\\u4eec\\u662f\\u56fa\\u5b9a\\u548c\\u6807\\u51c6\\u5316\\u7684PC<\\/p>\\n<p>\\u5728PC\\u6f14\\u53d8\\u671f\\u95f4\\uff0c\\u4eceCD-ROM\\u542f\\u52a8\\u80fd\\u529b\\u591a\\u4e86\\u8bb8\\u591a\\uff0c\\u56e0\\u6b64\\uff0cPC\\u67b6\\u6784\\u5e08\\u501f\\u6b64\\u673a\\u4f1a\\u7a0d\\u5fae\\u91cd\\u65b0\\u601d\\u8003\\u542f\\u52a8\\u7a0b\\u5e8f\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '这个实验分为在三个部分：第一部分专注于熟悉 x86 汇编语言、QEMU x86 仿真器和 PC 的开机引导程序；第二部分检查我们 6.828 内核的引导加载程序，它位于 lab 目录下的 boot 文件夹下；第三部分深入探讨了我们 6.828 内核本身初始模板，名为 JOS，它位于 kernel 目录下',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 13,
                'published_at' => '2021-10-07 18:30:00',
                'created_at' => '2021-10-07 23:02:39',
                'updated_at' => '2022-01-08 20:59:48',
                'deleted_at' => NULL,
            ),
            27 => 
            array (
                'id' => 28,
                'category_id' => 5,
                'collection_id' => 0,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'mac-vscode-redis-bgv5x',
                'title' => 'Mac 下 vscode 调试 redis',
                'subtitle' => 'Mac 下 vscode 调试 redis',
            'content' => '{"raw":"## \\u73af\\u5883\\n* Mac  \\n* vscode  \\n* redis 6.2  \\n\\n## \\u4e0b\\u8f7d\\u4e0e\\u7f16\\u8bd1 redis\\n#### 1. \\u4e0b\\u8f7d\\n```\\n$ git clone git@github.com:redis\\/redis.git \\n$ git br \\n$ git br -a\\n```\\n![image.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/fLjFBRi0HvHTKGZoKQK8S8zKakoGStSd8CfK1uzL.png)\\n\\n\\u9009\\u62e9 6.2 \\u5206\\u652f\\uff0c\\u4f7f\\u7528 git \\u547d\\u4ee4\\u6765\\u5207\\u6362\\u7248\\u672c\\n```\\n$ git checkout 6.2\\n```\\n![image.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/FMptdgAGWeW6P8ncflyB5wxuU8oAeNAuLxjwxZko.png)\\n\\n#### 2. \\u7f16\\u8bd1 redis\\n\\u6267\\u884c\\u7f16\\u8bd1\\u7684\\u547d\\u4ee4\\uff0c\\u751f\\u6210\\u5bf9\\u5e94\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u8fd9\\u91cc -O0 \\u662f\\u8ba9\\u7f16\\u8bd1\\u5668\\u4e0d\\u8fdb\\u884c\\u4f18\\u5316\\u5904\\u7406\\n```\\nmake CFLAGS=\\"-g -O0\\"\\n```\\n\\u7528 vscode \\u6253\\u5f00 redis \\u6e90\\u7801\\u76ee\\u5f55\\uff0c\\u63a5\\u7740\\u70b9\\u51fb \\u8fd0\\u884c-->\\u914d\\u7f6e\\uff0c\\u9009\\u62e9 C++(GDB\\/LLDB) \\u4f1a\\u81ea\\u52a8\\u751f\\u6210 .vscode \\u6587\\u4ef6\\u4e0e launch.json \\u6587\\u4ef6  \\n![\\u622a\\u5c4f2021-10-30 \\u4e0b\\u53481.20.57.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/tzTZyUZHlelctGEIlMYSvmI1AhhbpXZvnXTmFEyU.png)\\n![\\u622a\\u5c4f2021-10-30 \\u4e0b\\u53481.22.39.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/cPAFYcWir7vFJkWOu8rOkZUucjSoCy6DyEPUhdav.png)\\n\\n\\u628a\\u751f\\u6210\\u51fa\\u6765 launch.json \\u4fee\\u6539\\u6210\\u5982\\u4e0b\\uff1a\\n```\\n{\\n    \\/\\/ \\u4f7f\\u7528 IntelliSense \\u4e86\\u89e3\\u76f8\\u5173\\u5c5e\\u6027\\u3002 \\n    \\/\\/ \\u60ac\\u505c\\u4ee5\\u67e5\\u770b\\u73b0\\u6709\\u5c5e\\u6027\\u7684\\u63cf\\u8ff0\\u3002\\n    \\/\\/ \\u6b32\\u4e86\\u89e3\\u66f4\\u591a\\u4fe1\\u606f\\uff0c\\u8bf7\\u8bbf\\u95ee: https:\\/\\/go.microsoft.com\\/fwlink\\/?linkid=830387\\n    \\"version\\": \\"0.2.0\\",\\n    \\"configurations\\": [\\n        {\\n            \\"name\\": \\"debug redis\\",\\n            \\"type\\": \\"cppdbg\\",\\n            \\"request\\": \\"launch\\",\\n            \\"program\\": \\"${workspaceFolder}\\/src\\/redis-server\\",\\n            \\"args\\": [\\"redis.conf\\"],\\n            \\"stopAtEntry\\": false,\\n            \\"cwd\\": \\"${workspaceFolder}\\",\\n            \\"environment\\": [],\\n            \\"externalConsole\\": false,\\n            \\"MIMode\\": \\"lldb\\"\\n        }\\n    ]\\n}\\n```\\n* **program** \\u8fd0\\u884c\\u7684\\u4e3b\\u7a0b\\u5e8f\\uff0c\\u8fd9\\u91cc\\u662f\\u7f16\\u8bd1\\u751f\\u6210\\u7684 \\u200bredis-server\\u200b \\u76ee\\u6807\\u6587\\u4ef6\\n* **args** \\u8fd0\\u884c\\u7a0b\\u5e8f\\u7684\\u6dfb\\u52a0\\u7684\\u53c2\\u6570\\uff0c\\u8fd9\\u91cc\\u6307\\u5b9a\\u6e90\\u7801\\u4e2d\\u7684\\u914d\\u7f6e\\u6587\\u4ef6\\uff0c\\u65b9\\u4fbf\\u4fee\\u6539\\u8c03\\u8bd5\\n\\n\\u6700\\u540e\\uff0c\\u6253\\u5f00\\u8c03\\u8bd5\\u9762\\u677f\\uff0c\\u53ef\\u5feb\\u770b\\u5230\\u521a\\u624d\\u914d\\u7f6e\\u7684\\u8c03\\u8bd5\\u9009\\u9879\\n![\\u622a\\u5c4f2021-10-30 \\u4e0b\\u53481.39.08.png](http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/z2qHRI8TgPxGG2HBpcZRtCUxFwS3AoqHBMlpfnt6.png)\\n\\n## \\u8c03\\u8bd5\\u6d4b\\u8bd5","html":"<h2>\\u73af\\u5883<\\/h2>\\n<ul>\\n<li>Mac  <\\/li>\\n<li>vscode  <\\/li>\\n<li>redis 6.2  <\\/li>\\n<\\/ul>\\n<h2>\\u4e0b\\u8f7d\\u4e0e\\u7f16\\u8bd1 redis<\\/h2>\\n<h4>1. \\u4e0b\\u8f7d<\\/h4>\\n<pre><code>$ git clone git@github.com:redis\\/redis.git \\n$ git br \\n$ git br -a<\\/code><\\/pre>\\n<p><img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/fLjFBRi0HvHTKGZoKQK8S8zKakoGStSd8CfK1uzL.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<p>\\u9009\\u62e9 6.2 \\u5206\\u652f\\uff0c\\u4f7f\\u7528 git \\u547d\\u4ee4\\u6765\\u5207\\u6362\\u7248\\u672c<\\/p>\\n<pre><code>$ git checkout 6.2<\\/code><\\/pre>\\n<p><img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/FMptdgAGWeW6P8ncflyB5wxuU8oAeNAuLxjwxZko.png\\" alt=\\"image.png\\" \\/><\\/p>\\n<h4>2. \\u7f16\\u8bd1 redis<\\/h4>\\n<p>\\u6267\\u884c\\u7f16\\u8bd1\\u7684\\u547d\\u4ee4\\uff0c\\u751f\\u6210\\u5bf9\\u5e94\\u7684\\u76ee\\u6807\\u6587\\u4ef6\\uff0c\\u8fd9\\u91cc -O0 \\u662f\\u8ba9\\u7f16\\u8bd1\\u5668\\u4e0d\\u8fdb\\u884c\\u4f18\\u5316\\u5904\\u7406<\\/p>\\n<pre><code>make CFLAGS=\\"-g -O0\\"<\\/code><\\/pre>\\n<p>\\u7528 vscode \\u6253\\u5f00 redis \\u6e90\\u7801\\u76ee\\u5f55\\uff0c\\u63a5\\u7740\\u70b9\\u51fb \\u8fd0\\u884c--&gt;\\u914d\\u7f6e\\uff0c\\u9009\\u62e9 C++(GDB\\/LLDB) \\u4f1a\\u81ea\\u52a8\\u751f\\u6210 .vscode \\u6587\\u4ef6\\u4e0e launch.json \\u6587\\u4ef6<br \\/>\\n<img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/tzTZyUZHlelctGEIlMYSvmI1AhhbpXZvnXTmFEyU.png\\" alt=\\"\\u622a\\u5c4f2021-10-30 \\u4e0b\\u53481.20.57.png\\" \\/><br \\/>\\n<img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/cPAFYcWir7vFJkWOu8rOkZUucjSoCy6DyEPUhdav.png\\" alt=\\"\\u622a\\u5c4f2021-10-30 \\u4e0b\\u53481.22.39.png\\" \\/><\\/p>\\n<p>\\u628a\\u751f\\u6210\\u51fa\\u6765 launch.json \\u4fee\\u6539\\u6210\\u5982\\u4e0b\\uff1a<\\/p>\\n<pre><code>{\\n    \\/\\/ \\u4f7f\\u7528 IntelliSense \\u4e86\\u89e3\\u76f8\\u5173\\u5c5e\\u6027\\u3002 \\n    \\/\\/ \\u60ac\\u505c\\u4ee5\\u67e5\\u770b\\u73b0\\u6709\\u5c5e\\u6027\\u7684\\u63cf\\u8ff0\\u3002\\n    \\/\\/ \\u6b32\\u4e86\\u89e3\\u66f4\\u591a\\u4fe1\\u606f\\uff0c\\u8bf7\\u8bbf\\u95ee: https:\\/\\/go.microsoft.com\\/fwlink\\/?linkid=830387\\n    \\"version\\": \\"0.2.0\\",\\n    \\"configurations\\": [\\n        {\\n            \\"name\\": \\"debug redis\\",\\n            \\"type\\": \\"cppdbg\\",\\n            \\"request\\": \\"launch\\",\\n            \\"program\\": \\"${workspaceFolder}\\/src\\/redis-server\\",\\n            \\"args\\": [\\"redis.conf\\"],\\n            \\"stopAtEntry\\": false,\\n            \\"cwd\\": \\"${workspaceFolder}\\",\\n            \\"environment\\": [],\\n            \\"externalConsole\\": false,\\n            \\"MIMode\\": \\"lldb\\"\\n        }\\n    ]\\n}<\\/code><\\/pre>\\n<ul>\\n<li><strong>program<\\/strong> \\u8fd0\\u884c\\u7684\\u4e3b\\u7a0b\\u5e8f\\uff0c\\u8fd9\\u91cc\\u662f\\u7f16\\u8bd1\\u751f\\u6210\\u7684 \\u200bredis-server\\u200b \\u76ee\\u6807\\u6587\\u4ef6<\\/li>\\n<li><strong>args<\\/strong> \\u8fd0\\u884c\\u7a0b\\u5e8f\\u7684\\u6dfb\\u52a0\\u7684\\u53c2\\u6570\\uff0c\\u8fd9\\u91cc\\u6307\\u5b9a\\u6e90\\u7801\\u4e2d\\u7684\\u914d\\u7f6e\\u6587\\u4ef6\\uff0c\\u65b9\\u4fbf\\u4fee\\u6539\\u8c03\\u8bd5<\\/li>\\n<\\/ul>\\n<p>\\u6700\\u540e\\uff0c\\u6253\\u5f00\\u8c03\\u8bd5\\u9762\\u677f\\uff0c\\u53ef\\u5feb\\u770b\\u5230\\u521a\\u624d\\u914d\\u7f6e\\u7684\\u8c03\\u8bd5\\u9009\\u9879<br \\/>\\n<img src=\\"http:\\/\\/www.shishao.site\\/storage\\/article\\/2021\\/10\\/30\\/z2qHRI8TgPxGG2HBpcZRtCUxFwS3AoqHBMlpfnt6.png\\" alt=\\"\\u622a\\u5c4f2021-10-30 \\u4e0b\\u53481.39.08.png\\" \\/><\\/p>\\n<h2>\\u8c03\\u8bd5\\u6d4b\\u8bd5<\\/h2>"}',
                'page_image' => NULL,
                'meta_description' => '虽说我们可以对 redis 进行拆解来学习 redis 源码，但这么做有些时间会由于一个数据结构依赖于其它数据结构而最终把代码搞得很庞杂，且失去了整体性的认知。那是不是在拆解代码前，做些整体性调试呢',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 117,
                'published_at' => '2021-10-30 13:25:00',
                'created_at' => '2021-10-30 13:25:46',
                'updated_at' => '2022-01-09 15:04:59',
                'deleted_at' => NULL,
            ),
            28 => 
            array (
                'id' => 29,
                'category_id' => 14,
                'collection_id' => 0,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'mac-tcpdump-bhdel',
                'title' => 'mac 下 tcpdump 使用',
                'subtitle' => 'mac 下 tcpdump 使用',
            'content' => '{"raw":"TCPDUMP(1)                                                                                                                                                                                                                \\n```\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n```\\n\\nDESCRIPTION  \\n\\u8bf4\\u660e  \\n\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\nTcpdump \\u6253\\u5370\\u51fa\\u4e0e\\u5c14\\u5e03\\u6b63\\u5219\\u8868\\u8fbe\\u5f0f\\u5339\\u914d\\u7684\\u7f51\\u7edc\\u63a5\\u53e3\\u4e0a\\u6570\\u636e\\u5305\\u5185\\u5bb9\\u7684\\u63cf\\u8ff0\\uff1b  \\n`13:53:11.224243 IP 59.82.40.72.https > 192.168.1.110.58133: Flags [.], ack 825, win 219, length 0`  \\n\\u63cf\\u8ff0\\u524d\\u9762\\u662f\\u65f6\\u95f4\\u6233\\uff0c\\u9ed8\\u8ba4\\u8f93\\u51fa\\uff1a\\u5c0f\\u65f6:\\u5206\\u949f:\\u79d2.\\u5fae\\u79d2\\u3002tcpdump \\u4e5f\\u53ef\\u4ee5\\u4f7f\\u7528`-w`\\u6807\\u5fd7\\u8fd0\\u884c\\uff0c\\u5bfc\\u81f4\\u5b83\\u5c06\\u6570\\u636e\\u5305\\u6570\\u636e\\u4fdd\\u5b58\\u5230\\u6587\\u4ef6\\u4ee5\\u4f9b\\u4ee5\\u540e\\u5206\\u6790\\uff0c\\u4e00\\u8d77\\u4f7f\\u7528`-r`\\u4e0e`-w`\\u6807\\u5fd7 \\u6216 \\u4f7f\\u7528\\u53ea\\u7528`-r`\\u6807\\u5fd7\\uff0c\\u8ba9\\u5b83\\u4ece\\u5df2\\u4fdd\\u5b58\\u7684\\u6570\\u636e\\u5305\\u6587\\u4ef6\\u4e2d\\u8bfb\\u53d6\\u800c\\u4e0d\\u662f\\u4ece\\u7f51\\u7edc\\u63a5\\u53e3\\u8bfb\\u53d6\\u6570\\u636e\\u5305\\u3002tcpdump \\u4e5f\\u53ef\\u4ee5\\u4f7f\\u7528`-V`\\u6807\\u5fd7\\uff0c\\u8ba9\\u5b83\\u9605\\u8bfb\\u5df2\\u4fdd\\u5b58\\u7684\\u6570\\u636e\\u5305\\u6587\\u4ef6\\u5217\\u8868\\u3002\\u5728\\u4ee5\\u4e0a\\u6240\\u6709\\u573a\\u666f\\u4e2d\\uff0c\\u53ea\\u6709\\u5339\\u914d\\u6b63\\u5219\\u7684\\u6570\\u636e\\u5305\\u624d\\u4f1a\\u88abtcpdump\\u5904\\u7406\\u3002\\n\\nTcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n\\u5982\\u679c\\u6ca1\\u6709\\u6267\\u884c -c \\u6807\\u5fd7\\uff0ctcpdump \\u5c06\\u4f1a\\u6301\\u7eed\\u6293\\u5305\\u76f4\\u81f3\\u5b83\\u88ab SIGINT \\u4fe1\\u53f7\\u4e2d\\u65ad\\uff08\\u4f8b\\u5982\\uff0c\\u901a\\u8fc7\\u952e\\u5165\\u4e2d\\u65ad\\u5b57\\u7b26\\uff0c\\u901a\\u5e38\\u662f Control-C\\uff09\\u6216SIGTERM\\u4fe1\\u53f7\\uff08\\u901a\\u5e38\\u4f7f\\u7528kill(1)\\u800c\\u751f\\u6210\\u7684\\u547d\\u4ee4\\uff09\\uff1b\\u5982\\u679c\\u4f7f\\u7528-c\\u6807\\u5fd7\\u8fd0\\u884c\\uff0c\\u5b83\\u5c06\\u6355\\u83b7\\u6570\\u636e\\u5305\\uff0c\\u76f4\\u5230\\u5b83\\u88abSIGINT\\u6216SIGTERM\\u4fe1\\u53f7\\u4e2d\\u65ad\\u6216\\u5df2\\u5904\\u7406\\u6307\\u5b9a\\u7684\\u6570\\u636e\\u5305\\u3002\\n\\nWhen tcpdump finishes capturing packets, it will report counts of: \\n* packets \\"captured\\" (this is the number of packets that tcpdump has received and processed); \\n* packets \\"received by filter\\" (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it counts packets regardless of whether they were matched by the filter expression and even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression and were processed by tcpdump);\\n* packets \\"dropped by kernel\\" (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  information to applications; if not, it will be reported as 0).\\n\\u5f53TCPDUMP\\u5b8c\\u6210\\u6355\\u83b7\\u6570\\u636e\\u5305\\u65f6\\uff0c\\u5b83\\u5c06\\u62a5\\u544a\\u4ee5\\u4e0b\\u7edf\\u8ba1\\uff1a\\n```\\n29 packets captured\\n29 packets received by filter\\n0 packets dropped by kernel\\n```\\n* \\u6355\\u83b7\\u5230\\u7684\\u6570\\u636e\\u5305\\uff1a\\u8fd9\\u662ftcpdump\\u5df2\\u7ecf\\u63a5\\u6536\\u548c\\u5904\\u7406\\u7684\\u6570\\u636e\\u5305\\u6570\\n* \\u7b5b\\u9009\\u5668\\u6536\\u5230\\u7684\\u6570\\u636e\\u5305\\uff1a\\u8fd9\\u53e5\\u7684\\u542b\\u610f\\u53d6\\u51b3\\u4e8e\\u4f60\\u8fd0\\u884ctcpdump\\u7684OS\\uff0c\\u4e14\\u53ef\\u80fd\\u5173\\u7cfb\\u5230OS\\u7684\\u8bbe\\u7f6e\\u65b9\\u5f0f\\u4e0a -- 1.  \\n* \\u5185\\u6838\\u4e22\\u5f03\\u7684\\u6570\\u636e\\u5305\\uff1a\\n\\nOn platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your \\"status\\" character, typically control-T, although on some platforms, such as Mac OS X, the \\"status\\" character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\nReading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\n### OPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\n\\t\\t\\t \\n\\t\\t\\t Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n              specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n       -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n       -dd    Dump packet-matching code as a C program fragment.\\n\\n       -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n       -D\\n       --list-interfaces\\n              Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n              interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n              This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n              name is a somewhat complex string.\\n\\n              The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n       -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n       -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n              Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n              Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n              secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n              The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n              make it visible to others, via ps(1) and other occasions.\\n\\n              In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n              been given should already have been given up.\\n\\n       -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n              bers).\\n\\n              The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n              face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n       -F file\\n              Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n       -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n       -G rotate_seconds\\n              If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n              format is specified, each new file will overwrite the previous.\\n\\n              If used in conjunction with the -C option, filenames will take the form of `file<count>\'.\\n\\n       -h\\n       --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n       --version\\n              Print the tcpdump and libpcap version strings and exit.\\n\\n       -H     Attempt to detect 802.11s draft mesh headers.\\n\\n       -i interface\\n       --interface=interface\\n              Listen on interface.\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\tIf the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n              On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n              tunnel interfaces).\\n\\n              Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n              the loopback and en0 interface:\\n\\n                     tcpdump -i pktap,lo0,en0\\n\\n              An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n              A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n              savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n              An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n              ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n       -I\\n       --monitor-mode\\n              Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n              Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n              on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n              This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n              in monitor mode will be shown.\\n\\n       --immediate-mode\\n              Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n              to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n       -j tstamp_type\\n       --time-stamp-type=tstamp_type\\n              Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n       -J\\n       --list-time-stamp-types\\n              List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n       --time-stamp-precision=tstamp_precision\\n              When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n              Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n              time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n       When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n       conversion will lose precision.\\n\\n       The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n       -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n              By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n              The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                     I     interface name (or interface ID)\\n                     N     process name\\n                     P     process ID\\n                     S     service class\\n                     D     direction\\n                     C     comment\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t               C     flags\\n                     U     process UUID (not shown by default)\\n                     V     verbose printf of pcap-ng blocks (not shown by default)\\n                     A     display all types of metadata\\n\\n              This is an Apple modification.\\n\\n       -K\\n       --dont-verify-checksums\\n              Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n              The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n       -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                     tcpdump -l | tee dat\\n\\n              or\\n\\n                     tcpdump -l > dat & tail -f dat\\n\\n              Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n              -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n              all platforms, including Windows.\\n\\n       -L\\n       --list-data-link-types\\n              List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n              support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n              another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n       -m module\\n              Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n       -M secret\\n              Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n       -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n       -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n       -#\\n       --number\\n              Print an optional packet number at the beginning of the line.\\n\\n       -O\\n       --no-optimize\\n              Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n       -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n       -p\\n       --no-promiscuous-mode\\n              Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n              broadcast\'.\\n\\n       -Q expression\\n              To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n              for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n       -Q direction\\n       --direction=direction\\n              Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n-q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n       -r file\\n              Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n       -S\\n       --absolute-tcp-sequence-numbers\\n              Print absolute, rather than relative, TCP sequence numbers.\\n\\n       -s snaplen\\n       --snapshot-length=snaplen\\n              Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n              protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n              This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n              wards compatibility with recent older versions of tcpdump.\\n\\n       -T type\\n              Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n              Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n              Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n              zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n              Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n              Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n              ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n              Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n       -t     Don\'t print a timestamp on each dump line.\\n\\n       -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n       -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n       -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n       -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n       -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                     0     time\\n                     1     no time\\n                     2     unformatted timestamp\\n                     3     microseconds since previous line\\n                     4     date and time\\n                     5     microseconds since first line\\n\\n              This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n       --time-zone-offset tz\\n              To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n              The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n       -u     Print undecoded NFS handles.\\n\\n       -U\\n       --packet-buffered\\n              If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n              when not writing to a terminal, being written only when the output buffer fills.\\n\\n              If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n\\n\\nfills.\\n\\n              The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n       -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n              checks such as verifying the IP and ICMP header checksum.\\n\\n              When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n       -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n       -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n       -V file\\n              Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n       -w file\\n              Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n              This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n              to be written as soon as they are received.\\n\\n              The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n              extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n              is present and adding one (e.g. .pcap) is recommended.\\n\\n              See pcap-savefile(5) for a description of the file format.\\n\\n       -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n              name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n              Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n              cal files per timeslice.\\n\\n       -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n              Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n       -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n       -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n       -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n       -y datalinktype\\n       --linktype=datalinktype\\n              Set the data link type to use while capturing packets to datalinktype.\\n\\n       -z postrotate-command\\n              Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n              compress each savefile using gzip or bzip2.\\n\\n              Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n              And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags & arguments\\n              arrangements and execute the command that you want.\\n\\n       -Z user\\n       --relinquish-privileges=user\\n              If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n              This behavior can also be enabled by default at compile time.\\n\\n        expression\\n              selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n\\n\\nFor the expression syntax, see pcap-filter(7).\\n\\n              The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n              backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.\\n\\nEXAMPLES\\n       To print all packets arriving at or departing from sundown:\\n              tcpdump host sundown\\n\\n       To print traffic between helios and either hot or ace:\\n              tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n       To print all IP packets between ace and any host except helios:\\n              tcpdump ip host ace and not helios\\n\\n       To print all traffic between local hosts and hosts at Berkeley:\\n              tcpdump net ucb-ether\\n\\n       To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n              tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n       To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n              tcpdump ip and not net localnet\\n\\n       To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n              tcpdump \'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n       To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n              tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)\'\\n\\n       To print IP packets longer than 576 bytes sent through gateway snup:\\n              tcpdump \'gateway snup and ip[2:2] > 576\'\\n\\n       To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n              tcpdump \'ether[0] & 1 = 0 and ip[16] >= 224\'\\n\\n       To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n              tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'\\n\\nOUTPUT FORMAT\\n       The output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.\\n\\n       Timestamps\\n\\n       By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n              hh:mm:ss.frac\\n       and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n       ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n       time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n       Link Level Headers\\n\\n       If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n       On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n       packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n       packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n       On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n       contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n       On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n\\n\\n(N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n       On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n       ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n       out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n       pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n       For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n       bytes of compressed header:\\n              O ctcp * A+6 S+49 I+6 3 (6)\\n\\n       ARP\\/RARP Packets\\n\\n       Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n              arp who-has csam tell rtsg\\n              arp reply csam is-at CSAM\\n       The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n       lower case).\\n\\n       This would look less redundant if we had done tcpdump -n:\\n              arp who-has 128.3.254.6 tell 128.3.254.68\\n              arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n       If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n              RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n              CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n       For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n       IPv4 Packets\\n\\n       If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n       If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n              tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n       tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n       fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n       proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n       Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a > separating the source and destination.\\n       For other protocols, the addresses will be printed, with a > separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n       For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n       flag, in the IP header information, as described above.\\n\\n       TCP Packets\\n\\n       (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n       The general format of a TCP protocol line is:\\n              src > dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n       Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n       Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n       of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n       Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n       Here is the opening portion of an rlogin from host rtsg to host csam.\\n              IP rtsg.1023 > csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n              IP csam.login > rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n              IP rtsg.1023 > csam.login: Flags [.], ack 1, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n              IP csam.login > rtsg.1023: Flags [.], ack 2, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n              IP csam.login > rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t              helios.domain > h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n              helios.domain > h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n       In the first example, helios responds to query id 3 from h2opolo with 3 answer  records,  3  name\\n       server  records  and  7  additional records.  The first answer record is type A (address) and its\\n       data is internet address 128.32.137.3.  The total size of the response was 273  bytes,  excluding\\n       UDP  and  IP  headers.  The op (Query) and response code (NoError) were omitted, as was the class\\n       (C_IN) of the A record.\\n\\n       In the second example, helios responds to query 2 with a response  code  of  non-existent  domain\\n       (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the\\n       authoritative answer bit was set.  Since there were no answers,  no  type,  class  or  data  were\\n       printed.\\n\\n       Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (trun-\\n       cated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\'  is\\n       printed.\\n\\n       SMB\\/CIFS decoding\\n\\n       tcpdump  now  includes  fairly  extensive  SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and\\n       TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n       By default a fairly minimal decode is done, with a much more detailed decode done if -v is  used.\\n       Be  warned  that  with  -v  a single SMB packet may take up a page or more, so only use -v if you\\n       really want all the gory details.\\n\\n       For information on SMB packet formats and what all  the  fields  mean  see  www.cifs.org  or  the\\n       pub\\/samba\\/specs\\/  directory on your favorite samba.org mirror site.  The SMB patches were written\\n       by Andrew Tridgell (tridge@samba.org).\\n\\n       NFS Requests and Replies\\n\\n       Sun NFS (Network File System) requests and replies are printed as:\\n              src.sport > dst.nfs: NFS request xid xid len op args\\n              src.nfs > dst.dport: NFS reply xid xid reply stat len op results\\n              sushi.1023 > wrl.nfs: NFS request xid 26377\\n                   112 readlink fh 21,24\\/10.73165\\n              wrl.nfs > sushi.1023: NFS reply xid 26377\\n                   reply ok 40 readlink \\"..\\/var\\"\\n              sushi.1022 > wrl.nfs: NFS request xid 8219\\n                   144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n              wrl.nfs > sushi.1022: NFS reply xid 8219\\n                   reply ok 128 lookup fh 9,74\\/4134.3150\\n       In the first line, host sushi sends a transaction with id 26377 to  wrl.   The  request  was  112\\n       bytes,  excluding  the  UDP and IP headers.  The operation was a readlink (read symbolic link) on\\n       file handle (fh) 21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle  can  be\\n       interpreted as a major,minor device number pair, followed by the inode number and generation num-\\n       ber.) In the second line, wrl replies `ok\' with the same transaction id and the contents  of  the\\n       link.\\n\\n       In  the  third  line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in\\n       directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transac-\\n       tion id.\\n\\n       Note  that  the  data  printed  depends on the operation type.  The format is intended to be self\\n       explanatory if read in conjunction with an NFS protocol spec.  Also note that older  versions  of\\n       tcpdump  printed  NFS  packets  in a slightly different format: the transaction id (xid) would be\\n       printed instead of the non-NFS port number of the packet.\\n\\n       If the -v (verbose) flag is given, additional information is printed.  For example:\\n              sushi.1023 > wrl.nfs: NFS request xid 79658\\n                   148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n              wrl.nfs > sushi.1023: NFS reply xid 79658\\n                   reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n       (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been  omitted\\n       from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195,\\n       at byte offset 24576.  Wrl replies `ok\'; the packet shown on the second line is the  first  frag-\\n       ment  of  the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent\\n       fragments, but these fragments do not have NFS or even UDP headers and so might not  be  printed,\\n       depending  on  the  filter  expression  used).   Because  the  -v flag is given, some of the file\\n       attributes (which are returned in addition to the file data) are printed: the file type (``REG\'\',\\n       for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n       If the -v flag is given more than once, even more details are printed.\\n\\n       Note  that  NFS requests are very large and much of the detail won\'t be printed unless snaplen is\\n       increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n       NFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track  of\\n       ``recent\'\'  requests,  and matches them to the replies using the transaction ID.  If a reply does\\n       not closely follow the corresponding request, it might not be parsable.\\n\\n       AFS Requests and Replies\\n\\n       Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n              src.sport > dst.dport: rx packet-type\\n              src.sport > dst.dport: rx packet-type service call call-name args\\n              src.sport > dst.dport: rx packet-type service reply call-name args\\n              elvis.7001 > pike.afsfs:\\n                   rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n                   new fid 536876964\\/1\\/1 \\".newsrc\\"\\n              pike.afsfs > elvis.7001: rx data fs reply rename\\n       In the first line, host elvis sends a RX packet to pike.  This was a RX data  packet  to  the  fs\\n       (fileserver)  service,  and is the start of an RPC call.  The RPC call was a rename, with the old\\n       directory file id of 536876964\\/1\\/1 and an old filename of `.newsrc.new\', and a new directory file\\n       id  of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to\\n       the rename call (which was successful, because it was a data packet and not an abort packet).\\n\\n       In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some\\n       of  the  arguments  decoded  (generally  only the `interesting\' arguments, for some definition of\\n       interesting).\\n\\n       The format is intended to be self-describing, but it will probably not be useful  to  people  who\\n       are not familiar with the workings of AFS and RX.\\n\\n       If  the  -v (verbose) flag is given twice, acknowledgement packets and additional header informa-\\n       tion is printed, such as the RX call ID, call number, sequence number, serial number, and the  RX\\n       packet flags.\\n\\n       If  the -v flag is given twice, additional information is printed, such as the RX call ID, serial\\n       number, and the RX packet flags.  The MTU negotiation information is also  printed  from  RX  ack\\n       packets.\\n\\n       If the -v flag is given three times, the security index and service id are printed.\\n\\n       Error  codes  are  printed  for abort packets, with the exception of Ubik beacon packets (because\\n       abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n       Note that AFS requests are very large and many of the arguments won\'t be printed  unless  snaplen\\n       is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n       AFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of\\n       ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If  a\\n       reply does not closely follow the corresponding request, it might not be parsable.\\n\\n       KIP AppleTalk (DDP in UDP)\\n\\n       AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets\\n       (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to trans-\\n       late AppleTalk net and node numbers to names.  Lines in this file have the form\\n              number    name\\n\\n              1.254          ether\\n              16.1      icsd-net\\n              1.254.110 ace\\n       The  first  two  lines  give the names of AppleTalk networks.  The third line gives the name of a\\n       particular host (a host is distinguished from a net by the 3rd octet in the number - a net number\\n       must  have  two  octets and a host number must have three octets.)  The number and name should be\\n       separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank  lines  or\\n       comment lines (lines starting with a `#\').\\n\\n       AppleTalk addresses are printed in the form\\n              net.host.port\\n\\n              144.1.209.2 > icsd-net.112.220\\n              office.2 > icsd-net.112.220\\n              jssmag.149.235 > icsd-net.2\\n       (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net\\n       number, addresses are printed in numeric form.)  In the first example, NBP (DDP port  2)  on  net\\n       144.1  node 209 is sending to whatever is listening on port 220 of net icsd node 112.  The second\\n       line is the same except the full name of the source node is known (`office\').  The third line  is\\n       a  send from port 235 on net jssmag node 149 to broadcast on the icsd-net NBP port (note that the\\n       broadcast address (255) is indicated by a net name with no host number - for this reason  it\'s  a\\n       good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n       NBP  (name binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents\\n       interpreted.  Other protocols just dump the protocol name (or number if no name is registered for\\n       the protocol) and packet size.\\n\\n       NBP packets are formatted like the following examples:\\n              icsd-net.112.220 > jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n              jssmag.209.2 > icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n              techpit.2 > icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n       The  first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast\\n       on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request\\n       (note  that  it  has  the same id) from host jssmag.209 saying that it has a laserwriter resource\\n       named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request  say-\\n       ing host techpit has laserwriter \\"techpit\\" registered on port 186.\\n\\n       ATP packet formatting is demonstrated by the following example:\\n              jssmag.209.165 > helios.132: atp-req  12266<0-7> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-req  12266<3,5> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-rel  12266<0-7> 0xae030001\\n              jssmag.209.133 > helios.132: atp-req* 12267<0-7> 0xae030002\\n       Jssmag.209  initiates  transaction  id  12266 with host helios by requesting up to 8 packets (the\\n       `<0-7>\').  The hex number at the end of the line is the value of  the  `userdata\'  field  in  the\\n       request.\\n\\n       Helios  responds  with  8  512-byte packets.  The `:digit\' following the transaction id gives the\\n       packet sequence number in the transaction and the number in parens is the amount of data  in  the\\n       packet, excluding the atp header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n       Jssmag.209  then  requests  that  packets  3 & 5 be retransmitted.  Helios resends them then jss-\\n       mag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.   The  `*\'  on\\n       the request indicates that XO (`exactly once\') was not set.\\n\\nPACKET METADATA FILTER\\n       Use  packet metadata filter expression to match packets against descriptive information about the\\n       packet: interface, process, service type or direction.\\n\\n       Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces sup-\\n       porting the PKTAP data link type.\\n\\n       The syntax supports the following operators:\\n\\n              or     logical or\\n              and    logical and\\n              not    negation\\n              (...)  to group sub-expressions\\n              =      is equal\\n              !=     is not equal\\n              ||     logical or (alternate)\\n              &&     logical and (alternate)\\n              !      negation (alternate)\\n\\n       The  syntax  support  the following keywords to denote which of packet metadata contents is to be\\n       compared:\\n\\n              if     interface name\\n              proc   process name\\n              pid    process ID\\n              svc    service class\\n              dir    direction\\n              eproc  effective process name\\n              epid   effective process ID\\n\\n       For example to filter packets from interface en0 \\"sent\\" by the process  named  \\"nc\\"  or  incoming\\n       packet not on interface en0:\\n\\n              -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n       Note  that a complex packet metadata filter expression needs to be put in quotes as the option -Q\\n       takes a single string parameter.\\n\\nSEE ALSO\\n       stty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)\\n\\n              http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap\\n\\nAUTHORS\\n       The original authors are:\\n\\n       Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley  National  Laboratory,\\n       University of California, Berkeley, CA.\\n\\n       It is currently being maintained by tcpdump.org.\\n\\n       The current version is available via http:\\n\\n              https:\\/\\/www.tcpdump.org\\/\\n\\n       The original distribution is available via anonymous ftp:\\n\\n              ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n       IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n       under specific configurations.\\n\\nBUGS\\n       To report a security issue please send an e-mail to security@tcpdump.org.\\n\\n       To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n       back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n       NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n       latter.\\n\\n       On Linux systems with 2.0[.x] kernels:\\n\\n              packets on the loopback device will be seen twice;\\n22:01:13.146083 IP 192.168.1.110.54815 > ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0\\n22:01:13.676657 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417\\n22:01:13.676689 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409\\n22:01:13.727245 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0\\n22:01:13.727649 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204\\n22:01:13.727715 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0\\n22:01:13.835496 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0\\n22:01:13.916104 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0\\n22:01:14.580041 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43\\n22:01:14.681539 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71\\n22:01:14.681622 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0\\n22:01:15.685811 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:15.774804 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:16.775977 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:16.866743 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:17.868075 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:17.960006 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:18.961083 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:19.042139 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n:\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n:...skipping...\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n              cessed);\\n\\n              packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n              ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n              the command line, on some OSes it counts packets regardless of whether they  were  matched\\n              by  the filter expression and, even if they were matched by the filter expression, regard-\\n              less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n              packets  that were matched by the filter expression regardless of whether tcpdump has read\\n              and processed them yet, and on other OSes it counts only packets that were matched by  the\\n              filter expression and were processed by tcpdump);\\n\\n              packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n              lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n              ning,  if  the OS reports that information to applications; if not, it will be reported as\\n              0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n       tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n       example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n       such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n       in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n       SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading  packets  from  a network interface may require that you have special privileges; see the\\n:...skipping...\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\n              Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n              specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n       -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n       -dd    Dump packet-matching code as a C program fragment.\\n\\n       -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n       -D\\n       --list-interfaces\\n              Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n              interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n              This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n              name is a somewhat complex string.\\n\\n              The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n       -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n       -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n              Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n              Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n              secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n              The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n              make it visible to others, via ps(1) and other occasions.\\n\\n              In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n              been given should already have been given up.\\n\\n       -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n              bers).\\n\\n              The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n              face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n       -F file\\n              Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n       -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n       -G rotate_seconds\\n              If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n              format is specified, each new file will overwrite the previous.\\n\\n              If used in conjunction with the -C option, filenames will take the form of `file<count>\'.\\n\\n       -h\\n       --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n       --version\\n              Print the tcpdump and libpcap version strings and exit.\\n\\n       -H     Attempt to detect 802.11s draft mesh headers.\\n\\n       -i interface\\n       --interface=interface\\n              Listen on interface.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n              On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n              tunnel interfaces).\\n\\n              Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n              the loopback and en0 interface:\\n\\n                     tcpdump -i pktap,lo0,en0\\n\\n              An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n              A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n              savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n              An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n              ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n       -I\\n       --monitor-mode\\n              Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n              Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n              on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n              This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n              in monitor mode will be shown.\\n\\n       --immediate-mode\\n              Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n              to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n       -j tstamp_type\\n       --time-stamp-type=tstamp_type\\n              Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n       -J\\n       --list-time-stamp-types\\n              List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n       --time-stamp-precision=tstamp_precision\\n              When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n              Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n              time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n       When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n       conversion will lose precision.\\n\\n       The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n       -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n              By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n              The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                     I     interface name (or interface ID)\\n                     N     process name\\n                     P     process ID\\n                     S     service class\\n                     D     direction\\n                     C     comment\\n                     C     flags\\n                     U     process UUID (not shown by default)\\n                     V     verbose printf of pcap-ng blocks (not shown by default)\\n                     A     display all types of metadata\\n\\n              This is an Apple modification.\\n\\n       -K\\n       --dont-verify-checksums\\n              Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n              The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n       -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                     tcpdump -l | tee dat\\n\\n              or\\n\\n                     tcpdump -l > dat & tail -f dat\\n\\n              Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n              -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n              all platforms, including Windows.\\n\\n       -L\\n       --list-data-link-types\\n              List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n              support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n              another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n       -m module\\n              Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n       -M secret\\n              Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n       -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n       -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n       -#\\n       --number\\n              Print an optional packet number at the beginning of the line.\\n\\n       -O\\n       --no-optimize\\n              Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n       -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n       -p\\n       --no-promiscuous-mode\\n              Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n              broadcast\'.\\n\\n       -Q expression\\n              To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n              for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n       -Q direction\\n       --direction=direction\\n              Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n       -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n       -r file\\n              Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n       -S\\n       --absolute-tcp-sequence-numbers\\n              Print absolute, rather than relative, TCP sequence numbers.\\n\\n       -s snaplen\\n       --snapshot-length=snaplen\\n              Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n              protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n              This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n              wards compatibility with recent older versions of tcpdump.\\n\\n       -T type\\n              Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n              Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n              Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n              zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n              Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n              Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n              ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n              Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n       -t     Don\'t print a timestamp on each dump line.\\n\\n       -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n       -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n       -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n       -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n       -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                     0     time\\n                     1     no time\\n                     2     unformatted timestamp\\n                     3     microseconds since previous line\\n                     4     date and time\\n                     5     microseconds since first line\\n\\n              This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n       --time-zone-offset tz\\n              To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n              The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n       -u     Print undecoded NFS handles.\\n\\n       -U\\n       --packet-buffered\\n              If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n              when not writing to a terminal, being written only when the output buffer fills.\\n\\n              If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n              fills.\\n\\n              The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n       -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n              checks such as verifying the IP and ICMP header checksum.\\n\\n              When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n       -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n       -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n       -V file\\n              Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n       -w file\\n              Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n              This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n              to be written as soon as they are received.\\n\\n              The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n              extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n              is present and adding one (e.g. .pcap) is recommended.\\n\\n              See pcap-savefile(5) for a description of the file format.\\n\\n       -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n              name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n              Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n              cal files per timeslice.\\n\\n       -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n              Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n       -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n       -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n       -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n       -y datalinktype\\n       --linktype=datalinktype\\n              Set the data link type to use while capturing packets to datalinktype.\\n\\n       -z postrotate-command\\n              Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n              compress each savefile using gzip or bzip2.\\n\\n              Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n              And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags & arguments\\n              arrangements and execute the command that you want.\\n\\n       -Z user\\n       --relinquish-privileges=user\\n              If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n              This behavior can also be enabled by default at compile time.\\n\\n        expression\\n              selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n              For the expression syntax, see pcap-filter(7).\\n\\n              The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n              backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.\\n\\nEXAMPLES\\n       To print all packets arriving at or departing from sundown:\\n              tcpdump host sundown\\n\\n       To print traffic between helios and either hot or ace:\\n              tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n       To print all IP packets between ace and any host except helios:\\n              tcpdump ip host ace and not helios\\n\\n       To print all traffic between local hosts and hosts at Berkeley:\\n              tcpdump net ucb-ether\\n\\n       To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n              tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n       To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n              tcpdump ip and not net localnet\\n\\n       To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n              tcpdump \'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n       To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n              tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)\'\\n\\n       To print IP packets longer than 576 bytes sent through gateway snup:\\n              tcpdump \'gateway snup and ip[2:2] > 576\'\\n\\n       To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n              tcpdump \'ether[0] & 1 = 0 and ip[16] >= 224\'\\n\\n       To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n              tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'\\n\\nOUTPUT FORMAT\\n       The output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.\\n\\n       Timestamps\\n\\n       By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n              hh:mm:ss.frac\\n       and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n       ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n       time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n       Link Level Headers\\n\\n       If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n       On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n       packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n       packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n       On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n       contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n       On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n       (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n       On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n       ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n       out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n       pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n       For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n       bytes of compressed header:\\n              O ctcp * A+6 S+49 I+6 3 (6)\\n\\n       ARP\\/RARP Packets\\n\\n       Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n              arp who-has csam tell rtsg\\n              arp reply csam is-at CSAM\\n       The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n       lower case).\\n\\n       This would look less redundant if we had done tcpdump -n:\\n              arp who-has 128.3.254.6 tell 128.3.254.68\\n              arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n       If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n              RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n              CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n       For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n       IPv4 Packets\\n\\n       If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n       If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n              tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n       tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n       fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n       proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n       Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a > separating the source and destination.\\n       For other protocols, the addresses will be printed, with a > separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n       For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n       flag, in the IP header information, as described above.\\n\\n       TCP Packets\\n\\n       (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n       The general format of a TCP protocol line is:\\n              src > dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n       Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n       Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n       of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n       Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n       Here is the opening portion of an rlogin from host rtsg to host csam.\\n              IP rtsg.1023 > csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n              IP csam.login > rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n              IP rtsg.1023 > csam.login: Flags [.], ack 1, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n              IP csam.login > rtsg.1023: Flags [.], ack 2, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n              IP csam.login > rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n       The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n       `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n       bytes.\\n\\n       Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n       or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n       ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n       stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n       On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -> csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n       but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n       9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n       If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n       header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n       where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n       Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n       There are 8 bits in the control bits section of the TCP header:\\n\\n              CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n       Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n       trol bits is\\n\\n              1) Caller sends SYN\\n              2) Recipient responds with SYN, ACK\\n              3) Caller sends ACK\\n\\n       Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n       dump.\\n\\n       Recall the structure of a TCP header without options:\\n\\n        0                            15                              31\\n       -----------------------------------------------------------------\\n       |          source port          |       destination port        |\\n       -----------------------------------------------------------------\\n       |                        sequence number                        |\\n       -----------------------------------------------------------------\\n       |                     acknowledgment number                     |\\n       -----------------------------------------------------------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       -----------------------------------------------------------------\\n       |         TCP checksum          |       urgent pointer          |\\n       -----------------------------------------------------------------\\n\\n       A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n       Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n        0             7|             15|             23|             31\\n       ----------------|---------------|---------------|----------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       ----------------|---------------|---------------|----------------\\n       |               |  13th octet   |               |               |\\n\\n       Let\'s have a closer look at octet no. 13:\\n\\t\\t\\t \\n\\t\\t\\t \\n\\t\\t\\t \\n\\t\\t\\t        (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been  omitted\\n       from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195,\\n       at byte offset 24576.  Wrl replies `ok\'; the packet shown on the second line is the  first  frag-\\n       ment  of  the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent\\n       fragments, but these fragments do not have NFS or even UDP headers and so might not  be  printed,\\n       depending  on  the  filter  expression  used).   Because  the  -v flag is given, some of the file\\n       attributes (which are returned in addition to the file data) are printed: the file type (``REG\'\',\\n       for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n       If the -v flag is given more than once, even more details are printed.\\n\\n       Note  that  NFS requests are very large and much of the detail won\'t be printed unless snaplen is\\n       increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n       NFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track  of\\n       ``recent\'\'  requests,  and matches them to the replies using the transaction ID.  If a reply does\\n       not closely follow the corresponding request, it might not be parsable.\\n\\n       AFS Requests and Replies\\n\\n       Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n              src.sport > dst.dport: rx packet-type\\n              src.sport > dst.dport: rx packet-type service call call-name args\\n              src.sport > dst.dport: rx packet-type service reply call-name args\\n              elvis.7001 > pike.afsfs:\\n                   rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n                   new fid 536876964\\/1\\/1 \\".newsrc\\"\\n              pike.afsfs > elvis.7001: rx data fs reply rename\\n       In the first line, host elvis sends a RX packet to pike.  This was a RX data  packet  to  the  fs\\n       (fileserver)  service,  and is the start of an RPC call.  The RPC call was a rename, with the old\\n       directory file id of 536876964\\/1\\/1 and an old filename of `.newsrc.new\', and a new directory file\\n       id  of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to\\n       the rename call (which was successful, because it was a data packet and not an abort packet).\\n\\n       In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some\\n       of  the  arguments  decoded  (generally  only the `interesting\' arguments, for some definition of\\n       interesting).\\n\\n       The format is intended to be self-describing, but it will probably not be useful  to  people  who\\n       are not familiar with the workings of AFS and RX.\\n\\n       If  the  -v (verbose) flag is given twice, acknowledgement packets and additional header informa-\\n       tion is printed, such as the RX call ID, call number, sequence number, serial number, and the  RX\\n       packet flags.\\n\\n       If  the -v flag is given twice, additional information is printed, such as the RX call ID, serial\\n       number, and the RX packet flags.  The MTU negotiation information is also  printed  from  RX  ack\\n       packets.\\n\\n       If the -v flag is given three times, the security index and service id are printed.\\n\\n       Error  codes  are  printed  for abort packets, with the exception of Ubik beacon packets (because\\n       abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n       Note that AFS requests are very large and many of the arguments won\'t be printed  unless  snaplen\\n       is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n       AFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of\\n       ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If  a\\n       reply does not closely follow the corresponding request, it might not be parsable.\\n\\n       KIP AppleTalk (DDP in UDP)\\n\\n       AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets\\n       (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to trans-\\n       late AppleTalk net and node numbers to names.  Lines in this file have the form\\n              number    name\\n\\n              1.254          ether\\n              16.1      icsd-net\\n              1.254.110 ace\\n       The  first  two  lines  give the names of AppleTalk networks.  The third line gives the name of a\\n       particular host (a host is distinguished from a net by the 3rd octet in the number - a net number\\n       must  have  two  octets and a host number must have three octets.)  The number and name should be\\n       separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank  lines  or\\n       comment lines (lines starting with a `#\').\\n\\n       AppleTalk addresses are printed in the form\\n              net.host.port\\n\\n              144.1.209.2 > icsd-net.112.220\\n              office.2 > icsd-net.112.220\\n              jssmag.149.235 > icsd-net.2\\n       (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net\\n       number, addresses are printed in numeric form.)  In the first example, NBP (DDP port  2)  on  net\\n       144.1  node 209 is sending to whatever is listening on port 220 of net icsd node 112.  The second\\n       line is the same except the full name of the source node is known (`office\').  The third line  is\\n       a  send from port 235 on net jssmag node 149 to broadcast on the icsd-net NBP port (note that the\\n       broadcast address (255) is indicated by a net name with no host number - for this reason  it\'s  a\\n       good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n       NBP  (name binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents\\n       interpreted.  Other protocols just dump the protocol name (or number if no name is registered for\\n       the protocol) and packet size.\\n\\n       NBP packets are formatted like the following examples:\\n              icsd-net.112.220 > jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n              jssmag.209.2 > icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n              techpit.2 > icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n       The  first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast\\n       on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request\\n       (note  that  it  has  the same id) from host jssmag.209 saying that it has a laserwriter resource\\n       named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request  say-\\n       ing host techpit has laserwriter \\"techpit\\" registered on port 186.\\n\\n       ATP packet formatting is demonstrated by the following example:\\n              jssmag.209.165 > helios.132: atp-req  12266<0-7> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-req  12266<3,5> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-rel  12266<0-7> 0xae030001\\n              jssmag.209.133 > helios.132: atp-req* 12267<0-7> 0xae030002\\n       Jssmag.209  initiates  transaction  id  12266 with host helios by requesting up to 8 packets (the\\n       `<0-7>\').  The hex number at the end of the line is the value of  the  `userdata\'  field  in  the\\n       request.\\n\\n       Helios  responds  with  8  512-byte packets.  The `:digit\' following the transaction id gives the\\n       packet sequence number in the transaction and the number in parens is the amount of data  in  the\\n       packet, excluding the atp header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n       Jssmag.209  then  requests  that  packets  3 & 5 be retransmitted.  Helios resends them then jss-\\n       mag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.   The  `*\'  on\\n       the request indicates that XO (`exactly once\') was not set.\\n\\nPACKET METADATA FILTER\\n       Use  packet metadata filter expression to match packets against descriptive information about the\\n       packet: interface, process, service type or direction.\\n\\n       Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces sup-\\n       porting the PKTAP data link type.\\n\\n       The syntax supports the following operators:\\n\\n              or     logical or\\n              and    logical and\\n              not    negation\\n              (...)  to group sub-expressions\\n              =      is equal\\n              !=     is not equal\\n              ||     logical or (alternate)\\n              &&     logical and (alternate)\\n              !      negation (alternate)\\n\\n       The  syntax  support  the following keywords to denote which of packet metadata contents is to be\\n       compared:\\n\\n              if     interface name\\n              proc   process name\\n              pid    process ID\\n              svc    service class\\n              dir    direction\\n              eproc  effective process name\\n              epid   effective process ID\\n\\n       For example to filter packets from interface en0 \\"sent\\" by the process  named  \\"nc\\"  or  incoming\\n       packet not on interface en0:\\n\\n              -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n       Note  that a complex packet metadata filter expression needs to be put in quotes as the option -Q\\n       takes a single string parameter.\\n\\nSEE ALSO\\n       stty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)\\n\\n              http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap\\n\\nAUTHORS\\n       The original authors are:\\n\\n       Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley  National  Laboratory,\\n       University of California, Berkeley, CA.\\n\\n       It is currently being maintained by tcpdump.org.\\n\\n       The current version is available via http:\\n\\n              https:\\/\\/www.tcpdump.org\\/\\n\\n       The original distribution is available via anonymous ftp:\\n\\n              ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n       IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n       under specific configurations.\\n\\nBUGS\\n       To report a security issue please send an e-mail to security@tcpdump.org.\\n\\n       To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n       back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n       NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n       latter.\\n\\n       On Linux systems with 2.0[.x] kernels:\\n\\n              packets on the loopback device will be seen twice;\\n22:01:13.146083 IP 192.168.1.110.54815 > ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0\\n22:01:13.676657 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417\\n22:01:13.676689 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409\\n22:01:13.727245 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0\\n22:01:13.727649 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204\\n22:01:13.727715 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0\\n22:01:13.835496 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0\\n22:01:13.916104 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0\\n22:01:14.580041 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43\\n22:01:14.681539 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71\\n22:01:14.681622 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0\\n22:01:15.685811 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:15.774804 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:16.775977 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:16.866743 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:17.868075 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:17.960006 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:18.961083 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:19.042139 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n:\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n:...skipping...\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n              cessed);\\n\\n              packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n              ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n              the command line, on some OSes it counts packets regardless of whether they  were  matched\\n              by  the filter expression and, even if they were matched by the filter expression, regard-\\n              less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n              packets  that were matched by the filter expression regardless of whether tcpdump has read\\n              and processed them yet, and on other OSes it counts only packets that were matched by  the\\n              filter expression and were processed by tcpdump);\\n\\n              packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n              lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n              ning,  if  the OS reports that information to applications; if not, it will be reported as\\n              0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n       tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n       example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n       such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n       in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n       SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading  packets  from  a network interface may require that you have special privileges; see the\\n:...skipping...\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\n              Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n              specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n       -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n       -dd    Dump packet-matching code as a C program fragment.\\n\\n       -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n       -D\\n       --list-interfaces\\n              Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n              interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n              This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n              name is a somewhat complex string.\\n\\n              The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n       -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n       -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n              Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n              Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n              secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n              The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n              make it visible to others, via ps(1) and other occasions.\\n\\n              In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n              been given should already have been given up.\\n\\n       -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n              bers).\\n\\n              The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n              face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n       -F file\\n              Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n       -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n       -G rotate_seconds\\n              If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n              format is specified, each new file will overwrite the previous.\\n\\n              If used in conjunction with the -C option, filenames will take the form of `file<count>\'.\\n\\n       -h\\n       --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n       --version\\n              Print the tcpdump and libpcap version strings and exit.\\n\\n       -H     Attempt to detect 802.11s draft mesh headers.\\n\\n       -i interface\\n       --interface=interface\\n              Listen on interface.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n              On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n              tunnel interfaces).\\n\\n              Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n              the loopback and en0 interface:\\n\\n                     tcpdump -i pktap,lo0,en0\\n\\n              An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n              A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n              savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n              An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n              ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n       -I\\n       --monitor-mode\\n              Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n              Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n              on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n              This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n              in monitor mode will be shown.\\n\\n       --immediate-mode\\n              Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n              to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n       -j tstamp_type\\n       --time-stamp-type=tstamp_type\\n              Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n       -J\\n       --list-time-stamp-types\\n              List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n       --time-stamp-precision=tstamp_precision\\n              When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n              Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n              time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n       When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n       conversion will lose precision.\\n\\n       The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n       -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n              By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n              The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                     I     interface name (or interface ID)\\n                     N     process name\\n                     P     process ID\\n                     S     service class\\n                     D     direction\\n                     C     comment\\n                     C     flags\\n                     U     process UUID (not shown by default)\\n                     V     verbose printf of pcap-ng blocks (not shown by default)\\n                     A     display all types of metadata\\n\\n              This is an Apple modification.\\n\\n       -K\\n       --dont-verify-checksums\\n              Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n              The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n       -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                     tcpdump -l | tee dat\\n\\n              or\\n\\n                     tcpdump -l > dat & tail -f dat\\n\\n              Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n              -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n              all platforms, including Windows.\\n\\n       -L\\n       --list-data-link-types\\n              List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n              support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n              another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n       -m module\\n              Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n       -M secret\\n              Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n       -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n       -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n       -#\\n       --number\\n              Print an optional packet number at the beginning of the line.\\n\\n       -O\\n       --no-optimize\\n              Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n       -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n       -p\\n       --no-promiscuous-mode\\n              Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n              broadcast\'.\\n\\n       -Q expression\\n              To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n              for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n       -Q direction\\n       --direction=direction\\n              Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n       -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n       -r file\\n              Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n       -S\\n       --absolute-tcp-sequence-numbers\\n              Print absolute, rather than relative, TCP sequence numbers.\\n\\n       -s snaplen\\n       --snapshot-length=snaplen\\n              Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n              protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n              This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n              wards compatibility with recent older versions of tcpdump.\\n\\n       -T type\\n              Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n              Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n              Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n              zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n              Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n              Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n              ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n              Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n       -t     Don\'t print a timestamp on each dump line.\\n\\n       -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n       -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n       -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n       -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n       -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                     0     time\\n                     1     no time\\n                     2     unformatted timestamp\\n                     3     microseconds since previous line\\n                     4     date and time\\n                     5     microseconds since first line\\n\\n              This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n       --time-zone-offset tz\\n              To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n              The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n       -u     Print undecoded NFS handles.\\n\\n       -U\\n       --packet-buffered\\n              If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n              when not writing to a terminal, being written only when the output buffer fills.\\n\\n              If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n              fills.\\n\\n              The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n       -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n              checks such as verifying the IP and ICMP header checksum.\\n\\n              When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n       -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n       -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n       -V file\\n              Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n       -w file\\n              Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n              This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n              to be written as soon as they are received.\\n\\n              The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n              extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n              is present and adding one (e.g. .pcap) is recommended.\\n\\n              See pcap-savefile(5) for a description of the file format.\\n\\n       -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n              name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n              Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n              cal files per timeslice.\\n\\n       -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n              Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n       -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n       -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n       -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n       -y datalinktype\\n       --linktype=datalinktype\\n              Set the data link type to use while capturing packets to datalinktype.\\n\\n       -z postrotate-command\\n              Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n              compress each savefile using gzip or bzip2.\\n\\n              Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n              And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags & arguments\\n              arrangements and execute the command that you want.\\n\\n       -Z user\\n       --relinquish-privileges=user\\n              If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n              This behavior can also be enabled by default at compile time.\\n\\n        expression\\n              selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n              For the expression syntax, see pcap-filter(7).\\n\\n              The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n              backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.\\n\\nEXAMPLES\\n       To print all packets arriving at or departing from sundown:\\n              tcpdump host sundown\\n\\n       To print traffic between helios and either hot or ace:\\n              tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n       To print all IP packets between ace and any host except helios:\\n              tcpdump ip host ace and not helios\\n\\n       To print all traffic between local hosts and hosts at Berkeley:\\n              tcpdump net ucb-ether\\n\\n       To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n              tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n       To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n              tcpdump ip and not net localnet\\n\\n       To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n              tcpdump \'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n       To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n              tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)\'\\n\\n       To print IP packets longer than 576 bytes sent through gateway snup:\\n              tcpdump \'gateway snup and ip[2:2] > 576\'\\n\\n       To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n              tcpdump \'ether[0] & 1 = 0 and ip[16] >= 224\'\\n\\n       To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n              tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'\\n\\nOUTPUT FORMAT\\n       The output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.\\n\\n       Timestamps\\n\\n       By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n              hh:mm:ss.frac\\n       and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n       ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n       time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n       Link Level Headers\\n\\n       If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n       On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n       packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n       packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n       On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n       contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n       On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n       (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n       On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n       ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n       out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n       pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n       For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n       bytes of compressed header:\\n              O ctcp * A+6 S+49 I+6 3 (6)\\n\\n       ARP\\/RARP Packets\\n\\n       Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n              arp who-has csam tell rtsg\\n              arp reply csam is-at CSAM\\n       The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n       lower case).\\n\\n       This would look less redundant if we had done tcpdump -n:\\n              arp who-has 128.3.254.6 tell 128.3.254.68\\n              arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n       If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n              RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n              CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n       For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n       IPv4 Packets\\n\\n       If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n       If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n              tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n       tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n       fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n       proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n       Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a > separating the source and destination.\\n       For other protocols, the addresses will be printed, with a > separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n       For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n       flag, in the IP header information, as described above.\\n\\n       TCP Packets\\n\\n       (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n       The general format of a TCP protocol line is:\\n              src > dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n       Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n       Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n       of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n       Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n       Here is the opening portion of an rlogin from host rtsg to host csam.\\n              IP rtsg.1023 > csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n              IP csam.login > rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n              IP rtsg.1023 > csam.login: Flags [.], ack 1, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n              IP csam.login > rtsg.1023: Flags [.], ack 2, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n              IP csam.login > rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n       The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n       `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n       bytes.\\n\\n       Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n       or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n       ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n       stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n       On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -> csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n       but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n       9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n       If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n       header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n       where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n       Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n       There are 8 bits in the control bits section of the TCP header:\\n\\n              CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n       Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n       trol bits is\\n\\n              1) Caller sends SYN\\n              2) Recipient responds with SYN, ACK\\n              3) Caller sends ACK\\n\\n       Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n       dump.\\n\\n       Recall the structure of a TCP header without options:\\n\\n        0                            15                              31\\n       -----------------------------------------------------------------\\n       |          source port          |       destination port        |\\n       -----------------------------------------------------------------\\n       |                        sequence number                        |\\n       -----------------------------------------------------------------\\n       |                     acknowledgment number                     |\\n       -----------------------------------------------------------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       -----------------------------------------------------------------\\n       |         TCP checksum          |       urgent pointer          |\\n       -----------------------------------------------------------------\\n\\n       A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n       Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n        0             7|             15|             23|             31\\n       ----------------|---------------|---------------|----------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       ----------------|---------------|---------------|----------------\\n       |               |  13th octet   |               |               |\\n\\n       Let\'s have a closer look at octet no. 13:\\n\\n                       |               |\\n                       |---------------|\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |7   5   3     0|\\n\\n       These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n       Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |0 0 0 0 0 0 1 0|\\n                       |---------------|\\n                       |7 6 5 4 3 2 1 0|\\n\\n       Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n       Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n              00000010\\n\\n       and its decimal representation is\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n       We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n       This relationship can be expressed as\\n              tcp[13] == 2\\n\\n       We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n              tcpdump -i xl0 tcp[13] == 2\\n\\n       The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n       Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n            |C|E|U|A|P|R|S|F|\\n            |---------------|\\n            |0 0 0 1 0 0 1 0|\\n            |---------------|\\n            |7 6 5 4 3 2 1 0|\\n\\n       Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n                   00010010\\n\\n       which translates to decimal\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n       Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n       control bit is set as long as SYN is set.\\n\\n       In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n       13th octet with the binary value of a SYN:\\n\\n                 00010010 SYN-ACK              00000010 SYN\\n            AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n                 --------                      --------\\n            =    00000010                 =    00000010\\n\\n       We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n\\n\\n\\n\\n       AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets\\n       (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to trans-\\n       late AppleTalk net and node numbers to names.  Lines in this file have the form\\n              number    name\\n\\n              1.254          ether\\n              16.1      icsd-net\\n              1.254.110 ace\\n       The  first  two  lines  give the names of AppleTalk networks.  The third line gives the name of a\\n       particular host (a host is distinguished from a net by the 3rd octet in the number - a net number\\n       must  have  two  octets and a host number must have three octets.)  The number and name should be\\n       separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank  lines  or\\n       comment lines (lines starting with a `#\').\\n\\n       AppleTalk addresses are printed in the form\\n              net.host.port\\n\\n              144.1.209.2 > icsd-net.112.220\\n              office.2 > icsd-net.112.220\\n              jssmag.149.235 > icsd-net.2\\n       (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net\\n       number, addresses are printed in numeric form.)  In the first example, NBP (DDP port  2)  on  net\\n       144.1  node 209 is sending to whatever is listening on port 220 of net icsd node 112.  The second\\n       line is the same except the full name of the source node is known (`office\').  The third line  is\\n       a  send from port 235 on net jssmag node 149 to broadcast on the icsd-net NBP port (note that the\\n       broadcast address (255) is indicated by a net name with no host number - for this reason  it\'s  a\\n       good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n       NBP  (name binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents\\n       interpreted.  Other protocols just dump the protocol name (or number if no name is registered for\\n       the protocol) and packet size.\\n\\n       NBP packets are formatted like the following examples:\\n              icsd-net.112.220 > jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n              jssmag.209.2 > icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n              techpit.2 > icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n       The  first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast\\n       on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request\\n       (note  that  it  has  the same id) from host jssmag.209 saying that it has a laserwriter resource\\n       named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request  say-\\n       ing host techpit has laserwriter \\"techpit\\" registered on port 186.\\n\\n       ATP packet formatting is demonstrated by the following example:\\n              jssmag.209.165 > helios.132: atp-req  12266<0-7> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-req  12266<3,5> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-rel  12266<0-7> 0xae030001\\n              jssmag.209.133 > helios.132: atp-req* 12267<0-7> 0xae030002\\n       Jssmag.209  initiates  transaction  id  12266 with host helios by requesting up to 8 packets (the\\n       `<0-7>\').  The hex number at the end of the line is the value of  the  `userdata\'  field  in  the\\n       request.\\n\\n       Helios  responds  with  8  512-byte packets.  The `:digit\' following the transaction id gives the\\n       packet sequence number in the transaction and the number in parens is the amount of data  in  the\\n       packet, excluding the atp header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n       Jssmag.209  then  requests  that  packets  3 & 5 be retransmitted.  Helios resends them then jss-\\n       mag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.   The  `*\'  on\\n       the request indicates that XO (`exactly once\') was not set.\\n\\nPACKET METADATA FILTER\\n       Use  packet metadata filter expression to match packets against descriptive information about the\\n       packet: interface, process, service type or direction.\\n\\n       Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces sup-\\n       porting the PKTAP data link type.\\n\\n       The syntax supports the following operators:\\n\\n              or     logical or\\n              and    logical and\\n              not    negation\\n              (...)  to group sub-expressions\\n              =      is equal\\n              !=     is not equal\\n              ||     logical or (alternate)\\n              &&     logical and (alternate)\\n              !      negation (alternate)\\n\\n       The  syntax  support  the following keywords to denote which of packet metadata contents is to be\\n       compared:\\n\\n              if     interface name\\n              proc   process name\\n              pid    process ID\\n              svc    service class\\n              dir    direction\\n              eproc  effective process name\\n              epid   effective process ID\\n\\n       For example to filter packets from interface en0 \\"sent\\" by the process  named  \\"nc\\"  or  incoming\\n       packet not on interface en0:\\n\\n              -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n       Note  that a complex packet metadata filter expression needs to be put in quotes as the option -Q\\n       takes a single string parameter.\\n\\nSEE ALSO\\n       stty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)\\n\\n              http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap\\n\\nAUTHORS\\n       The original authors are:\\n\\n       Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley  National  Laboratory,\\n       University of California, Berkeley, CA.\\n\\n       It is currently being maintained by tcpdump.org.\\n\\n       The current version is available via http:\\n\\n              https:\\/\\/www.tcpdump.org\\/\\n\\n       The original distribution is available via anonymous ftp:\\n\\n              ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n       IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n       under specific configurations.\\n\\nBUGS\\n       To report a security issue please send an e-mail to security@tcpdump.org.\\n\\n       To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n       back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n       NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n       latter.\\n\\n       On Linux systems with 2.0[.x] kernels:\\n\\n              packets on the loopback device will be seen twice;\\n22:01:13.146083 IP 192.168.1.110.54815 > ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0\\n22:01:13.676657 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417\\n22:01:13.676689 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409\\n22:01:13.727245 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0\\n22:01:13.727649 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204\\n22:01:13.727715 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0\\n22:01:13.835496 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0\\n22:01:13.916104 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0\\n22:01:14.580041 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43\\n22:01:14.681539 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71\\n22:01:14.681622 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0\\n22:01:15.685811 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:15.774804 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:16.775977 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:16.866743 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:17.868075 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:17.960006 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:18.961083 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:19.042139 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n:\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n:...skipping...\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n              cessed);\\n\\n              packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n              ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n              the command line, on some OSes it counts packets regardless of whether they  were  matched\\n              by  the filter expression and, even if they were matched by the filter expression, regard-\\n              less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n              packets  that were matched by the filter expression regardless of whether tcpdump has read\\n              and processed them yet, and on other OSes it counts only packets that were matched by  the\\n              filter expression and were processed by tcpdump);\\n\\n              packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n              lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n              ning,  if  the OS reports that information to applications; if not, it will be reported as\\n              0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n       tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n       example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n       such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n       in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n       SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading  packets  from  a network interface may require that you have special privileges; see the\\n:...skipping...\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\n              Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n              specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n       -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n       -dd    Dump packet-matching code as a C program fragment.\\n\\n       -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n       -D\\n       --list-interfaces\\n              Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n              interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n              This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n              name is a somewhat complex string.\\n\\n              The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n       -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n       -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n              Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n              Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n              secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n              The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n              make it visible to others, via ps(1) and other occasions.\\n\\n              In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n              been given should already have been given up.\\n\\n       -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n              bers).\\n\\n              The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n              face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n       -F file\\n              Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n       -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n       -G rotate_seconds\\n              If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n              format is specified, each new file will overwrite the previous.\\n\\n              If used in conjunction with the -C option, filenames will take the form of `file<count>\'.\\n\\n       -h\\n       --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n       --version\\n              Print the tcpdump and libpcap version strings and exit.\\n\\n       -H     Attempt to detect 802.11s draft mesh headers.\\n\\n       -i interface\\n       --interface=interface\\n              Listen on interface.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n              On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n              tunnel interfaces).\\n\\n              Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n              the loopback and en0 interface:\\n\\n                     tcpdump -i pktap,lo0,en0\\n\\n              An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n              A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n              savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n              An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n              ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n       -I\\n       --monitor-mode\\n              Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n              Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n              on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n              This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n              in monitor mode will be shown.\\n\\n       --immediate-mode\\n              Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n              to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n       -j tstamp_type\\n       --time-stamp-type=tstamp_type\\n              Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n       -J\\n       --list-time-stamp-types\\n              List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n       --time-stamp-precision=tstamp_precision\\n              When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n              Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n              time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n       When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n       conversion will lose precision.\\n\\n       The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n       -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n              By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n              The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                     I     interface name (or interface ID)\\n                     N     process name\\n                     P     process ID\\n                     S     service class\\n                     D     direction\\n                     C     comment\\n                     C     flags\\n                     U     process UUID (not shown by default)\\n                     V     verbose printf of pcap-ng blocks (not shown by default)\\n                     A     display all types of metadata\\n\\n              This is an Apple modification.\\n\\n       -K\\n       --dont-verify-checksums\\n              Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n              The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n       -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                     tcpdump -l | tee dat\\n\\n              or\\n\\n                     tcpdump -l > dat & tail -f dat\\n\\n              Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n              -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n              all platforms, including Windows.\\n\\n       -L\\n       --list-data-link-types\\n              List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n              support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n              another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n       -m module\\n              Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n       -M secret\\n              Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n       -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n       -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n       -#\\n       --number\\n              Print an optional packet number at the beginning of the line.\\n\\n       -O\\n       --no-optimize\\n              Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n       -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n       -p\\n       --no-promiscuous-mode\\n              Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n              broadcast\'.\\n\\n       -Q expression\\n              To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n              for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n       -Q direction\\n       --direction=direction\\n              Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n       -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n       -r file\\n              Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n       -S\\n       --absolute-tcp-sequence-numbers\\n              Print absolute, rather than relative, TCP sequence numbers.\\n\\n       -s snaplen\\n       --snapshot-length=snaplen\\n              Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n              protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n              This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n              wards compatibility with recent older versions of tcpdump.\\n\\n       -T type\\n              Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n              Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n              Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n              zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n              Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n              Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n              ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n              Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n       -t     Don\'t print a timestamp on each dump line.\\n\\n       -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n       -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n       -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n       -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n       -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                     0     time\\n                     1     no time\\n                     2     unformatted timestamp\\n                     3     microseconds since previous line\\n                     4     date and time\\n                     5     microseconds since first line\\n\\n              This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n       --time-zone-offset tz\\n              To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n              The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n       -u     Print undecoded NFS handles.\\n\\n       -U\\n       --packet-buffered\\n              If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n              when not writing to a terminal, being written only when the output buffer fills.\\n\\n              If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n              fills.\\n\\n              The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n       -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n              checks such as verifying the IP and ICMP header checksum.\\n\\n              When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n       -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n       -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n       -V file\\n              Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n       -w file\\n              Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n              This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n              to be written as soon as they are received.\\n\\n              The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n              extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n              is present and adding one (e.g. .pcap) is recommended.\\n\\n              See pcap-savefile(5) for a description of the file format.\\n\\n       -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n              name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n              Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n              cal files per timeslice.\\n\\n       -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n              Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n       -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n       -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n       -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n       -y datalinktype\\n       --linktype=datalinktype\\n              Set the data link type to use while capturing packets to datalinktype.\\n\\n       -z postrotate-command\\n              Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n              compress each savefile using gzip or bzip2.\\n\\n              Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n              And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags & arguments\\n              arrangements and execute the command that you want.\\n\\n       -Z user\\n       --relinquish-privileges=user\\n              If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n              This behavior can also be enabled by default at compile time.\\n\\n        expression\\n              selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n              For the expression syntax, see pcap-filter(7).\\n\\n              The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n              backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.\\n\\nEXAMPLES\\n       To print all packets arriving at or departing from sundown:\\n              tcpdump host sundown\\n\\n       To print traffic between helios and either hot or ace:\\n              tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n       To print all IP packets between ace and any host except helios:\\n              tcpdump ip host ace and not helios\\n\\n       To print all traffic between local hosts and hosts at Berkeley:\\n              tcpdump net ucb-ether\\n\\n       To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n              tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n       To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n              tcpdump ip and not net localnet\\n\\n       To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n              tcpdump \'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n       To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n              tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)\'\\n\\n       To print IP packets longer than 576 bytes sent through gateway snup:\\n              tcpdump \'gateway snup and ip[2:2] > 576\'\\n\\n       To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n              tcpdump \'ether[0] & 1 = 0 and ip[16] >= 224\'\\n\\n       To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n              tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'\\n\\nOUTPUT FORMAT\\n       The output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.\\n\\n       Timestamps\\n\\n       By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n              hh:mm:ss.frac\\n       and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n       ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n       time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n       Link Level Headers\\n\\n       If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n       On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n       packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n       packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n       On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n       contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n       On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n       (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n       On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n       ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n       out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n       pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n       For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n       bytes of compressed header:\\n              O ctcp * A+6 S+49 I+6 3 (6)\\n\\n       ARP\\/RARP Packets\\n\\n       Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n              arp who-has csam tell rtsg\\n              arp reply csam is-at CSAM\\n       The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n       lower case).\\n\\n       This would look less redundant if we had done tcpdump -n:\\n              arp who-has 128.3.254.6 tell 128.3.254.68\\n              arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n       If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n              RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n              CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n       For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n       IPv4 Packets\\n\\n       If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n       If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n              tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n       tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n       fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n       proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n       Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a > separating the source and destination.\\n       For other protocols, the addresses will be printed, with a > separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n       For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n       flag, in the IP header information, as described above.\\n\\n       TCP Packets\\n\\n       (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n       The general format of a TCP protocol line is:\\n              src > dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n       Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n       Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n       of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n       Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n       Here is the opening portion of an rlogin from host rtsg to host csam.\\n              IP rtsg.1023 > csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n              IP csam.login > rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n              IP rtsg.1023 > csam.login: Flags [.], ack 1, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n              IP csam.login > rtsg.1023: Flags [.], ack 2, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n              IP csam.login > rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n       The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n       `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n       bytes.\\n\\n       Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n       or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n       ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n       stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n       On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -> csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n       but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n       9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n       If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n       header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n       where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n       Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n       There are 8 bits in the control bits section of the TCP header:\\n\\n              CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n       Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n       trol bits is\\n\\n              1) Caller sends SYN\\n              2) Recipient responds with SYN, ACK\\n              3) Caller sends ACK\\n\\n       Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n       dump.\\n\\n       Recall the structure of a TCP header without options:\\n\\n        0                            15                              31\\n       -----------------------------------------------------------------\\n       |          source port          |       destination port        |\\n       -----------------------------------------------------------------\\n       |                        sequence number                        |\\n       -----------------------------------------------------------------\\n       |                     acknowledgment number                     |\\n       -----------------------------------------------------------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       -----------------------------------------------------------------\\n       |         TCP checksum          |       urgent pointer          |\\n       -----------------------------------------------------------------\\n\\n       A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n       Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n        0             7|             15|             23|             31\\n       ----------------|---------------|---------------|----------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       ----------------|---------------|---------------|----------------\\n       |               |  13th octet   |               |               |\\n\\n       Let\'s have a closer look at octet no. 13:\\n\\n                       |               |\\n                       |---------------|\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |7   5   3     0|\\n\\n       These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n       Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |0 0 0 0 0 0 1 0|\\n                       |---------------|\\n                       |7 6 5 4 3 2 1 0|\\n\\n       Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n       Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n              00000010\\n\\n       and its decimal representation is\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n       We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n       This relationship can be expressed as\\n              tcp[13] == 2\\n\\n       We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n              tcpdump -i xl0 tcp[13] == 2\\n\\n       The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n       Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n            |C|E|U|A|P|R|S|F|\\n            |---------------|\\n            |0 0 0 1 0 0 1 0|\\n            |---------------|\\n            |7 6 5 4 3 2 1 0|\\n\\n       Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n                   00010010\\n\\n       which translates to decimal\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n       Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n       control bit is set as long as SYN is set.\\n\\n       In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n       13th octet with the binary value of a SYN:\\n\\n                 00010010 SYN-ACK              00000010 SYN\\n            AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n                 --------                      --------\\n            =    00000010                 =    00000010\\n\\n       We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n       00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n              ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n       This points us to the tcpdump filter expression\\n                   tcpdump -i xl0 \'tcp[13] & 2 == 2\'\\n\\n       Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n       rst, tcp-push, tcp-act, tcp-urg.\\n\\n       This can be demonstrated as:\\n                   tcpdump -i xl0 \'tcp[tcpflags] & tcp-push != 0\'\\n\\n       Note that you should use single quotes or a backslash in the expression to hide the AND (\'&\') special character from the shell.\\n\\n       UDP Packets\\n\\n       UDP format is illustrated by this rwho packet:\\n              actinide.who > broadcast.who: udp 84\\n       This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n       Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n       NFS.\\n\\n       UDP Name Server Requests\\n\\n       (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n       Name server requests are formatted as\\n              src > dst: id op? flags qtype qclass name (len)\\n              h2opolo.1538 > helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n       Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n       was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n       the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n       A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n       `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&3=x]\' is printed, where x is the hex value\\n       of header bytes two and three.\\n\\n       UDP Name Server Responses\\n\\n       Name server responses are formatted as\\n              src > dst:  id op rcode flags a\\/n\\/au type class data (len)\\n              helios.domain > h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n              helios.domain > h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n       In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n       128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n       In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n       set.  Since there were no answers, no type, class or data were printed.\\n\\n       Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n       SMB\\/CIFS decoding\\n\\n       tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n       By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n       details.\\n\\n       For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n       (tridge@samba.org).\\n\\n       NFS Requests and Replies\\n\\n       Jssmag.209  then  requests  that  packets  3 & 5 be retransmitted.  Helios resends them then jss-\\n       mag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.   The  `*\'  on\\n       the request indicates that XO (`exactly once\') was not set.\\n\\nPACKET METADATA FILTER\\n       Use  packet metadata filter expression to match packets against descriptive information about the\\n       packet: interface, process, service type or direction.\\n\\n       Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces sup-\\n       porting the PKTAP data link type.\\n\\n       The syntax supports the following operators:\\n\\n              or     logical or\\n              and    logical and\\n              not    negation\\n              (...)  to group sub-expressions\\n              =      is equal\\n              !=     is not equal\\n              ||     logical or (alternate)\\n              &&     logical and (alternate)\\n              !      negation (alternate)\\n\\n       The  syntax  support  the following keywords to denote which of packet metadata contents is to be\\n       compared:\\n\\n              if     interface name\\n              proc   process name\\n              pid    process ID\\n              svc    service class\\n              dir    direction\\n              eproc  effective process name\\n              epid   effective process ID\\n\\n       For example to filter packets from interface en0 \\"sent\\" by the process  named  \\"nc\\"  or  incoming\\n       packet not on interface en0:\\n\\n              -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n       Note  that a complex packet metadata filter expression needs to be put in quotes as the option -Q\\n       takes a single string parameter.\\n\\nSEE ALSO\\n       stty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)\\n\\n              http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap\\n\\nAUTHORS\\n       The original authors are:\\n\\n       Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley  National  Laboratory,\\n       University of California, Berkeley, CA.\\n\\n       It is currently being maintained by tcpdump.org.\\n\\n       The current version is available via http:\\n\\n              https:\\/\\/www.tcpdump.org\\/\\n\\n       The original distribution is available via anonymous ftp:\\n\\n              ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n       IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n       under specific configurations.\\n\\nBUGS\\n       To report a security issue please send an e-mail to security@tcpdump.org.\\n\\n       To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n       back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n       NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n       latter.\\n\\n       On Linux systems with 2.0[.x] kernels:\\n\\n              packets on the loopback device will be seen twice;\\n22:01:13.146083 IP 192.168.1.110.54815 > ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0\\n22:01:13.676657 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417\\n22:01:13.676689 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409\\n22:01:13.727245 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0\\n22:01:13.727649 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204\\n22:01:13.727715 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0\\n22:01:13.835496 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0\\n22:01:13.916104 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0\\n22:01:14.580041 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43\\n22:01:14.681539 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71\\n22:01:14.681622 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0\\n22:01:15.685811 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:15.774804 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:16.775977 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:16.866743 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:17.868075 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:17.960006 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:18.961083 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:19.042139 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n:\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n:...skipping...\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n              cessed);\\n\\n              packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n              ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n              the command line, on some OSes it counts packets regardless of whether they  were  matched\\n              by  the filter expression and, even if they were matched by the filter expression, regard-\\n              less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n              packets  that were matched by the filter expression regardless of whether tcpdump has read\\n              and processed them yet, and on other OSes it counts only packets that were matched by  the\\n              filter expression and were processed by tcpdump);\\n\\n              packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n              lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n              ning,  if  the OS reports that information to applications; if not, it will be reported as\\n              0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n       tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n       example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n       such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n       in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n       SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading  packets  from  a network interface may require that you have special privileges; see the\\n:...skipping...\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\n              Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n              specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n       -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n       -dd    Dump packet-matching code as a C program fragment.\\n\\n       -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n       -D\\n       --list-interfaces\\n              Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n              interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n              This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n              name is a somewhat complex string.\\n\\n              The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n       -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n       -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n              Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n              Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n              secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n              The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n              make it visible to others, via ps(1) and other occasions.\\n\\n              In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n              been given should already have been given up.\\n\\n       -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n              bers).\\n\\n              The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n              face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n       -F file\\n              Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n       -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n       -G rotate_seconds\\n              If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n              format is specified, each new file will overwrite the previous.\\n\\n              If used in conjunction with the -C option, filenames will take the form of `file<count>\'.\\n\\n       -h\\n       --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n       --version\\n              Print the tcpdump and libpcap version strings and exit.\\n\\n       -H     Attempt to detect 802.11s draft mesh headers.\\n\\n       -i interface\\n       --interface=interface\\n              Listen on interface.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n              On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n              tunnel interfaces).\\n\\n              Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n              the loopback and en0 interface:\\n\\n                     tcpdump -i pktap,lo0,en0\\n\\n              An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n              A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n              savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n              An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n              ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n       -I\\n       --monitor-mode\\n              Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n              Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n              on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n              This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n              in monitor mode will be shown.\\n\\n       --immediate-mode\\n              Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n              to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n       -j tstamp_type\\n       --time-stamp-type=tstamp_type\\n              Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n       -J\\n       --list-time-stamp-types\\n              List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n       --time-stamp-precision=tstamp_precision\\n              When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n              Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n              time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n       When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n       conversion will lose precision.\\n\\n       The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n       -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n              By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n              The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                     I     interface name (or interface ID)\\n                     N     process name\\n                     P     process ID\\n                     S     service class\\n                     D     direction\\n                     C     comment\\n                     C     flags\\n                     U     process UUID (not shown by default)\\n                     V     verbose printf of pcap-ng blocks (not shown by default)\\n                     A     display all types of metadata\\n\\n              This is an Apple modification.\\n\\n       -K\\n       --dont-verify-checksums\\n              Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n              The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n       -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                     tcpdump -l | tee dat\\n\\n              or\\n\\n                     tcpdump -l > dat & tail -f dat\\n\\n              Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n              -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n              all platforms, including Windows.\\n\\n       -L\\n       --list-data-link-types\\n              List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n              support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n              another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n       -m module\\n              Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n       -M secret\\n              Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n       -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n       -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n       -#\\n       --number\\n              Print an optional packet number at the beginning of the line.\\n\\n       -O\\n       --no-optimize\\n              Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n       -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n       -p\\n       --no-promiscuous-mode\\n              Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n              broadcast\'.\\n\\n       -Q expression\\n              To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n              for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n       -Q direction\\n       --direction=direction\\n              Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n       -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n       -r file\\n              Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n       -S\\n       --absolute-tcp-sequence-numbers\\n              Print absolute, rather than relative, TCP sequence numbers.\\n\\n       -s snaplen\\n       --snapshot-length=snaplen\\n              Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n              protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n              This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n              wards compatibility with recent older versions of tcpdump.\\n\\n       -T type\\n              Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n              Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n              Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n              zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n              Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n              Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n              ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n              Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n       -t     Don\'t print a timestamp on each dump line.\\n\\n       -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n       -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n       -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n       -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n       -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                     0     time\\n                     1     no time\\n                     2     unformatted timestamp\\n                     3     microseconds since previous line\\n                     4     date and time\\n                     5     microseconds since first line\\n\\n              This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n       --time-zone-offset tz\\n              To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n              The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n       -u     Print undecoded NFS handles.\\n\\n       -U\\n       --packet-buffered\\n              If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n              when not writing to a terminal, being written only when the output buffer fills.\\n\\n              If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n              fills.\\n\\n              The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n       -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n              checks such as verifying the IP and ICMP header checksum.\\n\\n              When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n       -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n       -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n       -V file\\n              Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n       -w file\\n              Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n              This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n              to be written as soon as they are received.\\n\\n              The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n              extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n              is present and adding one (e.g. .pcap) is recommended.\\n\\n              See pcap-savefile(5) for a description of the file format.\\n\\n       -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n              name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n              Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n              cal files per timeslice.\\n\\n       -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n              Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n       -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n       -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n       -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n       -y datalinktype\\n       --linktype=datalinktype\\n              Set the data link type to use while capturing packets to datalinktype.\\n\\n       -z postrotate-command\\n              Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n              compress each savefile using gzip or bzip2.\\n\\n              Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n              And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags & arguments\\n              arrangements and execute the command that you want.\\n\\n       -Z user\\n       --relinquish-privileges=user\\n              If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n              This behavior can also be enabled by default at compile time.\\n\\n        expression\\n              selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n              For the expression syntax, see pcap-filter(7).\\n\\n              The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n              backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.\\n\\nEXAMPLES\\n       To print all packets arriving at or departing from sundown:\\n              tcpdump host sundown\\n\\n       To print traffic between helios and either hot or ace:\\n              tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n       To print all IP packets between ace and any host except helios:\\n              tcpdump ip host ace and not helios\\n\\n       To print all traffic between local hosts and hosts at Berkeley:\\n              tcpdump net ucb-ether\\n\\n       To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n              tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n       To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n              tcpdump ip and not net localnet\\n\\n       To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n              tcpdump \'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n       To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n              tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)\'\\n\\n       To print IP packets longer than 576 bytes sent through gateway snup:\\n              tcpdump \'gateway snup and ip[2:2] > 576\'\\n\\n       To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n              tcpdump \'ether[0] & 1 = 0 and ip[16] >= 224\'\\n\\n       To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n              tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'\\n\\nOUTPUT FORMAT\\n       The output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.\\n\\n       Timestamps\\n\\n       By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n              hh:mm:ss.frac\\n       and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n       ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n       time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n       Link Level Headers\\n\\n       If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n       On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n       packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n       packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n       On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n       contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n       On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n       (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n       On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n       ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n       out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n       pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n       For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n       bytes of compressed header:\\n              O ctcp * A+6 S+49 I+6 3 (6)\\n\\n       ARP\\/RARP Packets\\n\\n       Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n              arp who-has csam tell rtsg\\n              arp reply csam is-at CSAM\\n       The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n       lower case).\\n\\n       This would look less redundant if we had done tcpdump -n:\\n              arp who-has 128.3.254.6 tell 128.3.254.68\\n              arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n       If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n              RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n              CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n       For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n       IPv4 Packets\\n\\n       If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n       If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n              tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n       tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n       fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n       proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n       Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a > separating the source and destination.\\n       For other protocols, the addresses will be printed, with a > separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n       For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n       flag, in the IP header information, as described above.\\n\\n       TCP Packets\\n\\n       (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n       The general format of a TCP protocol line is:\\n              src > dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n       Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n       Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n       of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n       Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n       Here is the opening portion of an rlogin from host rtsg to host csam.\\n              IP rtsg.1023 > csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n              IP csam.login > rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n              IP rtsg.1023 > csam.login: Flags [.], ack 1, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n              IP csam.login > rtsg.1023: Flags [.], ack 2, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n              IP csam.login > rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n       The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n       `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n       bytes.\\n\\n       Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n       or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n       ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n       stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n       On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -> csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n       but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n       9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n       If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n       header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n       where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n       Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n       There are 8 bits in the control bits section of the TCP header:\\n\\n              CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n       Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n       trol bits is\\n\\n              1) Caller sends SYN\\n              2) Recipient responds with SYN, ACK\\n              3) Caller sends ACK\\n\\n       Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n       dump.\\n\\n       Recall the structure of a TCP header without options:\\n\\n        0                            15                              31\\n       -----------------------------------------------------------------\\n       |          source port          |       destination port        |\\n       -----------------------------------------------------------------\\n       |                        sequence number                        |\\n       -----------------------------------------------------------------\\n       |                     acknowledgment number                     |\\n       -----------------------------------------------------------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       -----------------------------------------------------------------\\n       |         TCP checksum          |       urgent pointer          |\\n       -----------------------------------------------------------------\\n\\n       A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n       Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n        0             7|             15|             23|             31\\n       ----------------|---------------|---------------|----------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       ----------------|---------------|---------------|----------------\\n       |               |  13th octet   |               |               |\\n\\n       Let\'s have a closer look at octet no. 13:\\n\\n                       |               |\\n                       |---------------|\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |7   5   3     0|\\n\\n       These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n       Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |0 0 0 0 0 0 1 0|\\n                       |---------------|\\n                       |7 6 5 4 3 2 1 0|\\n\\n       Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n       Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n              00000010\\n\\n       and its decimal representation is\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n       We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n       This relationship can be expressed as\\n              tcp[13] == 2\\n\\n       We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n              tcpdump -i xl0 tcp[13] == 2\\n\\n       The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n       Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n            |C|E|U|A|P|R|S|F|\\n            |---------------|\\n            |0 0 0 1 0 0 1 0|\\n            |---------------|\\n            |7 6 5 4 3 2 1 0|\\n\\n       Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n                   00010010\\n\\n       which translates to decimal\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n       Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n       control bit is set as long as SYN is set.\\n\\n       In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n       13th octet with the binary value of a SYN:\\n\\n                 00010010 SYN-ACK              00000010 SYN\\n            AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n                 --------                      --------\\n            =    00000010                 =    00000010\\n\\n       We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n       00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n              ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n       This points us to the tcpdump filter expression\\n                   tcpdump -i xl0 \'tcp[13] & 2 == 2\'\\n\\n       Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n       rst, tcp-push, tcp-act, tcp-urg.\\n\\n       This can be demonstrated as:\\n                   tcpdump -i xl0 \'tcp[tcpflags] & tcp-push != 0\'\\n\\n       Note that you should use single quotes or a backslash in the expression to hide the AND (\'&\') special character from the shell.\\n\\n       UDP Packets\\n\\n       UDP format is illustrated by this rwho packet:\\n              actinide.who > broadcast.who: udp 84\\n       This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n       Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n       NFS.\\n\\n       UDP Name Server Requests\\n\\n       (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n       Name server requests are formatted as\\n              src > dst: id op? flags qtype qclass name (len)\\n              h2opolo.1538 > helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n       Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n       was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n       the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n       A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n       `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&3=x]\' is printed, where x is the hex value\\n       of header bytes two and three.\\n\\n       UDP Name Server Responses\\n\\n       Name server responses are formatted as\\n              src > dst:  id op rcode flags a\\/n\\/au type class data (len)\\n              helios.domain > h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n              helios.domain > h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n       In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n       128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n       In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n       set.  Since there were no answers, no type, class or data were printed.\\n\\n       Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n       SMB\\/CIFS decoding\\n\\n       tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n       By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n       details.\\n\\n       For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n       (tridge@samba.org).\\n\\n       NFS Requests and Replies\\n\\n       Sun NFS (Network File System) requests and replies are printed as:\\n              src.sport > dst.nfs: NFS request xid xid len op args\\n              src.nfs > dst.dport: NFS reply xid xid reply stat len op results\\n              sushi.1023 > wrl.nfs: NFS request xid 26377\\n                   112 readlink fh 21,24\\/10.73165\\n              wrl.nfs > sushi.1023: NFS reply xid 26377\\n                   reply ok 40 readlink \\"..\\/var\\"\\n              sushi.1022 > wrl.nfs: NFS request xid 8219\\n                   144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n              wrl.nfs > sushi.1022: NFS reply xid 8219\\n                   reply ok 128 lookup fh 9,74\\/4134.3150\\n       In  the  first  line,  host  sushi  sends  a  transaction  with  id  26377  to  wrl.   The  request  was  112 bytes, excluding the UDP and IP headers.  The operation was a readlink (read symbolic link) on file handle (fh)\\n       21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle can be interpreted as a major,minor device number pair, followed by the inode number and generation number.) In the second  line,  wrl  replies  `ok\'\\n       with the same transaction id and the contents of the link.\\n\\n       In the third line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transaction id.\\n\\n       Note that the data printed depends on the operation type.  The format is intended to be self explanatory if read in conjunction with an NFS protocol spec.  Also note that older versions of tcpdump printed NFS packets in a\\n       slightly different format: the transaction id (xid) would be printed instead of the non-NFS port number of the packet.\\n\\n       If the -v (verbose) flag is given, additional information is printed.  For example:\\n              sushi.1023 > wrl.nfs: NFS request xid 79658\\n                   148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n              wrl.nfs > sushi.1023: NFS reply xid 79658\\n                   reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n       (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been omitted from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195, at byte offset 24576.  Wrl\\n       replies `ok\'; the packet shown on the second line is the first fragment of the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent fragments, but these fragments do not have NFS or even UDP\\n       headers and so might not be printed, depending on the filter expression used).  Because the -v flag is given, some of the file attributes (which are returned in addition to the  file  data)  are  printed:  the  file  type\\n       (``REG\'\', for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n       If the -v flag is given more than once, even more details are printed.\\n\\n       Note that NFS requests are very large and much of the detail won\'t be printed unless snaplen is increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n       NFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the transaction ID.  If a reply does not closely follow the cor-\\n       responding request, it might not be parsable.\\n\\n       AFS Requests and Replies\\n\\n       Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n              src.sport > dst.dport: rx packet-type\\n              src.sport > dst.dport: rx packet-type service call call-name args\\n              src.sport > dst.dport: rx packet-type service reply call-name args\\n              elvis.7001 > pike.afsfs:\\n                   rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n                   new fid 536876964\\/1\\/1 \\".newsrc\\"\\n              pike.afsfs > elvis.7001: rx data fs reply rename\\n       In the first line, host elvis sends a RX packet to pike.  This was a RX data packet to the fs (fileserver) service, and is the start of an RPC call.  The RPC  call  was  a  rename,  with  the  old  directory  file  id  of\\n       536876964\\/1\\/1  and an old filename of `.newsrc.new\', and a new directory file id of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to the rename call (which was successful, because\\n       it was a data packet and not an abort packet).\\n\\n       In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some of the arguments decoded (generally only the `interesting\' arguments, for some definition of interesting).\\n\\n       The format is intended to be self-describing, but it will probably not be useful to people who are not familiar with the workings of AFS and RX.\\n\\n       If the -v (verbose) flag is given twice, acknowledgement packets and additional header information is printed, such as the RX call ID, call number, sequence number, serial number, and the RX packet flags.\\n\\n       If the -v flag is given twice, additional information is printed, such as the RX call ID, serial number, and the RX packet flags.  The MTU negotiation information is also printed from RX ack packets.\\n\\n       If the -v flag is given three times, the security index and service id are printed.\\n\\n       Error codes are printed for abort packets, with the exception of Ubik beacon packets (because abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n\\n\\n       IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n       under specific configurations.\\n\\nBUGS\\n       To report a security issue please send an e-mail to security@tcpdump.org.\\n\\n       To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n       back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n       NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n       latter.\\n\\n       On Linux systems with 2.0[.x] kernels:\\n\\n              packets on the loopback device will be seen twice;\\n22:01:13.146083 IP 192.168.1.110.54815 > ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0\\n22:01:13.676657 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417\\n22:01:13.676689 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409\\n22:01:13.727245 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0\\n22:01:13.727649 IP 59.82.33.251.https > 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204\\n22:01:13.727715 IP 192.168.1.110.52550 > 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0\\n22:01:13.835496 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0\\n22:01:13.916104 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0\\n22:01:14.580041 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43\\n22:01:14.681539 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71\\n22:01:14.681622 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0\\n22:01:15.685811 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:15.774804 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:16.775977 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:16.866743 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:17.868075 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:17.960006 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\n22:01:18.961083 IP 192.168.1.110.52474 > 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0\\n22:01:19.042139 IP 106.11.12.4.https > 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n:\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n:...skipping...\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n              cessed);\\n\\n              packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n              ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n              the command line, on some OSes it counts packets regardless of whether they  were  matched\\n              by  the filter expression and, even if they were matched by the filter expression, regard-\\n              less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n              packets  that were matched by the filter expression regardless of whether tcpdump has read\\n              and processed them yet, and on other OSes it counts only packets that were matched by  the\\n              filter expression and were processed by tcpdump);\\n\\n              packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n              lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n              ning,  if  the OS reports that information to applications; if not, it will be reported as\\n              0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n       tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n       example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n       such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n       in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n       SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading  packets  from  a network interface may require that you have special privileges; see the\\n:...skipping...\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\n              Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n              specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n       -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n       -dd    Dump packet-matching code as a C program fragment.\\n\\n       -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n       -D\\n       --list-interfaces\\n              Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n              interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n              This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n              name is a somewhat complex string.\\n\\n              The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n       -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n       -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n              Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n              Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n              secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n              The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n              make it visible to others, via ps(1) and other occasions.\\n\\n              In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n              been given should already have been given up.\\n\\n       -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n              bers).\\n\\n              The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n              face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n       -F file\\n              Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n       -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n       -G rotate_seconds\\n              If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n              format is specified, each new file will overwrite the previous.\\n\\n              If used in conjunction with the -C option, filenames will take the form of `file<count>\'.\\n\\n       -h\\n       --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n       --version\\n              Print the tcpdump and libpcap version strings and exit.\\n\\n       -H     Attempt to detect 802.11s draft mesh headers.\\n\\n       -i interface\\n       --interface=interface\\n              Listen on interface.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n              On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n              tunnel interfaces).\\n\\n              Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n              the loopback and en0 interface:\\n\\n                     tcpdump -i pktap,lo0,en0\\n\\n              An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n              A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n              savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n              An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n              ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n       -I\\n       --monitor-mode\\n              Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n              Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n              on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n              This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n              in monitor mode will be shown.\\n\\n       --immediate-mode\\n              Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n              to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n       -j tstamp_type\\n       --time-stamp-type=tstamp_type\\n              Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n       -J\\n       --list-time-stamp-types\\n              List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n       --time-stamp-precision=tstamp_precision\\n              When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n              Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n              time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n       When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n       conversion will lose precision.\\n\\n       The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n       -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n              By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n              The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                     I     interface name (or interface ID)\\n                     N     process name\\n                     P     process ID\\n                     S     service class\\n                     D     direction\\n                     C     comment\\n                     C     flags\\n                     U     process UUID (not shown by default)\\n                     V     verbose printf of pcap-ng blocks (not shown by default)\\n                     A     display all types of metadata\\n\\n              This is an Apple modification.\\n\\n       -K\\n       --dont-verify-checksums\\n              Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n              The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n       -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                     tcpdump -l | tee dat\\n\\n              or\\n\\n                     tcpdump -l > dat & tail -f dat\\n\\n              Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n              -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n              all platforms, including Windows.\\n\\n       -L\\n       --list-data-link-types\\n              List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n              support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n              another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n       -m module\\n              Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n       -M secret\\n              Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n       -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n       -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n       -#\\n       --number\\n              Print an optional packet number at the beginning of the line.\\n\\n       -O\\n       --no-optimize\\n              Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n       -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n       -p\\n       --no-promiscuous-mode\\n              Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n              broadcast\'.\\n\\n       -Q expression\\n              To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n              for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n       -Q direction\\n       --direction=direction\\n              Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n       -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n       -r file\\n              Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n       -S\\n       --absolute-tcp-sequence-numbers\\n              Print absolute, rather than relative, TCP sequence numbers.\\n\\n       -s snaplen\\n       --snapshot-length=snaplen\\n              Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n              protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n              This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n              wards compatibility with recent older versions of tcpdump.\\n\\n       -T type\\n              Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n              Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n              Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n              zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n              Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n              Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n              ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n              Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n       -t     Don\'t print a timestamp on each dump line.\\n\\n       -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n       -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n       -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n       -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n       -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                     0     time\\n                     1     no time\\n                     2     unformatted timestamp\\n                     3     microseconds since previous line\\n                     4     date and time\\n                     5     microseconds since first line\\n\\n              This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n       --time-zone-offset tz\\n              To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n              The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n       -u     Print undecoded NFS handles.\\n\\n       -U\\n       --packet-buffered\\n              If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n              when not writing to a terminal, being written only when the output buffer fills.\\n\\n              If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n              fills.\\n\\n              The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n       -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n              checks such as verifying the IP and ICMP header checksum.\\n\\n              When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n       -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n       -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n       -V file\\n              Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n       -w file\\n              Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n              This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n              to be written as soon as they are received.\\n\\n              The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n              extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n              is present and adding one (e.g. .pcap) is recommended.\\n\\n              See pcap-savefile(5) for a description of the file format.\\n\\n       -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n              name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n              Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n              cal files per timeslice.\\n\\n       -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n              Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n       -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n       -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n       -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n       -y datalinktype\\n       --linktype=datalinktype\\n              Set the data link type to use while capturing packets to datalinktype.\\n\\n       -z postrotate-command\\n              Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n              compress each savefile using gzip or bzip2.\\n\\n              Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n              And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags & arguments\\n              arrangements and execute the command that you want.\\n\\n       -Z user\\n       --relinquish-privileges=user\\n              If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n              This behavior can also be enabled by default at compile time.\\n\\n        expression\\n              selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n              For the expression syntax, see pcap-filter(7).\\n\\n              The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n              backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.\\n\\nEXAMPLES\\n       To print all packets arriving at or departing from sundown:\\n              tcpdump host sundown\\n\\n       To print traffic between helios and either hot or ace:\\n              tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n       To print all IP packets between ace and any host except helios:\\n              tcpdump ip host ace and not helios\\n\\n       To print all traffic between local hosts and hosts at Berkeley:\\n              tcpdump net ucb-ether\\n\\n       To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n              tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n       To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n              tcpdump ip and not net localnet\\n\\n       To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n              tcpdump \'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n       To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n              tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)\'\\n\\n       To print IP packets longer than 576 bytes sent through gateway snup:\\n              tcpdump \'gateway snup and ip[2:2] > 576\'\\n\\n       To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n              tcpdump \'ether[0] & 1 = 0 and ip[16] >= 224\'\\n\\n       To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n              tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'\\n\\nOUTPUT FORMAT\\n       The output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.\\n\\n       Timestamps\\n\\n       By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n              hh:mm:ss.frac\\n       and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n       ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n       time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n       Link Level Headers\\n\\n       If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n       On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n       packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n       packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n       On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n       contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n       On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n       (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n       On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n       ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n       out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n       pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n       For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n       bytes of compressed header:\\n              O ctcp * A+6 S+49 I+6 3 (6)\\n\\n       ARP\\/RARP Packets\\n\\n       Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n              arp who-has csam tell rtsg\\n              arp reply csam is-at CSAM\\n       The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n       lower case).\\n\\n       This would look less redundant if we had done tcpdump -n:\\n              arp who-has 128.3.254.6 tell 128.3.254.68\\n              arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n       If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n              RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n              CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n       For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n       IPv4 Packets\\n\\n       If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n       If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n              tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n       tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n       fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n       proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n       Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a > separating the source and destination.\\n       For other protocols, the addresses will be printed, with a > separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n       For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n       flag, in the IP header information, as described above.\\n\\n       TCP Packets\\n\\n       (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n       The general format of a TCP protocol line is:\\n              src > dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n       Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n       Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n       of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n       Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n       Here is the opening portion of an rlogin from host rtsg to host csam.\\n              IP rtsg.1023 > csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n              IP csam.login > rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n              IP rtsg.1023 > csam.login: Flags [.], ack 1, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n              IP csam.login > rtsg.1023: Flags [.], ack 2, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n              IP csam.login > rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n       The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n       `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n       bytes.\\n\\n       Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n       or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n       ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n       stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n       On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -> csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n       but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n       9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n       If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n       header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n       where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n       Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n       There are 8 bits in the control bits section of the TCP header:\\n\\n              CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n       Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n       trol bits is\\n\\n              1) Caller sends SYN\\n              2) Recipient responds with SYN, ACK\\n              3) Caller sends ACK\\n\\n       Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n       dump.\\n\\n       Recall the structure of a TCP header without options:\\n\\n        0                            15                              31\\n       -----------------------------------------------------------------\\n       |          source port          |       destination port        |\\n       -----------------------------------------------------------------\\n       |                        sequence number                        |\\n       -----------------------------------------------------------------\\n       |                     acknowledgment number                     |\\n       -----------------------------------------------------------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       -----------------------------------------------------------------\\n       |         TCP checksum          |       urgent pointer          |\\n       -----------------------------------------------------------------\\n\\n       A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n       Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n        0             7|             15|             23|             31\\n       ----------------|---------------|---------------|----------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       ----------------|---------------|---------------|----------------\\n       |               |  13th octet   |               |               |\\n\\n       Let\'s have a closer look at octet no. 13:\\n\\n                       |               |\\n                       |---------------|\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |7   5   3     0|\\n\\n       These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n       Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |0 0 0 0 0 0 1 0|\\n                       |---------------|\\n                       |7 6 5 4 3 2 1 0|\\n\\n       Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n       Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n              00000010\\n\\n       and its decimal representation is\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n       We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n       This relationship can be expressed as\\n              tcp[13] == 2\\n\\n       We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n              tcpdump -i xl0 tcp[13] == 2\\n\\n       The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n       Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n            |C|E|U|A|P|R|S|F|\\n            |---------------|\\n            |0 0 0 1 0 0 1 0|\\n            |---------------|\\n            |7 6 5 4 3 2 1 0|\\n\\n       Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n                   00010010\\n\\n       which translates to decimal\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n       Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n       control bit is set as long as SYN is set.\\n\\n       In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n       13th octet with the binary value of a SYN:\\n\\n                 00010010 SYN-ACK              00000010 SYN\\n            AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n                 --------                      --------\\n            =    00000010                 =    00000010\\n\\n       We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n       00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n              ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n       This points us to the tcpdump filter expression\\n                   tcpdump -i xl0 \'tcp[13] & 2 == 2\'\\n\\n       Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n       rst, tcp-push, tcp-act, tcp-urg.\\n\\n       This can be demonstrated as:\\n                   tcpdump -i xl0 \'tcp[tcpflags] & tcp-push != 0\'\\n\\n       Note that you should use single quotes or a backslash in the expression to hide the AND (\'&\') special character from the shell.\\n\\n       UDP Packets\\n\\n       UDP format is illustrated by this rwho packet:\\n              actinide.who > broadcast.who: udp 84\\n       This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n       Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n       NFS.\\n\\n       UDP Name Server Requests\\n\\n       (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n       Name server requests are formatted as\\n              src > dst: id op? flags qtype qclass name (len)\\n              h2opolo.1538 > helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n       Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n       was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n       the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n       A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n       `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&3=x]\' is printed, where x is the hex value\\n       of header bytes two and three.\\n\\n       UDP Name Server Responses\\n\\n       Name server responses are formatted as\\n              src > dst:  id op rcode flags a\\/n\\/au type class data (len)\\n              helios.domain > h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n              helios.domain > h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n       In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n       128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n       In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n       set.  Since there were no answers, no type, class or data were printed.\\n\\n       Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n       SMB\\/CIFS decoding\\n\\n       tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n       By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n       details.\\n\\n       For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n       (tridge@samba.org).\\n\\n       NFS Requests and Replies\\n\\n       Sun NFS (Network File System) requests and replies are printed as:\\n              src.sport > dst.nfs: NFS request xid xid len op args\\n              src.nfs > dst.dport: NFS reply xid xid reply stat len op results\\n              sushi.1023 > wrl.nfs: NFS request xid 26377\\n                   112 readlink fh 21,24\\/10.73165\\n              wrl.nfs > sushi.1023: NFS reply xid 26377\\n                   reply ok 40 readlink \\"..\\/var\\"\\n              sushi.1022 > wrl.nfs: NFS request xid 8219\\n                   144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n              wrl.nfs > sushi.1022: NFS reply xid 8219\\n                   reply ok 128 lookup fh 9,74\\/4134.3150\\n       In  the  first  line,  host  sushi  sends  a  transaction  with  id  26377  to  wrl.   The  request  was  112 bytes, excluding the UDP and IP headers.  The operation was a readlink (read symbolic link) on file handle (fh)\\n       21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle can be interpreted as a major,minor device number pair, followed by the inode number and generation number.) In the second  line,  wrl  replies  `ok\'\\n       with the same transaction id and the contents of the link.\\n\\n       In the third line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transaction id.\\n\\n       Note that the data printed depends on the operation type.  The format is intended to be self explanatory if read in conjunction with an NFS protocol spec.  Also note that older versions of tcpdump printed NFS packets in a\\n       slightly different format: the transaction id (xid) would be printed instead of the non-NFS port number of the packet.\\n\\n       If the -v (verbose) flag is given, additional information is printed.  For example:\\n              sushi.1023 > wrl.nfs: NFS request xid 79658\\n                   148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n              wrl.nfs > sushi.1023: NFS reply xid 79658\\n                   reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n       (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been omitted from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195, at byte offset 24576.  Wrl\\n       replies `ok\'; the packet shown on the second line is the first fragment of the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent fragments, but these fragments do not have NFS or even UDP\\n       headers and so might not be printed, depending on the filter expression used).  Because the -v flag is given, some of the file attributes (which are returned in addition to the  file  data)  are  printed:  the  file  type\\n       (``REG\'\', for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n       If the -v flag is given more than once, even more details are printed.\\n\\n       Note that NFS requests are very large and much of the detail won\'t be printed unless snaplen is increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n       NFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the transaction ID.  If a reply does not closely follow the cor-\\n       responding request, it might not be parsable.\\n\\n       AFS Requests and Replies\\n\\n       Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n              src.sport > dst.dport: rx packet-type\\n              src.sport > dst.dport: rx packet-type service call call-name args\\n              src.sport > dst.dport: rx packet-type service reply call-name args\\n              elvis.7001 > pike.afsfs:\\n                   rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n                   new fid 536876964\\/1\\/1 \\".newsrc\\"\\n              pike.afsfs > elvis.7001: rx data fs reply rename\\n       In the first line, host elvis sends a RX packet to pike.  This was a RX data packet to the fs (fileserver) service, and is the start of an RPC call.  The RPC  call  was  a  rename,  with  the  old  directory  file  id  of\\n       536876964\\/1\\/1  and an old filename of `.newsrc.new\', and a new directory file id of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to the rename call (which was successful, because\\n       it was a data packet and not an abort packet).\\n\\n       In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some of the arguments decoded (generally only the `interesting\' arguments, for some definition of interesting).\\n\\n       The format is intended to be self-describing, but it will probably not be useful to people who are not familiar with the workings of AFS and RX.\\n\\n       If the -v (verbose) flag is given twice, acknowledgement packets and additional header information is printed, such as the RX call ID, call number, sequence number, serial number, and the RX packet flags.\\n\\n       If the -v flag is given twice, additional information is printed, such as the RX call ID, serial number, and the RX packet flags.  The MTU negotiation information is also printed from RX ack packets.\\n\\n       If the -v flag is given three times, the security index and service id are printed.\\n\\n       Error codes are printed for abort packets, with the exception of Ubik beacon packets (because abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n       Note that AFS requests are very large and many of the arguments won\'t be printed unless snaplen is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n       AFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If a reply does not closely fol-\\n       low the corresponding request, it might not be parsable.\\n\\n       KIP AppleTalk (DDP in UDP)\\n\\n       AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to translate AppleTalk net and node\\n       numbers to names.  Lines in this file have the form\\n              number    name\\n\\n              1.254          ether\\n              16.1      icsd-net\\n              1.254.110 ace\\n       The first two lines give the names of AppleTalk networks.  The third line gives the name of a particular host (a host is distinguished from a net by the 3rd octet in the number - a net number must have two  octets  and  a\\n       host number must have three octets.)  The number and name should be separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank lines or comment lines (lines starting with a `#\').\\n\\n       AppleTalk addresses are printed in the form\\n              net.host.port\\n\\n              144.1.209.2 > icsd-net.112.220\\n              office.2 > icsd-net.112.220\\n              jssmag.149.235 > icsd-net.2\\n       (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net number, addresses are printed in numeric form.)  In the first example, NBP (DDP port 2) on net 144.1 node 209 is sending to\\n       whatever is listening on port 220 of net icsd node 112.  The second line is the same except the full name of the source node is known (`office\').  The third line is a send from port 235 on net jssmag node 149 to broadcast\\n       on the icsd-net NBP port (note that the broadcast address (255) is indicated by a net name with no host number - for this reason it\'s a good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n       NBP  (name  binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents interpreted.  Other protocols just dump the protocol name (or number if no name is registered for the protocol) and packet\\n       size.\\n\\n       NBP packets are formatted like the following examples:\\n              icsd-net.112.220 > jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n              jssmag.209.2 > icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n              techpit.2 > icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n       The first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request (note that it has the same\\n       id)  from  host  jssmag.209 saying that it has a laserwriter resource named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request saying host techpit has laserwriter \\"techpit\\" registered on\\n       port 186.\\n\\n       ATP packet formatting is demonstrated by the following example:\\n              jssmag.209.165 > helios.132: atp-req  12266<0-7> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-req  12266<3,5> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-rel  12266<0-7> 0xae030001\\n              jssmag.209.133 > helios.132: atp-req* 12267<0-7> 0xae030002\\n       Jssmag.209 initiates transaction id 12266 with host helios by requesting up to 8 packets (the `<0-7>\').  The hex number at the end of the line is the value of the `userdata\' field in the request.\\n\\n       Helios responds with 8 512-byte packets.  The `:digit\' following the transaction id gives the packet sequence number in the transaction and the number in parens is the amount of data  in  the  packet,  excluding  the  atp\\n       header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n       Jssmag.209  then  requests  that  packets  3  & 5 be retransmitted.  Helios resends them then jssmag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.  The `*\' on the request indicates that XO\\n       (`exactly once\') was not set.\\n\\nPACKET METADATA FILTER\\n       Use packet metadata filter expression to match packets against descriptive information about the packet: interface, process, service type or direction.\\n\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n:\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n:...skipping...\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n              cessed);\\n\\n              packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n              ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n              the command line, on some OSes it counts packets regardless of whether they  were  matched\\n              by  the filter expression and, even if they were matched by the filter expression, regard-\\n              less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n              packets  that were matched by the filter expression regardless of whether tcpdump has read\\n              and processed them yet, and on other OSes it counts only packets that were matched by  the\\n              filter expression and were processed by tcpdump);\\n\\n              packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n              lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n              ning,  if  the OS reports that information to applications; if not, it will be reported as\\n              0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n       tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n       example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n       such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n       in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n       SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading  packets  from  a network interface may require that you have special privileges; see the\\n:...skipping...\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\n              Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n              specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n       -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n       -dd    Dump packet-matching code as a C program fragment.\\n\\n       -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n       -D\\n       --list-interfaces\\n              Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n              interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n              This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n              name is a somewhat complex string.\\n\\n              The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n       -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n       -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n              Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n              Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n              secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n              The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n              make it visible to others, via ps(1) and other occasions.\\n\\n              In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n              been given should already have been given up.\\n\\n       -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n              bers).\\n\\n              The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n              face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n       -F file\\n              Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n       -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n       -G rotate_seconds\\n              If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n              format is specified, each new file will overwrite the previous.\\n\\n              If used in conjunction with the -C option, filenames will take the form of `file<count>\'.\\n\\n       -h\\n       --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n       --version\\n              Print the tcpdump and libpcap version strings and exit.\\n\\n       -H     Attempt to detect 802.11s draft mesh headers.\\n\\n       -i interface\\n       --interface=interface\\n              Listen on interface.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n              On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n              tunnel interfaces).\\n\\n              Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n              the loopback and en0 interface:\\n\\n                     tcpdump -i pktap,lo0,en0\\n\\n              An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n              A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n              savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n              An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n              ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n       -I\\n       --monitor-mode\\n              Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n              Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n              on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n              This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n              in monitor mode will be shown.\\n\\n       --immediate-mode\\n              Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n              to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n       -j tstamp_type\\n       --time-stamp-type=tstamp_type\\n              Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n       -J\\n       --list-time-stamp-types\\n              List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n       --time-stamp-precision=tstamp_precision\\n              When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n              Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n              time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n       When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n       conversion will lose precision.\\n\\n       The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n       -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n              By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n              The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                     I     interface name (or interface ID)\\n                     N     process name\\n                     P     process ID\\n                     S     service class\\n                     D     direction\\n                     C     comment\\n                     C     flags\\n                     U     process UUID (not shown by default)\\n                     V     verbose printf of pcap-ng blocks (not shown by default)\\n                     A     display all types of metadata\\n\\n              This is an Apple modification.\\n\\n       -K\\n       --dont-verify-checksums\\n              Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n              The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n       -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                     tcpdump -l | tee dat\\n\\n              or\\n\\n                     tcpdump -l > dat & tail -f dat\\n\\n              Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n              -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n              all platforms, including Windows.\\n\\n       -L\\n       --list-data-link-types\\n              List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n              support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n              another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n       -m module\\n              Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n       -M secret\\n              Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n       -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n       -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n       -#\\n       --number\\n              Print an optional packet number at the beginning of the line.\\n\\n       -O\\n       --no-optimize\\n              Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n       -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n       -p\\n       --no-promiscuous-mode\\n              Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n              broadcast\'.\\n\\n       -Q expression\\n              To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n              for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n       -Q direction\\n       --direction=direction\\n              Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n       -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n       -r file\\n              Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n       -S\\n       --absolute-tcp-sequence-numbers\\n              Print absolute, rather than relative, TCP sequence numbers.\\n\\n       -s snaplen\\n       --snapshot-length=snaplen\\n              Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n              protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n              This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n              wards compatibility with recent older versions of tcpdump.\\n\\n       -T type\\n              Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n              Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n              Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n              zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n              Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n              Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n              ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n              Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n       -t     Don\'t print a timestamp on each dump line.\\n\\n       -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n       -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n       -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n       -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n       -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                     0     time\\n                     1     no time\\n                     2     unformatted timestamp\\n                     3     microseconds since previous line\\n                     4     date and time\\n                     5     microseconds since first line\\n\\n              This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n       --time-zone-offset tz\\n              To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n              The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n       -u     Print undecoded NFS handles.\\n\\n       -U\\n       --packet-buffered\\n              If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n              when not writing to a terminal, being written only when the output buffer fills.\\n\\n              If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n              fills.\\n\\n              The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n       -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n              checks such as verifying the IP and ICMP header checksum.\\n\\n              When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n       -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n       -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n       -V file\\n              Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n       -w file\\n              Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n              This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n              to be written as soon as they are received.\\n\\n              The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n              extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n              is present and adding one (e.g. .pcap) is recommended.\\n\\n              See pcap-savefile(5) for a description of the file format.\\n\\n       -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n              name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n              Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n              cal files per timeslice.\\n\\n       -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n              Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n       -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n       -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n       -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n       -y datalinktype\\n       --linktype=datalinktype\\n              Set the data link type to use while capturing packets to datalinktype.\\n\\n       -z postrotate-command\\n              Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n              compress each savefile using gzip or bzip2.\\n\\n              Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n              And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags & arguments\\n              arrangements and execute the command that you want.\\n\\n       -Z user\\n       --relinquish-privileges=user\\n              If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n              This behavior can also be enabled by default at compile time.\\n\\n        expression\\n              selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n              For the expression syntax, see pcap-filter(7).\\n\\n              The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n              backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.\\n\\nEXAMPLES\\n       To print all packets arriving at or departing from sundown:\\n              tcpdump host sundown\\n\\n       To print traffic between helios and either hot or ace:\\n              tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n       To print all IP packets between ace and any host except helios:\\n              tcpdump ip host ace and not helios\\n\\n       To print all traffic between local hosts and hosts at Berkeley:\\n              tcpdump net ucb-ether\\n\\n       To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n              tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n       To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n              tcpdump ip and not net localnet\\n\\n       To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n              tcpdump \'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n       To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n              tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)\'\\n\\n       To print IP packets longer than 576 bytes sent through gateway snup:\\n              tcpdump \'gateway snup and ip[2:2] > 576\'\\n\\n       To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n              tcpdump \'ether[0] & 1 = 0 and ip[16] >= 224\'\\n\\n       To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n              tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'\\n\\nOUTPUT FORMAT\\n       The output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.\\n\\n       Timestamps\\n\\n       By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n              hh:mm:ss.frac\\n       and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n       ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n       time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n       Link Level Headers\\n\\n       If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n       On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n       packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n       packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n       On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n       contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n       On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n       (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n       On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n       ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n       out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n       pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n       For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n       bytes of compressed header:\\n              O ctcp * A+6 S+49 I+6 3 (6)\\n\\n       ARP\\/RARP Packets\\n\\n       Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n              arp who-has csam tell rtsg\\n              arp reply csam is-at CSAM\\n       The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n       lower case).\\n\\n       This would look less redundant if we had done tcpdump -n:\\n              arp who-has 128.3.254.6 tell 128.3.254.68\\n              arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n       If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n              RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n              CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n       For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n       IPv4 Packets\\n\\n       If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n       If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n              tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n       tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n       fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n       proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n       Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a > separating the source and destination.\\n       For other protocols, the addresses will be printed, with a > separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n       For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n       flag, in the IP header information, as described above.\\n\\n       TCP Packets\\n\\n       (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n       The general format of a TCP protocol line is:\\n              src > dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n       Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n       Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n       of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n       Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n       Here is the opening portion of an rlogin from host rtsg to host csam.\\n              IP rtsg.1023 > csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n              IP csam.login > rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n              IP rtsg.1023 > csam.login: Flags [.], ack 1, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n              IP csam.login > rtsg.1023: Flags [.], ack 2, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n              IP csam.login > rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n       The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n       `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n       bytes.\\n\\n       Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n       or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n       ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n       stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n       On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -> csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n       but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n       9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n       If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n       header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n       where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n       Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n       There are 8 bits in the control bits section of the TCP header:\\n\\n              CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n       Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n       trol bits is\\n\\n              1) Caller sends SYN\\n              2) Recipient responds with SYN, ACK\\n              3) Caller sends ACK\\n\\n       Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n       dump.\\n\\n       Recall the structure of a TCP header without options:\\n\\n        0                            15                              31\\n       -----------------------------------------------------------------\\n       |          source port          |       destination port        |\\n       -----------------------------------------------------------------\\n       |                        sequence number                        |\\n       -----------------------------------------------------------------\\n       |                     acknowledgment number                     |\\n       -----------------------------------------------------------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       -----------------------------------------------------------------\\n       |         TCP checksum          |       urgent pointer          |\\n       -----------------------------------------------------------------\\n\\n       A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n       Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n        0             7|             15|             23|             31\\n       ----------------|---------------|---------------|----------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       ----------------|---------------|---------------|----------------\\n       |               |  13th octet   |               |               |\\n\\n       Let\'s have a closer look at octet no. 13:\\n\\n                       |               |\\n                       |---------------|\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |7   5   3     0|\\n\\n       These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n       Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |0 0 0 0 0 0 1 0|\\n                       |---------------|\\n                       |7 6 5 4 3 2 1 0|\\n\\n       Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n       Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n              00000010\\n\\n       and its decimal representation is\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n       We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n       This relationship can be expressed as\\n              tcp[13] == 2\\n\\n       We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n              tcpdump -i xl0 tcp[13] == 2\\n\\n       The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n       Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n            |C|E|U|A|P|R|S|F|\\n            |---------------|\\n            |0 0 0 1 0 0 1 0|\\n            |---------------|\\n            |7 6 5 4 3 2 1 0|\\n\\n       Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n                   00010010\\n\\n       which translates to decimal\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n       Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n       control bit is set as long as SYN is set.\\n\\n       In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n       13th octet with the binary value of a SYN:\\n\\n                 00010010 SYN-ACK              00000010 SYN\\n            AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n                 --------                      --------\\n            =    00000010                 =    00000010\\n\\n       We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n       00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n              ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n       This points us to the tcpdump filter expression\\n                   tcpdump -i xl0 \'tcp[13] & 2 == 2\'\\n\\n       Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n       rst, tcp-push, tcp-act, tcp-urg.\\n\\n       This can be demonstrated as:\\n                   tcpdump -i xl0 \'tcp[tcpflags] & tcp-push != 0\'\\n\\n       Note that you should use single quotes or a backslash in the expression to hide the AND (\'&\') special character from the shell.\\n\\n       UDP Packets\\n\\n       UDP format is illustrated by this rwho packet:\\n              actinide.who > broadcast.who: udp 84\\n       This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n       Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n       NFS.\\n\\n       UDP Name Server Requests\\n\\n       (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n       Name server requests are formatted as\\n              src > dst: id op? flags qtype qclass name (len)\\n              h2opolo.1538 > helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n       Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n       was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n       the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n       A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n       `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&3=x]\' is printed, where x is the hex value\\n       of header bytes two and three.\\n\\n       UDP Name Server Responses\\n\\n       Name server responses are formatted as\\n              src > dst:  id op rcode flags a\\/n\\/au type class data (len)\\n              helios.domain > h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n              helios.domain > h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n       In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n       128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n       In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n       set.  Since there were no answers, no type, class or data were printed.\\n\\n       Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n       SMB\\/CIFS decoding\\n\\n       tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n       By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n       details.\\n\\n       For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n       (tridge@samba.org).\\n\\n       NFS Requests and Replies\\n\\n       Sun NFS (Network File System) requests and replies are printed as:\\n              src.sport > dst.nfs: NFS request xid xid len op args\\n              src.nfs > dst.dport: NFS reply xid xid reply stat len op results\\n              sushi.1023 > wrl.nfs: NFS request xid 26377\\n                   112 readlink fh 21,24\\/10.73165\\n              wrl.nfs > sushi.1023: NFS reply xid 26377\\n                   reply ok 40 readlink \\"..\\/var\\"\\n              sushi.1022 > wrl.nfs: NFS request xid 8219\\n                   144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n              wrl.nfs > sushi.1022: NFS reply xid 8219\\n                   reply ok 128 lookup fh 9,74\\/4134.3150\\n       In  the  first  line,  host  sushi  sends  a  transaction  with  id  26377  to  wrl.   The  request  was  112 bytes, excluding the UDP and IP headers.  The operation was a readlink (read symbolic link) on file handle (fh)\\n       21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle can be interpreted as a major,minor device number pair, followed by the inode number and generation number.) In the second  line,  wrl  replies  `ok\'\\n       with the same transaction id and the contents of the link.\\n\\n       In the third line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transaction id.\\n\\n       Note that the data printed depends on the operation type.  The format is intended to be self explanatory if read in conjunction with an NFS protocol spec.  Also note that older versions of tcpdump printed NFS packets in a\\n       slightly different format: the transaction id (xid) would be printed instead of the non-NFS port number of the packet.\\n\\n       If the -v (verbose) flag is given, additional information is printed.  For example:\\n              sushi.1023 > wrl.nfs: NFS request xid 79658\\n                   148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n              wrl.nfs > sushi.1023: NFS reply xid 79658\\n                   reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n       (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been omitted from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195, at byte offset 24576.  Wrl\\n       replies `ok\'; the packet shown on the second line is the first fragment of the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent fragments, but these fragments do not have NFS or even UDP\\n       headers and so might not be printed, depending on the filter expression used).  Because the -v flag is given, some of the file attributes (which are returned in addition to the  file  data)  are  printed:  the  file  type\\n       (``REG\'\', for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n       If the -v flag is given more than once, even more details are printed.\\n\\n       Note that NFS requests are very large and much of the detail won\'t be printed unless snaplen is increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n       NFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the transaction ID.  If a reply does not closely follow the cor-\\n       responding request, it might not be parsable.\\n\\n       AFS Requests and Replies\\n\\n       Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n              src.sport > dst.dport: rx packet-type\\n              src.sport > dst.dport: rx packet-type service call call-name args\\n              src.sport > dst.dport: rx packet-type service reply call-name args\\n              elvis.7001 > pike.afsfs:\\n                   rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n                   new fid 536876964\\/1\\/1 \\".newsrc\\"\\n              pike.afsfs > elvis.7001: rx data fs reply rename\\n       In the first line, host elvis sends a RX packet to pike.  This was a RX data packet to the fs (fileserver) service, and is the start of an RPC call.  The RPC  call  was  a  rename,  with  the  old  directory  file  id  of\\n       536876964\\/1\\/1  and an old filename of `.newsrc.new\', and a new directory file id of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to the rename call (which was successful, because\\n       it was a data packet and not an abort packet).\\n\\n       In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some of the arguments decoded (generally only the `interesting\' arguments, for some definition of interesting).\\n\\n       The format is intended to be self-describing, but it will probably not be useful to people who are not familiar with the workings of AFS and RX.\\n\\n       If the -v (verbose) flag is given twice, acknowledgement packets and additional header information is printed, such as the RX call ID, call number, sequence number, serial number, and the RX packet flags.\\n\\n       If the -v flag is given twice, additional information is printed, such as the RX call ID, serial number, and the RX packet flags.  The MTU negotiation information is also printed from RX ack packets.\\n\\n       If the -v flag is given three times, the security index and service id are printed.\\n\\n       Error codes are printed for abort packets, with the exception of Ubik beacon packets (because abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n       Note that AFS requests are very large and many of the arguments won\'t be printed unless snaplen is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n       AFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If a reply does not closely fol-\\n       low the corresponding request, it might not be parsable.\\n\\n       KIP AppleTalk (DDP in UDP)\\n\\n       AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to translate AppleTalk net and node\\n       numbers to names.  Lines in this file have the form\\n              number    name\\n\\n              1.254          ether\\n              16.1      icsd-net\\n              1.254.110 ace\\n       The first two lines give the names of AppleTalk networks.  The third line gives the name of a particular host (a host is distinguished from a net by the 3rd octet in the number - a net number must have two  octets  and  a\\n       host number must have three octets.)  The number and name should be separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank lines or comment lines (lines starting with a `#\').\\n\\n       AppleTalk addresses are printed in the form\\n              net.host.port\\n\\n              144.1.209.2 > icsd-net.112.220\\n              office.2 > icsd-net.112.220\\n              jssmag.149.235 > icsd-net.2\\n       (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net number, addresses are printed in numeric form.)  In the first example, NBP (DDP port 2) on net 144.1 node 209 is sending to\\n       whatever is listening on port 220 of net icsd node 112.  The second line is the same except the full name of the source node is known (`office\').  The third line is a send from port 235 on net jssmag node 149 to broadcast\\n       on the icsd-net NBP port (note that the broadcast address (255) is indicated by a net name with no host number - for this reason it\'s a good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n       NBP  (name  binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents interpreted.  Other protocols just dump the protocol name (or number if no name is registered for the protocol) and packet\\n       size.\\n\\n       NBP packets are formatted like the following examples:\\n              icsd-net.112.220 > jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n              jssmag.209.2 > icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n              techpit.2 > icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n       The first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request (note that it has the same\\n       id)  from  host  jssmag.209 saying that it has a laserwriter resource named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request saying host techpit has laserwriter \\"techpit\\" registered on\\n       port 186.\\n\\n       ATP packet formatting is demonstrated by the following example:\\n              jssmag.209.165 > helios.132: atp-req  12266<0-7> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-req  12266<3,5> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-rel  12266<0-7> 0xae030001\\n              jssmag.209.133 > helios.132: atp-req* 12267<0-7> 0xae030002\\n       Jssmag.209 initiates transaction id 12266 with host helios by requesting up to 8 packets (the `<0-7>\').  The hex number at the end of the line is the value of the `userdata\' field in the request.\\n\\n       Helios responds with 8 512-byte packets.  The `:digit\' following the transaction id gives the packet sequence number in the transaction and the number in parens is the amount of data  in  the  packet,  excluding  the  atp\\n       header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n       Jssmag.209  then  requests  that  packets  3  & 5 be retransmitted.  Helios resends them then jssmag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.  The `*\' on the request indicates that XO\\n       (`exactly once\') was not set.\\n\\nPACKET METADATA FILTER\\n       Use packet metadata filter expression to match packets against descriptive information about the packet: interface, process, service type or direction.\\n\\n       Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces supporting the PKTAP data link type.\\n\\n       The syntax supports the following operators:\\n\\n              or     logical or\\n              and    logical and\\n              not    negation\\n              (...)  to group sub-expressions\\n              =      is equal\\n              !=     is not equal\\n              ||     logical or (alternate)\\n              &&     logical and (alternate)\\n              !      negation (alternate)\\n\\n       The syntax support the following keywords to denote which of packet metadata contents is to be compared:\\n\\n              if     interface name\\n              proc   process name\\n              pid    process ID\\n              svc    service class\\n              dir    direction\\n              eproc  effective process name\\n              epid   effective process ID\\n\\n       For example to filter packets from interface en0 \\"sent\\" by the process named \\"nc\\" or incoming packet not on interface en0:\\n\\n              -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n       Note that a complex packet metadata filter expression needs to be put in quotes as the option -Q takes a single string parameter.\\n\\nSEE ALSO\\n       stty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)\\n\\n              http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap\\n\\nAUTHORS\\n       The original authors are:\\n\\n       Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley National Laboratory, University of California, Berkeley, CA.\\n\\n       It is currently being maintained by tcpdump.org.\\n\\n       The current version is available via http:\\n\\n              https:\\/\\/www.tcpdump.org\\/\\n\\n       The original distribution is available via anonymous ftp:\\n\\n              ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n       IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library, under specific configurations.\\n\\nBUGS\\n       To report a security issue please send an e-mail to security@tcpdump.org.\\n\\n       To report bugs and other problems, contribute patches, request a feature, provide generic feedback etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n       NIT doesn\'t let you watch your own outbound traffic, BPF will.  We recommend that you use the latter.\\n\\n       On Linux systems with 2.0[.x] kernels:\\n\\n              packets on the loopback device will be seen twice;\\n\\n\\n\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n:...skipping...\\nTCPDUMP(1)                                                                                    TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the\\n       boolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,\\n       minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,\\n       which causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,\\n       which  causes  it  to  read  from  a saved packet file rather than to read packets from a network\\n       interface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet\\n       files. In all cases, only packets that match expression will be processed by tcpdump.\\n\\n       Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n       a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n       or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n       will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n       ber of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n              cessed);\\n\\n              packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n              ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n              the command line, on some OSes it counts packets regardless of whether they  were  matched\\n              by  the filter expression and, even if they were matched by the filter expression, regard-\\n              less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n              packets  that were matched by the filter expression regardless of whether tcpdump has read\\n              and processed them yet, and on other OSes it counts only packets that were matched by  the\\n              filter expression and were processed by tcpdump);\\n\\n              packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n              lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n              ning,  if  the OS reports that information to applications; if not, it will be reported as\\n              0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n       tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n       example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n       such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n       in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n       SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading  packets  from  a network interface may require that you have special privileges; see the\\n:...skipping...\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)\\n\\nNAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]\\n\\nDESCRIPTION\\n       Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-\\n       tions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file\\n       rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-\\n       dump.\\n\\n       Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n       cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n       When tcpdump finishes capturing packets, it will report counts of:\\n\\n              packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n              packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n              counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n              it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n              and were processed by tcpdump);\\n\\n              packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n              tion to applications; if not, it will be reported as 0).\\n\\n       On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n       character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n       platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n       Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.\\n\\nOPTIONS\\n       -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n       -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n       -B buffer_size\\n       --buffer-size=buffer_size\\n              Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n       -c count\\n       -c skip,count\\n              Exit after receiving or displaying count packets.\\n\\n              The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n       -C file_size\\n              Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n              specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n       -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n       -dd    Dump packet-matching code as a C program fragment.\\n\\n       -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n       -D\\n       --list-interfaces\\n              Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n              interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n              This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n              name is a somewhat complex string.\\n\\n              The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n       -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n       -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n              Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n              Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n              secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n              The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n              make it visible to others, via ps(1) and other occasions.\\n\\n              In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n              been given should already have been given up.\\n\\n       -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n              bers).\\n\\n              The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n              face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n       -F file\\n              Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n       -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n       -G rotate_seconds\\n              If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n              format is specified, each new file will overwrite the previous.\\n\\n              If used in conjunction with the -C option, filenames will take the form of `file<count>\'.\\n\\n       -h\\n       --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n       --version\\n              Print the tcpdump and libpcap version strings and exit.\\n\\n       -H     Attempt to detect 802.11s draft mesh headers.\\n\\n       -i interface\\n       --interface=interface\\n              Listen on interface.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n              On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n              tunnel interfaces).\\n\\n              Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n              the loopback and en0 interface:\\n\\n                     tcpdump -i pktap,lo0,en0\\n\\n              An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n              A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n              savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n              An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n              ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n              If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n       -I\\n       --monitor-mode\\n              Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n              Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n              on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n              This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n              in monitor mode will be shown.\\n\\n       --immediate-mode\\n              Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n              to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n       -j tstamp_type\\n       --time-stamp-type=tstamp_type\\n              Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n       -J\\n       --list-time-stamp-types\\n              List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n       --time-stamp-precision=tstamp_precision\\n              When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n              Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n              time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n       When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n       conversion will lose precision.\\n\\n       The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n       -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n              By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n              The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                     I     interface name (or interface ID)\\n                     N     process name\\n                     P     process ID\\n                     S     service class\\n                     D     direction\\n                     C     comment\\n                     C     flags\\n                     U     process UUID (not shown by default)\\n                     V     verbose printf of pcap-ng blocks (not shown by default)\\n                     A     display all types of metadata\\n\\n              This is an Apple modification.\\n\\n       -K\\n       --dont-verify-checksums\\n              Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n              The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n       -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                     tcpdump -l | tee dat\\n\\n              or\\n\\n                     tcpdump -l > dat & tail -f dat\\n\\n              Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n              -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n              all platforms, including Windows.\\n\\n       -L\\n       --list-data-link-types\\n              List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n              support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n              another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n       -m module\\n              Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n       -M secret\\n              Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n       -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n       -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n       -#\\n       --number\\n              Print an optional packet number at the beginning of the line.\\n\\n       -O\\n       --no-optimize\\n              Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n       -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n       -p\\n       --no-promiscuous-mode\\n              Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n              broadcast\'.\\n\\n       -Q expression\\n              To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n              for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n       -Q direction\\n       --direction=direction\\n              Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n       -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n       -r file\\n              Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n       -S\\n       --absolute-tcp-sequence-numbers\\n              Print absolute, rather than relative, TCP sequence numbers.\\n\\n       -s snaplen\\n       --snapshot-length=snaplen\\n              Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n              protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n              This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n              wards compatibility with recent older versions of tcpdump.\\n\\n       -T type\\n              Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n              Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n              Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n              zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n              Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n              Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n              ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n              Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n       -t     Don\'t print a timestamp on each dump line.\\n\\n       -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n       -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n       -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n       -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n       -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                     0     time\\n                     1     no time\\n                     2     unformatted timestamp\\n                     3     microseconds since previous line\\n                     4     date and time\\n                     5     microseconds since first line\\n\\n              This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n       --time-zone-offset tz\\n              To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n              The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n       -u     Print undecoded NFS handles.\\n\\n       -U\\n       --packet-buffered\\n              If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n              when not writing to a terminal, being written only when the output buffer fills.\\n\\n              If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n              fills.\\n\\n              The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n       -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n              checks such as verifying the IP and ICMP header checksum.\\n\\n              When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n       -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n       -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n       -V file\\n              Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n       -w file\\n              Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n              This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n              to be written as soon as they are received.\\n\\n              The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n              extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n              is present and adding one (e.g. .pcap) is recommended.\\n\\n              See pcap-savefile(5) for a description of the file format.\\n\\n       -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n              name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n              Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n              cal files per timeslice.\\n\\n       -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n              Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n       -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n       -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n       -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n       -y datalinktype\\n       --linktype=datalinktype\\n              Set the data link type to use while capturing packets to datalinktype.\\n\\n       -z postrotate-command\\n              Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n              compress each savefile using gzip or bzip2.\\n\\n              Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n              And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags & arguments\\n              arrangements and execute the command that you want.\\n\\n       -Z user\\n       --relinquish-privileges=user\\n              If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n              This behavior can also be enabled by default at compile time.\\n\\n        expression\\n              selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n              For the expression syntax, see pcap-filter(7).\\n\\n              The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n              backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.\\n\\nEXAMPLES\\n       To print all packets arriving at or departing from sundown:\\n              tcpdump host sundown\\n\\n       To print traffic between helios and either hot or ace:\\n              tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n       To print all IP packets between ace and any host except helios:\\n              tcpdump ip host ace and not helios\\n\\n       To print all traffic between local hosts and hosts at Berkeley:\\n              tcpdump net ucb-ether\\n\\n       To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n              tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n       To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n              tcpdump ip and not net localnet\\n\\n       To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n              tcpdump \'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n       To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n              tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)\'\\n\\n       To print IP packets longer than 576 bytes sent through gateway snup:\\n              tcpdump \'gateway snup and ip[2:2] > 576\'\\n\\n       To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n              tcpdump \'ether[0] & 1 = 0 and ip[16] >= 224\'\\n\\n       To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n              tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'\\n\\nOUTPUT FORMAT\\n       The output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.\\n\\n       Timestamps\\n\\n       By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n              hh:mm:ss.frac\\n       and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n       ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n       time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n       Link Level Headers\\n\\n       If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n       On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n       packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n       packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n       On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n       contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n       On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n       (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n       On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n       ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n       out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n       pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n       For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n       bytes of compressed header:\\n              O ctcp * A+6 S+49 I+6 3 (6)\\n\\n       ARP\\/RARP Packets\\n\\n       Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n              arp who-has csam tell rtsg\\n              arp reply csam is-at CSAM\\n       The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n       lower case).\\n\\n       This would look less redundant if we had done tcpdump -n:\\n              arp who-has 128.3.254.6 tell 128.3.254.68\\n              arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n       If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n              RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n              CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n       For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n       IPv4 Packets\\n\\n       If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n       If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n              tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n       tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n       fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n       proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n       Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a > separating the source and destination.\\n       For other protocols, the addresses will be printed, with a > separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n       For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n       flag, in the IP header information, as described above.\\n\\n       TCP Packets\\n\\n       (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n       The general format of a TCP protocol line is:\\n              src > dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n       Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n       Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n       of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n       Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n       Here is the opening portion of an rlogin from host rtsg to host csam.\\n              IP rtsg.1023 > csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n              IP csam.login > rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n              IP rtsg.1023 > csam.login: Flags [.], ack 1, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n              IP csam.login > rtsg.1023: Flags [.], ack 2, win 4096\\n              IP rtsg.1023 > csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n              IP csam.login > rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n              IP csam.login > rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n       The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n       `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n       bytes.\\n\\n       Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n       or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n       ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n       stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n       On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -> csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n       but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n       9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n       If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n       header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n       where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n       Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n       There are 8 bits in the control bits section of the TCP header:\\n\\n              CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n       Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n       trol bits is\\n\\n              1) Caller sends SYN\\n              2) Recipient responds with SYN, ACK\\n              3) Caller sends ACK\\n\\n       Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n       dump.\\n\\n       Recall the structure of a TCP header without options:\\n\\n        0                            15                              31\\n       -----------------------------------------------------------------\\n       |          source port          |       destination port        |\\n       -----------------------------------------------------------------\\n       |                        sequence number                        |\\n       -----------------------------------------------------------------\\n       |                     acknowledgment number                     |\\n       -----------------------------------------------------------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       -----------------------------------------------------------------\\n       |         TCP checksum          |       urgent pointer          |\\n       -----------------------------------------------------------------\\n\\n       A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n       Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n        0             7|             15|             23|             31\\n       ----------------|---------------|---------------|----------------\\n       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n       ----------------|---------------|---------------|----------------\\n       |               |  13th octet   |               |               |\\n\\n       Let\'s have a closer look at octet no. 13:\\n\\n                       |               |\\n                       |---------------|\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |7   5   3     0|\\n\\n       These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n       Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                       |C|E|U|A|P|R|S|F|\\n                       |---------------|\\n                       |0 0 0 0 0 0 1 0|\\n                       |---------------|\\n                       |7 6 5 4 3 2 1 0|\\n\\n       Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n       Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n              00000010\\n\\n       and its decimal representation is\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n       We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n       This relationship can be expressed as\\n              tcp[13] == 2\\n\\n       We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n              tcpdump -i xl0 tcp[13] == 2\\n\\n       The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n       Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n            |C|E|U|A|P|R|S|F|\\n            |---------------|\\n            |0 0 0 1 0 0 1 0|\\n            |---------------|\\n            |7 6 5 4 3 2 1 0|\\n\\n       Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n                   00010010\\n\\n       which translates to decimal\\n\\n          7     6     5     4     3     2     1     0\\n       0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n       Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n       control bit is set as long as SYN is set.\\n\\n       In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n       13th octet with the binary value of a SYN:\\n\\n                 00010010 SYN-ACK              00000010 SYN\\n            AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n                 --------                      --------\\n            =    00000010                 =    00000010\\n\\n       We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n       00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n              ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n       This points us to the tcpdump filter expression\\n                   tcpdump -i xl0 \'tcp[13] & 2 == 2\'\\n\\n       Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n       rst, tcp-push, tcp-act, tcp-urg.\\n\\n       This can be demonstrated as:\\n                   tcpdump -i xl0 \'tcp[tcpflags] & tcp-push != 0\'\\n\\n       Note that you should use single quotes or a backslash in the expression to hide the AND (\'&\') special character from the shell.\\n\\n       UDP Packets\\n\\n       UDP format is illustrated by this rwho packet:\\n              actinide.who > broadcast.who: udp 84\\n       This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n       Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n       NFS.\\n\\n       UDP Name Server Requests\\n\\n       (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n       Name server requests are formatted as\\n              src > dst: id op? flags qtype qclass name (len)\\n              h2opolo.1538 > helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n       Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n       was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n       the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n       A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n       `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&3=x]\' is printed, where x is the hex value\\n       of header bytes two and three.\\n\\n       UDP Name Server Responses\\n\\n       Name server responses are formatted as\\n              src > dst:  id op rcode flags a\\/n\\/au type class data (len)\\n              helios.domain > h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n              helios.domain > h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n       In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n       128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n       In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n       set.  Since there were no answers, no type, class or data were printed.\\n\\n       Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n       SMB\\/CIFS decoding\\n\\n       tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n       By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n       details.\\n\\n       For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n       (tridge@samba.org).\\n\\n       NFS Requests and Replies\\n\\n       Sun NFS (Network File System) requests and replies are printed as:\\n              src.sport > dst.nfs: NFS request xid xid len op args\\n              src.nfs > dst.dport: NFS reply xid xid reply stat len op results\\n              sushi.1023 > wrl.nfs: NFS request xid 26377\\n                   112 readlink fh 21,24\\/10.73165\\n              wrl.nfs > sushi.1023: NFS reply xid 26377\\n                   reply ok 40 readlink \\"..\\/var\\"\\n              sushi.1022 > wrl.nfs: NFS request xid 8219\\n                   144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n              wrl.nfs > sushi.1022: NFS reply xid 8219\\n                   reply ok 128 lookup fh 9,74\\/4134.3150\\n       In  the  first  line,  host  sushi  sends  a  transaction  with  id  26377  to  wrl.   The  request  was  112 bytes, excluding the UDP and IP headers.  The operation was a readlink (read symbolic link) on file handle (fh)\\n       21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle can be interpreted as a major,minor device number pair, followed by the inode number and generation number.) In the second  line,  wrl  replies  `ok\'\\n       with the same transaction id and the contents of the link.\\n\\n       In the third line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transaction id.\\n\\n       Note that the data printed depends on the operation type.  The format is intended to be self explanatory if read in conjunction with an NFS protocol spec.  Also note that older versions of tcpdump printed NFS packets in a\\n       slightly different format: the transaction id (xid) would be printed instead of the non-NFS port number of the packet.\\n\\n       If the -v (verbose) flag is given, additional information is printed.  For example:\\n              sushi.1023 > wrl.nfs: NFS request xid 79658\\n                   148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n              wrl.nfs > sushi.1023: NFS reply xid 79658\\n                   reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n       (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been omitted from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195, at byte offset 24576.  Wrl\\n       replies `ok\'; the packet shown on the second line is the first fragment of the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent fragments, but these fragments do not have NFS or even UDP\\n       headers and so might not be printed, depending on the filter expression used).  Because the -v flag is given, some of the file attributes (which are returned in addition to the  file  data)  are  printed:  the  file  type\\n       (``REG\'\', for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n       If the -v flag is given more than once, even more details are printed.\\n\\n       Note that NFS requests are very large and much of the detail won\'t be printed unless snaplen is increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n       NFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the transaction ID.  If a reply does not closely follow the cor-\\n       responding request, it might not be parsable.\\n\\n       AFS Requests and Replies\\n\\n       Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n              src.sport > dst.dport: rx packet-type\\n              src.sport > dst.dport: rx packet-type service call call-name args\\n              src.sport > dst.dport: rx packet-type service reply call-name args\\n              elvis.7001 > pike.afsfs:\\n                   rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n                   new fid 536876964\\/1\\/1 \\".newsrc\\"\\n              pike.afsfs > elvis.7001: rx data fs reply rename\\n       In the first line, host elvis sends a RX packet to pike.  This was a RX data packet to the fs (fileserver) service, and is the start of an RPC call.  The RPC  call  was  a  rename,  with  the  old  directory  file  id  of\\n       536876964\\/1\\/1  and an old filename of `.newsrc.new\', and a new directory file id of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to the rename call (which was successful, because\\n       it was a data packet and not an abort packet).\\n\\n       In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some of the arguments decoded (generally only the `interesting\' arguments, for some definition of interesting).\\n\\n       The format is intended to be self-describing, but it will probably not be useful to people who are not familiar with the workings of AFS and RX.\\n\\n       If the -v (verbose) flag is given twice, acknowledgement packets and additional header information is printed, such as the RX call ID, call number, sequence number, serial number, and the RX packet flags.\\n\\n       If the -v flag is given twice, additional information is printed, such as the RX call ID, serial number, and the RX packet flags.  The MTU negotiation information is also printed from RX ack packets.\\n\\n       If the -v flag is given three times, the security index and service id are printed.\\n\\n       Error codes are printed for abort packets, with the exception of Ubik beacon packets (because abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n       Note that AFS requests are very large and many of the arguments won\'t be printed unless snaplen is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n       AFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If a reply does not closely fol-\\n       low the corresponding request, it might not be parsable.\\n\\n       KIP AppleTalk (DDP in UDP)\\n\\n       AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to translate AppleTalk net and node\\n       numbers to names.  Lines in this file have the form\\n              number    name\\n\\n              1.254          ether\\n              16.1      icsd-net\\n              1.254.110 ace\\n       The first two lines give the names of AppleTalk networks.  The third line gives the name of a particular host (a host is distinguished from a net by the 3rd octet in the number - a net number must have two  octets  and  a\\n       host number must have three octets.)  The number and name should be separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank lines or comment lines (lines starting with a `#\').\\n\\n       AppleTalk addresses are printed in the form\\n              net.host.port\\n\\n              144.1.209.2 > icsd-net.112.220\\n              office.2 > icsd-net.112.220\\n              jssmag.149.235 > icsd-net.2\\n       (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net number, addresses are printed in numeric form.)  In the first example, NBP (DDP port 2) on net 144.1 node 209 is sending to\\n       whatever is listening on port 220 of net icsd node 112.  The second line is the same except the full name of the source node is known (`office\').  The third line is a send from port 235 on net jssmag node 149 to broadcast\\n       on the icsd-net NBP port (note that the broadcast address (255) is indicated by a net name with no host number - for this reason it\'s a good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n       NBP  (name  binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents interpreted.  Other protocols just dump the protocol name (or number if no name is registered for the protocol) and packet\\n       size.\\n\\n       NBP packets are formatted like the following examples:\\n              icsd-net.112.220 > jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n              jssmag.209.2 > icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n              techpit.2 > icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n       The first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request (note that it has the same\\n       id)  from  host  jssmag.209 saying that it has a laserwriter resource named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request saying host techpit has laserwriter \\"techpit\\" registered on\\n       port 186.\\n\\n       ATP packet formatting is demonstrated by the following example:\\n              jssmag.209.165 > helios.132: atp-req  12266<0-7> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-req  12266<3,5> 0xae030001\\n              helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n              helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n              jssmag.209.165 > helios.132: atp-rel  12266<0-7> 0xae030001\\n              jssmag.209.133 > helios.132: atp-req* 12267<0-7> 0xae030002\\n       Jssmag.209 initiates transaction id 12266 with host helios by requesting up to 8 packets (the `<0-7>\').  The hex number at the end of the line is the value of the `userdata\' field in the request.\\n\\n       Helios responds with 8 512-byte packets.  The `:digit\' following the transaction id gives the packet sequence number in the transaction and the number in parens is the amount of data  in  the  packet,  excluding  the  atp\\n       header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n       Jssmag.209  then  requests  that  packets  3  & 5 be retransmitted.  Helios resends them then jssmag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.  The `*\' on the request indicates that XO\\n       (`exactly once\') was not set.\\n\\nPACKET METADATA FILTER\\n       Use packet metadata filter expression to match packets against descriptive information about the packet: interface, process, service type or direction.\\n\\n       Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces supporting the PKTAP data link type.\\n\\n       The syntax supports the following operators:\\n\\n              or     logical or\\n              and    logical and\\n              not    negation\\n              (...)  to group sub-expressions\\n              =      is equal\\n              !=     is not equal\\n              ||     logical or (alternate)\\n              &&     logical and (alternate)\\n              !      negation (alternate)\\n\\n       The syntax support the following keywords to denote which of packet metadata contents is to be compared:\\n\\n              if     interface name\\n              proc   process name\\n              pid    process ID\\n              svc    service class\\n              dir    direction\\n              eproc  effective process name\\n              epid   effective process ID\\n\\n       For example to filter packets from interface en0 \\"sent\\" by the process named \\"nc\\" or incoming packet not on interface en0:\\n\\n              -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n       Note that a complex packet metadata filter expression needs to be put in quotes as the option -Q takes a single string parameter.\\n\\nSEE ALSO\\n       stty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)\\n\\n              http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap\\n\\nAUTHORS\\n       The original authors are:\\n\\n       Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley National Laboratory, University of California, Berkeley, CA.\\n\\n       It is currently being maintained by tcpdump.org.\\n\\n       The current version is available via http:\\n\\n              https:\\/\\/www.tcpdump.org\\/\\n\\n       The original distribution is available via anonymous ftp:\\n\\n              ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n       IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library, under specific configurations.\\n\\nBUGS\\n       To report a security issue please send an e-mail to security@tcpdump.org.\\n\\n       To report bugs and other problems, contribute patches, request a feature, provide generic feedback etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n       NIT doesn\'t let you watch your own outbound traffic, BPF will.  We recommend that you use the latter.\\n\\n       On Linux systems with 2.0[.x] kernels:\\n\\n              packets on the loopback device will be seen twice;\\n\\n              packet filtering cannot be done in the kernel, so that all packets must be copied from the kernel in order to be filtered in user mode;\\n\\n              all of a packet, not just the part that\'s within the snapshot length, will be copied from the kernel (the 2.0[.x] packet capture mechanism, if asked to copy only part of a packet to userland, will  not  report  the\\n              true length of the packet; this would cause most IP packets to get an error from tcpdump);\\n\\n              capturing on some PPP devices won\'t work correctly.\\n\\n       We recommend that you upgrade to a 2.2 or later kernel.\\n\\n       Some attempt should be made to reassemble IP fragments or, at least to compute the right length for the higher level protocol.\\n\\n       Name  server  inverse  queries  are not dumped correctly: the (empty) question section is printed rather than real query in the answer section.  Some believe that inverse queries are themselves a bug and prefer to fix the\\n       program generating them rather than tcpdump.\\n\\n       A packet trace that crosses a daylight savings time change will give skewed time stamps (the time change is ignored).\\n\\n       Filter expressions on fields other than those in Token Ring headers will not correctly handle source-routed Token Ring packets.\\n\\n       Filter expressions on fields other than those in 802.11 headers will not correctly handle 802.11 data packets with both To DS and From DS set.\\n\\n       ip6 proto should chase header chain, but at this moment it does not.  ip6 protochain is supplied for this behavior.\\n\\n       Arithmetic expression against transport layer headers, like tcp[0], does not work against IPv6 packets.  It only looks at IPv4 packets.\\n\\n                                                                                                           2 February 2017                                                                                                TCPDUMP(1)\\n(END)\\n\\n\\n\\n\\n\\n\\n                       |               |\\n                       |---------------|\\n:","html":"<p>TCPDUMP(1)                                                                                                                                                                                                                <\\/p>\\n<pre><code>NAME\\n       tcpdump - dump traffic on a network\\n\\nSYNOPSIS\\n       tcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]\\n               [ -c count ]\\n               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]\\n               [ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]\\n               [ -m module ] [ -M secret ]\\n               [ --number ] [ -Q in|out|inout ]\\n               [ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]\\n               [ -W filecount ]\\n               [ -E spi@ipaddr algo:secret,...  ]\\n               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]\\n               [ -Q packet-metadata-filter ] [ -Q in|out|inout ]\\n               [ --time-stamp-precision=tstamp_precision ]\\n               [ --immediate-mode ] [ --version ]\\n               [ expression ]<\\/code><\\/pre>\\n<p>DESCRIPTION<br \\/>\\n\\u8bf4\\u660e  <\\/p>\\n<p>Tcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file rather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<p>Tcpdump \\u6253\\u5370\\u51fa\\u4e0e\\u5c14\\u5e03\\u6b63\\u5219\\u8868\\u8fbe\\u5f0f\\u5339\\u914d\\u7684\\u7f51\\u7edc\\u63a5\\u53e3\\u4e0a\\u6570\\u636e\\u5305\\u5185\\u5bb9\\u7684\\u63cf\\u8ff0\\uff1b<br \\/>\\n<code>13:53:11.224243 IP 59.82.40.72.https &gt; 192.168.1.110.58133: Flags [.], ack 825, win 219, length 0<\\/code><br \\/>\\n\\u63cf\\u8ff0\\u524d\\u9762\\u662f\\u65f6\\u95f4\\u6233\\uff0c\\u9ed8\\u8ba4\\u8f93\\u51fa\\uff1a\\u5c0f\\u65f6:\\u5206\\u949f:\\u79d2.\\u5fae\\u79d2\\u3002tcpdump \\u4e5f\\u53ef\\u4ee5\\u4f7f\\u7528<code>-w<\\/code>\\u6807\\u5fd7\\u8fd0\\u884c\\uff0c\\u5bfc\\u81f4\\u5b83\\u5c06\\u6570\\u636e\\u5305\\u6570\\u636e\\u4fdd\\u5b58\\u5230\\u6587\\u4ef6\\u4ee5\\u4f9b\\u4ee5\\u540e\\u5206\\u6790\\uff0c\\u4e00\\u8d77\\u4f7f\\u7528<code>-r<\\/code>\\u4e0e<code>-w<\\/code>\\u6807\\u5fd7 \\u6216 \\u4f7f\\u7528\\u53ea\\u7528<code>-r<\\/code>\\u6807\\u5fd7\\uff0c\\u8ba9\\u5b83\\u4ece\\u5df2\\u4fdd\\u5b58\\u7684\\u6570\\u636e\\u5305\\u6587\\u4ef6\\u4e2d\\u8bfb\\u53d6\\u800c\\u4e0d\\u662f\\u4ece\\u7f51\\u7edc\\u63a5\\u53e3\\u8bfb\\u53d6\\u6570\\u636e\\u5305\\u3002tcpdump \\u4e5f\\u53ef\\u4ee5\\u4f7f\\u7528<code>-V<\\/code>\\u6807\\u5fd7\\uff0c\\u8ba9\\u5b83\\u9605\\u8bfb\\u5df2\\u4fdd\\u5b58\\u7684\\u6570\\u636e\\u5305\\u6587\\u4ef6\\u5217\\u8868\\u3002\\u5728\\u4ee5\\u4e0a\\u6240\\u6709\\u573a\\u666f\\u4e2d\\uff0c\\u53ea\\u6709\\u5339\\u914d\\u6b63\\u5219\\u7684\\u6570\\u636e\\u5305\\u624d\\u4f1a\\u88abtcpdump\\u5904\\u7406\\u3002<\\/p>\\n<p>Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.<\\/p>\\n<p>\\u5982\\u679c\\u6ca1\\u6709\\u6267\\u884c -c \\u6807\\u5fd7\\uff0ctcpdump \\u5c06\\u4f1a\\u6301\\u7eed\\u6293\\u5305\\u76f4\\u81f3\\u5b83\\u88ab SIGINT \\u4fe1\\u53f7\\u4e2d\\u65ad\\uff08\\u4f8b\\u5982\\uff0c\\u901a\\u8fc7\\u952e\\u5165\\u4e2d\\u65ad\\u5b57\\u7b26\\uff0c\\u901a\\u5e38\\u662f Control-C\\uff09\\u6216SIGTERM\\u4fe1\\u53f7\\uff08\\u901a\\u5e38\\u4f7f\\u7528kill(1)\\u800c\\u751f\\u6210\\u7684\\u547d\\u4ee4\\uff09\\uff1b\\u5982\\u679c\\u4f7f\\u7528-c\\u6807\\u5fd7\\u8fd0\\u884c\\uff0c\\u5b83\\u5c06\\u6355\\u83b7\\u6570\\u636e\\u5305\\uff0c\\u76f4\\u5230\\u5b83\\u88abSIGINT\\u6216SIGTERM\\u4fe1\\u53f7\\u4e2d\\u65ad\\u6216\\u5df2\\u5904\\u7406\\u6307\\u5b9a\\u7684\\u6570\\u636e\\u5305\\u3002<\\/p>\\n<p>When tcpdump finishes capturing packets, it will report counts of: <\\/p>\\n<ul>\\n<li>packets &quot;captured&quot; (this is the number of packets that tcpdump has received and processed); <\\/li>\\n<li>packets &quot;received by filter&quot; (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it counts packets regardless of whether they were matched by the filter expression and even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression and were processed by tcpdump);<\\/li>\\n<li>packets &quot;dropped by kernel&quot; (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  information to applications; if not, it will be reported as 0).<br \\/>\\n\\u5f53TCPDUMP\\u5b8c\\u6210\\u6355\\u83b7\\u6570\\u636e\\u5305\\u65f6\\uff0c\\u5b83\\u5c06\\u62a5\\u544a\\u4ee5\\u4e0b\\u7edf\\u8ba1\\uff1a\\n<pre><code>29 packets captured\\n29 packets received by filter\\n0 packets dropped by kernel<\\/code><\\/pre><\\/li>\\n<li>\\u6355\\u83b7\\u5230\\u7684\\u6570\\u636e\\u5305\\uff1a\\u8fd9\\u662ftcpdump\\u5df2\\u7ecf\\u63a5\\u6536\\u548c\\u5904\\u7406\\u7684\\u6570\\u636e\\u5305\\u6570<\\/li>\\n<li>\\u7b5b\\u9009\\u5668\\u6536\\u5230\\u7684\\u6570\\u636e\\u5305\\uff1a\\u8fd9\\u53e5\\u7684\\u542b\\u610f\\u53d6\\u51b3\\u4e8e\\u4f60\\u8fd0\\u884ctcpdump\\u7684OS\\uff0c\\u4e14\\u53ef\\u80fd\\u5173\\u7cfb\\u5230OS\\u7684\\u8bbe\\u7f6e\\u65b9\\u5f0f\\u4e0a -- 1.  <\\/li>\\n<li>\\u5185\\u6838\\u4e22\\u5f03\\u7684\\u6570\\u636e\\u5305\\uff1a<\\/li>\\n<\\/ul>\\n<p>On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your &quot;status&quot; character, typically control-T, although on some platforms, such as Mac OS X, the &quot;status&quot; character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.<\\/p>\\n<p>Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/p>\\n<h3>OPTIONS<\\/h3>\\n<pre><code>   -A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.\\n\\n   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size\\n\\n         Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n          specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n   -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n   -dd    Dump packet-matching code as a C program fragment.\\n\\n   -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n   -D\\n   --list-interfaces\\n          Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n          interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n          This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n          name is a somewhat complex string.\\n\\n          The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n   -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n   -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n          Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n          Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n          secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n          The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n          make it visible to others, via ps(1) and other occasions.\\n\\n          In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n          been given should already have been given up.\\n\\n   -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n          bers).\\n\\n          The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n          face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n   -F file\\n          Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n   -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n   -G rotate_seconds\\n          If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n          format is specified, each new file will overwrite the previous.\\n\\n          If used in conjunction with the -C option, filenames will take the form of `file&lt;count&gt;\'.\\n\\n   -h\\n   --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n   --version\\n          Print the tcpdump and libpcap version strings and exit.\\n\\n   -H     Attempt to detect 802.11s draft mesh headers.\\n\\n   -i interface\\n   --interface=interface\\n          Listen on interface.\\n\\n                        If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n          On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n          tunnel interfaces).\\n\\n          Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n          the loopback and en0 interface:\\n\\n                 tcpdump -i pktap,lo0,en0\\n\\n          An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n          A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n          savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n          An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n          ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n   -I\\n   --monitor-mode\\n          Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n          Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n          on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n          This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n          in monitor mode will be shown.\\n\\n   --immediate-mode\\n          Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n          to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n   -j tstamp_type\\n   --time-stamp-type=tstamp_type\\n          Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n   -J\\n   --list-time-stamp-types\\n          List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n   --time-stamp-precision=tstamp_precision\\n          When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n          Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n          time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n   When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n   conversion will lose precision.\\n\\n   The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n   -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n          By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n          The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                 I     interface name (or interface ID)\\n                 N     process name\\n                 P     process ID\\n                 S     service class\\n                 D     direction\\n                 C     comment\\n\\n                                                   C     flags\\n                 U     process UUID (not shown by default)\\n                 V     verbose printf of pcap-ng blocks (not shown by default)\\n                 A     display all types of metadata\\n\\n          This is an Apple modification.\\n\\n   -K\\n   --dont-verify-checksums\\n          Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n          The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n   -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                 tcpdump -l | tee dat\\n\\n          or\\n\\n                 tcpdump -l &gt; dat &amp; tail -f dat\\n\\n          Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n          -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n          all platforms, including Windows.\\n\\n   -L\\n   --list-data-link-types\\n          List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n          support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n          another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n   -m module\\n          Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n   -M secret\\n          Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n   -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n   -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n   -#\\n   --number\\n          Print an optional packet number at the beginning of the line.\\n\\n   -O\\n   --no-optimize\\n          Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n   -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n   -p\\n   --no-promiscuous-mode\\n          Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n          broadcast\'.\\n\\n   -Q expression\\n          To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n          for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n   -Q direction\\n   --direction=direction\\n          Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.<\\/code><\\/pre>\\n<p>-q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.<\\/p>\\n<pre><code>   -r file\\n          Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n   -S\\n   --absolute-tcp-sequence-numbers\\n          Print absolute, rather than relative, TCP sequence numbers.\\n\\n   -s snaplen\\n   --snapshot-length=snaplen\\n          Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n          protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n          This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n          wards compatibility with recent older versions of tcpdump.\\n\\n   -T type\\n          Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n          Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n          Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n          zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n          Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n          Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n          ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n          Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n   -t     Don\'t print a timestamp on each dump line.\\n\\n   -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n   -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n   -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n   -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n   -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                 0     time\\n                 1     no time\\n                 2     unformatted timestamp\\n                 3     microseconds since previous line\\n                 4     date and time\\n                 5     microseconds since first line\\n\\n          This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n   --time-zone-offset tz\\n          To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n          The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n   -u     Print undecoded NFS handles.\\n\\n   -U\\n   --packet-buffered\\n          If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n          when not writing to a terminal, being written only when the output buffer fills.\\n\\n          If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer<\\/code><\\/pre>\\n<p>fills.<\\/p>\\n<pre><code>          The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n   -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n          checks such as verifying the IP and ICMP header checksum.\\n\\n          When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n   -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n   -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n   -V file\\n          Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n   -w file\\n          Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n          This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n          to be written as soon as they are received.\\n\\n          The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n          extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n          is present and adding one (e.g. .pcap) is recommended.\\n\\n          See pcap-savefile(5) for a description of the file format.\\n\\n   -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n          name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n          Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n          cal files per timeslice.\\n\\n   -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n          Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n   -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n   -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n   -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n   -y datalinktype\\n   --linktype=datalinktype\\n          Set the data link type to use while capturing packets to datalinktype.\\n\\n   -z postrotate-command\\n          Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n          compress each savefile using gzip or bzip2.\\n\\n          Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n          And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags &amp; arguments\\n          arrangements and execute the command that you want.\\n\\n   -Z user\\n   --relinquish-privileges=user\\n          If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n          This behavior can also be enabled by default at compile time.\\n\\n    expression\\n          selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.<\\/code><\\/pre>\\n<p>For the expression syntax, see pcap-filter(7).<\\/p>\\n<pre><code>          The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n          backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.<\\/code><\\/pre>\\n<p>EXAMPLES<br \\/>\\nTo print all packets arriving at or departing from sundown:<br \\/>\\ntcpdump host sundown<\\/p>\\n<pre><code>   To print traffic between helios and either hot or ace:\\n          tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n   To print all IP packets between ace and any host except helios:\\n          tcpdump ip host ace and not helios\\n\\n   To print all traffic between local hosts and hosts at Berkeley:\\n          tcpdump net ucb-ether\\n\\n   To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n          tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n   To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n          tcpdump ip and not net localnet\\n\\n   To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n          tcpdump \'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n   To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n          tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)\'\\n\\n   To print IP packets longer than 576 bytes sent through gateway snup:\\n          tcpdump \'gateway snup and ip[2:2] &gt; 576\'\\n\\n   To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n          tcpdump \'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224\'\\n\\n   To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n          tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'<\\/code><\\/pre>\\n<p>OUTPUT FORMAT<br \\/>\\nThe output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.<\\/p>\\n<pre><code>   Timestamps\\n\\n   By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n          hh:mm:ss.frac\\n   and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n   ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n   time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n   Link Level Headers\\n\\n   If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n   On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n   packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n   packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n   On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n   contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n   On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.<\\/code><\\/pre>\\n<p>(N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)<\\/p>\\n<pre><code>   On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n   ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n   out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n   pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n   For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n   bytes of compressed header:\\n          O ctcp * A+6 S+49 I+6 3 (6)\\n\\n   ARP\\/RARP Packets\\n\\n   Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n          arp who-has csam tell rtsg\\n          arp reply csam is-at CSAM\\n   The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n   lower case).\\n\\n   This would look less redundant if we had done tcpdump -n:\\n          arp who-has 128.3.254.6 tell 128.3.254.68\\n          arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n   If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n          RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n          CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n   For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n   IPv4 Packets\\n\\n   If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n   If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n          tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n   tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n   fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n   proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n   Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a &gt; separating the source and destination.\\n   For other protocols, the addresses will be printed, with a &gt; separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n   For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n   flag, in the IP header information, as described above.\\n\\n   TCP Packets\\n\\n   (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n   The general format of a TCP protocol line is:\\n          src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n   Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n   Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n   of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n   Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n   Here is the opening portion of an rlogin from host rtsg to host csam.\\n          IP rtsg.1023 &gt; csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n          IP csam.login &gt; rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n          IP rtsg.1023 &gt; csam.login: Flags [.], ack 1, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [.], ack 2, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n\\n                                      helios.domain &gt; h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n          helios.domain &gt; h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n   In the first example, helios responds to query id 3 from h2opolo with 3 answer  records,  3  name\\n   server  records  and  7  additional records.  The first answer record is type A (address) and its\\n   data is internet address 128.32.137.3.  The total size of the response was 273  bytes,  excluding\\n   UDP  and  IP  headers.  The op (Query) and response code (NoError) were omitted, as was the class\\n   (C_IN) of the A record.\\n\\n   In the second example, helios responds to query 2 with a response  code  of  non-existent  domain\\n   (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the\\n   authoritative answer bit was set.  Since there were no answers,  no  type,  class  or  data  were\\n   printed.\\n\\n   Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (trun-\\n   cated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\'  is\\n   printed.\\n\\n   SMB\\/CIFS decoding\\n\\n   tcpdump  now  includes  fairly  extensive  SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and\\n   TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n   By default a fairly minimal decode is done, with a much more detailed decode done if -v is  used.\\n   Be  warned  that  with  -v  a single SMB packet may take up a page or more, so only use -v if you\\n   really want all the gory details.\\n\\n   For information on SMB packet formats and what all  the  fields  mean  see  www.cifs.org  or  the\\n   pub\\/samba\\/specs\\/  directory on your favorite samba.org mirror site.  The SMB patches were written\\n   by Andrew Tridgell (tridge@samba.org).\\n\\n   NFS Requests and Replies\\n\\n   Sun NFS (Network File System) requests and replies are printed as:\\n          src.sport &gt; dst.nfs: NFS request xid xid len op args\\n          src.nfs &gt; dst.dport: NFS reply xid xid reply stat len op results\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 26377\\n               112 readlink fh 21,24\\/10.73165\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 26377\\n               reply ok 40 readlink \\"..\\/var\\"\\n          sushi.1022 &gt; wrl.nfs: NFS request xid 8219\\n               144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n          wrl.nfs &gt; sushi.1022: NFS reply xid 8219\\n               reply ok 128 lookup fh 9,74\\/4134.3150\\n   In the first line, host sushi sends a transaction with id 26377 to  wrl.   The  request  was  112\\n   bytes,  excluding  the  UDP and IP headers.  The operation was a readlink (read symbolic link) on\\n   file handle (fh) 21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle  can  be\\n   interpreted as a major,minor device number pair, followed by the inode number and generation num-\\n   ber.) In the second line, wrl replies `ok\' with the same transaction id and the contents  of  the\\n   link.\\n\\n   In  the  third  line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in\\n   directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transac-\\n   tion id.\\n\\n   Note  that  the  data  printed  depends on the operation type.  The format is intended to be self\\n   explanatory if read in conjunction with an NFS protocol spec.  Also note that older  versions  of\\n   tcpdump  printed  NFS  packets  in a slightly different format: the transaction id (xid) would be\\n   printed instead of the non-NFS port number of the packet.\\n\\n   If the -v (verbose) flag is given, additional information is printed.  For example:\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 79658\\n               148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 79658\\n               reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n   (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been  omitted\\n   from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195,\\n   at byte offset 24576.  Wrl replies `ok\'; the packet shown on the second line is the  first  frag-\\n   ment  of  the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent\\n   fragments, but these fragments do not have NFS or even UDP headers and so might not  be  printed,\\n   depending  on  the  filter  expression  used).   Because  the  -v flag is given, some of the file\\n   attributes (which are returned in addition to the file data) are printed: the file type (``REG\'\',\\n   for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n   If the -v flag is given more than once, even more details are printed.\\n\\n   Note  that  NFS requests are very large and much of the detail won\'t be printed unless snaplen is\\n   increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n   NFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track  of\\n   ``recent\'\'  requests,  and matches them to the replies using the transaction ID.  If a reply does\\n   not closely follow the corresponding request, it might not be parsable.\\n\\n   AFS Requests and Replies\\n\\n   Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n          src.sport &gt; dst.dport: rx packet-type\\n          src.sport &gt; dst.dport: rx packet-type service call call-name args\\n          src.sport &gt; dst.dport: rx packet-type service reply call-name args\\n          elvis.7001 &gt; pike.afsfs:\\n               rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n               new fid 536876964\\/1\\/1 \\".newsrc\\"\\n          pike.afsfs &gt; elvis.7001: rx data fs reply rename\\n   In the first line, host elvis sends a RX packet to pike.  This was a RX data  packet  to  the  fs\\n   (fileserver)  service,  and is the start of an RPC call.  The RPC call was a rename, with the old\\n   directory file id of 536876964\\/1\\/1 and an old filename of `.newsrc.new\', and a new directory file\\n   id  of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to\\n   the rename call (which was successful, because it was a data packet and not an abort packet).\\n\\n   In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some\\n   of  the  arguments  decoded  (generally  only the `interesting\' arguments, for some definition of\\n   interesting).\\n\\n   The format is intended to be self-describing, but it will probably not be useful  to  people  who\\n   are not familiar with the workings of AFS and RX.\\n\\n   If  the  -v (verbose) flag is given twice, acknowledgement packets and additional header informa-\\n   tion is printed, such as the RX call ID, call number, sequence number, serial number, and the  RX\\n   packet flags.\\n\\n   If  the -v flag is given twice, additional information is printed, such as the RX call ID, serial\\n   number, and the RX packet flags.  The MTU negotiation information is also  printed  from  RX  ack\\n   packets.\\n\\n   If the -v flag is given three times, the security index and service id are printed.\\n\\n   Error  codes  are  printed  for abort packets, with the exception of Ubik beacon packets (because\\n   abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n   Note that AFS requests are very large and many of the arguments won\'t be printed  unless  snaplen\\n   is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n   AFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of\\n   ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If  a\\n   reply does not closely follow the corresponding request, it might not be parsable.\\n\\n   KIP AppleTalk (DDP in UDP)\\n\\n   AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets\\n   (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to trans-\\n   late AppleTalk net and node numbers to names.  Lines in this file have the form\\n          number    name\\n\\n          1.254          ether\\n          16.1      icsd-net\\n          1.254.110 ace\\n   The  first  two  lines  give the names of AppleTalk networks.  The third line gives the name of a\\n   particular host (a host is distinguished from a net by the 3rd octet in the number - a net number\\n   must  have  two  octets and a host number must have three octets.)  The number and name should be\\n   separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank  lines  or\\n   comment lines (lines starting with a `#\').\\n\\n   AppleTalk addresses are printed in the form\\n          net.host.port\\n\\n          144.1.209.2 &gt; icsd-net.112.220\\n          office.2 &gt; icsd-net.112.220\\n          jssmag.149.235 &gt; icsd-net.2\\n   (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net\\n   number, addresses are printed in numeric form.)  In the first example, NBP (DDP port  2)  on  net\\n   144.1  node 209 is sending to whatever is listening on port 220 of net icsd node 112.  The second\\n   line is the same except the full name of the source node is known (`office\').  The third line  is\\n   a  send from port 235 on net jssmag node 149 to broadcast on the icsd-net NBP port (note that the\\n   broadcast address (255) is indicated by a net name with no host number - for this reason  it\'s  a\\n   good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n   NBP  (name binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents\\n   interpreted.  Other protocols just dump the protocol name (or number if no name is registered for\\n   the protocol) and packet size.\\n\\n   NBP packets are formatted like the following examples:\\n          icsd-net.112.220 &gt; jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n          jssmag.209.2 &gt; icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n          techpit.2 &gt; icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n   The  first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast\\n   on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request\\n   (note  that  it  has  the same id) from host jssmag.209 saying that it has a laserwriter resource\\n   named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request  say-\\n   ing host techpit has laserwriter \\"techpit\\" registered on port 186.\\n\\n   ATP packet formatting is demonstrated by the following example:\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;0-7&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;3,5&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-rel  12266&lt;0-7&gt; 0xae030001\\n          jssmag.209.133 &gt; helios.132: atp-req* 12267&lt;0-7&gt; 0xae030002\\n   Jssmag.209  initiates  transaction  id  12266 with host helios by requesting up to 8 packets (the\\n   `&lt;0-7&gt;\').  The hex number at the end of the line is the value of  the  `userdata\'  field  in  the\\n   request.\\n\\n   Helios  responds  with  8  512-byte packets.  The `:digit\' following the transaction id gives the\\n   packet sequence number in the transaction and the number in parens is the amount of data  in  the\\n   packet, excluding the atp header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n   Jssmag.209  then  requests  that  packets  3 &amp; 5 be retransmitted.  Helios resends them then jss-\\n   mag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.   The  `*\'  on\\n   the request indicates that XO (`exactly once\') was not set.<\\/code><\\/pre>\\n<p>PACKET METADATA FILTER<br \\/>\\nUse  packet metadata filter expression to match packets against descriptive information about the<br \\/>\\npacket: interface, process, service type or direction.<\\/p>\\n<pre><code>   Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces sup-\\n   porting the PKTAP data link type.\\n\\n   The syntax supports the following operators:\\n\\n          or     logical or\\n          and    logical and\\n          not    negation\\n          (...)  to group sub-expressions\\n          =      is equal\\n          !=     is not equal\\n          ||     logical or (alternate)\\n          &amp;&amp;     logical and (alternate)\\n          !      negation (alternate)\\n\\n   The  syntax  support  the following keywords to denote which of packet metadata contents is to be\\n   compared:\\n\\n          if     interface name\\n          proc   process name\\n          pid    process ID\\n          svc    service class\\n          dir    direction\\n          eproc  effective process name\\n          epid   effective process ID\\n\\n   For example to filter packets from interface en0 \\"sent\\" by the process  named  \\"nc\\"  or  incoming\\n   packet not on interface en0:\\n\\n          -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n   Note  that a complex packet metadata filter expression needs to be put in quotes as the option -Q\\n   takes a single string parameter.<\\/code><\\/pre>\\n<p>SEE ALSO<br \\/>\\nstty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)<\\/p>\\n<pre><code>          http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap<\\/code><\\/pre>\\n<p>AUTHORS<br \\/>\\nThe original authors are:<\\/p>\\n<pre><code>   Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley  National  Laboratory,\\n   University of California, Berkeley, CA.\\n\\n   It is currently being maintained by tcpdump.org.\\n\\n   The current version is available via http:\\n\\n          https:\\/\\/www.tcpdump.org\\/\\n\\n   The original distribution is available via anonymous ftp:\\n\\n          ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n   IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n   under specific configurations.<\\/code><\\/pre>\\n<p>BUGS<br \\/>\\nTo report a security issue please send an e-mail to security@tcpdump.org.<\\/p>\\n<pre><code>   To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n   back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n   NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n   latter.\\n\\n   On Linux systems with 2.0[.x] kernels:\\n\\n          packets on the loopback device will be seen twice;<\\/code><\\/pre>\\n<p>22:01:13.146083 IP 192.168.1.110.54815 &gt; ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0<br \\/>\\n22:01:13.676657 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417<br \\/>\\n22:01:13.676689 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409<br \\/>\\n22:01:13.727245 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0<br \\/>\\n22:01:13.727649 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204<br \\/>\\n22:01:13.727715 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0<br \\/>\\n22:01:13.835496 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0<br \\/>\\n22:01:13.916104 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0<br \\/>\\n22:01:14.580041 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43<br \\/>\\n22:01:14.681539 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71<br \\/>\\n22:01:14.681622 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0<br \\/>\\n22:01:15.685811 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:15.774804 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:16.775977 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:16.866743 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:17.868075 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:17.960006 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:18.961083 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:19.042139 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\nNAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.<\\/code><\\/pre>\\n<p>:<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n          cessed);\\n\\n          packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n          ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n          the command line, on some OSes it counts packets regardless of whether they  were  matched\\n          by  the filter expression and, even if they were matched by the filter expression, regard-\\n          less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n          packets  that were matched by the filter expression regardless of whether tcpdump has read\\n          and processed them yet, and on other OSes it counts only packets that were matched by  the\\n          filter expression and were processed by tcpdump);\\n\\n          packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n          lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n          ning,  if  the OS reports that information to applications; if not, it will be reported as\\n          0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n   tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n   example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n   such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n   in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n   SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading  packets  from  a network interface may require that you have special privileges; see the<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size<\\/code><\\/pre>\\n<p>TCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size\\n          Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n          specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n   -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n   -dd    Dump packet-matching code as a C program fragment.\\n\\n   -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n   -D\\n   --list-interfaces\\n          Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n          interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n          This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n          name is a somewhat complex string.\\n\\n          The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n   -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n   -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n          Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n          Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n          secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n          The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n          make it visible to others, via ps(1) and other occasions.\\n\\n          In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n          been given should already have been given up.\\n\\n   -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n          bers).\\n\\n          The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n          face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n   -F file\\n          Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n   -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n   -G rotate_seconds\\n          If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n          format is specified, each new file will overwrite the previous.\\n\\n          If used in conjunction with the -C option, filenames will take the form of `file&lt;count&gt;\'.\\n\\n   -h\\n   --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n   --version\\n          Print the tcpdump and libpcap version strings and exit.\\n\\n   -H     Attempt to detect 802.11s draft mesh headers.\\n\\n   -i interface\\n   --interface=interface\\n          Listen on interface.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n          On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n          tunnel interfaces).\\n\\n          Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n          the loopback and en0 interface:\\n\\n                 tcpdump -i pktap,lo0,en0\\n\\n          An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n          A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n          savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n          An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n          ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n   -I\\n   --monitor-mode\\n          Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n          Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n          on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n          This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n          in monitor mode will be shown.\\n\\n   --immediate-mode\\n          Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n          to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n   -j tstamp_type\\n   --time-stamp-type=tstamp_type\\n          Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n   -J\\n   --list-time-stamp-types\\n          List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n   --time-stamp-precision=tstamp_precision\\n          When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n          Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n          time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n   When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n   conversion will lose precision.\\n\\n   The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n   -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n          By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n          The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                 I     interface name (or interface ID)\\n                 N     process name\\n                 P     process ID\\n                 S     service class\\n                 D     direction\\n                 C     comment\\n                 C     flags\\n                 U     process UUID (not shown by default)\\n                 V     verbose printf of pcap-ng blocks (not shown by default)\\n                 A     display all types of metadata\\n\\n          This is an Apple modification.\\n\\n   -K\\n   --dont-verify-checksums\\n          Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n          The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n   -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                 tcpdump -l | tee dat\\n\\n          or\\n\\n                 tcpdump -l &gt; dat &amp; tail -f dat\\n\\n          Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n          -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n          all platforms, including Windows.\\n\\n   -L\\n   --list-data-link-types\\n          List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n          support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n          another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n   -m module\\n          Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n   -M secret\\n          Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n   -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n   -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n   -#\\n   --number\\n          Print an optional packet number at the beginning of the line.\\n\\n   -O\\n   --no-optimize\\n          Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n   -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n   -p\\n   --no-promiscuous-mode\\n          Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n          broadcast\'.\\n\\n   -Q expression\\n          To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n          for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n   -Q direction\\n   --direction=direction\\n          Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n   -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n   -r file\\n          Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n   -S\\n   --absolute-tcp-sequence-numbers\\n          Print absolute, rather than relative, TCP sequence numbers.\\n\\n   -s snaplen\\n   --snapshot-length=snaplen\\n          Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n          protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n          This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n          wards compatibility with recent older versions of tcpdump.\\n\\n   -T type\\n          Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n          Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n          Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n          zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n          Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n          Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n          ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n          Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n   -t     Don\'t print a timestamp on each dump line.\\n\\n   -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n   -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n   -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n   -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n   -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                 0     time\\n                 1     no time\\n                 2     unformatted timestamp\\n                 3     microseconds since previous line\\n                 4     date and time\\n                 5     microseconds since first line\\n\\n          This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n   --time-zone-offset tz\\n          To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n          The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n   -u     Print undecoded NFS handles.\\n\\n   -U\\n   --packet-buffered\\n          If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n          when not writing to a terminal, being written only when the output buffer fills.\\n\\n          If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n          fills.\\n\\n          The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n   -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n          checks such as verifying the IP and ICMP header checksum.\\n\\n          When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n   -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n   -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n   -V file\\n          Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n   -w file\\n          Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n          This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n          to be written as soon as they are received.\\n\\n          The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n          extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n          is present and adding one (e.g. .pcap) is recommended.\\n\\n          See pcap-savefile(5) for a description of the file format.\\n\\n   -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n          name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n          Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n          cal files per timeslice.\\n\\n   -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n          Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n   -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n   -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n   -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n   -y datalinktype\\n   --linktype=datalinktype\\n          Set the data link type to use while capturing packets to datalinktype.\\n\\n   -z postrotate-command\\n          Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n          compress each savefile using gzip or bzip2.\\n\\n          Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n          And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags &amp; arguments\\n          arrangements and execute the command that you want.\\n\\n   -Z user\\n   --relinquish-privileges=user\\n          If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n          This behavior can also be enabled by default at compile time.\\n\\n    expression\\n          selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n          For the expression syntax, see pcap-filter(7).\\n\\n          The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n          backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.<\\/code><\\/pre>\\n<p>EXAMPLES<br \\/>\\nTo print all packets arriving at or departing from sundown:<br \\/>\\ntcpdump host sundown<\\/p>\\n<pre><code>   To print traffic between helios and either hot or ace:\\n          tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n   To print all IP packets between ace and any host except helios:\\n          tcpdump ip host ace and not helios\\n\\n   To print all traffic between local hosts and hosts at Berkeley:\\n          tcpdump net ucb-ether\\n\\n   To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n          tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n   To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n          tcpdump ip and not net localnet\\n\\n   To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n          tcpdump \'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n   To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n          tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)\'\\n\\n   To print IP packets longer than 576 bytes sent through gateway snup:\\n          tcpdump \'gateway snup and ip[2:2] &gt; 576\'\\n\\n   To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n          tcpdump \'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224\'\\n\\n   To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n          tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'<\\/code><\\/pre>\\n<p>OUTPUT FORMAT<br \\/>\\nThe output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.<\\/p>\\n<pre><code>   Timestamps\\n\\n   By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n          hh:mm:ss.frac\\n   and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n   ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n   time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n   Link Level Headers\\n\\n   If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n   On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n   packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n   packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n   On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n   contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n   On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n   (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n   On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n   ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n   out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n   pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n   For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n   bytes of compressed header:\\n          O ctcp * A+6 S+49 I+6 3 (6)\\n\\n   ARP\\/RARP Packets\\n\\n   Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n          arp who-has csam tell rtsg\\n          arp reply csam is-at CSAM\\n   The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n   lower case).\\n\\n   This would look less redundant if we had done tcpdump -n:\\n          arp who-has 128.3.254.6 tell 128.3.254.68\\n          arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n   If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n          RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n          CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n   For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n   IPv4 Packets\\n\\n   If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n   If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n          tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n   tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n   fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n   proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n   Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a &gt; separating the source and destination.\\n   For other protocols, the addresses will be printed, with a &gt; separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n   For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n   flag, in the IP header information, as described above.\\n\\n   TCP Packets\\n\\n   (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n   The general format of a TCP protocol line is:\\n          src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n   Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n   Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n   of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n   Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n   Here is the opening portion of an rlogin from host rtsg to host csam.\\n          IP rtsg.1023 &gt; csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n          IP csam.login &gt; rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n          IP rtsg.1023 &gt; csam.login: Flags [.], ack 1, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [.], ack 2, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n   The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n   `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n   bytes.\\n\\n   Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n   or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n   ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n   stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n   On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -&gt; csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n   but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n   9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n   If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n   header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n   where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n   Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n   There are 8 bits in the control bits section of the TCP header:\\n\\n          CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n   Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n   trol bits is\\n\\n          1) Caller sends SYN\\n          2) Recipient responds with SYN, ACK\\n          3) Caller sends ACK\\n\\n   Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n   dump.\\n\\n   Recall the structure of a TCP header without options:\\n\\n    0                            15                              31\\n   -----------------------------------------------------------------\\n   |          source port          |       destination port        |\\n   -----------------------------------------------------------------\\n   |                        sequence number                        |\\n   -----------------------------------------------------------------\\n   |                     acknowledgment number                     |\\n   -----------------------------------------------------------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   -----------------------------------------------------------------\\n   |         TCP checksum          |       urgent pointer          |\\n   -----------------------------------------------------------------\\n\\n   A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n   Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n    0             7|             15|             23|             31\\n   ----------------|---------------|---------------|----------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   ----------------|---------------|---------------|----------------\\n   |               |  13th octet   |               |               |\\n\\n   Let\'s have a closer look at octet no. 13:\\n\\n                (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been  omitted\\n   from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195,\\n   at byte offset 24576.  Wrl replies `ok\'; the packet shown on the second line is the  first  frag-\\n   ment  of  the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent\\n   fragments, but these fragments do not have NFS or even UDP headers and so might not  be  printed,\\n   depending  on  the  filter  expression  used).   Because  the  -v flag is given, some of the file\\n   attributes (which are returned in addition to the file data) are printed: the file type (``REG\'\',\\n   for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n   If the -v flag is given more than once, even more details are printed.\\n\\n   Note  that  NFS requests are very large and much of the detail won\'t be printed unless snaplen is\\n   increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n   NFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track  of\\n   ``recent\'\'  requests,  and matches them to the replies using the transaction ID.  If a reply does\\n   not closely follow the corresponding request, it might not be parsable.\\n\\n   AFS Requests and Replies\\n\\n   Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n          src.sport &gt; dst.dport: rx packet-type\\n          src.sport &gt; dst.dport: rx packet-type service call call-name args\\n          src.sport &gt; dst.dport: rx packet-type service reply call-name args\\n          elvis.7001 &gt; pike.afsfs:\\n               rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n               new fid 536876964\\/1\\/1 \\".newsrc\\"\\n          pike.afsfs &gt; elvis.7001: rx data fs reply rename\\n   In the first line, host elvis sends a RX packet to pike.  This was a RX data  packet  to  the  fs\\n   (fileserver)  service,  and is the start of an RPC call.  The RPC call was a rename, with the old\\n   directory file id of 536876964\\/1\\/1 and an old filename of `.newsrc.new\', and a new directory file\\n   id  of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to\\n   the rename call (which was successful, because it was a data packet and not an abort packet).\\n\\n   In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some\\n   of  the  arguments  decoded  (generally  only the `interesting\' arguments, for some definition of\\n   interesting).\\n\\n   The format is intended to be self-describing, but it will probably not be useful  to  people  who\\n   are not familiar with the workings of AFS and RX.\\n\\n   If  the  -v (verbose) flag is given twice, acknowledgement packets and additional header informa-\\n   tion is printed, such as the RX call ID, call number, sequence number, serial number, and the  RX\\n   packet flags.\\n\\n   If  the -v flag is given twice, additional information is printed, such as the RX call ID, serial\\n   number, and the RX packet flags.  The MTU negotiation information is also  printed  from  RX  ack\\n   packets.\\n\\n   If the -v flag is given three times, the security index and service id are printed.\\n\\n   Error  codes  are  printed  for abort packets, with the exception of Ubik beacon packets (because\\n   abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n   Note that AFS requests are very large and many of the arguments won\'t be printed  unless  snaplen\\n   is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n   AFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of\\n   ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If  a\\n   reply does not closely follow the corresponding request, it might not be parsable.\\n\\n   KIP AppleTalk (DDP in UDP)\\n\\n   AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets\\n   (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to trans-\\n   late AppleTalk net and node numbers to names.  Lines in this file have the form\\n          number    name\\n\\n          1.254          ether\\n          16.1      icsd-net\\n          1.254.110 ace\\n   The  first  two  lines  give the names of AppleTalk networks.  The third line gives the name of a\\n   particular host (a host is distinguished from a net by the 3rd octet in the number - a net number\\n   must  have  two  octets and a host number must have three octets.)  The number and name should be\\n   separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank  lines  or\\n   comment lines (lines starting with a `#\').\\n\\n   AppleTalk addresses are printed in the form\\n          net.host.port\\n\\n          144.1.209.2 &gt; icsd-net.112.220\\n          office.2 &gt; icsd-net.112.220\\n          jssmag.149.235 &gt; icsd-net.2\\n   (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net\\n   number, addresses are printed in numeric form.)  In the first example, NBP (DDP port  2)  on  net\\n   144.1  node 209 is sending to whatever is listening on port 220 of net icsd node 112.  The second\\n   line is the same except the full name of the source node is known (`office\').  The third line  is\\n   a  send from port 235 on net jssmag node 149 to broadcast on the icsd-net NBP port (note that the\\n   broadcast address (255) is indicated by a net name with no host number - for this reason  it\'s  a\\n   good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n   NBP  (name binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents\\n   interpreted.  Other protocols just dump the protocol name (or number if no name is registered for\\n   the protocol) and packet size.\\n\\n   NBP packets are formatted like the following examples:\\n          icsd-net.112.220 &gt; jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n          jssmag.209.2 &gt; icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n          techpit.2 &gt; icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n   The  first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast\\n   on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request\\n   (note  that  it  has  the same id) from host jssmag.209 saying that it has a laserwriter resource\\n   named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request  say-\\n   ing host techpit has laserwriter \\"techpit\\" registered on port 186.\\n\\n   ATP packet formatting is demonstrated by the following example:\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;0-7&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;3,5&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-rel  12266&lt;0-7&gt; 0xae030001\\n          jssmag.209.133 &gt; helios.132: atp-req* 12267&lt;0-7&gt; 0xae030002\\n   Jssmag.209  initiates  transaction  id  12266 with host helios by requesting up to 8 packets (the\\n   `&lt;0-7&gt;\').  The hex number at the end of the line is the value of  the  `userdata\'  field  in  the\\n   request.\\n\\n   Helios  responds  with  8  512-byte packets.  The `:digit\' following the transaction id gives the\\n   packet sequence number in the transaction and the number in parens is the amount of data  in  the\\n   packet, excluding the atp header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n   Jssmag.209  then  requests  that  packets  3 &amp; 5 be retransmitted.  Helios resends them then jss-\\n   mag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.   The  `*\'  on\\n   the request indicates that XO (`exactly once\') was not set.<\\/code><\\/pre>\\n<p>PACKET METADATA FILTER<br \\/>\\nUse  packet metadata filter expression to match packets against descriptive information about the<br \\/>\\npacket: interface, process, service type or direction.<\\/p>\\n<pre><code>   Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces sup-\\n   porting the PKTAP data link type.\\n\\n   The syntax supports the following operators:\\n\\n          or     logical or\\n          and    logical and\\n          not    negation\\n          (...)  to group sub-expressions\\n          =      is equal\\n          !=     is not equal\\n          ||     logical or (alternate)\\n          &amp;&amp;     logical and (alternate)\\n          !      negation (alternate)\\n\\n   The  syntax  support  the following keywords to denote which of packet metadata contents is to be\\n   compared:\\n\\n          if     interface name\\n          proc   process name\\n          pid    process ID\\n          svc    service class\\n          dir    direction\\n          eproc  effective process name\\n          epid   effective process ID\\n\\n   For example to filter packets from interface en0 \\"sent\\" by the process  named  \\"nc\\"  or  incoming\\n   packet not on interface en0:\\n\\n          -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n   Note  that a complex packet metadata filter expression needs to be put in quotes as the option -Q\\n   takes a single string parameter.<\\/code><\\/pre>\\n<p>SEE ALSO<br \\/>\\nstty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)<\\/p>\\n<pre><code>          http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap<\\/code><\\/pre>\\n<p>AUTHORS<br \\/>\\nThe original authors are:<\\/p>\\n<pre><code>   Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley  National  Laboratory,\\n   University of California, Berkeley, CA.\\n\\n   It is currently being maintained by tcpdump.org.\\n\\n   The current version is available via http:\\n\\n          https:\\/\\/www.tcpdump.org\\/\\n\\n   The original distribution is available via anonymous ftp:\\n\\n          ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n   IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n   under specific configurations.<\\/code><\\/pre>\\n<p>BUGS<br \\/>\\nTo report a security issue please send an e-mail to security@tcpdump.org.<\\/p>\\n<pre><code>   To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n   back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n   NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n   latter.\\n\\n   On Linux systems with 2.0[.x] kernels:\\n\\n          packets on the loopback device will be seen twice;<\\/code><\\/pre>\\n<p>22:01:13.146083 IP 192.168.1.110.54815 &gt; ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0<br \\/>\\n22:01:13.676657 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417<br \\/>\\n22:01:13.676689 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409<br \\/>\\n22:01:13.727245 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0<br \\/>\\n22:01:13.727649 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204<br \\/>\\n22:01:13.727715 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0<br \\/>\\n22:01:13.835496 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0<br \\/>\\n22:01:13.916104 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0<br \\/>\\n22:01:14.580041 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43<br \\/>\\n22:01:14.681539 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71<br \\/>\\n22:01:14.681622 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0<br \\/>\\n22:01:15.685811 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:15.774804 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:16.775977 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:16.866743 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:17.868075 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:17.960006 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:18.961083 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:19.042139 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\nNAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.<\\/code><\\/pre>\\n<p>:<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n          cessed);\\n\\n          packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n          ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n          the command line, on some OSes it counts packets regardless of whether they  were  matched\\n          by  the filter expression and, even if they were matched by the filter expression, regard-\\n          less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n          packets  that were matched by the filter expression regardless of whether tcpdump has read\\n          and processed them yet, and on other OSes it counts only packets that were matched by  the\\n          filter expression and were processed by tcpdump);\\n\\n          packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n          lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n          ning,  if  the OS reports that information to applications; if not, it will be reported as\\n          0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n   tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n   example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n   such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n   in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n   SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading  packets  from  a network interface may require that you have special privileges; see the<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size<\\/code><\\/pre>\\n<p>TCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size\\n          Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n          specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n   -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n   -dd    Dump packet-matching code as a C program fragment.\\n\\n   -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n   -D\\n   --list-interfaces\\n          Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n          interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n          This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n          name is a somewhat complex string.\\n\\n          The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n   -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n   -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n          Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n          Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n          secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n          The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n          make it visible to others, via ps(1) and other occasions.\\n\\n          In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n          been given should already have been given up.\\n\\n   -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n          bers).\\n\\n          The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n          face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n   -F file\\n          Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n   -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n   -G rotate_seconds\\n          If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n          format is specified, each new file will overwrite the previous.\\n\\n          If used in conjunction with the -C option, filenames will take the form of `file&lt;count&gt;\'.\\n\\n   -h\\n   --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n   --version\\n          Print the tcpdump and libpcap version strings and exit.\\n\\n   -H     Attempt to detect 802.11s draft mesh headers.\\n\\n   -i interface\\n   --interface=interface\\n          Listen on interface.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n          On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n          tunnel interfaces).\\n\\n          Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n          the loopback and en0 interface:\\n\\n                 tcpdump -i pktap,lo0,en0\\n\\n          An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n          A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n          savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n          An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n          ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n   -I\\n   --monitor-mode\\n          Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n          Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n          on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n          This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n          in monitor mode will be shown.\\n\\n   --immediate-mode\\n          Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n          to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n   -j tstamp_type\\n   --time-stamp-type=tstamp_type\\n          Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n   -J\\n   --list-time-stamp-types\\n          List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n   --time-stamp-precision=tstamp_precision\\n          When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n          Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n          time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n   When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n   conversion will lose precision.\\n\\n   The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n   -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n          By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n          The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                 I     interface name (or interface ID)\\n                 N     process name\\n                 P     process ID\\n                 S     service class\\n                 D     direction\\n                 C     comment\\n                 C     flags\\n                 U     process UUID (not shown by default)\\n                 V     verbose printf of pcap-ng blocks (not shown by default)\\n                 A     display all types of metadata\\n\\n          This is an Apple modification.\\n\\n   -K\\n   --dont-verify-checksums\\n          Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n          The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n   -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                 tcpdump -l | tee dat\\n\\n          or\\n\\n                 tcpdump -l &gt; dat &amp; tail -f dat\\n\\n          Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n          -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n          all platforms, including Windows.\\n\\n   -L\\n   --list-data-link-types\\n          List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n          support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n          another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n   -m module\\n          Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n   -M secret\\n          Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n   -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n   -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n   -#\\n   --number\\n          Print an optional packet number at the beginning of the line.\\n\\n   -O\\n   --no-optimize\\n          Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n   -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n   -p\\n   --no-promiscuous-mode\\n          Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n          broadcast\'.\\n\\n   -Q expression\\n          To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n          for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n   -Q direction\\n   --direction=direction\\n          Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n   -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n   -r file\\n          Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n   -S\\n   --absolute-tcp-sequence-numbers\\n          Print absolute, rather than relative, TCP sequence numbers.\\n\\n   -s snaplen\\n   --snapshot-length=snaplen\\n          Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n          protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n          This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n          wards compatibility with recent older versions of tcpdump.\\n\\n   -T type\\n          Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n          Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n          Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n          zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n          Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n          Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n          ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n          Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n   -t     Don\'t print a timestamp on each dump line.\\n\\n   -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n   -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n   -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n   -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n   -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                 0     time\\n                 1     no time\\n                 2     unformatted timestamp\\n                 3     microseconds since previous line\\n                 4     date and time\\n                 5     microseconds since first line\\n\\n          This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n   --time-zone-offset tz\\n          To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n          The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n   -u     Print undecoded NFS handles.\\n\\n   -U\\n   --packet-buffered\\n          If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n          when not writing to a terminal, being written only when the output buffer fills.\\n\\n          If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n          fills.\\n\\n          The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n   -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n          checks such as verifying the IP and ICMP header checksum.\\n\\n          When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n   -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n   -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n   -V file\\n          Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n   -w file\\n          Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n          This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n          to be written as soon as they are received.\\n\\n          The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n          extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n          is present and adding one (e.g. .pcap) is recommended.\\n\\n          See pcap-savefile(5) for a description of the file format.\\n\\n   -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n          name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n          Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n          cal files per timeslice.\\n\\n   -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n          Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n   -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n   -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n   -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n   -y datalinktype\\n   --linktype=datalinktype\\n          Set the data link type to use while capturing packets to datalinktype.\\n\\n   -z postrotate-command\\n          Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n          compress each savefile using gzip or bzip2.\\n\\n          Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n          And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags &amp; arguments\\n          arrangements and execute the command that you want.\\n\\n   -Z user\\n   --relinquish-privileges=user\\n          If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n          This behavior can also be enabled by default at compile time.\\n\\n    expression\\n          selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n          For the expression syntax, see pcap-filter(7).\\n\\n          The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n          backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.<\\/code><\\/pre>\\n<p>EXAMPLES<br \\/>\\nTo print all packets arriving at or departing from sundown:<br \\/>\\ntcpdump host sundown<\\/p>\\n<pre><code>   To print traffic between helios and either hot or ace:\\n          tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n   To print all IP packets between ace and any host except helios:\\n          tcpdump ip host ace and not helios\\n\\n   To print all traffic between local hosts and hosts at Berkeley:\\n          tcpdump net ucb-ether\\n\\n   To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n          tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n   To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n          tcpdump ip and not net localnet\\n\\n   To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n          tcpdump \'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n   To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n          tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)\'\\n\\n   To print IP packets longer than 576 bytes sent through gateway snup:\\n          tcpdump \'gateway snup and ip[2:2] &gt; 576\'\\n\\n   To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n          tcpdump \'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224\'\\n\\n   To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n          tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'<\\/code><\\/pre>\\n<p>OUTPUT FORMAT<br \\/>\\nThe output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.<\\/p>\\n<pre><code>   Timestamps\\n\\n   By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n          hh:mm:ss.frac\\n   and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n   ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n   time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n   Link Level Headers\\n\\n   If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n   On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n   packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n   packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n   On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n   contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n   On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n   (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n   On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n   ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n   out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n   pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n   For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n   bytes of compressed header:\\n          O ctcp * A+6 S+49 I+6 3 (6)\\n\\n   ARP\\/RARP Packets\\n\\n   Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n          arp who-has csam tell rtsg\\n          arp reply csam is-at CSAM\\n   The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n   lower case).\\n\\n   This would look less redundant if we had done tcpdump -n:\\n          arp who-has 128.3.254.6 tell 128.3.254.68\\n          arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n   If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n          RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n          CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n   For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n   IPv4 Packets\\n\\n   If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n   If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n          tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n   tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n   fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n   proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n   Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a &gt; separating the source and destination.\\n   For other protocols, the addresses will be printed, with a &gt; separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n   For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n   flag, in the IP header information, as described above.\\n\\n   TCP Packets\\n\\n   (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n   The general format of a TCP protocol line is:\\n          src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n   Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n   Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n   of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n   Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n   Here is the opening portion of an rlogin from host rtsg to host csam.\\n          IP rtsg.1023 &gt; csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n          IP csam.login &gt; rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n          IP rtsg.1023 &gt; csam.login: Flags [.], ack 1, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [.], ack 2, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n   The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n   `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n   bytes.\\n\\n   Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n   or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n   ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n   stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n   On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -&gt; csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n   but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n   9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n   If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n   header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n   where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n   Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n   There are 8 bits in the control bits section of the TCP header:\\n\\n          CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n   Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n   trol bits is\\n\\n          1) Caller sends SYN\\n          2) Recipient responds with SYN, ACK\\n          3) Caller sends ACK\\n\\n   Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n   dump.\\n\\n   Recall the structure of a TCP header without options:\\n\\n    0                            15                              31\\n   -----------------------------------------------------------------\\n   |          source port          |       destination port        |\\n   -----------------------------------------------------------------\\n   |                        sequence number                        |\\n   -----------------------------------------------------------------\\n   |                     acknowledgment number                     |\\n   -----------------------------------------------------------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   -----------------------------------------------------------------\\n   |         TCP checksum          |       urgent pointer          |\\n   -----------------------------------------------------------------\\n\\n   A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n   Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n    0             7|             15|             23|             31\\n   ----------------|---------------|---------------|----------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   ----------------|---------------|---------------|----------------\\n   |               |  13th octet   |               |               |\\n\\n   Let\'s have a closer look at octet no. 13:\\n\\n                   |               |\\n                   |---------------|\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |7   5   3     0|\\n\\n   These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n   Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |0 0 0 0 0 0 1 0|\\n                   |---------------|\\n                   |7 6 5 4 3 2 1 0|\\n\\n   Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n   Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n          00000010\\n\\n   and its decimal representation is\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n   We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n   This relationship can be expressed as\\n          tcp[13] == 2\\n\\n   We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n          tcpdump -i xl0 tcp[13] == 2\\n\\n   The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n   Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n        |C|E|U|A|P|R|S|F|\\n        |---------------|\\n        |0 0 0 1 0 0 1 0|\\n        |---------------|\\n        |7 6 5 4 3 2 1 0|\\n\\n   Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n               00010010\\n\\n   which translates to decimal\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n   Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n   control bit is set as long as SYN is set.\\n\\n   In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n   13th octet with the binary value of a SYN:\\n\\n             00010010 SYN-ACK              00000010 SYN\\n        AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n             --------                      --------\\n        =    00000010                 =    00000010\\n\\n   We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n\\n   AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets\\n   (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to trans-\\n   late AppleTalk net and node numbers to names.  Lines in this file have the form\\n          number    name\\n\\n          1.254          ether\\n          16.1      icsd-net\\n          1.254.110 ace\\n   The  first  two  lines  give the names of AppleTalk networks.  The third line gives the name of a\\n   particular host (a host is distinguished from a net by the 3rd octet in the number - a net number\\n   must  have  two  octets and a host number must have three octets.)  The number and name should be\\n   separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank  lines  or\\n   comment lines (lines starting with a `#\').\\n\\n   AppleTalk addresses are printed in the form\\n          net.host.port\\n\\n          144.1.209.2 &gt; icsd-net.112.220\\n          office.2 &gt; icsd-net.112.220\\n          jssmag.149.235 &gt; icsd-net.2\\n   (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net\\n   number, addresses are printed in numeric form.)  In the first example, NBP (DDP port  2)  on  net\\n   144.1  node 209 is sending to whatever is listening on port 220 of net icsd node 112.  The second\\n   line is the same except the full name of the source node is known (`office\').  The third line  is\\n   a  send from port 235 on net jssmag node 149 to broadcast on the icsd-net NBP port (note that the\\n   broadcast address (255) is indicated by a net name with no host number - for this reason  it\'s  a\\n   good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n   NBP  (name binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents\\n   interpreted.  Other protocols just dump the protocol name (or number if no name is registered for\\n   the protocol) and packet size.\\n\\n   NBP packets are formatted like the following examples:\\n          icsd-net.112.220 &gt; jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n          jssmag.209.2 &gt; icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n          techpit.2 &gt; icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n   The  first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast\\n   on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request\\n   (note  that  it  has  the same id) from host jssmag.209 saying that it has a laserwriter resource\\n   named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request  say-\\n   ing host techpit has laserwriter \\"techpit\\" registered on port 186.\\n\\n   ATP packet formatting is demonstrated by the following example:\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;0-7&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;3,5&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-rel  12266&lt;0-7&gt; 0xae030001\\n          jssmag.209.133 &gt; helios.132: atp-req* 12267&lt;0-7&gt; 0xae030002\\n   Jssmag.209  initiates  transaction  id  12266 with host helios by requesting up to 8 packets (the\\n   `&lt;0-7&gt;\').  The hex number at the end of the line is the value of  the  `userdata\'  field  in  the\\n   request.\\n\\n   Helios  responds  with  8  512-byte packets.  The `:digit\' following the transaction id gives the\\n   packet sequence number in the transaction and the number in parens is the amount of data  in  the\\n   packet, excluding the atp header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n   Jssmag.209  then  requests  that  packets  3 &amp; 5 be retransmitted.  Helios resends them then jss-\\n   mag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.   The  `*\'  on\\n   the request indicates that XO (`exactly once\') was not set.<\\/code><\\/pre>\\n<p>PACKET METADATA FILTER<br \\/>\\nUse  packet metadata filter expression to match packets against descriptive information about the<br \\/>\\npacket: interface, process, service type or direction.<\\/p>\\n<pre><code>   Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces sup-\\n   porting the PKTAP data link type.\\n\\n   The syntax supports the following operators:\\n\\n          or     logical or\\n          and    logical and\\n          not    negation\\n          (...)  to group sub-expressions\\n          =      is equal\\n          !=     is not equal\\n          ||     logical or (alternate)\\n          &amp;&amp;     logical and (alternate)\\n          !      negation (alternate)\\n\\n   The  syntax  support  the following keywords to denote which of packet metadata contents is to be\\n   compared:\\n\\n          if     interface name\\n          proc   process name\\n          pid    process ID\\n          svc    service class\\n          dir    direction\\n          eproc  effective process name\\n          epid   effective process ID\\n\\n   For example to filter packets from interface en0 \\"sent\\" by the process  named  \\"nc\\"  or  incoming\\n   packet not on interface en0:\\n\\n          -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n   Note  that a complex packet metadata filter expression needs to be put in quotes as the option -Q\\n   takes a single string parameter.<\\/code><\\/pre>\\n<p>SEE ALSO<br \\/>\\nstty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)<\\/p>\\n<pre><code>          http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap<\\/code><\\/pre>\\n<p>AUTHORS<br \\/>\\nThe original authors are:<\\/p>\\n<pre><code>   Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley  National  Laboratory,\\n   University of California, Berkeley, CA.\\n\\n   It is currently being maintained by tcpdump.org.\\n\\n   The current version is available via http:\\n\\n          https:\\/\\/www.tcpdump.org\\/\\n\\n   The original distribution is available via anonymous ftp:\\n\\n          ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n   IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n   under specific configurations.<\\/code><\\/pre>\\n<p>BUGS<br \\/>\\nTo report a security issue please send an e-mail to security@tcpdump.org.<\\/p>\\n<pre><code>   To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n   back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n   NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n   latter.\\n\\n   On Linux systems with 2.0[.x] kernels:\\n\\n          packets on the loopback device will be seen twice;<\\/code><\\/pre>\\n<p>22:01:13.146083 IP 192.168.1.110.54815 &gt; ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0<br \\/>\\n22:01:13.676657 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417<br \\/>\\n22:01:13.676689 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409<br \\/>\\n22:01:13.727245 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0<br \\/>\\n22:01:13.727649 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204<br \\/>\\n22:01:13.727715 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0<br \\/>\\n22:01:13.835496 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0<br \\/>\\n22:01:13.916104 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0<br \\/>\\n22:01:14.580041 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43<br \\/>\\n22:01:14.681539 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71<br \\/>\\n22:01:14.681622 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0<br \\/>\\n22:01:15.685811 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:15.774804 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:16.775977 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:16.866743 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:17.868075 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:17.960006 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:18.961083 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:19.042139 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\nNAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.<\\/code><\\/pre>\\n<p>:<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n          cessed);\\n\\n          packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n          ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n          the command line, on some OSes it counts packets regardless of whether they  were  matched\\n          by  the filter expression and, even if they were matched by the filter expression, regard-\\n          less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n          packets  that were matched by the filter expression regardless of whether tcpdump has read\\n          and processed them yet, and on other OSes it counts only packets that were matched by  the\\n          filter expression and were processed by tcpdump);\\n\\n          packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n          lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n          ning,  if  the OS reports that information to applications; if not, it will be reported as\\n          0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n   tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n   example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n   such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n   in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n   SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading  packets  from  a network interface may require that you have special privileges; see the<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size<\\/code><\\/pre>\\n<p>TCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size\\n          Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n          specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n   -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n   -dd    Dump packet-matching code as a C program fragment.\\n\\n   -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n   -D\\n   --list-interfaces\\n          Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n          interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n          This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n          name is a somewhat complex string.\\n\\n          The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n   -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n   -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n          Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n          Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n          secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n          The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n          make it visible to others, via ps(1) and other occasions.\\n\\n          In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n          been given should already have been given up.\\n\\n   -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n          bers).\\n\\n          The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n          face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n   -F file\\n          Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n   -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n   -G rotate_seconds\\n          If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n          format is specified, each new file will overwrite the previous.\\n\\n          If used in conjunction with the -C option, filenames will take the form of `file&lt;count&gt;\'.\\n\\n   -h\\n   --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n   --version\\n          Print the tcpdump and libpcap version strings and exit.\\n\\n   -H     Attempt to detect 802.11s draft mesh headers.\\n\\n   -i interface\\n   --interface=interface\\n          Listen on interface.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n          On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n          tunnel interfaces).\\n\\n          Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n          the loopback and en0 interface:\\n\\n                 tcpdump -i pktap,lo0,en0\\n\\n          An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n          A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n          savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n          An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n          ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n   -I\\n   --monitor-mode\\n          Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n          Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n          on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n          This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n          in monitor mode will be shown.\\n\\n   --immediate-mode\\n          Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n          to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n   -j tstamp_type\\n   --time-stamp-type=tstamp_type\\n          Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n   -J\\n   --list-time-stamp-types\\n          List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n   --time-stamp-precision=tstamp_precision\\n          When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n          Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n          time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n   When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n   conversion will lose precision.\\n\\n   The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n   -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n          By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n          The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                 I     interface name (or interface ID)\\n                 N     process name\\n                 P     process ID\\n                 S     service class\\n                 D     direction\\n                 C     comment\\n                 C     flags\\n                 U     process UUID (not shown by default)\\n                 V     verbose printf of pcap-ng blocks (not shown by default)\\n                 A     display all types of metadata\\n\\n          This is an Apple modification.\\n\\n   -K\\n   --dont-verify-checksums\\n          Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n          The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n   -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                 tcpdump -l | tee dat\\n\\n          or\\n\\n                 tcpdump -l &gt; dat &amp; tail -f dat\\n\\n          Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n          -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n          all platforms, including Windows.\\n\\n   -L\\n   --list-data-link-types\\n          List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n          support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n          another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n   -m module\\n          Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n   -M secret\\n          Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n   -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n   -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n   -#\\n   --number\\n          Print an optional packet number at the beginning of the line.\\n\\n   -O\\n   --no-optimize\\n          Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n   -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n   -p\\n   --no-promiscuous-mode\\n          Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n          broadcast\'.\\n\\n   -Q expression\\n          To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n          for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n   -Q direction\\n   --direction=direction\\n          Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n   -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n   -r file\\n          Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n   -S\\n   --absolute-tcp-sequence-numbers\\n          Print absolute, rather than relative, TCP sequence numbers.\\n\\n   -s snaplen\\n   --snapshot-length=snaplen\\n          Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n          protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n          This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n          wards compatibility with recent older versions of tcpdump.\\n\\n   -T type\\n          Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n          Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n          Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n          zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n          Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n          Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n          ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n          Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n   -t     Don\'t print a timestamp on each dump line.\\n\\n   -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n   -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n   -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n   -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n   -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                 0     time\\n                 1     no time\\n                 2     unformatted timestamp\\n                 3     microseconds since previous line\\n                 4     date and time\\n                 5     microseconds since first line\\n\\n          This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n   --time-zone-offset tz\\n          To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n          The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n   -u     Print undecoded NFS handles.\\n\\n   -U\\n   --packet-buffered\\n          If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n          when not writing to a terminal, being written only when the output buffer fills.\\n\\n          If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n          fills.\\n\\n          The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n   -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n          checks such as verifying the IP and ICMP header checksum.\\n\\n          When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n   -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n   -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n   -V file\\n          Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n   -w file\\n          Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n          This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n          to be written as soon as they are received.\\n\\n          The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n          extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n          is present and adding one (e.g. .pcap) is recommended.\\n\\n          See pcap-savefile(5) for a description of the file format.\\n\\n   -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n          name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n          Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n          cal files per timeslice.\\n\\n   -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n          Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n   -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n   -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n   -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n   -y datalinktype\\n   --linktype=datalinktype\\n          Set the data link type to use while capturing packets to datalinktype.\\n\\n   -z postrotate-command\\n          Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n          compress each savefile using gzip or bzip2.\\n\\n          Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n          And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags &amp; arguments\\n          arrangements and execute the command that you want.\\n\\n   -Z user\\n   --relinquish-privileges=user\\n          If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n          This behavior can also be enabled by default at compile time.\\n\\n    expression\\n          selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n          For the expression syntax, see pcap-filter(7).\\n\\n          The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n          backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.<\\/code><\\/pre>\\n<p>EXAMPLES<br \\/>\\nTo print all packets arriving at or departing from sundown:<br \\/>\\ntcpdump host sundown<\\/p>\\n<pre><code>   To print traffic between helios and either hot or ace:\\n          tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n   To print all IP packets between ace and any host except helios:\\n          tcpdump ip host ace and not helios\\n\\n   To print all traffic between local hosts and hosts at Berkeley:\\n          tcpdump net ucb-ether\\n\\n   To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n          tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n   To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n          tcpdump ip and not net localnet\\n\\n   To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n          tcpdump \'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n   To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n          tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)\'\\n\\n   To print IP packets longer than 576 bytes sent through gateway snup:\\n          tcpdump \'gateway snup and ip[2:2] &gt; 576\'\\n\\n   To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n          tcpdump \'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224\'\\n\\n   To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n          tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'<\\/code><\\/pre>\\n<p>OUTPUT FORMAT<br \\/>\\nThe output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.<\\/p>\\n<pre><code>   Timestamps\\n\\n   By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n          hh:mm:ss.frac\\n   and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n   ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n   time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n   Link Level Headers\\n\\n   If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n   On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n   packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n   packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n   On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n   contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n   On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n   (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n   On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n   ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n   out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n   pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n   For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n   bytes of compressed header:\\n          O ctcp * A+6 S+49 I+6 3 (6)\\n\\n   ARP\\/RARP Packets\\n\\n   Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n          arp who-has csam tell rtsg\\n          arp reply csam is-at CSAM\\n   The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n   lower case).\\n\\n   This would look less redundant if we had done tcpdump -n:\\n          arp who-has 128.3.254.6 tell 128.3.254.68\\n          arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n   If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n          RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n          CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n   For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n   IPv4 Packets\\n\\n   If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n   If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n          tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n   tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n   fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n   proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n   Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a &gt; separating the source and destination.\\n   For other protocols, the addresses will be printed, with a &gt; separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n   For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n   flag, in the IP header information, as described above.\\n\\n   TCP Packets\\n\\n   (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n   The general format of a TCP protocol line is:\\n          src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n   Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n   Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n   of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n   Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n   Here is the opening portion of an rlogin from host rtsg to host csam.\\n          IP rtsg.1023 &gt; csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n          IP csam.login &gt; rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n          IP rtsg.1023 &gt; csam.login: Flags [.], ack 1, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [.], ack 2, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n   The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n   `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n   bytes.\\n\\n   Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n   or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n   ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n   stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n   On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -&gt; csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n   but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n   9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n   If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n   header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n   where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n   Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n   There are 8 bits in the control bits section of the TCP header:\\n\\n          CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n   Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n   trol bits is\\n\\n          1) Caller sends SYN\\n          2) Recipient responds with SYN, ACK\\n          3) Caller sends ACK\\n\\n   Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n   dump.\\n\\n   Recall the structure of a TCP header without options:\\n\\n    0                            15                              31\\n   -----------------------------------------------------------------\\n   |          source port          |       destination port        |\\n   -----------------------------------------------------------------\\n   |                        sequence number                        |\\n   -----------------------------------------------------------------\\n   |                     acknowledgment number                     |\\n   -----------------------------------------------------------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   -----------------------------------------------------------------\\n   |         TCP checksum          |       urgent pointer          |\\n   -----------------------------------------------------------------\\n\\n   A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n   Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n    0             7|             15|             23|             31\\n   ----------------|---------------|---------------|----------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   ----------------|---------------|---------------|----------------\\n   |               |  13th octet   |               |               |\\n\\n   Let\'s have a closer look at octet no. 13:\\n\\n                   |               |\\n                   |---------------|\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |7   5   3     0|\\n\\n   These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n   Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |0 0 0 0 0 0 1 0|\\n                   |---------------|\\n                   |7 6 5 4 3 2 1 0|\\n\\n   Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n   Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n          00000010\\n\\n   and its decimal representation is\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n   We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n   This relationship can be expressed as\\n          tcp[13] == 2\\n\\n   We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n          tcpdump -i xl0 tcp[13] == 2\\n\\n   The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n   Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n        |C|E|U|A|P|R|S|F|\\n        |---------------|\\n        |0 0 0 1 0 0 1 0|\\n        |---------------|\\n        |7 6 5 4 3 2 1 0|\\n\\n   Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n               00010010\\n\\n   which translates to decimal\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n   Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n   control bit is set as long as SYN is set.\\n\\n   In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n   13th octet with the binary value of a SYN:\\n\\n             00010010 SYN-ACK              00000010 SYN\\n        AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n             --------                      --------\\n        =    00000010                 =    00000010\\n\\n   We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n   00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n          ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n   This points us to the tcpdump filter expression\\n               tcpdump -i xl0 \'tcp[13] &amp; 2 == 2\'\\n\\n   Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n   rst, tcp-push, tcp-act, tcp-urg.\\n\\n   This can be demonstrated as:\\n               tcpdump -i xl0 \'tcp[tcpflags] &amp; tcp-push != 0\'\\n\\n   Note that you should use single quotes or a backslash in the expression to hide the AND (\'&amp;\') special character from the shell.\\n\\n   UDP Packets\\n\\n   UDP format is illustrated by this rwho packet:\\n          actinide.who &gt; broadcast.who: udp 84\\n   This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n   Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n   NFS.\\n\\n   UDP Name Server Requests\\n\\n   (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n   Name server requests are formatted as\\n          src &gt; dst: id op? flags qtype qclass name (len)\\n          h2opolo.1538 &gt; helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n   Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n   was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n   the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n   A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n   `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&amp;3=x]\' is printed, where x is the hex value\\n   of header bytes two and three.\\n\\n   UDP Name Server Responses\\n\\n   Name server responses are formatted as\\n          src &gt; dst:  id op rcode flags a\\/n\\/au type class data (len)\\n          helios.domain &gt; h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n          helios.domain &gt; h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n   In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n   128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n   In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n   set.  Since there were no answers, no type, class or data were printed.\\n\\n   Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n   SMB\\/CIFS decoding\\n\\n   tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n   By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n   details.\\n\\n   For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n   (tridge@samba.org).\\n\\n   NFS Requests and Replies\\n\\n   Jssmag.209  then  requests  that  packets  3 &amp; 5 be retransmitted.  Helios resends them then jss-\\n   mag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.   The  `*\'  on\\n   the request indicates that XO (`exactly once\') was not set.<\\/code><\\/pre>\\n<p>PACKET METADATA FILTER<br \\/>\\nUse  packet metadata filter expression to match packets against descriptive information about the<br \\/>\\npacket: interface, process, service type or direction.<\\/p>\\n<pre><code>   Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces sup-\\n   porting the PKTAP data link type.\\n\\n   The syntax supports the following operators:\\n\\n          or     logical or\\n          and    logical and\\n          not    negation\\n          (...)  to group sub-expressions\\n          =      is equal\\n          !=     is not equal\\n          ||     logical or (alternate)\\n          &amp;&amp;     logical and (alternate)\\n          !      negation (alternate)\\n\\n   The  syntax  support  the following keywords to denote which of packet metadata contents is to be\\n   compared:\\n\\n          if     interface name\\n          proc   process name\\n          pid    process ID\\n          svc    service class\\n          dir    direction\\n          eproc  effective process name\\n          epid   effective process ID\\n\\n   For example to filter packets from interface en0 \\"sent\\" by the process  named  \\"nc\\"  or  incoming\\n   packet not on interface en0:\\n\\n          -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n   Note  that a complex packet metadata filter expression needs to be put in quotes as the option -Q\\n   takes a single string parameter.<\\/code><\\/pre>\\n<p>SEE ALSO<br \\/>\\nstty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)<\\/p>\\n<pre><code>          http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap<\\/code><\\/pre>\\n<p>AUTHORS<br \\/>\\nThe original authors are:<\\/p>\\n<pre><code>   Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley  National  Laboratory,\\n   University of California, Berkeley, CA.\\n\\n   It is currently being maintained by tcpdump.org.\\n\\n   The current version is available via http:\\n\\n          https:\\/\\/www.tcpdump.org\\/\\n\\n   The original distribution is available via anonymous ftp:\\n\\n          ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n   IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n   under specific configurations.<\\/code><\\/pre>\\n<p>BUGS<br \\/>\\nTo report a security issue please send an e-mail to security@tcpdump.org.<\\/p>\\n<pre><code>   To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n   back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n   NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n   latter.\\n\\n   On Linux systems with 2.0[.x] kernels:\\n\\n          packets on the loopback device will be seen twice;<\\/code><\\/pre>\\n<p>22:01:13.146083 IP 192.168.1.110.54815 &gt; ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0<br \\/>\\n22:01:13.676657 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417<br \\/>\\n22:01:13.676689 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409<br \\/>\\n22:01:13.727245 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0<br \\/>\\n22:01:13.727649 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204<br \\/>\\n22:01:13.727715 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0<br \\/>\\n22:01:13.835496 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0<br \\/>\\n22:01:13.916104 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0<br \\/>\\n22:01:14.580041 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43<br \\/>\\n22:01:14.681539 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71<br \\/>\\n22:01:14.681622 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0<br \\/>\\n22:01:15.685811 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:15.774804 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:16.775977 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:16.866743 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:17.868075 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:17.960006 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:18.961083 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:19.042139 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\nNAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.<\\/code><\\/pre>\\n<p>:<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n          cessed);\\n\\n          packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n          ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n          the command line, on some OSes it counts packets regardless of whether they  were  matched\\n          by  the filter expression and, even if they were matched by the filter expression, regard-\\n          less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n          packets  that were matched by the filter expression regardless of whether tcpdump has read\\n          and processed them yet, and on other OSes it counts only packets that were matched by  the\\n          filter expression and were processed by tcpdump);\\n\\n          packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n          lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n          ning,  if  the OS reports that information to applications; if not, it will be reported as\\n          0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n   tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n   example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n   such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n   in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n   SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading  packets  from  a network interface may require that you have special privileges; see the<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size<\\/code><\\/pre>\\n<p>TCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size\\n          Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n          specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n   -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n   -dd    Dump packet-matching code as a C program fragment.\\n\\n   -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n   -D\\n   --list-interfaces\\n          Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n          interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n          This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n          name is a somewhat complex string.\\n\\n          The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n   -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n   -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n          Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n          Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n          secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n          The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n          make it visible to others, via ps(1) and other occasions.\\n\\n          In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n          been given should already have been given up.\\n\\n   -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n          bers).\\n\\n          The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n          face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n   -F file\\n          Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n   -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n   -G rotate_seconds\\n          If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n          format is specified, each new file will overwrite the previous.\\n\\n          If used in conjunction with the -C option, filenames will take the form of `file&lt;count&gt;\'.\\n\\n   -h\\n   --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n   --version\\n          Print the tcpdump and libpcap version strings and exit.\\n\\n   -H     Attempt to detect 802.11s draft mesh headers.\\n\\n   -i interface\\n   --interface=interface\\n          Listen on interface.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n          On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n          tunnel interfaces).\\n\\n          Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n          the loopback and en0 interface:\\n\\n                 tcpdump -i pktap,lo0,en0\\n\\n          An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n          A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n          savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n          An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n          ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n   -I\\n   --monitor-mode\\n          Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n          Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n          on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n          This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n          in monitor mode will be shown.\\n\\n   --immediate-mode\\n          Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n          to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n   -j tstamp_type\\n   --time-stamp-type=tstamp_type\\n          Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n   -J\\n   --list-time-stamp-types\\n          List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n   --time-stamp-precision=tstamp_precision\\n          When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n          Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n          time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n   When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n   conversion will lose precision.\\n\\n   The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n   -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n          By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n          The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                 I     interface name (or interface ID)\\n                 N     process name\\n                 P     process ID\\n                 S     service class\\n                 D     direction\\n                 C     comment\\n                 C     flags\\n                 U     process UUID (not shown by default)\\n                 V     verbose printf of pcap-ng blocks (not shown by default)\\n                 A     display all types of metadata\\n\\n          This is an Apple modification.\\n\\n   -K\\n   --dont-verify-checksums\\n          Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n          The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n   -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                 tcpdump -l | tee dat\\n\\n          or\\n\\n                 tcpdump -l &gt; dat &amp; tail -f dat\\n\\n          Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n          -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n          all platforms, including Windows.\\n\\n   -L\\n   --list-data-link-types\\n          List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n          support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n          another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n   -m module\\n          Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n   -M secret\\n          Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n   -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n   -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n   -#\\n   --number\\n          Print an optional packet number at the beginning of the line.\\n\\n   -O\\n   --no-optimize\\n          Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n   -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n   -p\\n   --no-promiscuous-mode\\n          Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n          broadcast\'.\\n\\n   -Q expression\\n          To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n          for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n   -Q direction\\n   --direction=direction\\n          Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n   -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n   -r file\\n          Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n   -S\\n   --absolute-tcp-sequence-numbers\\n          Print absolute, rather than relative, TCP sequence numbers.\\n\\n   -s snaplen\\n   --snapshot-length=snaplen\\n          Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n          protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n          This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n          wards compatibility with recent older versions of tcpdump.\\n\\n   -T type\\n          Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n          Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n          Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n          zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n          Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n          Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n          ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n          Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n   -t     Don\'t print a timestamp on each dump line.\\n\\n   -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n   -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n   -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n   -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n   -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                 0     time\\n                 1     no time\\n                 2     unformatted timestamp\\n                 3     microseconds since previous line\\n                 4     date and time\\n                 5     microseconds since first line\\n\\n          This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n   --time-zone-offset tz\\n          To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n          The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n   -u     Print undecoded NFS handles.\\n\\n   -U\\n   --packet-buffered\\n          If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n          when not writing to a terminal, being written only when the output buffer fills.\\n\\n          If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n          fills.\\n\\n          The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n   -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n          checks such as verifying the IP and ICMP header checksum.\\n\\n          When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n   -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n   -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n   -V file\\n          Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n   -w file\\n          Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n          This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n          to be written as soon as they are received.\\n\\n          The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n          extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n          is present and adding one (e.g. .pcap) is recommended.\\n\\n          See pcap-savefile(5) for a description of the file format.\\n\\n   -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n          name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n          Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n          cal files per timeslice.\\n\\n   -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n          Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n   -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n   -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n   -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n   -y datalinktype\\n   --linktype=datalinktype\\n          Set the data link type to use while capturing packets to datalinktype.\\n\\n   -z postrotate-command\\n          Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n          compress each savefile using gzip or bzip2.\\n\\n          Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n          And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags &amp; arguments\\n          arrangements and execute the command that you want.\\n\\n   -Z user\\n   --relinquish-privileges=user\\n          If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n          This behavior can also be enabled by default at compile time.\\n\\n    expression\\n          selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n          For the expression syntax, see pcap-filter(7).\\n\\n          The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n          backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.<\\/code><\\/pre>\\n<p>EXAMPLES<br \\/>\\nTo print all packets arriving at or departing from sundown:<br \\/>\\ntcpdump host sundown<\\/p>\\n<pre><code>   To print traffic between helios and either hot or ace:\\n          tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n   To print all IP packets between ace and any host except helios:\\n          tcpdump ip host ace and not helios\\n\\n   To print all traffic between local hosts and hosts at Berkeley:\\n          tcpdump net ucb-ether\\n\\n   To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n          tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n   To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n          tcpdump ip and not net localnet\\n\\n   To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n          tcpdump \'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n   To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n          tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)\'\\n\\n   To print IP packets longer than 576 bytes sent through gateway snup:\\n          tcpdump \'gateway snup and ip[2:2] &gt; 576\'\\n\\n   To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n          tcpdump \'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224\'\\n\\n   To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n          tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'<\\/code><\\/pre>\\n<p>OUTPUT FORMAT<br \\/>\\nThe output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.<\\/p>\\n<pre><code>   Timestamps\\n\\n   By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n          hh:mm:ss.frac\\n   and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n   ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n   time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n   Link Level Headers\\n\\n   If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n   On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n   packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n   packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n   On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n   contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n   On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n   (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n   On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n   ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n   out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n   pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n   For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n   bytes of compressed header:\\n          O ctcp * A+6 S+49 I+6 3 (6)\\n\\n   ARP\\/RARP Packets\\n\\n   Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n          arp who-has csam tell rtsg\\n          arp reply csam is-at CSAM\\n   The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n   lower case).\\n\\n   This would look less redundant if we had done tcpdump -n:\\n          arp who-has 128.3.254.6 tell 128.3.254.68\\n          arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n   If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n          RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n          CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n   For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n   IPv4 Packets\\n\\n   If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n   If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n          tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n   tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n   fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n   proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n   Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a &gt; separating the source and destination.\\n   For other protocols, the addresses will be printed, with a &gt; separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n   For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n   flag, in the IP header information, as described above.\\n\\n   TCP Packets\\n\\n   (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n   The general format of a TCP protocol line is:\\n          src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n   Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n   Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n   of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n   Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n   Here is the opening portion of an rlogin from host rtsg to host csam.\\n          IP rtsg.1023 &gt; csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n          IP csam.login &gt; rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n          IP rtsg.1023 &gt; csam.login: Flags [.], ack 1, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [.], ack 2, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n   The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n   `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n   bytes.\\n\\n   Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n   or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n   ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n   stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n   On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -&gt; csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n   but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n   9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n   If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n   header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n   where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n   Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n   There are 8 bits in the control bits section of the TCP header:\\n\\n          CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n   Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n   trol bits is\\n\\n          1) Caller sends SYN\\n          2) Recipient responds with SYN, ACK\\n          3) Caller sends ACK\\n\\n   Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n   dump.\\n\\n   Recall the structure of a TCP header without options:\\n\\n    0                            15                              31\\n   -----------------------------------------------------------------\\n   |          source port          |       destination port        |\\n   -----------------------------------------------------------------\\n   |                        sequence number                        |\\n   -----------------------------------------------------------------\\n   |                     acknowledgment number                     |\\n   -----------------------------------------------------------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   -----------------------------------------------------------------\\n   |         TCP checksum          |       urgent pointer          |\\n   -----------------------------------------------------------------\\n\\n   A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n   Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n    0             7|             15|             23|             31\\n   ----------------|---------------|---------------|----------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   ----------------|---------------|---------------|----------------\\n   |               |  13th octet   |               |               |\\n\\n   Let\'s have a closer look at octet no. 13:\\n\\n                   |               |\\n                   |---------------|\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |7   5   3     0|\\n\\n   These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n   Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |0 0 0 0 0 0 1 0|\\n                   |---------------|\\n                   |7 6 5 4 3 2 1 0|\\n\\n   Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n   Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n          00000010\\n\\n   and its decimal representation is\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n   We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n   This relationship can be expressed as\\n          tcp[13] == 2\\n\\n   We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n          tcpdump -i xl0 tcp[13] == 2\\n\\n   The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n   Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n        |C|E|U|A|P|R|S|F|\\n        |---------------|\\n        |0 0 0 1 0 0 1 0|\\n        |---------------|\\n        |7 6 5 4 3 2 1 0|\\n\\n   Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n               00010010\\n\\n   which translates to decimal\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n   Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n   control bit is set as long as SYN is set.\\n\\n   In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n   13th octet with the binary value of a SYN:\\n\\n             00010010 SYN-ACK              00000010 SYN\\n        AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n             --------                      --------\\n        =    00000010                 =    00000010\\n\\n   We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n   00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n          ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n   This points us to the tcpdump filter expression\\n               tcpdump -i xl0 \'tcp[13] &amp; 2 == 2\'\\n\\n   Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n   rst, tcp-push, tcp-act, tcp-urg.\\n\\n   This can be demonstrated as:\\n               tcpdump -i xl0 \'tcp[tcpflags] &amp; tcp-push != 0\'\\n\\n   Note that you should use single quotes or a backslash in the expression to hide the AND (\'&amp;\') special character from the shell.\\n\\n   UDP Packets\\n\\n   UDP format is illustrated by this rwho packet:\\n          actinide.who &gt; broadcast.who: udp 84\\n   This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n   Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n   NFS.\\n\\n   UDP Name Server Requests\\n\\n   (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n   Name server requests are formatted as\\n          src &gt; dst: id op? flags qtype qclass name (len)\\n          h2opolo.1538 &gt; helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n   Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n   was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n   the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n   A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n   `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&amp;3=x]\' is printed, where x is the hex value\\n   of header bytes two and three.\\n\\n   UDP Name Server Responses\\n\\n   Name server responses are formatted as\\n          src &gt; dst:  id op rcode flags a\\/n\\/au type class data (len)\\n          helios.domain &gt; h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n          helios.domain &gt; h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n   In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n   128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n   In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n   set.  Since there were no answers, no type, class or data were printed.\\n\\n   Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n   SMB\\/CIFS decoding\\n\\n   tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n   By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n   details.\\n\\n   For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n   (tridge@samba.org).\\n\\n   NFS Requests and Replies\\n\\n   Sun NFS (Network File System) requests and replies are printed as:\\n          src.sport &gt; dst.nfs: NFS request xid xid len op args\\n          src.nfs &gt; dst.dport: NFS reply xid xid reply stat len op results\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 26377\\n               112 readlink fh 21,24\\/10.73165\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 26377\\n               reply ok 40 readlink \\"..\\/var\\"\\n          sushi.1022 &gt; wrl.nfs: NFS request xid 8219\\n               144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n          wrl.nfs &gt; sushi.1022: NFS reply xid 8219\\n               reply ok 128 lookup fh 9,74\\/4134.3150\\n   In  the  first  line,  host  sushi  sends  a  transaction  with  id  26377  to  wrl.   The  request  was  112 bytes, excluding the UDP and IP headers.  The operation was a readlink (read symbolic link) on file handle (fh)\\n   21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle can be interpreted as a major,minor device number pair, followed by the inode number and generation number.) In the second  line,  wrl  replies  `ok\'\\n   with the same transaction id and the contents of the link.\\n\\n   In the third line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transaction id.\\n\\n   Note that the data printed depends on the operation type.  The format is intended to be self explanatory if read in conjunction with an NFS protocol spec.  Also note that older versions of tcpdump printed NFS packets in a\\n   slightly different format: the transaction id (xid) would be printed instead of the non-NFS port number of the packet.\\n\\n   If the -v (verbose) flag is given, additional information is printed.  For example:\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 79658\\n               148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 79658\\n               reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n   (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been omitted from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195, at byte offset 24576.  Wrl\\n   replies `ok\'; the packet shown on the second line is the first fragment of the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent fragments, but these fragments do not have NFS or even UDP\\n   headers and so might not be printed, depending on the filter expression used).  Because the -v flag is given, some of the file attributes (which are returned in addition to the  file  data)  are  printed:  the  file  type\\n   (``REG\'\', for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n   If the -v flag is given more than once, even more details are printed.\\n\\n   Note that NFS requests are very large and much of the detail won\'t be printed unless snaplen is increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n   NFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the transaction ID.  If a reply does not closely follow the cor-\\n   responding request, it might not be parsable.\\n\\n   AFS Requests and Replies\\n\\n   Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n          src.sport &gt; dst.dport: rx packet-type\\n          src.sport &gt; dst.dport: rx packet-type service call call-name args\\n          src.sport &gt; dst.dport: rx packet-type service reply call-name args\\n          elvis.7001 &gt; pike.afsfs:\\n               rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n               new fid 536876964\\/1\\/1 \\".newsrc\\"\\n          pike.afsfs &gt; elvis.7001: rx data fs reply rename\\n   In the first line, host elvis sends a RX packet to pike.  This was a RX data packet to the fs (fileserver) service, and is the start of an RPC call.  The RPC  call  was  a  rename,  with  the  old  directory  file  id  of\\n   536876964\\/1\\/1  and an old filename of `.newsrc.new\', and a new directory file id of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to the rename call (which was successful, because\\n   it was a data packet and not an abort packet).\\n\\n   In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some of the arguments decoded (generally only the `interesting\' arguments, for some definition of interesting).\\n\\n   The format is intended to be self-describing, but it will probably not be useful to people who are not familiar with the workings of AFS and RX.\\n\\n   If the -v (verbose) flag is given twice, acknowledgement packets and additional header information is printed, such as the RX call ID, call number, sequence number, serial number, and the RX packet flags.\\n\\n   If the -v flag is given twice, additional information is printed, such as the RX call ID, serial number, and the RX packet flags.  The MTU negotiation information is also printed from RX ack packets.\\n\\n   If the -v flag is given three times, the security index and service id are printed.\\n\\n   Error codes are printed for abort packets, with the exception of Ubik beacon packets (because abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n   IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library,\\n   under specific configurations.<\\/code><\\/pre>\\n<p>BUGS<br \\/>\\nTo report a security issue please send an e-mail to security@tcpdump.org.<\\/p>\\n<pre><code>   To report bugs and other problems, contribute patches, request a feature, provide  generic  feed-\\n   back etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n   NIT  doesn\'t  let  you  watch your own outbound traffic, BPF will.  We recommend that you use the\\n   latter.\\n\\n   On Linux systems with 2.0[.x] kernels:\\n\\n          packets on the loopback device will be seen twice;<\\/code><\\/pre>\\n<p>22:01:13.146083 IP 192.168.1.110.54815 &gt; ecs-122-9-54-61.compute.hwclouds-dns.com.cgi-starapi: Flags [.], ack 7750, win 4094, length 0<br \\/>\\n22:01:13.676657 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2477:2894, ack 3613, win 4096, length 417<br \\/>\\n22:01:13.676689 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [P.], seq 2894:3303, ack 3613, win 4096, length 409<br \\/>\\n22:01:13.727245 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [.], ack 3303, win 183, length 0<br \\/>\\n22:01:13.727649 IP 59.82.33.251.https &gt; 192.168.1.110.52550: Flags [P.], seq 3613:4817, ack 3303, win 183, length 1204<br \\/>\\n22:01:13.727715 IP 192.168.1.110.52550 &gt; 59.82.33.251.https: Flags [.], ack 4817, win 4077, length 0<br \\/>\\n22:01:13.835496 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 72, win 4096, length 0<br \\/>\\n22:01:13.916104 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 43, win 58, length 0<br \\/>\\n22:01:14.580041 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [P.], seq 43:86, ack 72, win 4096, length 43<br \\/>\\n22:01:14.681539 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [P.], seq 72:143, ack 86, win 58, length 71<br \\/>\\n22:01:14.681622 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4094, length 0<br \\/>\\n22:01:15.685811 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:15.774804 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:16.775977 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:16.866743 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:17.868075 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:17.960006 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\n22:01:18.961083 IP 192.168.1.110.52474 &gt; 106.11.12.4.https: Flags [.], ack 143, win 4096, length 0<br \\/>\\n22:01:19.042139 IP 106.11.12.4.https &gt; 192.168.1.110.52474: Flags [.], ack 86, win 58, length 0<br \\/>\\nNAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.<\\/code><\\/pre>\\n<p>:<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n          cessed);\\n\\n          packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n          ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n          the command line, on some OSes it counts packets regardless of whether they  were  matched\\n          by  the filter expression and, even if they were matched by the filter expression, regard-\\n          less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n          packets  that were matched by the filter expression regardless of whether tcpdump has read\\n          and processed them yet, and on other OSes it counts only packets that were matched by  the\\n          filter expression and were processed by tcpdump);\\n\\n          packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n          lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n          ning,  if  the OS reports that information to applications; if not, it will be reported as\\n          0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n   tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n   example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n   such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n   in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n   SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading  packets  from  a network interface may require that you have special privileges; see the<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size<\\/code><\\/pre>\\n<p>TCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size\\n          Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n          specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n   -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n   -dd    Dump packet-matching code as a C program fragment.\\n\\n   -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n   -D\\n   --list-interfaces\\n          Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n          interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n          This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n          name is a somewhat complex string.\\n\\n          The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n   -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n   -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n          Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n          Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n          secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n          The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n          make it visible to others, via ps(1) and other occasions.\\n\\n          In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n          been given should already have been given up.\\n\\n   -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n          bers).\\n\\n          The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n          face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n   -F file\\n          Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n   -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n   -G rotate_seconds\\n          If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n          format is specified, each new file will overwrite the previous.\\n\\n          If used in conjunction with the -C option, filenames will take the form of `file&lt;count&gt;\'.\\n\\n   -h\\n   --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n   --version\\n          Print the tcpdump and libpcap version strings and exit.\\n\\n   -H     Attempt to detect 802.11s draft mesh headers.\\n\\n   -i interface\\n   --interface=interface\\n          Listen on interface.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n          On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n          tunnel interfaces).\\n\\n          Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n          the loopback and en0 interface:\\n\\n                 tcpdump -i pktap,lo0,en0\\n\\n          An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n          A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n          savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n          An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n          ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n   -I\\n   --monitor-mode\\n          Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n          Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n          on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n          This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n          in monitor mode will be shown.\\n\\n   --immediate-mode\\n          Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n          to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n   -j tstamp_type\\n   --time-stamp-type=tstamp_type\\n          Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n   -J\\n   --list-time-stamp-types\\n          List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n   --time-stamp-precision=tstamp_precision\\n          When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n          Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n          time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n   When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n   conversion will lose precision.\\n\\n   The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n   -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n          By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n          The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                 I     interface name (or interface ID)\\n                 N     process name\\n                 P     process ID\\n                 S     service class\\n                 D     direction\\n                 C     comment\\n                 C     flags\\n                 U     process UUID (not shown by default)\\n                 V     verbose printf of pcap-ng blocks (not shown by default)\\n                 A     display all types of metadata\\n\\n          This is an Apple modification.\\n\\n   -K\\n   --dont-verify-checksums\\n          Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n          The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n   -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                 tcpdump -l | tee dat\\n\\n          or\\n\\n                 tcpdump -l &gt; dat &amp; tail -f dat\\n\\n          Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n          -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n          all platforms, including Windows.\\n\\n   -L\\n   --list-data-link-types\\n          List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n          support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n          another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n   -m module\\n          Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n   -M secret\\n          Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n   -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n   -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n   -#\\n   --number\\n          Print an optional packet number at the beginning of the line.\\n\\n   -O\\n   --no-optimize\\n          Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n   -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n   -p\\n   --no-promiscuous-mode\\n          Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n          broadcast\'.\\n\\n   -Q expression\\n          To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n          for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n   -Q direction\\n   --direction=direction\\n          Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n   -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n   -r file\\n          Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n   -S\\n   --absolute-tcp-sequence-numbers\\n          Print absolute, rather than relative, TCP sequence numbers.\\n\\n   -s snaplen\\n   --snapshot-length=snaplen\\n          Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n          protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n          This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n          wards compatibility with recent older versions of tcpdump.\\n\\n   -T type\\n          Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n          Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n          Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n          zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n          Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n          Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n          ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n          Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n   -t     Don\'t print a timestamp on each dump line.\\n\\n   -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n   -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n   -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n   -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n   -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                 0     time\\n                 1     no time\\n                 2     unformatted timestamp\\n                 3     microseconds since previous line\\n                 4     date and time\\n                 5     microseconds since first line\\n\\n          This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n   --time-zone-offset tz\\n          To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n          The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n   -u     Print undecoded NFS handles.\\n\\n   -U\\n   --packet-buffered\\n          If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n          when not writing to a terminal, being written only when the output buffer fills.\\n\\n          If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n          fills.\\n\\n          The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n   -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n          checks such as verifying the IP and ICMP header checksum.\\n\\n          When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n   -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n   -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n   -V file\\n          Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n   -w file\\n          Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n          This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n          to be written as soon as they are received.\\n\\n          The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n          extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n          is present and adding one (e.g. .pcap) is recommended.\\n\\n          See pcap-savefile(5) for a description of the file format.\\n\\n   -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n          name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n          Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n          cal files per timeslice.\\n\\n   -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n          Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n   -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n   -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n   -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n   -y datalinktype\\n   --linktype=datalinktype\\n          Set the data link type to use while capturing packets to datalinktype.\\n\\n   -z postrotate-command\\n          Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n          compress each savefile using gzip or bzip2.\\n\\n          Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n          And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags &amp; arguments\\n          arrangements and execute the command that you want.\\n\\n   -Z user\\n   --relinquish-privileges=user\\n          If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n          This behavior can also be enabled by default at compile time.\\n\\n    expression\\n          selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n          For the expression syntax, see pcap-filter(7).\\n\\n          The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n          backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.<\\/code><\\/pre>\\n<p>EXAMPLES<br \\/>\\nTo print all packets arriving at or departing from sundown:<br \\/>\\ntcpdump host sundown<\\/p>\\n<pre><code>   To print traffic between helios and either hot or ace:\\n          tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n   To print all IP packets between ace and any host except helios:\\n          tcpdump ip host ace and not helios\\n\\n   To print all traffic between local hosts and hosts at Berkeley:\\n          tcpdump net ucb-ether\\n\\n   To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n          tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n   To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n          tcpdump ip and not net localnet\\n\\n   To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n          tcpdump \'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n   To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n          tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)\'\\n\\n   To print IP packets longer than 576 bytes sent through gateway snup:\\n          tcpdump \'gateway snup and ip[2:2] &gt; 576\'\\n\\n   To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n          tcpdump \'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224\'\\n\\n   To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n          tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'<\\/code><\\/pre>\\n<p>OUTPUT FORMAT<br \\/>\\nThe output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.<\\/p>\\n<pre><code>   Timestamps\\n\\n   By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n          hh:mm:ss.frac\\n   and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n   ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n   time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n   Link Level Headers\\n\\n   If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n   On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n   packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n   packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n   On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n   contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n   On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n   (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n   On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n   ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n   out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n   pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n   For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n   bytes of compressed header:\\n          O ctcp * A+6 S+49 I+6 3 (6)\\n\\n   ARP\\/RARP Packets\\n\\n   Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n          arp who-has csam tell rtsg\\n          arp reply csam is-at CSAM\\n   The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n   lower case).\\n\\n   This would look less redundant if we had done tcpdump -n:\\n          arp who-has 128.3.254.6 tell 128.3.254.68\\n          arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n   If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n          RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n          CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n   For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n   IPv4 Packets\\n\\n   If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n   If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n          tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n   tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n   fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n   proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n   Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a &gt; separating the source and destination.\\n   For other protocols, the addresses will be printed, with a &gt; separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n   For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n   flag, in the IP header information, as described above.\\n\\n   TCP Packets\\n\\n   (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n   The general format of a TCP protocol line is:\\n          src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n   Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n   Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n   of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n   Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n   Here is the opening portion of an rlogin from host rtsg to host csam.\\n          IP rtsg.1023 &gt; csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n          IP csam.login &gt; rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n          IP rtsg.1023 &gt; csam.login: Flags [.], ack 1, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [.], ack 2, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n   The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n   `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n   bytes.\\n\\n   Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n   or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n   ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n   stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n   On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -&gt; csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n   but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n   9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n   If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n   header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n   where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n   Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n   There are 8 bits in the control bits section of the TCP header:\\n\\n          CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n   Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n   trol bits is\\n\\n          1) Caller sends SYN\\n          2) Recipient responds with SYN, ACK\\n          3) Caller sends ACK\\n\\n   Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n   dump.\\n\\n   Recall the structure of a TCP header without options:\\n\\n    0                            15                              31\\n   -----------------------------------------------------------------\\n   |          source port          |       destination port        |\\n   -----------------------------------------------------------------\\n   |                        sequence number                        |\\n   -----------------------------------------------------------------\\n   |                     acknowledgment number                     |\\n   -----------------------------------------------------------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   -----------------------------------------------------------------\\n   |         TCP checksum          |       urgent pointer          |\\n   -----------------------------------------------------------------\\n\\n   A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n   Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n    0             7|             15|             23|             31\\n   ----------------|---------------|---------------|----------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   ----------------|---------------|---------------|----------------\\n   |               |  13th octet   |               |               |\\n\\n   Let\'s have a closer look at octet no. 13:\\n\\n                   |               |\\n                   |---------------|\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |7   5   3     0|\\n\\n   These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n   Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |0 0 0 0 0 0 1 0|\\n                   |---------------|\\n                   |7 6 5 4 3 2 1 0|\\n\\n   Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n   Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n          00000010\\n\\n   and its decimal representation is\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n   We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n   This relationship can be expressed as\\n          tcp[13] == 2\\n\\n   We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n          tcpdump -i xl0 tcp[13] == 2\\n\\n   The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n   Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n        |C|E|U|A|P|R|S|F|\\n        |---------------|\\n        |0 0 0 1 0 0 1 0|\\n        |---------------|\\n        |7 6 5 4 3 2 1 0|\\n\\n   Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n               00010010\\n\\n   which translates to decimal\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n   Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n   control bit is set as long as SYN is set.\\n\\n   In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n   13th octet with the binary value of a SYN:\\n\\n             00010010 SYN-ACK              00000010 SYN\\n        AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n             --------                      --------\\n        =    00000010                 =    00000010\\n\\n   We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n   00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n          ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n   This points us to the tcpdump filter expression\\n               tcpdump -i xl0 \'tcp[13] &amp; 2 == 2\'\\n\\n   Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n   rst, tcp-push, tcp-act, tcp-urg.\\n\\n   This can be demonstrated as:\\n               tcpdump -i xl0 \'tcp[tcpflags] &amp; tcp-push != 0\'\\n\\n   Note that you should use single quotes or a backslash in the expression to hide the AND (\'&amp;\') special character from the shell.\\n\\n   UDP Packets\\n\\n   UDP format is illustrated by this rwho packet:\\n          actinide.who &gt; broadcast.who: udp 84\\n   This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n   Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n   NFS.\\n\\n   UDP Name Server Requests\\n\\n   (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n   Name server requests are formatted as\\n          src &gt; dst: id op? flags qtype qclass name (len)\\n          h2opolo.1538 &gt; helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n   Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n   was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n   the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n   A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n   `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&amp;3=x]\' is printed, where x is the hex value\\n   of header bytes two and three.\\n\\n   UDP Name Server Responses\\n\\n   Name server responses are formatted as\\n          src &gt; dst:  id op rcode flags a\\/n\\/au type class data (len)\\n          helios.domain &gt; h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n          helios.domain &gt; h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n   In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n   128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n   In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n   set.  Since there were no answers, no type, class or data were printed.\\n\\n   Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n   SMB\\/CIFS decoding\\n\\n   tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n   By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n   details.\\n\\n   For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n   (tridge@samba.org).\\n\\n   NFS Requests and Replies\\n\\n   Sun NFS (Network File System) requests and replies are printed as:\\n          src.sport &gt; dst.nfs: NFS request xid xid len op args\\n          src.nfs &gt; dst.dport: NFS reply xid xid reply stat len op results\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 26377\\n               112 readlink fh 21,24\\/10.73165\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 26377\\n               reply ok 40 readlink \\"..\\/var\\"\\n          sushi.1022 &gt; wrl.nfs: NFS request xid 8219\\n               144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n          wrl.nfs &gt; sushi.1022: NFS reply xid 8219\\n               reply ok 128 lookup fh 9,74\\/4134.3150\\n   In  the  first  line,  host  sushi  sends  a  transaction  with  id  26377  to  wrl.   The  request  was  112 bytes, excluding the UDP and IP headers.  The operation was a readlink (read symbolic link) on file handle (fh)\\n   21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle can be interpreted as a major,minor device number pair, followed by the inode number and generation number.) In the second  line,  wrl  replies  `ok\'\\n   with the same transaction id and the contents of the link.\\n\\n   In the third line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transaction id.\\n\\n   Note that the data printed depends on the operation type.  The format is intended to be self explanatory if read in conjunction with an NFS protocol spec.  Also note that older versions of tcpdump printed NFS packets in a\\n   slightly different format: the transaction id (xid) would be printed instead of the non-NFS port number of the packet.\\n\\n   If the -v (verbose) flag is given, additional information is printed.  For example:\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 79658\\n               148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 79658\\n               reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n   (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been omitted from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195, at byte offset 24576.  Wrl\\n   replies `ok\'; the packet shown on the second line is the first fragment of the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent fragments, but these fragments do not have NFS or even UDP\\n   headers and so might not be printed, depending on the filter expression used).  Because the -v flag is given, some of the file attributes (which are returned in addition to the  file  data)  are  printed:  the  file  type\\n   (``REG\'\', for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n   If the -v flag is given more than once, even more details are printed.\\n\\n   Note that NFS requests are very large and much of the detail won\'t be printed unless snaplen is increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n   NFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the transaction ID.  If a reply does not closely follow the cor-\\n   responding request, it might not be parsable.\\n\\n   AFS Requests and Replies\\n\\n   Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n          src.sport &gt; dst.dport: rx packet-type\\n          src.sport &gt; dst.dport: rx packet-type service call call-name args\\n          src.sport &gt; dst.dport: rx packet-type service reply call-name args\\n          elvis.7001 &gt; pike.afsfs:\\n               rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n               new fid 536876964\\/1\\/1 \\".newsrc\\"\\n          pike.afsfs &gt; elvis.7001: rx data fs reply rename\\n   In the first line, host elvis sends a RX packet to pike.  This was a RX data packet to the fs (fileserver) service, and is the start of an RPC call.  The RPC  call  was  a  rename,  with  the  old  directory  file  id  of\\n   536876964\\/1\\/1  and an old filename of `.newsrc.new\', and a new directory file id of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to the rename call (which was successful, because\\n   it was a data packet and not an abort packet).\\n\\n   In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some of the arguments decoded (generally only the `interesting\' arguments, for some definition of interesting).\\n\\n   The format is intended to be self-describing, but it will probably not be useful to people who are not familiar with the workings of AFS and RX.\\n\\n   If the -v (verbose) flag is given twice, acknowledgement packets and additional header information is printed, such as the RX call ID, call number, sequence number, serial number, and the RX packet flags.\\n\\n   If the -v flag is given twice, additional information is printed, such as the RX call ID, serial number, and the RX packet flags.  The MTU negotiation information is also printed from RX ack packets.\\n\\n   If the -v flag is given three times, the security index and service id are printed.\\n\\n   Error codes are printed for abort packets, with the exception of Ubik beacon packets (because abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n   Note that AFS requests are very large and many of the arguments won\'t be printed unless snaplen is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n   AFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If a reply does not closely fol-\\n   low the corresponding request, it might not be parsable.\\n\\n   KIP AppleTalk (DDP in UDP)\\n\\n   AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to translate AppleTalk net and node\\n   numbers to names.  Lines in this file have the form\\n          number    name\\n\\n          1.254          ether\\n          16.1      icsd-net\\n          1.254.110 ace\\n   The first two lines give the names of AppleTalk networks.  The third line gives the name of a particular host (a host is distinguished from a net by the 3rd octet in the number - a net number must have two  octets  and  a\\n   host number must have three octets.)  The number and name should be separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank lines or comment lines (lines starting with a `#\').\\n\\n   AppleTalk addresses are printed in the form\\n          net.host.port\\n\\n          144.1.209.2 &gt; icsd-net.112.220\\n          office.2 &gt; icsd-net.112.220\\n          jssmag.149.235 &gt; icsd-net.2\\n   (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net number, addresses are printed in numeric form.)  In the first example, NBP (DDP port 2) on net 144.1 node 209 is sending to\\n   whatever is listening on port 220 of net icsd node 112.  The second line is the same except the full name of the source node is known (`office\').  The third line is a send from port 235 on net jssmag node 149 to broadcast\\n   on the icsd-net NBP port (note that the broadcast address (255) is indicated by a net name with no host number - for this reason it\'s a good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n   NBP  (name  binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents interpreted.  Other protocols just dump the protocol name (or number if no name is registered for the protocol) and packet\\n   size.\\n\\n   NBP packets are formatted like the following examples:\\n          icsd-net.112.220 &gt; jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n          jssmag.209.2 &gt; icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n          techpit.2 &gt; icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n   The first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request (note that it has the same\\n   id)  from  host  jssmag.209 saying that it has a laserwriter resource named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request saying host techpit has laserwriter \\"techpit\\" registered on\\n   port 186.\\n\\n   ATP packet formatting is demonstrated by the following example:\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;0-7&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;3,5&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-rel  12266&lt;0-7&gt; 0xae030001\\n          jssmag.209.133 &gt; helios.132: atp-req* 12267&lt;0-7&gt; 0xae030002\\n   Jssmag.209 initiates transaction id 12266 with host helios by requesting up to 8 packets (the `&lt;0-7&gt;\').  The hex number at the end of the line is the value of the `userdata\' field in the request.\\n\\n   Helios responds with 8 512-byte packets.  The `:digit\' following the transaction id gives the packet sequence number in the transaction and the number in parens is the amount of data  in  the  packet,  excluding  the  atp\\n   header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n   Jssmag.209  then  requests  that  packets  3  &amp; 5 be retransmitted.  Helios resends them then jssmag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.  The `*\' on the request indicates that XO\\n   (`exactly once\') was not set.<\\/code><\\/pre>\\n<p>PACKET METADATA FILTER<br \\/>\\nUse packet metadata filter expression to match packets against descriptive information about the packet: interface, process, service type or direction.<\\/p>\\n<pre><code>   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.<\\/code><\\/pre>\\n<p>:<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n          cessed);\\n\\n          packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n          ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n          the command line, on some OSes it counts packets regardless of whether they  were  matched\\n          by  the filter expression and, even if they were matched by the filter expression, regard-\\n          less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n          packets  that were matched by the filter expression regardless of whether tcpdump has read\\n          and processed them yet, and on other OSes it counts only packets that were matched by  the\\n          filter expression and were processed by tcpdump);\\n\\n          packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n          lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n          ning,  if  the OS reports that information to applications; if not, it will be reported as\\n          0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n   tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n   example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n   such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n   in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n   SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading  packets  from  a network interface may require that you have special privileges; see the<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size<\\/code><\\/pre>\\n<p>TCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size\\n          Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n          specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n   -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n   -dd    Dump packet-matching code as a C program fragment.\\n\\n   -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n   -D\\n   --list-interfaces\\n          Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n          interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n          This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n          name is a somewhat complex string.\\n\\n          The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n   -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n   -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n          Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n          Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n          secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n          The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n          make it visible to others, via ps(1) and other occasions.\\n\\n          In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n          been given should already have been given up.\\n\\n   -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n          bers).\\n\\n          The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n          face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n   -F file\\n          Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n   -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n   -G rotate_seconds\\n          If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n          format is specified, each new file will overwrite the previous.\\n\\n          If used in conjunction with the -C option, filenames will take the form of `file&lt;count&gt;\'.\\n\\n   -h\\n   --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n   --version\\n          Print the tcpdump and libpcap version strings and exit.\\n\\n   -H     Attempt to detect 802.11s draft mesh headers.\\n\\n   -i interface\\n   --interface=interface\\n          Listen on interface.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n          On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n          tunnel interfaces).\\n\\n          Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n          the loopback and en0 interface:\\n\\n                 tcpdump -i pktap,lo0,en0\\n\\n          An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n          A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n          savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n          An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n          ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n   -I\\n   --monitor-mode\\n          Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n          Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n          on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n          This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n          in monitor mode will be shown.\\n\\n   --immediate-mode\\n          Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n          to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n   -j tstamp_type\\n   --time-stamp-type=tstamp_type\\n          Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n   -J\\n   --list-time-stamp-types\\n          List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n   --time-stamp-precision=tstamp_precision\\n          When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n          Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n          time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n   When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n   conversion will lose precision.\\n\\n   The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n   -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n          By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n          The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                 I     interface name (or interface ID)\\n                 N     process name\\n                 P     process ID\\n                 S     service class\\n                 D     direction\\n                 C     comment\\n                 C     flags\\n                 U     process UUID (not shown by default)\\n                 V     verbose printf of pcap-ng blocks (not shown by default)\\n                 A     display all types of metadata\\n\\n          This is an Apple modification.\\n\\n   -K\\n   --dont-verify-checksums\\n          Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n          The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n   -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                 tcpdump -l | tee dat\\n\\n          or\\n\\n                 tcpdump -l &gt; dat &amp; tail -f dat\\n\\n          Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n          -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n          all platforms, including Windows.\\n\\n   -L\\n   --list-data-link-types\\n          List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n          support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n          another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n   -m module\\n          Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n   -M secret\\n          Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n   -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n   -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n   -#\\n   --number\\n          Print an optional packet number at the beginning of the line.\\n\\n   -O\\n   --no-optimize\\n          Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n   -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n   -p\\n   --no-promiscuous-mode\\n          Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n          broadcast\'.\\n\\n   -Q expression\\n          To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n          for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n   -Q direction\\n   --direction=direction\\n          Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n   -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n   -r file\\n          Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n   -S\\n   --absolute-tcp-sequence-numbers\\n          Print absolute, rather than relative, TCP sequence numbers.\\n\\n   -s snaplen\\n   --snapshot-length=snaplen\\n          Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n          protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n          This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n          wards compatibility with recent older versions of tcpdump.\\n\\n   -T type\\n          Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n          Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n          Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n          zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n          Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n          Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n          ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n          Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n   -t     Don\'t print a timestamp on each dump line.\\n\\n   -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n   -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n   -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n   -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n   -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                 0     time\\n                 1     no time\\n                 2     unformatted timestamp\\n                 3     microseconds since previous line\\n                 4     date and time\\n                 5     microseconds since first line\\n\\n          This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n   --time-zone-offset tz\\n          To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n          The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n   -u     Print undecoded NFS handles.\\n\\n   -U\\n   --packet-buffered\\n          If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n          when not writing to a terminal, being written only when the output buffer fills.\\n\\n          If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n          fills.\\n\\n          The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n   -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n          checks such as verifying the IP and ICMP header checksum.\\n\\n          When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n   -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n   -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n   -V file\\n          Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n   -w file\\n          Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n          This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n          to be written as soon as they are received.\\n\\n          The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n          extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n          is present and adding one (e.g. .pcap) is recommended.\\n\\n          See pcap-savefile(5) for a description of the file format.\\n\\n   -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n          name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n          Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n          cal files per timeslice.\\n\\n   -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n          Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n   -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n   -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n   -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n   -y datalinktype\\n   --linktype=datalinktype\\n          Set the data link type to use while capturing packets to datalinktype.\\n\\n   -z postrotate-command\\n          Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n          compress each savefile using gzip or bzip2.\\n\\n          Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n          And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags &amp; arguments\\n          arrangements and execute the command that you want.\\n\\n   -Z user\\n   --relinquish-privileges=user\\n          If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n          This behavior can also be enabled by default at compile time.\\n\\n    expression\\n          selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n          For the expression syntax, see pcap-filter(7).\\n\\n          The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n          backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.<\\/code><\\/pre>\\n<p>EXAMPLES<br \\/>\\nTo print all packets arriving at or departing from sundown:<br \\/>\\ntcpdump host sundown<\\/p>\\n<pre><code>   To print traffic between helios and either hot or ace:\\n          tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n   To print all IP packets between ace and any host except helios:\\n          tcpdump ip host ace and not helios\\n\\n   To print all traffic between local hosts and hosts at Berkeley:\\n          tcpdump net ucb-ether\\n\\n   To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n          tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n   To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n          tcpdump ip and not net localnet\\n\\n   To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n          tcpdump \'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n   To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n          tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)\'\\n\\n   To print IP packets longer than 576 bytes sent through gateway snup:\\n          tcpdump \'gateway snup and ip[2:2] &gt; 576\'\\n\\n   To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n          tcpdump \'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224\'\\n\\n   To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n          tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'<\\/code><\\/pre>\\n<p>OUTPUT FORMAT<br \\/>\\nThe output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.<\\/p>\\n<pre><code>   Timestamps\\n\\n   By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n          hh:mm:ss.frac\\n   and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n   ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n   time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n   Link Level Headers\\n\\n   If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n   On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n   packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n   packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n   On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n   contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n   On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n   (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n   On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n   ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n   out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n   pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n   For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n   bytes of compressed header:\\n          O ctcp * A+6 S+49 I+6 3 (6)\\n\\n   ARP\\/RARP Packets\\n\\n   Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n          arp who-has csam tell rtsg\\n          arp reply csam is-at CSAM\\n   The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n   lower case).\\n\\n   This would look less redundant if we had done tcpdump -n:\\n          arp who-has 128.3.254.6 tell 128.3.254.68\\n          arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n   If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n          RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n          CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n   For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n   IPv4 Packets\\n\\n   If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n   If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n          tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n   tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n   fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n   proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n   Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a &gt; separating the source and destination.\\n   For other protocols, the addresses will be printed, with a &gt; separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n   For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n   flag, in the IP header information, as described above.\\n\\n   TCP Packets\\n\\n   (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n   The general format of a TCP protocol line is:\\n          src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n   Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n   Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n   of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n   Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n   Here is the opening portion of an rlogin from host rtsg to host csam.\\n          IP rtsg.1023 &gt; csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n          IP csam.login &gt; rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n          IP rtsg.1023 &gt; csam.login: Flags [.], ack 1, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [.], ack 2, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n   The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n   `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n   bytes.\\n\\n   Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n   or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n   ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n   stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n   On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -&gt; csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n   but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n   9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n   If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n   header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n   where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n   Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n   There are 8 bits in the control bits section of the TCP header:\\n\\n          CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n   Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n   trol bits is\\n\\n          1) Caller sends SYN\\n          2) Recipient responds with SYN, ACK\\n          3) Caller sends ACK\\n\\n   Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n   dump.\\n\\n   Recall the structure of a TCP header without options:\\n\\n    0                            15                              31\\n   -----------------------------------------------------------------\\n   |          source port          |       destination port        |\\n   -----------------------------------------------------------------\\n   |                        sequence number                        |\\n   -----------------------------------------------------------------\\n   |                     acknowledgment number                     |\\n   -----------------------------------------------------------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   -----------------------------------------------------------------\\n   |         TCP checksum          |       urgent pointer          |\\n   -----------------------------------------------------------------\\n\\n   A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n   Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n    0             7|             15|             23|             31\\n   ----------------|---------------|---------------|----------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   ----------------|---------------|---------------|----------------\\n   |               |  13th octet   |               |               |\\n\\n   Let\'s have a closer look at octet no. 13:\\n\\n                   |               |\\n                   |---------------|\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |7   5   3     0|\\n\\n   These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n   Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |0 0 0 0 0 0 1 0|\\n                   |---------------|\\n                   |7 6 5 4 3 2 1 0|\\n\\n   Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n   Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n          00000010\\n\\n   and its decimal representation is\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n   We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n   This relationship can be expressed as\\n          tcp[13] == 2\\n\\n   We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n          tcpdump -i xl0 tcp[13] == 2\\n\\n   The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n   Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n        |C|E|U|A|P|R|S|F|\\n        |---------------|\\n        |0 0 0 1 0 0 1 0|\\n        |---------------|\\n        |7 6 5 4 3 2 1 0|\\n\\n   Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n               00010010\\n\\n   which translates to decimal\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n   Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n   control bit is set as long as SYN is set.\\n\\n   In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n   13th octet with the binary value of a SYN:\\n\\n             00010010 SYN-ACK              00000010 SYN\\n        AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n             --------                      --------\\n        =    00000010                 =    00000010\\n\\n   We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n   00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n          ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n   This points us to the tcpdump filter expression\\n               tcpdump -i xl0 \'tcp[13] &amp; 2 == 2\'\\n\\n   Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n   rst, tcp-push, tcp-act, tcp-urg.\\n\\n   This can be demonstrated as:\\n               tcpdump -i xl0 \'tcp[tcpflags] &amp; tcp-push != 0\'\\n\\n   Note that you should use single quotes or a backslash in the expression to hide the AND (\'&amp;\') special character from the shell.\\n\\n   UDP Packets\\n\\n   UDP format is illustrated by this rwho packet:\\n          actinide.who &gt; broadcast.who: udp 84\\n   This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n   Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n   NFS.\\n\\n   UDP Name Server Requests\\n\\n   (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n   Name server requests are formatted as\\n          src &gt; dst: id op? flags qtype qclass name (len)\\n          h2opolo.1538 &gt; helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n   Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n   was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n   the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n   A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n   `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&amp;3=x]\' is printed, where x is the hex value\\n   of header bytes two and three.\\n\\n   UDP Name Server Responses\\n\\n   Name server responses are formatted as\\n          src &gt; dst:  id op rcode flags a\\/n\\/au type class data (len)\\n          helios.domain &gt; h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n          helios.domain &gt; h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n   In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n   128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n   In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n   set.  Since there were no answers, no type, class or data were printed.\\n\\n   Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n   SMB\\/CIFS decoding\\n\\n   tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n   By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n   details.\\n\\n   For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n   (tridge@samba.org).\\n\\n   NFS Requests and Replies\\n\\n   Sun NFS (Network File System) requests and replies are printed as:\\n          src.sport &gt; dst.nfs: NFS request xid xid len op args\\n          src.nfs &gt; dst.dport: NFS reply xid xid reply stat len op results\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 26377\\n               112 readlink fh 21,24\\/10.73165\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 26377\\n               reply ok 40 readlink \\"..\\/var\\"\\n          sushi.1022 &gt; wrl.nfs: NFS request xid 8219\\n               144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n          wrl.nfs &gt; sushi.1022: NFS reply xid 8219\\n               reply ok 128 lookup fh 9,74\\/4134.3150\\n   In  the  first  line,  host  sushi  sends  a  transaction  with  id  26377  to  wrl.   The  request  was  112 bytes, excluding the UDP and IP headers.  The operation was a readlink (read symbolic link) on file handle (fh)\\n   21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle can be interpreted as a major,minor device number pair, followed by the inode number and generation number.) In the second  line,  wrl  replies  `ok\'\\n   with the same transaction id and the contents of the link.\\n\\n   In the third line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transaction id.\\n\\n   Note that the data printed depends on the operation type.  The format is intended to be self explanatory if read in conjunction with an NFS protocol spec.  Also note that older versions of tcpdump printed NFS packets in a\\n   slightly different format: the transaction id (xid) would be printed instead of the non-NFS port number of the packet.\\n\\n   If the -v (verbose) flag is given, additional information is printed.  For example:\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 79658\\n               148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 79658\\n               reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n   (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been omitted from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195, at byte offset 24576.  Wrl\\n   replies `ok\'; the packet shown on the second line is the first fragment of the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent fragments, but these fragments do not have NFS or even UDP\\n   headers and so might not be printed, depending on the filter expression used).  Because the -v flag is given, some of the file attributes (which are returned in addition to the  file  data)  are  printed:  the  file  type\\n   (``REG\'\', for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n   If the -v flag is given more than once, even more details are printed.\\n\\n   Note that NFS requests are very large and much of the detail won\'t be printed unless snaplen is increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n   NFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the transaction ID.  If a reply does not closely follow the cor-\\n   responding request, it might not be parsable.\\n\\n   AFS Requests and Replies\\n\\n   Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n          src.sport &gt; dst.dport: rx packet-type\\n          src.sport &gt; dst.dport: rx packet-type service call call-name args\\n          src.sport &gt; dst.dport: rx packet-type service reply call-name args\\n          elvis.7001 &gt; pike.afsfs:\\n               rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n               new fid 536876964\\/1\\/1 \\".newsrc\\"\\n          pike.afsfs &gt; elvis.7001: rx data fs reply rename\\n   In the first line, host elvis sends a RX packet to pike.  This was a RX data packet to the fs (fileserver) service, and is the start of an RPC call.  The RPC  call  was  a  rename,  with  the  old  directory  file  id  of\\n   536876964\\/1\\/1  and an old filename of `.newsrc.new\', and a new directory file id of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to the rename call (which was successful, because\\n   it was a data packet and not an abort packet).\\n\\n   In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some of the arguments decoded (generally only the `interesting\' arguments, for some definition of interesting).\\n\\n   The format is intended to be self-describing, but it will probably not be useful to people who are not familiar with the workings of AFS and RX.\\n\\n   If the -v (verbose) flag is given twice, acknowledgement packets and additional header information is printed, such as the RX call ID, call number, sequence number, serial number, and the RX packet flags.\\n\\n   If the -v flag is given twice, additional information is printed, such as the RX call ID, serial number, and the RX packet flags.  The MTU negotiation information is also printed from RX ack packets.\\n\\n   If the -v flag is given three times, the security index and service id are printed.\\n\\n   Error codes are printed for abort packets, with the exception of Ubik beacon packets (because abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n   Note that AFS requests are very large and many of the arguments won\'t be printed unless snaplen is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n   AFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If a reply does not closely fol-\\n   low the corresponding request, it might not be parsable.\\n\\n   KIP AppleTalk (DDP in UDP)\\n\\n   AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to translate AppleTalk net and node\\n   numbers to names.  Lines in this file have the form\\n          number    name\\n\\n          1.254          ether\\n          16.1      icsd-net\\n          1.254.110 ace\\n   The first two lines give the names of AppleTalk networks.  The third line gives the name of a particular host (a host is distinguished from a net by the 3rd octet in the number - a net number must have two  octets  and  a\\n   host number must have three octets.)  The number and name should be separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank lines or comment lines (lines starting with a `#\').\\n\\n   AppleTalk addresses are printed in the form\\n          net.host.port\\n\\n          144.1.209.2 &gt; icsd-net.112.220\\n          office.2 &gt; icsd-net.112.220\\n          jssmag.149.235 &gt; icsd-net.2\\n   (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net number, addresses are printed in numeric form.)  In the first example, NBP (DDP port 2) on net 144.1 node 209 is sending to\\n   whatever is listening on port 220 of net icsd node 112.  The second line is the same except the full name of the source node is known (`office\').  The third line is a send from port 235 on net jssmag node 149 to broadcast\\n   on the icsd-net NBP port (note that the broadcast address (255) is indicated by a net name with no host number - for this reason it\'s a good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n   NBP  (name  binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents interpreted.  Other protocols just dump the protocol name (or number if no name is registered for the protocol) and packet\\n   size.\\n\\n   NBP packets are formatted like the following examples:\\n          icsd-net.112.220 &gt; jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n          jssmag.209.2 &gt; icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n          techpit.2 &gt; icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n   The first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request (note that it has the same\\n   id)  from  host  jssmag.209 saying that it has a laserwriter resource named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request saying host techpit has laserwriter \\"techpit\\" registered on\\n   port 186.\\n\\n   ATP packet formatting is demonstrated by the following example:\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;0-7&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;3,5&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-rel  12266&lt;0-7&gt; 0xae030001\\n          jssmag.209.133 &gt; helios.132: atp-req* 12267&lt;0-7&gt; 0xae030002\\n   Jssmag.209 initiates transaction id 12266 with host helios by requesting up to 8 packets (the `&lt;0-7&gt;\').  The hex number at the end of the line is the value of the `userdata\' field in the request.\\n\\n   Helios responds with 8 512-byte packets.  The `:digit\' following the transaction id gives the packet sequence number in the transaction and the number in parens is the amount of data  in  the  packet,  excluding  the  atp\\n   header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n   Jssmag.209  then  requests  that  packets  3  &amp; 5 be retransmitted.  Helios resends them then jssmag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.  The `*\' on the request indicates that XO\\n   (`exactly once\') was not set.<\\/code><\\/pre>\\n<p>PACKET METADATA FILTER<br \\/>\\nUse packet metadata filter expression to match packets against descriptive information about the packet: interface, process, service type or direction.<\\/p>\\n<pre><code>   Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces supporting the PKTAP data link type.\\n\\n   The syntax supports the following operators:\\n\\n          or     logical or\\n          and    logical and\\n          not    negation\\n          (...)  to group sub-expressions\\n          =      is equal\\n          !=     is not equal\\n          ||     logical or (alternate)\\n          &amp;&amp;     logical and (alternate)\\n          !      negation (alternate)\\n\\n   The syntax support the following keywords to denote which of packet metadata contents is to be compared:\\n\\n          if     interface name\\n          proc   process name\\n          pid    process ID\\n          svc    service class\\n          dir    direction\\n          eproc  effective process name\\n          epid   effective process ID\\n\\n   For example to filter packets from interface en0 \\"sent\\" by the process named \\"nc\\" or incoming packet not on interface en0:\\n\\n          -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n   Note that a complex packet metadata filter expression needs to be put in quotes as the option -Q takes a single string parameter.<\\/code><\\/pre>\\n<p>SEE ALSO<br \\/>\\nstty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)<\\/p>\\n<pre><code>          http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap<\\/code><\\/pre>\\n<p>AUTHORS<br \\/>\\nThe original authors are:<\\/p>\\n<pre><code>   Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley National Laboratory, University of California, Berkeley, CA.\\n\\n   It is currently being maintained by tcpdump.org.\\n\\n   The current version is available via http:\\n\\n          https:\\/\\/www.tcpdump.org\\/\\n\\n   The original distribution is available via anonymous ftp:\\n\\n          ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n   IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library, under specific configurations.<\\/code><\\/pre>\\n<p>BUGS<br \\/>\\nTo report a security issue please send an e-mail to security@tcpdump.org.<\\/p>\\n<pre><code>   To report bugs and other problems, contribute patches, request a feature, provide generic feedback etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n   NIT doesn\'t let you watch your own outbound traffic, BPF will.  We recommend that you use the latter.\\n\\n   On Linux systems with 2.0[.x] kernels:\\n\\n          packets on the loopback device will be seen twice;<\\/code><\\/pre>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                    TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the<br \\/>\\nboolean expression; the description is preceded by a time stamp, printed, by default,  as  hours,<br \\/>\\nminutes, seconds, and fractions of a second since midnight.  It can also be run with the -w flag,<br \\/>\\nwhich causes it to save the packet data to a file for later analysis, and\\/or with  the  -r  flag,<br \\/>\\nwhich  causes  it  to  read  from  a saved packet file rather than to read packets from a network<br \\/>\\ninterface.  It can also be run with the -V flag, which causes it to read a list of  saved  packet<br \\/>\\nfiles. In all cases, only packets that match expression will be processed by tcpdump.<\\/p>\\n<pre><code>   Tcpdump  will, if not run with the -c flag, continue capturing packets until it is interrupted by\\n   a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C)\\n   or  a  SIGTERM signal (typically generated with the kill(1) command); if run with the -c flag, it\\n   will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified  num-\\n   ber of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets  ``captured\'\'  (this  is  the number of packets that tcpdump has received and pro-\\n          cessed);\\n\\n          packets ``received by filter\'\' (the meaning of this depends on the OS on which you\'re run-\\n          ning tcpdump, and possibly on the way the OS was configured - if a filter was specified on\\n          the command line, on some OSes it counts packets regardless of whether they  were  matched\\n          by  the filter expression and, even if they were matched by the filter expression, regard-\\n          less of whether tcpdump has read and processed them yet, on  other  OSes  it  counts  only\\n          packets  that were matched by the filter expression regardless of whether tcpdump has read\\n          and processed them yet, and on other OSes it counts only packets that were matched by  the\\n          filter expression and were processed by tcpdump);\\n\\n          packets  ``dropped  by kernel\'\' (this is the number of packets that were dropped, due to a\\n          lack of buffer space, by the packet capture mechanism in the OS on which tcpdump  is  run-\\n          ning,  if  the OS reports that information to applications; if not, it will be reported as\\n          0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS  X)  and  Digi-\\n   tal\\/Tru64  UNIX,  it  will  report those counts when it receives a SIGINFO signal (generated, for\\n   example, by typing your ``status\'\' character, typically control-T, although  on  some  platforms,\\n   such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1)\\n   in order to use it) and will continue capturing packets. On platforms that  do  not  support  the\\n   SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading  packets  from  a network interface may require that you have special privileges; see the<\\/code><\\/pre>\\n<p>:...skipping...<br \\/>\\nTCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size<\\/code><\\/pre>\\n<p>TCPDUMP(1)                                                                                                                                                                                                                TCPDUMP(1)<\\/p>\\n<p>NAME<br \\/>\\ntcpdump - dump traffic on a network<\\/p>\\n<p>SYNOPSIS<br \\/>\\ntcpdump [ -AbdDefhHIJKlLnNOpqStuUvxX# ] [ -B buffer_size ]<br \\/>\\n[ -c count ]<br \\/>\\n[ -C file_size ] [ -G rotate_seconds ] [ -F file ]<br \\/>\\n[ -i interface ] [ -j tstamp_type ] [ -k (metadata_arg) ]<br \\/>\\n[ -m module ] [ -M secret ]<br \\/>\\n[ --number ] [ -Q in|out|inout ]<br \\/>\\n[ -r file ] [ -V file ] [ -s snaplen ] [ -T type ] [ -w file ]<br \\/>\\n[ -W filecount ]<br \\/>\\n[ -E spi@ipaddr algo:secret,...  ]<br \\/>\\n[ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]<br \\/>\\n[ -Q packet-metadata-filter ] [ -Q in|out|inout ]<br \\/>\\n[ --time-stamp-precision=tstamp_precision ]<br \\/>\\n[ --immediate-mode ] [ --version ]<br \\/>\\n[ expression ]<\\/p>\\n<p>DESCRIPTION<br \\/>\\nTcpdump prints out a description of the contents of packets on a network interface that match the boolean expression; the description is preceded by a time stamp, printed, by default, as hours, minutes, seconds, and frac-<br \\/>\\ntions of a second since midnight.  It can also be run with the -w flag, which causes it to save the packet data to a file for later analysis, and\\/or with the -r flag, which causes it to  read  from  a  saved  packet  file<br \\/>\\nrather  than to read packets from a network interface.  It can also be run with the -V flag, which causes it to read a list of saved packet files. In all cases, only packets that match expression will be processed by tcp-<br \\/>\\ndump.<\\/p>\\n<pre><code>   Tcpdump will, if not run with the -c flag, continue capturing packets until it is interrupted by a SIGINT signal (generated, for example, by typing your interrupt character, typically control-C) or a SIGTERM signal (typi-\\n   cally generated with the kill(1) command); if run with the -c flag, it will capture packets until it is interrupted by a SIGINT or SIGTERM signal or the specified number of packets have been processed.\\n\\n   When tcpdump finishes capturing packets, it will report counts of:\\n\\n          packets ``captured\'\' (this is the number of packets that tcpdump has received and processed);\\n\\n          packets  ``received by filter\'\' (the meaning of this depends on the OS on which you\'re running tcpdump, and possibly on the way the OS was configured - if a filter was specified on the command line, on some OSes it\\n          counts packets regardless of whether they were matched by the filter expression and, even if they were matched by the filter expression, regardless of whether tcpdump has read and processed them yet, on other  OSes\\n          it  counts  only packets that were matched by the filter expression regardless of whether tcpdump has read and processed them yet, and on other OSes it counts only packets that were matched by the filter expression\\n          and were processed by tcpdump);\\n\\n          packets ``dropped by kernel\'\' (this is the number of packets that were dropped, due to a lack of buffer space, by the packet capture mechanism in the OS on which tcpdump is running, if the OS reports that  informa-\\n          tion to applications; if not, it will be reported as 0).\\n\\n   On platforms that support the SIGINFO signal, such as most BSDs (including Mac OS X) and Digital\\/Tru64 UNIX, it will report those counts when it receives a SIGINFO signal (generated, for example, by typing your ``status\'\'\\n   character, typically control-T, although on some platforms, such as Mac OS X, the ``status\'\' character is not set by default, so you must set it with stty(1) in order to use it) and will  continue  capturing  packets.  On\\n   platforms that do not support the SIGINFO signal, the same can be achieved by using the SIGUSR1 signal.\\n\\n   Reading packets from a network interface may require that you have special privileges; see the pcap (3PCAP) man page for details.  Reading a saved packet file doesn\'t require special privileges.<\\/code><\\/pre>\\n<p>OPTIONS<br \\/>\\n-A     Print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.<\\/p>\\n<pre><code>   -b     Print the AS number in BGP packets in ASDOT notation rather than ASPLAIN notation.\\n\\n   -B buffer_size\\n   --buffer-size=buffer_size\\n          Set the operating system capture buffer size to buffer_size, in units of KiB (1024 bytes).\\n\\n   -c count\\n   -c skip,count\\n          Exit after receiving or displaying count packets.\\n\\n          The second form allows to pass the number of initial packets to ignore with the skip parameter. The skip parameter is required before the comma but the count parameters is optional after the comma.\\n\\n   -C file_size\\n          Before writing a raw packet to a savefile, check whether the file is currently larger than file_size and, if so, close the current savefile and open a new one.  Savefiles after the first savefile will have the name\\n          specified with the -w flag, with a number after it, starting at 1 and continuing upward.  The units of file_size are millions of bytes (1,000,000 bytes, not 1,048,576 bytes).\\n\\n   -d     Dump the compiled packet-matching code in a human readable form to standard output and stop.\\n\\n   -dd    Dump packet-matching code as a C program fragment.\\n\\n   -ddd   Dump packet-matching code as decimal numbers (preceded with a count).\\n\\n   -D\\n   --list-interfaces\\n          Print the list of the network interfaces available on the system and on which tcpdump can capture packets.  For each network interface, a number and an interface name, possibly followed by a text description of the\\n          interface, is printed.  The interface name or the number can be supplied to the -i flag to specify an interface on which to capture.\\n\\n          This  can  be  useful  on systems that don\'t have a command to list them (e.g., Windows systems, or UNIX systems lacking ifconfig -a); the number can be useful on Windows 2000 and later systems, where the interface\\n          name is a somewhat complex string.\\n\\n          The -D flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_findalldevs() function.\\n\\n   -e     Print the link-level header on each dump line.  This can be used, for example, to print MAC layer addresses for protocols such as Ethernet and IEEE 802.11.\\n\\n   -E     Use spi@ipaddr algo:secret for decrypting IPsec ESP packets that are addressed to addr and contain Security Parameter Index value spi. This combination may be repeated with comma or newline separation.\\n\\n          Note that setting the secret for IPv4 ESP packets is supported at this time.\\n\\n          Algorithms may be des-cbc, 3des-cbc, blowfish-cbc, rc3-cbc, cast128-cbc, or none.  The default is des-cbc.  The ability to decrypt packets is only present if tcpdump was compiled with cryptography enabled.\\n\\n          secret is the ASCII text for ESP secret key.  If preceded by 0x, then a hex value will be read.\\n\\n          The option assumes RFC2406 ESP, not RFC1827 ESP.  The option is only for debugging purposes, and the use of this option with a true `secret\' key is discouraged.  By presenting IPsec secret key onto command line you\\n          make it visible to others, via ps(1) and other occasions.\\n\\n          In  addition to the above syntax, the syntax file name may be used to have tcpdump read the provided file in. The file is opened upon receiving the first ESP packet, so any special permissions that tcpdump may have\\n          been given should already have been given up.\\n\\n   -f     Print `foreign\' IPv4 addresses numerically rather than symbolically (this option is intended to get around serious brain damage in Sun\'s NIS server -- usually it hangs forever translating  non-local  internet  num-\\n          bers).\\n\\n          The  test for `foreign\' IPv4 addresses is done using the IPv4 address and netmask of the interface on which capture is being done.  If that address or netmask are not available, available, either because the inter-\\n          face on which capture is being done has no address or netmask or because the capture is being done on the Linux \\"any\\" interface, which can capture on more than one interface, this option will not work correctly.\\n\\n   -F file\\n          Use file as input for the filter expression.  An additional expression given on the command line is ignored.\\n\\n   -g     Do not insert line break after IP header in verbose mode for easier parsing.\\n\\n   -G rotate_seconds\\n          If specified, rotates the dump file specified with the -w option every rotate_seconds seconds.  Savefiles will have the name specified by -w which should include a time format as defined by strftime(3).  If no time\\n          format is specified, each new file will overwrite the previous.\\n\\n          If used in conjunction with the -C option, filenames will take the form of `file&lt;count&gt;\'.\\n\\n   -h\\n   --help Print the tcpdump and libpcap version strings, print a usage message, and exit.\\n\\n   --version\\n          Print the tcpdump and libpcap version strings and exit.\\n\\n   -H     Attempt to detect 802.11s draft mesh headers.\\n\\n   -i interface\\n   --interface=interface\\n          Listen on interface.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument.\\n\\n          On  Darwin  systems  version  13 or later, when the interface is unspecified, tcpdump will use a pseudo interface to capture packets on a set of interfaces determined by the kernel (excludes by default loopback and\\n          tunnel interfaces).\\n\\n          Alternatively, to capture on more than one interface at a time, one may use \\"pktap\\" as the interface parameter followed by an optional list of comma separated interface names to include.  For example, to capture on\\n          the loopback and en0 interface:\\n\\n                 tcpdump -i pktap,lo0,en0\\n\\n          An interface argument of \\"all\\" or \\"pktap,all\\" can be used to capture packets from all interfaces, including loopback and tunnel interfaces.\\n\\n          A  pktap  pseudo interface provides for packet metadata using the default PKTAP data link type and files are written in the Pcap-ng file format.  The RAW data link type must be used to force to use the legacy pcap-\\n          savefile(5) file format with a ptkap pseudo interface.  Note that captures on a ptkap pseudo interface will not be done in promiscuous mode.\\n\\n          An interface argument of \\"iptap\\" can be used to capture packets from at the IP layer.  This capture packets as they are passed to the input and output routines of the IPv4 and IPv6 protocol handlers of the network-\\n          ing stack.  Note that captures will not be done in promiscuous mode.\\n\\n          If the -D flag is supported, an interface number as printed by that flag can be used as the interface argument, if no interface on the system has that number as a name.\\n\\n   -I\\n   --monitor-mode\\n          Put the interface in \\"monitor mode\\"; this is supported only on IEEE 802.11 Wi-Fi interfaces, and supported only on some operating systems.\\n\\n          Note that in monitor mode the adapter might disassociate from the network with which it\'s associated, so that you will not be able to use any wireless networks with that adapter.  This could prevent accessing files\\n          on a network server, or resolving host names or network addresses, if you are capturing in monitor mode and are not connected to another network with another adapter.\\n\\n          This flag will affect the output of the -L flag.  If -I isn\'t specified, only those link-layer types available when not in monitor mode will be shown; if -I is specified, only those link-layer types available  when\\n          in monitor mode will be shown.\\n\\n   --immediate-mode\\n          Capture  in \\"immediate mode\\".  In this mode, packets are delivered to tcpdump as soon as they arrive, rather than being buffered for efficiency.  This is the default when printing packets rather than saving packets\\n          to a ``savefile\'\' if the packets are being printed to a terminal rather than to a file or pipe.\\n\\n   -j tstamp_type\\n   --time-stamp-type=tstamp_type\\n          Set the time stamp type for the capture to tstamp_type.  The names to use for the time stamp types are given in pcap-tstamp(7); not all the types listed there will necessarily be valid for any given interface.\\n\\n   -J\\n   --list-time-stamp-types\\n          List the supported time stamp types for the interface and exit.  If the time stamp type cannot be set for the interface, no time stamp types are listed.\\n\\n   --time-stamp-precision=tstamp_precision\\n          When capturing, set the time stamp precision for the capture to tstamp_precision.  Note that availability of high precision time stamps (nanoseconds) and their actual accuracy is platform  and  hardware  dependent.\\n          Also  note that when writing captures made with nanosecond accuracy to a savefile, the time stamps are written with nanosecond resolution, and the file is written with a different magic number, to indicate that the\\n          time stamps are in seconds and nanoseconds; not all programs that read pcap savefiles will be able to read those captures.\\n\\n   When reading a savefile, convert time stamps to the precision specified by timestamp_precision, and display them with that resolution.  If the precision specified is less than the precision of time stamps in the file, the\\n   conversion will lose precision.\\n\\n   The supported values for timestamp_precision are micro for microsecond resolution and nano for nanosecond resolution.  The default is microsecond resolution.\\n\\n   -k     Control the display of packet metadata via an optional metadata_arg argument. This is useful when displaying packet saved in the pcap-ng file format or with interfaces that support the PKTAP data link type.\\n\\n          By default, when the metadata_arg optional argument is not specified, any available packet metadata information is printed out.\\n\\n          The metadata_arg argument controls the display of specific packet metadata information using a flag word, where each character corresponds to a type of packet metadata as follows:\\n\\n                 I     interface name (or interface ID)\\n                 N     process name\\n                 P     process ID\\n                 S     service class\\n                 D     direction\\n                 C     comment\\n                 C     flags\\n                 U     process UUID (not shown by default)\\n                 V     verbose printf of pcap-ng blocks (not shown by default)\\n                 A     display all types of metadata\\n\\n          This is an Apple modification.\\n\\n   -K\\n   --dont-verify-checksums\\n          Don\'t attempt to verify IP, TCP, or UDP checksums.  This is useful for interfaces that perform some or all of those checksum calculation in hardware; otherwise, all outgoing TCP checksums will be flagged as bad.\\n\\n          The option also suppresses truncated bytes missing warnings for ip and ip6 (Apple modification).\\n\\n   -l     Make stdout line buffered.  Useful if you want to see the data while capturing it.  E.g.,\\n\\n                 tcpdump -l | tee dat\\n\\n          or\\n\\n                 tcpdump -l &gt; dat &amp; tail -f dat\\n\\n          Note that on Windows,``line buffered\'\' means ``unbuffered\'\', so that WinDump will write each character individually if -l is specified.\\n\\n          -U  is  similar  to -l in its behavior, but it will cause output to be ``packet-buffered\'\', so that the output is written to stdout at the end of each packet rather than at the end of each line; this is buffered on\\n          all platforms, including Windows.\\n\\n   -L\\n   --list-data-link-types\\n          List the known data link types for the interface, in the specified mode, and exit.  The list of known data link types may be dependent on the specified mode; for example, on some platforms, a Wi-Fi interface  might\\n          support  one  set  of  data  link types when not in monitor mode (for example, it might support only fake Ethernet headers, or might support 802.11 headers but not support 802.11 headers with radio information) and\\n          another set of data link types when in monitor mode (for example, it might support 802.11 headers, or 802.11 headers with radio information, only in monitor mode).\\n\\n   -m module\\n          Load SMI MIB module definitions from file module.  This option can be used several times to load several MIB modules into tcpdump.\\n\\n   -M secret\\n          Use secret as a shared secret for validating the digests found in TCP segments with the TCP-MD5 option (RFC 2385), if present.\\n\\n   -n     Don\'t convert addresses (i.e., host addresses, port numbers, etc.) to names.\\n\\n   -N     Don\'t print domain name qualification of host names.  E.g., if you give this flag then tcpdump will print ``nic\'\' instead of ``nic.ddn.mil\'\'.\\n\\n   -#\\n   --number\\n          Print an optional packet number at the beginning of the line.\\n\\n   -O\\n   --no-optimize\\n          Do not run the packet-matching code optimizer.  This is useful only if you suspect a bug in the optimizer.\\n\\n   -P     Use the pcap-ng file format when saving files.  Apple modification.\\n\\n   -p\\n   --no-promiscuous-mode\\n          Don\'t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, `-p\' cannot be used as an abbreviation for `ether  host  {local-hw-addr}  or  ether\\n          broadcast\'.\\n\\n   -Q expression\\n          To  specify  a  filter expression based on packet metadata information like interface or process name.  Packet with matching packet metadata will be displayed or saved to a file.  See section PACKET METADATA FILTER\\n          for the syntax of packet metadata filter expressions.  This is an Apple addition.\\n\\n   -Q direction\\n   --direction=direction\\n          Choose send\\/receive direction direction for which packets should be captured. Possible values are `in\', `out\' and `inout\'. Not available on all platforms.\\n\\n   -q     Quick (quiet?) output.  Print less protocol information so output lines are shorter.\\n\\n   -r file\\n          Read packets from file (which was created with the -w option or by other tools that write pcap or pcap-ng files).  Standard input is used if file is ``-\'\'.\\n\\n   -S\\n   --absolute-tcp-sequence-numbers\\n          Print absolute, rather than relative, TCP sequence numbers.\\n\\n   -s snaplen\\n   --snapshot-length=snaplen\\n          Snarf snaplen bytes of data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]\'\', where proto is the name  of  the\\n          protocol  level  at  which  the  truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes to process packets and, effectively, decreases the amount of packet buffering.\\n          This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you\'re interested in.  Setting snaplen to 0 sets it to the default of 262144, for back-\\n          wards compatibility with recent older versions of tcpdump.\\n\\n   -T type\\n          Force  packets selected by \\"expression\\" to be interpreted the specified type.  Currently known types are aodv (Ad-hoc On-demand Distance Vector protocol), carp (Common Address Redundancy Protocol), cnfp (Cisco Net-\\n          Flow protocol), lmp (Link Management Protocol), pgm (Pragmatic General Multicast), pgm_zmtp1 (ZMTP\\/1.0 inside PGM\\/EPGM), resp (REdis Serialization Protocol), radius (RADIUS), rpc (Remote Procedure Call), rtp (Real-\\n          Time  Applications protocol), rtcp (Real-Time Applications control protocol), snmp (Simple Network Management Protocol), tftp (Trivial File Transfer Protocol), vat (Visual Audio Tool), wb (distributed White Board),\\n          zmtp1 (ZeroMQ Message Transport Protocol 1.0) and vxlan (Virtual eXtensible Local Area Network).\\n\\n          Note that the pgm type above affects UDP interpretation only, the native PGM is always recognised as IP protocol 113 regardless. UDP-encapsulated PGM is often called \\"EPGM\\" or \\"PGM\\/UDP\\".\\n\\n          Note that the pgm_zmtp1 type above affects interpretation of both native PGM and UDP at once. During the native PGM decoding the application data of an ODATA\\/RDATA packet would be decoded as a ZeroMQ datagram  with\\n          ZMTP\\/1.0 frames.  During the UDP decoding in addition to that any UDP packet would be treated as an encapsulated PGM packet.\\n\\n          Additional dissectors for non registered UDP protocols: iperf (iperf 2.x), iperf3 (iperf 3.x), iperf3-64 (iperf 3.x with 64 bits packet ID), suttp (Simple UDP Throughput Test Protocol),\\n\\n   -t     Don\'t print a timestamp on each dump line.\\n\\n   -tt    Print the timestamp, as seconds since January 1, 1970, 00:00:00, UTC, and fractions of a second since that time, on each dump line.\\n\\n   -ttt   Print a delta (micro-second resolution) between current and previous line on each dump line.\\n\\n   -tttt  Print a timestamp, as hours, minutes, seconds, and fractions of a second since midnight, preceded by the date, on each dump line.\\n\\n   -ttttt Print a delta (micro-second resolution) between current and first line on each dump line.\\n\\n   -t n   An alternate form for specifying the kind of timestamp display where n is a number between 0 and 5 with the following meaning:\\n\\n                 0     time\\n                 1     no time\\n                 2     unformatted timestamp\\n                 3     microseconds since previous line\\n                 4     date and time\\n                 5     microseconds since first line\\n\\n          This option may be specified more than once to display more than one kind of timestamp on each dump line.\\n\\n   --time-zone-offset tz\\n          To set the time zone where the packet capture file was saved. This allows the timestamps to be displayed in the local time where and when the file was capture instead of the current local time.\\n\\n          The argument tz is a signed integer in hours from GMT. The number can also be specified with the suffix m for minutes or with the suffix s for seconds.  The GMT and UTC notation, for example GMT-8.\\n\\n   -u     Print undecoded NFS handles.\\n\\n   -U\\n   --packet-buffered\\n          If  the  -w  option  is not specified, make the printed packet output ``packet-buffered\'\'; i.e., as the description of the contents of each packet is printed, it will be written to the standard output, rather than,\\n          when not writing to a terminal, being written only when the output buffer fills.\\n\\n          If the -w option is specified, make the saved raw packet output ``packet-buffered\'\'; i.e., as each packet is saved, it will be written to the output file, rather than being  written  only  when  the  output  buffer\\n          fills.\\n\\n          The -U flag will not be supported if tcpdump was built with an older version of libpcap that lacks the pcap_dump_flush() function.\\n\\n   -v     When  parsing  and  printing,  produce (slightly more) verbose output.  For example, the time to live, identification, total length and options in an IP packet are printed.  Also enables additional packet integrity\\n          checks such as verifying the IP and ICMP header checksum.\\n\\n          When writing to a file with the -w option, report, every 10 seconds, the number of packets captured.\\n\\n   -vv    Even more verbose output.  For example, additional fields are printed from NFS reply packets, and SMB packets are fully decoded.\\n\\n   -vvv   Even more verbose output.  For example, telnet SB ... SE options are printed in full.  With -X Telnet options are printed in hex as well.\\n\\n   -V file\\n          Read a list of filenames from file. Standard input is used if file is ``-\'\'.\\n\\n   -w file\\n          Write the raw packets to file rather than parsing and printing them out.  They can later be printed with the -r option.  Standard output is used if file is ``-\'\'.\\n\\n          This output will be buffered if written to a file or pipe, so a program reading from the file or pipe may not see packets for an arbitrary amount of time after they are received.  Use the -U flag to  cause  packets\\n          to be written as soon as they are received.\\n\\n          The  MIME type application\\/vnd.tcpdump.pcap has been registered with IANA for pcap files. The filename extension .pcap appears to be the most commonly used along with .cap and .dmp. Tcpdump itself doesn\'t check the\\n          extension when reading capture files and doesn\'t add an extension when writing them (it uses magic numbers in the file header instead). However, many operating systems and applications will use the extension if  it\\n          is present and adding one (e.g. .pcap) is recommended.\\n\\n          See pcap-savefile(5) for a description of the file format.\\n\\n   -W     Used  in conjunction with the -C option, this will limit the number of files created to the specified number, and begin overwriting files from the beginning, thus creating a \'rotating\' buffer.  In addition, it will\\n          name the files with enough leading 0s to support the maximum number of files, allowing them to sort correctly.\\n\\n          Used in conjunction with the -G option, this will limit the number of rotated dump files that get created, exiting with status 0 when reaching the limit. If used with -C as well, the behavior will result in  cycli-\\n          cal files per timeslice.\\n\\n   -x     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex.  The smaller of the entire packet or snaplen bytes will be printed.\\n          Note that this is the entire link-layer packet, so for link layers that pad (e.g. Ethernet), the padding bytes will also be printed when the higher layer packet is shorter than the required padding.\\n\\n   -xx    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex.\\n\\n   -X     When parsing and printing, in addition to printing the headers of each packet, print the data of each packet (minus its link level header) in hex and ASCII.  This is very handy for analysing new protocols.\\n\\n   -XX    When parsing and printing, in addition to printing the headers of each packet, print the data of each packet, including its link level header, in hex and ASCII.\\n\\n   -y datalinktype\\n   --linktype=datalinktype\\n          Set the data link type to use while capturing packets to datalinktype.\\n\\n   -z postrotate-command\\n          Used in conjunction with the -C or -G options, this will make tcpdump run \\" postrotate-command file \\" where file is the savefile being closed after each rotation. For example, specifying -z gzip or  -z  bzip2  will\\n          compress each savefile using gzip or bzip2.\\n\\n          Note that tcpdump will run the command in parallel to the capture, using the lowest priority so that this doesn\'t disturb the capture process.\\n\\n          And  in  case  you  would  like to use a command that itself takes flags or different arguments, you can always write a shell script that will take the savefile name as the only argument, make the flags &amp; arguments\\n          arrangements and execute the command that you want.\\n\\n   -Z user\\n   --relinquish-privileges=user\\n          If tcpdump is running as root, after opening the capture device or input savefile, but before opening any savefiles for output, change the user ID to user and the group ID to the primary group of user.\\n\\n          This behavior can also be enabled by default at compile time.\\n\\n    expression\\n          selects which packets will be dumped.  If no expression is given, all packets on the net will be dumped.  Otherwise, only packets for which expression is `true\' will be dumped.\\n\\n          For the expression syntax, see pcap-filter(7).\\n\\n          The expression argument can be passed to tcpdump as either a single Shell argument, or as multiple Shell arguments, whichever is more convenient.  Generally, if the expression contains Shell metacharacters, such as\\n          backslashes  used to escape protocol names, it is easier to pass it as a single, quoted argument rather than to escape the Shell metacharacters.  Multiple arguments are concatenated with spaces before being parsed.<\\/code><\\/pre>\\n<p>EXAMPLES<br \\/>\\nTo print all packets arriving at or departing from sundown:<br \\/>\\ntcpdump host sundown<\\/p>\\n<pre><code>   To print traffic between helios and either hot or ace:\\n          tcpdump host helios and \\\\( hot or ace \\\\)\\n\\n   To print all IP packets between ace and any host except helios:\\n          tcpdump ip host ace and not helios\\n\\n   To print all traffic between local hosts and hosts at Berkeley:\\n          tcpdump net ucb-ether\\n\\n   To print all ftp traffic through internet gateway snup: (note that the expression is quoted to prevent the shell from (mis-)interpreting the parentheses):\\n          tcpdump \'gateway snup and (port ftp or ftp-data)\'\\n\\n   To print traffic neither sourced from nor destined for local hosts (if you gateway to one other net, this stuff should never make it onto your local net).\\n          tcpdump ip and not net localnet\\n\\n   To print the start and end packets (the SYN and FIN packets) of each TCP conversation that involves a non-local host.\\n          tcpdump \'tcp[tcpflags] &amp; (tcp-syn|tcp-fin) != 0 and not src and dst net localnet\'\\n\\n   To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and ACK-only packets.  (IPv6 is left as an exercise for the reader.)\\n          tcpdump \'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)\'\\n\\n   To print IP packets longer than 576 bytes sent through gateway snup:\\n          tcpdump \'gateway snup and ip[2:2] &gt; 576\'\\n\\n   To print IP broadcast or multicast packets that were not sent via Ethernet broadcast or multicast:\\n          tcpdump \'ether[0] &amp; 1 = 0 and ip[16] &gt;= 224\'\\n\\n   To print all ICMP packets that are not echo requests\\/replies (i.e., not ping packets):\\n          tcpdump \'icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply\'<\\/code><\\/pre>\\n<p>OUTPUT FORMAT<br \\/>\\nThe output of tcpdump is protocol dependent.  The following gives a brief description and examples of most of the formats.<\\/p>\\n<pre><code>   Timestamps\\n\\n   By default, all output lines are preceded by a timestamp.  The timestamp is the current clock time in the form\\n          hh:mm:ss.frac\\n   and is as accurate as the kernel\'s clock.  The timestamp reflects the time the kernel applied a time stamp to the packet.  No attempt is made to account for the time lag between when the network interface finished receiv-\\n   ing  the packet from the network and when the kernel applied a time stamp to the packet; that time lag could include a delay between the time when the network interface finished receiving a packet from the network and the\\n   time when an interrupt was delivered to the kernel to get it to read the packet and a delay between the time when the kernel serviced the `new packet\' interrupt and the time when it applied a time stamp to the packet.\\n\\n   Link Level Headers\\n\\n   If the \'-e\' option is given, the link level header is printed out.  On Ethernets, the source and destination addresses, protocol, and packet length are printed.\\n\\n   On FDDI networks, the  \'-e\' option causes tcpdump to print the `frame control\' field,  the source and destination addresses, and the packet length.  (The `frame control\' field governs the interpretation of the rest of the\\n   packet.   Normal  packets (such as those containing IP datagrams) are `async\' packets, with a priority value between 0 and 7; for example, `async4\'.  Such packets are assumed to contain an 802.2 Logical Link Control (LLC)\\n   packet; the LLC header is printed if it is not an ISO datagram or a so-called SNAP packet.\\n\\n   On Token Ring networks, the \'-e\' option causes tcpdump to print the `access control\' and `frame control\' fields, the source and destination addresses, and the packet length.  As on FDDI networks, packets  are  assumed  to\\n   contain an LLC packet.  Regardless of whether the \'-e\' option is specified or not, the source routing information is printed for source-routed packets.\\n\\n   On 802.11 networks, the \'-e\' option causes tcpdump to print the `frame control\' fields, all of the addresses in the 802.11 header, and the packet length.  As on FDDI networks, packets are assumed to contain an LLC packet.\\n\\n   (N.B.: The following description assumes familiarity with the SLIP compression algorithm described in RFC-1144.)\\n\\n   On SLIP links, a direction indicator (``I\'\' for inbound, ``O\'\' for outbound), packet type, and compression information are printed out.  The packet type is printed first.  The three types are ip, utcp, and ctcp.  No  fur-\\n   ther  link  information is printed for ip packets.  For TCP packets, the connection identifier is printed following the type.  If the packet is compressed, its encoded header is printed out.  The special cases are printed\\n   out as *S+n and *SA+n, where n is the amount by which the sequence number (or sequence number and ack) has changed.  If it is not a special case, zero or more changes are printed.  A  change  is  indicated  by  U  (urgent\\n   pointer), W (window), A (ack), S (sequence number), and I (packet ID), followed by a delta (+n or -n), or a new value (=n).  Finally, the amount of data in the packet and compressed header length are printed.\\n\\n   For example, the following line shows an outbound compressed TCP packet, with an implicit connection identifier; the ack has changed by 6, the sequence number by 49, and the packet ID by 6; there are 3 bytes of data and 6\\n   bytes of compressed header:\\n          O ctcp * A+6 S+49 I+6 3 (6)\\n\\n   ARP\\/RARP Packets\\n\\n   Arp\\/rarp output shows the type of request and its arguments.  The format is intended to be self explanatory.  Here is a short sample taken from the start of an `rlogin\' from host rtsg to host csam:\\n          arp who-has csam tell rtsg\\n          arp reply csam is-at CSAM\\n   The first line says that rtsg sent an arp packet asking for the Ethernet address of internet host csam.  Csam replies with its Ethernet address (in this example, Ethernet addresses are in caps and  internet  addresses  in\\n   lower case).\\n\\n   This would look less redundant if we had done tcpdump -n:\\n          arp who-has 128.3.254.6 tell 128.3.254.68\\n          arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\\n\\n   If we had done tcpdump -e, the fact that the first packet is broadcast and the second is point-to-point would be visible:\\n          RTSG Broadcast 0806  64: arp who-has csam tell rtsg\\n          CSAM RTSG 0806  64: arp reply csam is-at CSAM\\n   For the first packet this says the Ethernet source address is RTSG, the destination is the Ethernet broadcast address, the type field contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.\\n\\n   IPv4 Packets\\n\\n   If the link-layer header is not being printed, for IPv4 packets, IP is printed after the time stamp.\\n\\n   If the -v flag is specified, information from the IPv4 header is shown in parentheses after the IP or the link-layer header.  The general format of this information is:\\n          tos tos, ttl ttl, id id, offset offset, flags [flags], proto proto, length length, options (options)\\n   tos  is  the type of service field; if the ECN bits are non-zero, those are reported as ECT(1), ECT(0), or CE.  ttl is the time-to-live; it is not reported if it is zero.  id is the IP identification field.  offset is the\\n   fragment offset field; it is printed whether this is part of a fragmented datagram or not.  flags are the MF and DF flags; + is reported if MF is set, and DFP is reported if F is set.  If neither are set, .  is  reported.\\n   proto is the protocol ID field.  length is the total length field.  options are the IP options, if any.\\n\\n   Next,  for TCP and UDP packets, the source and destination IP addresses and TCP or UDP ports, with a dot between each IP address and its corresponding port, will be printed, with a &gt; separating the source and destination.\\n   For other protocols, the addresses will be printed, with a &gt; separating the source and destination.  Higher level protocol information, if any, will be printed after that.\\n\\n   For fragmented IP datagrams, the first fragment contains the higher level protocol header; fragments after the first contain no higher level protocol header.  Fragmentation information will be printed  only  with  the  -v\\n   flag, in the IP header information, as described above.\\n\\n   TCP Packets\\n\\n   (N.B.:The following description assumes familiarity with the TCP protocol described in RFC-793.  If you are not familiar with the protocol, this description will not be of much use to you.)\\n\\n   The general format of a TCP protocol line is:\\n          src &gt; dst: Flags [tcpflags], seq data-seqno, ack ackno, win window, urg urgent, options [opts], length len\\n   Src  and  dst  are  the source and destination IP addresses and ports.  Tcpflags are some combination of S (SYN), F (FIN), P (PUSH), R (RST), U (URG), W (ECN CWR), E (ECN-Echo) or `.\' (ACK), or `none\' if no flags are set.\\n   Data-seqno describes the portion of sequence space covered by the data in this packet (see example below).  Ackno is sequence number of the next data expected the other direction on this connection.  Window is the  number\\n   of bytes of receive buffer space available the other direction on this connection.  Urg indicates there is `urgent\' data in the packet.  Opts are TCP options (e.g., mss 1024).  Len is the length of payload data.\\n\\n   Iptype, Src, dst, and flags are always present.  The other fields depend on the contents of the packet\'s TCP protocol header and are output only if appropriate.\\n\\n   Here is the opening portion of an rlogin from host rtsg to host csam.\\n          IP rtsg.1023 &gt; csam.login: Flags [S], seq 768512:768512, win 4096, opts [mss 1024]\\n          IP csam.login &gt; rtsg.1023: Flags [S.], seq, 947648:947648, ack 768513, win 4096, opts [mss 1024]\\n          IP rtsg.1023 &gt; csam.login: Flags [.], ack 1, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 1:2, ack 1, win 4096, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [.], ack 2, win 4096\\n          IP rtsg.1023 &gt; csam.login: Flags [P.], seq 2:21, ack 1, win 4096, length 19\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 1:2, ack 21, win 4077, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 2:3, ack 21, win 4077, urg 1, length 1\\n          IP csam.login &gt; rtsg.1023: Flags [P.], seq 3:4, ack 21, win 4077, urg 1, length 1\\n   The  first  line  says  that  TCP  port  1023  on  rtsg  sent  a packet to port login on csam.  The S indicates that the SYN flag was set.  The packet sequence number was 768512 and it contained no data.  (The notation is\\n   `first:last\' which means `sequence numbers first up to but not including last.)  There was no piggy-backed ack, the available receive window was 4096 bytes and there was a max-segment-size option requesting an mss of 1024\\n   bytes.\\n\\n   Csam  replies  with a similar packet except it includes a piggy-backed ack for rtsg\'s SYN.  Rtsg then acks csam\'s SYN.  The `.\' means the ACK flag was set.  The packet contained no data so there is no data sequence number\\n   or length.  Note that the ack sequence number is a small integer (1).  The first time tcpdump sees a TCP `conversation\', it prints the sequence number from the packet.  On subsequent packets of the conversation, the  dif-\\n   ference  between the current packet\'s sequence number and this initial sequence number is printed.  This means that sequence numbers after the first can be interpreted as relative byte positions in the conversation\'s data\\n   stream (with the first data byte each direction being `1\').  `-S\' will override this feature, causing the original sequence numbers to be output.\\n\\n   On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20 in the rtsg -&gt; csam side of the conversation).  The PUSH flag is set in the packet.  On the 7th line, csam says it\'s received data sent by rtsg  up  to\\n   but  not  including byte 21.  Most of this data is apparently sitting in the socket buffer since csam\'s receive window has gotten 19 bytes smaller.  Csam also sends one byte of data to rtsg in this packet.  On the 8th and\\n   9th lines, csam sends two bytes of urgent, pushed data to rtsg.\\n\\n   If the snapshot was small enough that tcpdump didn\'t capture the full TCP header, it interprets as much of the header as it can and then reports ``[|tcp]\'\' to indicate the remainder  could  not  be  interpreted.   If  the\\n   header  contains  a  bogus  option (one with a length that\'s either too small or beyond the end of the header), tcpdump reports it as ``[bad opt]\'\' and does not interpret any further options (since it\'s impossible to tell\\n   where they start).  If the header length indicates options are present but the IP datagram length is not long enough for the options to actually be there, tcpdump reports it as ``[bad hdr length]\'\'.\\n\\n   Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)\\n\\n   There are 8 bits in the control bits section of the TCP header:\\n\\n          CWR | ECE | URG | ACK | PSH | RST | SYN | FIN\\n\\n   Let\'s assume that we want to watch packets used in establishing a TCP connection.  Recall that TCP uses a 3-way handshake protocol when it initializes a new connection; the connection sequence with regard to the TCP  con-\\n   trol bits is\\n\\n          1) Caller sends SYN\\n          2) Recipient responds with SYN, ACK\\n          3) Caller sends ACK\\n\\n   Now  we\'re  interested  in capturing packets that have only the SYN bit set (Step 1).  Note that we don\'t want packets from step 2 (SYN-ACK), just a plain initial SYN.  What we need is a correct filter expression for tcp-\\n   dump.\\n\\n   Recall the structure of a TCP header without options:\\n\\n    0                            15                              31\\n   -----------------------------------------------------------------\\n   |          source port          |       destination port        |\\n   -----------------------------------------------------------------\\n   |                        sequence number                        |\\n   -----------------------------------------------------------------\\n   |                     acknowledgment number                     |\\n   -----------------------------------------------------------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   -----------------------------------------------------------------\\n   |         TCP checksum          |       urgent pointer          |\\n   -----------------------------------------------------------------\\n\\n   A TCP header usually holds 20 octets of data, unless options are present.  The first line of the graph contains octets 0 - 3, the second line shows octets 4 - 7 etc.\\n\\n   Starting to count with 0, the relevant TCP control bits are contained in octet 13:\\n\\n    0             7|             15|             23|             31\\n   ----------------|---------------|---------------|----------------\\n   |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |\\n   ----------------|---------------|---------------|----------------\\n   |               |  13th octet   |               |               |\\n\\n   Let\'s have a closer look at octet no. 13:\\n\\n                   |               |\\n                   |---------------|\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |7   5   3     0|\\n\\n   These are the TCP control bits we are interested in.  We have numbered the bits in this octet from 0 to 7, right to left, so the PSH bit is bit number 3, while the URG bit is number 5.\\n\\n   Recall that we want to capture packets with only SYN set.  Let\'s see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:\\n\\n                   |C|E|U|A|P|R|S|F|\\n                   |---------------|\\n                   |0 0 0 0 0 0 1 0|\\n                   |---------------|\\n                   |7 6 5 4 3 2 1 0|\\n\\n   Looking at the control bits section we see that only bit number 1 (SYN) is set.\\n\\n   Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is\\n\\n          00000010\\n\\n   and its decimal representation is\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2\\n\\n   We\'re almost done, because now we know that if only SYN is set, the value of the 13th octet in the TCP header, when interpreted as a 8-bit unsigned integer in network byte order, must be exactly 2.\\n\\n   This relationship can be expressed as\\n          tcp[13] == 2\\n\\n   We can use this expression as the filter for tcpdump in order to watch packets which have only SYN set:\\n          tcpdump -i xl0 tcp[13] == 2\\n\\n   The expression says \\"let the 13th octet of a TCP datagram have the decimal value 2\\", which is exactly what we want.\\n\\n   Now, let\'s assume that we need to capture SYN packets, but we don\'t care if ACK or any other TCP control bit is set at the same time.  Let\'s see what happens to octet 13 when a TCP datagram with SYN-ACK set arrives:\\n\\n        |C|E|U|A|P|R|S|F|\\n        |---------------|\\n        |0 0 0 1 0 0 1 0|\\n        |---------------|\\n        |7 6 5 4 3 2 1 0|\\n\\n   Now bits 1 and 4 are set in the 13th octet.  The binary value of octet 13 is\\n\\n               00010010\\n\\n   which translates to decimal\\n\\n      7     6     5     4     3     2     1     0\\n   0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18\\n\\n   Now we can\'t just use \'tcp[13] == 18\' in the tcpdump filter expression, because that would select only those packets that have SYN-ACK set, but not those with only SYN set.  Remember that we don\'t care if ACK or any other\\n   control bit is set as long as SYN is set.\\n\\n   In  order  to achieve our goal, we need to logically AND the binary value of octet 13 with some other value to preserve the SYN bit.  We know that we want SYN to be set in any case, so we\'ll logically AND the value in the\\n   13th octet with the binary value of a SYN:\\n\\n             00010010 SYN-ACK              00000010 SYN\\n        AND  00000010 (we want SYN)   AND  00000010 (we want SYN)\\n             --------                      --------\\n        =    00000010                 =    00000010\\n\\n   We see that this AND operation delivers the same result regardless whether ACK or another TCP control bit is set.  The decimal representation of the AND value as  well  as  the  result  of  this  operation  is  2  (binary\\n   00000010), so we know that for packets with SYN set the following relation must hold true:\\n\\n          ( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )\\n\\n   This points us to the tcpdump filter expression\\n               tcpdump -i xl0 \'tcp[13] &amp; 2 == 2\'\\n\\n   Some offsets and field values may be expressed as names rather than as numeric values. For example tcp[13] may be replaced with tcp[tcpflags]. The following TCP flag field values are also available: tcp-fin, tcp-syn, tcp-\\n   rst, tcp-push, tcp-act, tcp-urg.\\n\\n   This can be demonstrated as:\\n               tcpdump -i xl0 \'tcp[tcpflags] &amp; tcp-push != 0\'\\n\\n   Note that you should use single quotes or a backslash in the expression to hide the AND (\'&amp;\') special character from the shell.\\n\\n   UDP Packets\\n\\n   UDP format is illustrated by this rwho packet:\\n          actinide.who &gt; broadcast.who: udp 84\\n   This says that port who on host actinide sent a udp datagram to port who on host broadcast, the Internet broadcast address.  The packet contained 84 bytes of user data.\\n\\n   Some UDP services are recognized (from the source or destination port number) and the higher level protocol information printed.  In particular, Domain Name service requests (RFC-1034\\/1035) and Sun RPC calls (RFC-1050) to\\n   NFS.\\n\\n   UDP Name Server Requests\\n\\n   (N.B.:The following description assumes familiarity with the Domain Service protocol described in RFC-1035.  If you are not familiar with the protocol, the following description will appear to be written in greek.)\\n\\n   Name server requests are formatted as\\n          src &gt; dst: id op? flags qtype qclass name (len)\\n          h2opolo.1538 &gt; helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\\n   Host  h2opolo asked the domain server on helios for an address record (qtype=A) associated with the name ucbvax.berkeley.edu.  The query id was `3\'.  The `+\' indicates the recursion desired flag was set.  The query length\\n   was 37 bytes, not including the UDP and IP protocol headers.  The query operation was the normal one, Query, so the op field was omitted.  If the op had been anything else, it would have been printed between the  `3\'  and\\n   the `+\'.  Similarly, the qclass was the normal one, C_IN, and omitted.  Any other qclass would have been printed immediately after the `A\'.\\n\\n   A  few anomalies are checked and may result in extra fields enclosed in square brackets:  If a query contains an answer, authority records or additional records section, ancount, nscount, or arcount are printed as `[na]\',\\n   `[nn]\' or  `[nau]\' where n is the appropriate count.  If any of the response bits are set (AA, RA or rcode) or any of the `must be zero\' bits are set in bytes two and three, `[b2&amp;3=x]\' is printed, where x is the hex value\\n   of header bytes two and three.\\n\\n   UDP Name Server Responses\\n\\n   Name server responses are formatted as\\n          src &gt; dst:  id op rcode flags a\\/n\\/au type class data (len)\\n          helios.domain &gt; h2opolo.1538: 3 3\\/3\\/7 A 128.32.137.3 (273)\\n          helios.domain &gt; h2opolo.1537: 2 NXDomain* 0\\/1\\/0 (97)\\n   In  the  first  example,  helios  responds  to  query  id 3 from h2opolo with 3 answer records, 3 name server records and 7 additional records.  The first answer record is type A (address) and its data is internet address\\n   128.32.137.3.  The total size of the response was 273 bytes, excluding UDP and IP headers.  The op (Query) and response code (NoError) were omitted, as was the class (C_IN) of the A record.\\n\\n   In the second example, helios responds to query 2 with a response code of non-existent domain (NXDomain) with no answers, one name server and no authority records.  The `*\' indicates that the authoritative answer bit  was\\n   set.  Since there were no answers, no type, class or data were printed.\\n\\n   Other flag characters that might appear are `-\' (recursion available, RA, not set) and `|\' (truncated message, TC, set).  If the `question\' section doesn\'t contain exactly one entry, `[nq]\' is printed.\\n\\n   SMB\\/CIFS decoding\\n\\n   tcpdump now includes fairly extensive SMB\\/CIFS\\/NBT decoding for data on UDP\\/137, UDP\\/138 and TCP\\/139.  Some primitive decoding of IPX and NetBEUI SMB data is also done.\\n\\n   By  default  a  fairly  minimal  decode  is done, with a much more detailed decode done if -v is used.  Be warned that with -v a single SMB packet may take up a page or more, so only use -v if you really want all the gory\\n   details.\\n\\n   For information on SMB packet formats and what all the fields mean see www.cifs.org or the pub\\/samba\\/specs\\/  directory  on  your  favorite  samba.org  mirror  site.   The  SMB  patches  were  written  by  Andrew  Tridgell\\n   (tridge@samba.org).\\n\\n   NFS Requests and Replies\\n\\n   Sun NFS (Network File System) requests and replies are printed as:\\n          src.sport &gt; dst.nfs: NFS request xid xid len op args\\n          src.nfs &gt; dst.dport: NFS reply xid xid reply stat len op results\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 26377\\n               112 readlink fh 21,24\\/10.73165\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 26377\\n               reply ok 40 readlink \\"..\\/var\\"\\n          sushi.1022 &gt; wrl.nfs: NFS request xid 8219\\n               144 lookup fh 9,74\\/4096.6878 \\"xcolors\\"\\n          wrl.nfs &gt; sushi.1022: NFS reply xid 8219\\n               reply ok 128 lookup fh 9,74\\/4134.3150\\n   In  the  first  line,  host  sushi  sends  a  transaction  with  id  26377  to  wrl.   The  request  was  112 bytes, excluding the UDP and IP headers.  The operation was a readlink (read symbolic link) on file handle (fh)\\n   21,24\\/10.731657119.  (If one is lucky, as in this case, the file handle can be interpreted as a major,minor device number pair, followed by the inode number and generation number.) In the second  line,  wrl  replies  `ok\'\\n   with the same transaction id and the contents of the link.\\n\\n   In the third line, sushi asks (using a new transaction id) wrl to lookup the name `xcolors\' in directory file 9,74\\/4096.6878. In the fourth line, wrl sends a reply with the respective transaction id.\\n\\n   Note that the data printed depends on the operation type.  The format is intended to be self explanatory if read in conjunction with an NFS protocol spec.  Also note that older versions of tcpdump printed NFS packets in a\\n   slightly different format: the transaction id (xid) would be printed instead of the non-NFS port number of the packet.\\n\\n   If the -v (verbose) flag is given, additional information is printed.  For example:\\n          sushi.1023 &gt; wrl.nfs: NFS request xid 79658\\n               148 read fh 21,11\\/12.195 8192 bytes @ 24576\\n          wrl.nfs &gt; sushi.1023: NFS reply xid 79658\\n               reply ok 1472 read REG 100664 ids 417\\/0 sz 29388\\n   (-v also prints the IP header TTL, ID, length, and fragmentation fields, which have been omitted from this example.)  In the first line, sushi asks wrl to read 8192 bytes from file 21,11\\/12.195, at byte offset 24576.  Wrl\\n   replies `ok\'; the packet shown on the second line is the first fragment of the reply, and hence is only 1472 bytes long (the other bytes will follow in subsequent fragments, but these fragments do not have NFS or even UDP\\n   headers and so might not be printed, depending on the filter expression used).  Because the -v flag is given, some of the file attributes (which are returned in addition to the  file  data)  are  printed:  the  file  type\\n   (``REG\'\', for regular file), the file mode (in octal), the uid and gid, and the file size.\\n\\n   If the -v flag is given more than once, even more details are printed.\\n\\n   Note that NFS requests are very large and much of the detail won\'t be printed unless snaplen is increased.  Try using `-s 192\' to watch NFS traffic.\\n\\n   NFS  reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the transaction ID.  If a reply does not closely follow the cor-\\n   responding request, it might not be parsable.\\n\\n   AFS Requests and Replies\\n\\n   Transarc AFS (Andrew File System) requests and replies are printed as:\\n\\n          src.sport &gt; dst.dport: rx packet-type\\n          src.sport &gt; dst.dport: rx packet-type service call call-name args\\n          src.sport &gt; dst.dport: rx packet-type service reply call-name args\\n          elvis.7001 &gt; pike.afsfs:\\n               rx data fs call rename old fid 536876964\\/1\\/1 \\".newsrc.new\\"\\n               new fid 536876964\\/1\\/1 \\".newsrc\\"\\n          pike.afsfs &gt; elvis.7001: rx data fs reply rename\\n   In the first line, host elvis sends a RX packet to pike.  This was a RX data packet to the fs (fileserver) service, and is the start of an RPC call.  The RPC  call  was  a  rename,  with  the  old  directory  file  id  of\\n   536876964\\/1\\/1  and an old filename of `.newsrc.new\', and a new directory file id of 536876964\\/1\\/1 and a new filename of `.newsrc\'.  The host pike responds with a RPC reply to the rename call (which was successful, because\\n   it was a data packet and not an abort packet).\\n\\n   In general, all AFS RPCs are decoded at least by RPC call name.  Most AFS RPCs have at least some of the arguments decoded (generally only the `interesting\' arguments, for some definition of interesting).\\n\\n   The format is intended to be self-describing, but it will probably not be useful to people who are not familiar with the workings of AFS and RX.\\n\\n   If the -v (verbose) flag is given twice, acknowledgement packets and additional header information is printed, such as the RX call ID, call number, sequence number, serial number, and the RX packet flags.\\n\\n   If the -v flag is given twice, additional information is printed, such as the RX call ID, serial number, and the RX packet flags.  The MTU negotiation information is also printed from RX ack packets.\\n\\n   If the -v flag is given three times, the security index and service id are printed.\\n\\n   Error codes are printed for abort packets, with the exception of Ubik beacon packets (because abort packets are used to signify a yes vote for the Ubik protocol).\\n\\n   Note that AFS requests are very large and many of the arguments won\'t be printed unless snaplen is increased.  Try using `-s 256\' to watch AFS traffic.\\n\\n   AFS reply packets do not explicitly identify the RPC operation.  Instead, tcpdump keeps track of ``recent\'\' requests, and matches them to the replies using the call number and service ID.  If a reply does not closely fol-\\n   low the corresponding request, it might not be parsable.\\n\\n   KIP AppleTalk (DDP in UDP)\\n\\n   AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated and dumped as DDP packets (i.e., all the UDP header information is discarded).  The file \\/etc\\/atalk.names is used to translate AppleTalk net and node\\n   numbers to names.  Lines in this file have the form\\n          number    name\\n\\n          1.254          ether\\n          16.1      icsd-net\\n          1.254.110 ace\\n   The first two lines give the names of AppleTalk networks.  The third line gives the name of a particular host (a host is distinguished from a net by the 3rd octet in the number - a net number must have two  octets  and  a\\n   host number must have three octets.)  The number and name should be separated by whitespace (blanks or tabs).  The \\/etc\\/atalk.names file may contain blank lines or comment lines (lines starting with a `#\').\\n\\n   AppleTalk addresses are printed in the form\\n          net.host.port\\n\\n          144.1.209.2 &gt; icsd-net.112.220\\n          office.2 &gt; icsd-net.112.220\\n          jssmag.149.235 &gt; icsd-net.2\\n   (If  the  \\/etc\\/atalk.names  doesn\'t exist or doesn\'t contain an entry for some AppleTalk host\\/net number, addresses are printed in numeric form.)  In the first example, NBP (DDP port 2) on net 144.1 node 209 is sending to\\n   whatever is listening on port 220 of net icsd node 112.  The second line is the same except the full name of the source node is known (`office\').  The third line is a send from port 235 on net jssmag node 149 to broadcast\\n   on the icsd-net NBP port (note that the broadcast address (255) is indicated by a net name with no host number - for this reason it\'s a good idea to keep node names and net names distinct in \\/etc\\/atalk.names).\\n\\n   NBP  (name  binding protocol) and ATP (AppleTalk transaction protocol) packets have their contents interpreted.  Other protocols just dump the protocol name (or number if no name is registered for the protocol) and packet\\n   size.\\n\\n   NBP packets are formatted like the following examples:\\n          icsd-net.112.220 &gt; jssmag.2: nbp-lkup 190: \\"=:LaserWriter@*\\"\\n          jssmag.209.2 &gt; icsd-net.112.220: nbp-reply 190: \\"RM1140:LaserWriter@*\\" 250\\n          techpit.2 &gt; icsd-net.112.220: nbp-reply 190: \\"techpit:LaserWriter@*\\" 186\\n   The first line is a name lookup request for laserwriters sent by net icsd host 112 and broadcast on net jssmag.  The nbp id for the lookup is 190.  The second line shows a reply for this request (note that it has the same\\n   id)  from  host  jssmag.209 saying that it has a laserwriter resource named \\"RM1140\\" registered on port 250.  The third line is another reply to the same request saying host techpit has laserwriter \\"techpit\\" registered on\\n   port 186.\\n\\n   ATP packet formatting is demonstrated by the following example:\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;0-7&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:0 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:1 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:2 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:4 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:6 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp*12266:7 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-req  12266&lt;3,5&gt; 0xae030001\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000\\n          helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000\\n          jssmag.209.165 &gt; helios.132: atp-rel  12266&lt;0-7&gt; 0xae030001\\n          jssmag.209.133 &gt; helios.132: atp-req* 12267&lt;0-7&gt; 0xae030002\\n   Jssmag.209 initiates transaction id 12266 with host helios by requesting up to 8 packets (the `&lt;0-7&gt;\').  The hex number at the end of the line is the value of the `userdata\' field in the request.\\n\\n   Helios responds with 8 512-byte packets.  The `:digit\' following the transaction id gives the packet sequence number in the transaction and the number in parens is the amount of data  in  the  packet,  excluding  the  atp\\n   header.  The `*\' on packet 7 indicates that the EOM bit was set.\\n\\n   Jssmag.209  then  requests  that  packets  3  &amp; 5 be retransmitted.  Helios resends them then jssmag.209 releases the transaction.  Finally, jssmag.209 initiates the next request.  The `*\' on the request indicates that XO\\n   (`exactly once\') was not set.<\\/code><\\/pre>\\n<p>PACKET METADATA FILTER<br \\/>\\nUse packet metadata filter expression to match packets against descriptive information about the packet: interface, process, service type or direction.<\\/p>\\n<pre><code>   Note this is meaningful only with capture files in the Pcap-ng file format or for interfaces supporting the PKTAP data link type.\\n\\n   The syntax supports the following operators:\\n\\n          or     logical or\\n          and    logical and\\n          not    negation\\n          (...)  to group sub-expressions\\n          =      is equal\\n          !=     is not equal\\n          ||     logical or (alternate)\\n          &amp;&amp;     logical and (alternate)\\n          !      negation (alternate)\\n\\n   The syntax support the following keywords to denote which of packet metadata contents is to be compared:\\n\\n          if     interface name\\n          proc   process name\\n          pid    process ID\\n          svc    service class\\n          dir    direction\\n          eproc  effective process name\\n          epid   effective process ID\\n\\n   For example to filter packets from interface en0 \\"sent\\" by the process named \\"nc\\" or incoming packet not on interface en0:\\n\\n          -Q \\"( if=en0 and proc =nc ) || (if != en0 and dir=in)\\"\\n\\n   Note that a complex packet metadata filter expression needs to be put in quotes as the option -Q takes a single string parameter.<\\/code><\\/pre>\\n<p>SEE ALSO<br \\/>\\nstty(1), pcap(3PCAP), bpf(4), nit(4P), pcap-savefile(5), pcap-filter(7), pcap-tstamp(7)<\\/p>\\n<pre><code>          http:\\/\\/www.iana.org\\/assignments\\/media-types\\/application\\/vnd.tcpdump.pcap<\\/code><\\/pre>\\n<p>AUTHORS<br \\/>\\nThe original authors are:<\\/p>\\n<pre><code>   Van Jacobson, Craig Leres and Steven McCanne, all of the Lawrence Berkeley National Laboratory, University of California, Berkeley, CA.\\n\\n   It is currently being maintained by tcpdump.org.\\n\\n   The current version is available via http:\\n\\n          https:\\/\\/www.tcpdump.org\\/\\n\\n   The original distribution is available via anonymous ftp:\\n\\n          ftp:\\/\\/ftp.ee.lbl.gov\\/old\\/tcpdump.tar.Z\\n\\n   IPv6\\/IPsec support is added by WIDE\\/KAME project.  This program uses Eric Young\'s SSLeay library, under specific configurations.<\\/code><\\/pre>\\n<p>BUGS<br \\/>\\nTo report a security issue please send an e-mail to security@tcpdump.org.<\\/p>\\n<pre><code>   To report bugs and other problems, contribute patches, request a feature, provide generic feedback etc please see the file CONTRIBUTING in the tcpdump source tree root.\\n\\n   NIT doesn\'t let you watch your own outbound traffic, BPF will.  We recommend that you use the latter.\\n\\n   On Linux systems with 2.0[.x] kernels:\\n\\n          packets on the loopback device will be seen twice;\\n\\n          packet filtering cannot be done in the kernel, so that all packets must be copied from the kernel in order to be filtered in user mode;\\n\\n          all of a packet, not just the part that\'s within the snapshot length, will be copied from the kernel (the 2.0[.x] packet capture mechanism, if asked to copy only part of a packet to userland, will  not  report  the\\n          true length of the packet; this would cause most IP packets to get an error from tcpdump);\\n\\n          capturing on some PPP devices won\'t work correctly.\\n\\n   We recommend that you upgrade to a 2.2 or later kernel.\\n\\n   Some attempt should be made to reassemble IP fragments or, at least to compute the right length for the higher level protocol.\\n\\n   Name  server  inverse  queries  are not dumped correctly: the (empty) question section is printed rather than real query in the answer section.  Some believe that inverse queries are themselves a bug and prefer to fix the\\n   program generating them rather than tcpdump.\\n\\n   A packet trace that crosses a daylight savings time change will give skewed time stamps (the time change is ignored).\\n\\n   Filter expressions on fields other than those in Token Ring headers will not correctly handle source-routed Token Ring packets.\\n\\n   Filter expressions on fields other than those in 802.11 headers will not correctly handle 802.11 data packets with both To DS and From DS set.\\n\\n   ip6 proto should chase header chain, but at this moment it does not.  ip6 protochain is supplied for this behavior.\\n\\n   Arithmetic expression against transport layer headers, like tcp[0], does not work against IPv6 packets.  It only looks at IPv4 packets.\\n\\n                                                                                                       2 February 2017                                                                                                TCPDUMP(1)<\\/code><\\/pre>\\n<p>(END)<\\/p>\\n<pre><code>                   |               |\\n                   |---------------|<\\/code><\\/pre>\\n<p>:<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => NULL,
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 48,
                'published_at' => '2021-12-06 13:30:00',
                'created_at' => '2021-12-06 13:33:51',
                'updated_at' => '2022-01-07 12:36:02',
                'deleted_at' => NULL,
            ),
            29 => 
            array (
                'id' => 30,
                'category_id' => 1,
                'collection_id' => 0,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'ruemp',
                'title' => '微习惯',
                'subtitle' => '微习惯',
                'content' => '{"raw":"\\u4e00\\u4e2a\\u4eba\\u6bcf\\u5929\\u7684\\u751f\\u6d3b\\u7531\\u5927\\u5927\\u5c0f\\u5c0f\\u7684\\u4e8b\\u60c5\\u7ec4\\u6210\\uff0c\\u800c\\u4e8b\\u60c5\\u7ec4\\u6210\\u591a\\u79cd\\u591a\\u6837\\uff1a\\n\\n+ \\u751f\\u7406\\u9700\\u6c42\\u7684\\uff0c\\u5403\\u996d\\u3001\\u7761\\u89c9...\\n+ \\u5fc5\\u987b\\u5b8c\\u6210\\u7684\\uff0c\\u5982\\u5de5\\u4f5c\\uff08\\u641b\\u94b1\\u517b\\u5bb6\\uff09\\u3001\\u7ef4\\u62a4\\u4eba\\u9645\\u5173\\u7cfb\\u7684\\u5f80\\u6765\\n+ \\u81ea\\u5df1\\u4e3b\\u52a8\\u521b\\u5efa\\u7684\\u4e8b\\u60c5\\uff0c\\u73a9\\u6e38\\u620f\\u3001\\u5b66\\u4e60...\\u7b49\\u7b49\\u6240\\u6709\\u4f60\\u53ef\\u4ee5\\u81ea\\u52a8\\u652f\\u914d\\u7684\\u65f6\\u95f4\\u91cc\\u521b\\u9020\\u7684\\u4e8b\\u4ef6\\n\\n\\u5176\\u5b9e\\u53ef\\u4ee5\\u5206\\u5f97\\u518d\\u7b80\\u5355\\u70b9\\uff0c\\u4e00\\u79cd\\u662f\\u4e3a\\u4e86\\u66f4\\u597d\\u6d3b\\u7740\\u7684\\u800c\\u5fc5\\u987b\\u505a\\u7684\\u4e8b\\uff1b\\u53e6\\u4e00\\u79cd\\u662f\\u4e0d\\u5f71\\u54cd\\u4f60\\u751f\\u5b58\\u7684\\uff0c\\u4efb\\u7531\\u4f60\\u4e3b\\u5bfc\\u7684\\u4e8b\\uff0c\\u4f60\\u53ef\\u4ee5\\u628a\\u5b83\\u53d8\\u6210\\u524d\\u4e00\\u79cd\\uff0c\\u4e5f\\u53ef\\u4ee5\\u5b8c\\u5168\\u7528\\u4e8e\\u73a9\\u4e50\\u4e0a\\u3002\\u65e5\\u5b50\\u4e00\\u5929\\u5929\\u7684\\u8fc7\\uff0c\\u8bb8\\u591a\\u4e8b\\u60c5\\u6211\\u4eec\\u5728\\u91cd\\u590d\\u7684\\u6267\\u884c\\uff0c\\u7761\\u89c9\\u3001\\u8d77\\u5e8a\\u3001\\u5237\\u7259\\u3001\\u6d17\\u8138\\u3001\\u4e0a\\u73ed\\u3001\\u4e2d\\u5348\\u4f11\\u606f\\u73a9\\u624b\\u673a\\u3001\\u4e0b\\u73ed\\u3001\\u665a\\u4e0a\\u5a31\\u4e50\\u6216\\u8ffd\\u5267\\u3002\\u5728\\u8fd9\\u79cd\\u6734\\u5b9e\\u65e0\\u5e38\\u7684\\u65f6\\u95f4\\u91cc\\uff0c\\u6211\\u4eec\\u4e0d\\u77e5\\u4e0d\\u89c9\\u6709\\u4e86\\u5404\\u79cd\\u89c4\\u5f8b\\u4e0e\\u4e60\\u60ef\\u3002\\u5982\\u679c\\u6211\\u4eec\\u4e0d\\u53bb\\u611f\\u77e5\\u6216\\u7559\\u795e\\uff0c\\u5f80\\u5f80\\u4f1a\\u5ffd\\u89c6\\u65e5\\u5e38\\u4e2d\\u7684\\u751f\\u6d3b\\u89c4\\u5f8b\\u4e0e\\u4e60\\u60ef\\uff0c\\u4e00\\u5207\\u662f\\u5982\\u6b64\\u8fd9\\u822c\\u7684\\u5e73\\u6de1\\u6b63\\u5e38\\uff1b\\u5c31\\u597d\\u6bd4\\u9f3b\\u5b50\\u5bf9\\u4e00\\u822c\\u6c14\\u5473\\u7684\\u9002\\u5e94\\uff0c\\u65f6\\u95f4\\u4e00\\u957f\\u5c31\\u611f\\u77e5\\u4e0d\\u5230\\u6709\\u5b83\\u7684\\u5b58\\u5728\\uff0c\\u53ef\\u5b83\\u8fd8\\u662f\\u771f\\u5b9e\\u5b58\\u5728\\uff0c\\u53ea\\u662f\\u4f60\\u5bf9\\u5b83\\u65e0\\u6cd5\\u611f\\u77e5\\u3002","html":"<p>\\u4e00\\u4e2a\\u4eba\\u6bcf\\u5929\\u7684\\u751f\\u6d3b\\u7531\\u5927\\u5927\\u5c0f\\u5c0f\\u7684\\u4e8b\\u60c5\\u7ec4\\u6210\\uff0c\\u800c\\u4e8b\\u60c5\\u7ec4\\u6210\\u591a\\u79cd\\u591a\\u6837\\uff1a<\\/p>\\n<ul>\\n<li>\\u751f\\u7406\\u9700\\u6c42\\u7684\\uff0c\\u5403\\u996d\\u3001\\u7761\\u89c9...<\\/li>\\n<li>\\u5fc5\\u987b\\u5b8c\\u6210\\u7684\\uff0c\\u5982\\u5de5\\u4f5c\\uff08\\u641b\\u94b1\\u517b\\u5bb6\\uff09\\u3001\\u7ef4\\u62a4\\u4eba\\u9645\\u5173\\u7cfb\\u7684\\u5f80\\u6765<\\/li>\\n<li>\\u81ea\\u5df1\\u4e3b\\u52a8\\u521b\\u5efa\\u7684\\u4e8b\\u60c5\\uff0c\\u73a9\\u6e38\\u620f\\u3001\\u5b66\\u4e60...\\u7b49\\u7b49\\u6240\\u6709\\u4f60\\u53ef\\u4ee5\\u81ea\\u52a8\\u652f\\u914d\\u7684\\u65f6\\u95f4\\u91cc\\u521b\\u9020\\u7684\\u4e8b\\u4ef6<\\/li>\\n<\\/ul>\\n<p>\\u5176\\u5b9e\\u53ef\\u4ee5\\u5206\\u5f97\\u518d\\u7b80\\u5355\\u70b9\\uff0c\\u4e00\\u79cd\\u662f\\u4e3a\\u4e86\\u66f4\\u597d\\u6d3b\\u7740\\u7684\\u800c\\u5fc5\\u987b\\u505a\\u7684\\u4e8b\\uff1b\\u53e6\\u4e00\\u79cd\\u662f\\u4e0d\\u5f71\\u54cd\\u4f60\\u751f\\u5b58\\u7684\\uff0c\\u4efb\\u7531\\u4f60\\u4e3b\\u5bfc\\u7684\\u4e8b\\uff0c\\u4f60\\u53ef\\u4ee5\\u628a\\u5b83\\u53d8\\u6210\\u524d\\u4e00\\u79cd\\uff0c\\u4e5f\\u53ef\\u4ee5\\u5b8c\\u5168\\u7528\\u4e8e\\u73a9\\u4e50\\u4e0a\\u3002\\u65e5\\u5b50\\u4e00\\u5929\\u5929\\u7684\\u8fc7\\uff0c\\u8bb8\\u591a\\u4e8b\\u60c5\\u6211\\u4eec\\u5728\\u91cd\\u590d\\u7684\\u6267\\u884c\\uff0c\\u7761\\u89c9\\u3001\\u8d77\\u5e8a\\u3001\\u5237\\u7259\\u3001\\u6d17\\u8138\\u3001\\u4e0a\\u73ed\\u3001\\u4e2d\\u5348\\u4f11\\u606f\\u73a9\\u624b\\u673a\\u3001\\u4e0b\\u73ed\\u3001\\u665a\\u4e0a\\u5a31\\u4e50\\u6216\\u8ffd\\u5267\\u3002\\u5728\\u8fd9\\u79cd\\u6734\\u5b9e\\u65e0\\u5e38\\u7684\\u65f6\\u95f4\\u91cc\\uff0c\\u6211\\u4eec\\u4e0d\\u77e5\\u4e0d\\u89c9\\u6709\\u4e86\\u5404\\u79cd\\u89c4\\u5f8b\\u4e0e\\u4e60\\u60ef\\u3002\\u5982\\u679c\\u6211\\u4eec\\u4e0d\\u53bb\\u611f\\u77e5\\u6216\\u7559\\u795e\\uff0c\\u5f80\\u5f80\\u4f1a\\u5ffd\\u89c6\\u65e5\\u5e38\\u4e2d\\u7684\\u751f\\u6d3b\\u89c4\\u5f8b\\u4e0e\\u4e60\\u60ef\\uff0c\\u4e00\\u5207\\u662f\\u5982\\u6b64\\u8fd9\\u822c\\u7684\\u5e73\\u6de1\\u6b63\\u5e38\\uff1b\\u5c31\\u597d\\u6bd4\\u9f3b\\u5b50\\u5bf9\\u4e00\\u822c\\u6c14\\u5473\\u7684\\u9002\\u5e94\\uff0c\\u65f6\\u95f4\\u4e00\\u957f\\u5c31\\u611f\\u77e5\\u4e0d\\u5230\\u6709\\u5b83\\u7684\\u5b58\\u5728\\uff0c\\u53ef\\u5b83\\u8fd8\\u662f\\u771f\\u5b9e\\u5b58\\u5728\\uff0c\\u53ea\\u662f\\u4f60\\u5bf9\\u5b83\\u65e0\\u6cd5\\u611f\\u77e5\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '其实可以分得再简单点，一种是为了更好活着的而必须做的事；另一种是不影响你生存的，任由你主导的事，你可以把它变成前一种，也可以完全用于玩乐上。',
                'is_original' => 0,
                'is_draft' => 1,
                'view_count' => 6,
                'published_at' => '2021-12-25 16:00:00',
                'created_at' => '2021-12-25 16:04:07',
                'updated_at' => '2021-12-31 23:08:26',
                'deleted_at' => NULL,
            ),
            30 => 
            array (
                'id' => 31,
                'category_id' => 1,
                'collection_id' => 0,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => '2021-2pkmf',
                'title' => '2021总结',
                'subtitle' => '回望2021，期往2022',
                'content' => '{"raw":"\\u4e0d\\u77e5\\u4f55\\u65f6\\u611f\\u89c9\\u65f6\\u95f4\\u4e00\\u5e74\\u6bd4\\u4e00\\u5e74\\u8fc7\\u5f97\\u5feb\\uff0c\\u65f6\\u95f4\\u662f\\u8fc7\\u53bb\\u4e86\\uff0c\\u5728\\u65b0\\u5e74\\u5230\\u6765\\u65f6\\uff0c\\u56de\\u5fc6\\u4e0b2021\\u7684\\u8fc7\\u5f80\\uff0c\\u77e5\\u8fc7\\u5f80\\u65b9\\u53ef\\u5c55\\u671b\\u5373\\u5c06\\u5230\\u6765\\u76842022\\u3002","html":"<p>\\u4e0d\\u77e5\\u4f55\\u65f6\\u611f\\u89c9\\u65f6\\u95f4\\u4e00\\u5e74\\u6bd4\\u4e00\\u5e74\\u8fc7\\u5f97\\u5feb\\uff0c\\u65f6\\u95f4\\u662f\\u8fc7\\u53bb\\u4e86\\uff0c\\u5728\\u65b0\\u5e74\\u5230\\u6765\\u65f6\\uff0c\\u56de\\u5fc6\\u4e0b2021\\u7684\\u8fc7\\u5f80\\uff0c\\u77e5\\u8fc7\\u5f80\\u65b9\\u53ef\\u5c55\\u671b\\u5373\\u5c06\\u5230\\u6765\\u76842022\\u3002<\\/p>"}',
                'page_image' => NULL,
                'meta_description' => '不知何时感觉时间一年比一年过得快，时间是过去了，在新年到来时，回忆下2021的过往，知过往方可展望即将到来的2022。',
                'is_original' => 0,
                'is_draft' => 1,
                'view_count' => 9,
                'published_at' => '2022-01-03 12:00:00',
                'created_at' => '2021-12-31 22:49:13',
                'updated_at' => '2022-01-05 15:53:01',
                'deleted_at' => NULL,
            ),
            31 => 
            array (
                'id' => 32,
                'category_id' => 5,
                'collection_id' => 0,
                'user_id' => 2,
                'last_user_id' => 2,
                'slug' => 'redis-p22t7',
                'title' => 'redis 命令',
                'subtitle' => 'redis 版本不断更新，过一遍它的命令，在来研究的它数据结构为妙',
            'content' => '{"raw":"Redis \\u662fKey\\/Value \\u6570\\u636e\\u5e93\\uff0c\\u800c Key \\u603b\\u662f String\\uff08\\u5b57\\u7b26\\u4e32\\uff09\\u5bf9\\u8c61\\uff0cValue \\u662f9\\u79cd\\u5bf9\\u8c61\\u4e2d\\u7684\\u4e00\\u79cd\\uff1b9\\u79cd\\u5bf9\\u8c61\\u5206\\u522b\\u662f\\uff1a\\n+ [String\\uff08\\u5b57\\u7b26\\u4e32\\uff09](#string)\\n+ [Hash\\uff08\\u5b57\\u5178 or \\u54c8\\u5e0c\\uff09](#hash)\\n+ [List\\uff08\\u5217\\u8868\\uff09](#list)\\n+ [Set\\uff08\\u96c6\\u5408\\uff09](#set)\\n+ [Sort Set\\uff08\\u6709\\u5e8f\\u96c6\\u5408\\uff09](sort-set)  \\n+ [HyperLogLog](hyperloglog) \\n+ [Bit arrays\\uff08\\u4f4d\\u96c6\\u5408\\uff09](bit-arrays) \\n+ [Geospatial Indexes\\uff08\\u5730\\u7406\\u7a7a\\u95f4\\u7d22\\u5f15\\uff09]() \\n+ [Streams\\uff08\\u6d41\\u4fe1\\u606f\\uff09](streams) \\n\\n### String\\n1. \\u547d\\u4ee4\\n\\n\\t+ set [key] [value]    \\n\\t\\u7ed9\\u6307\\u5b9akey\\u8bbe\\u7f6e\\u503c\\n ```\\n\\t$ redis-cli\\n\\t127.0.0.1:6379> set msg \\"hello world\\"\\n\\tOK\\n\\t```\\n\\t+ get [key]    \\n\\t\\u83b7\\u53d6\\u6307\\u5b9akey\\u503c\\n\\t```shell\\n\\t127.0.0.1:6379> get msg\\n\\t\\"hello world\\"\\n\\t```\\n\\t+ del [key]    \\n\\t\\u5220\\u9664\\u6307\\u5b9akey\\n\\t```shell\\n\\t127.0.0.1:6379> del msg\\n\\t(integer) 1\\n\\t```\\n\\t+ exists [key] \\n\\t\\u5224\\u65ad\\u662f\\u5426\\u5b58\\u5728\\u6307\\u5b9akey\\n\\t```shell\\n\\t127.0.0.1:6379> exists msg\\n  (integer) 0\\n\\t```\\n\\t+ mset [key1] [value1] [key2] [value2]......    \\n\\t\\u6279\\u91cf\\u8bbe\\u7f6e\\u952e\\u503c\\u5bf9\\n\\t```shell\\n\\t127.0.0.1:6379> mset k1 val1 k2 val2\\n  OK\\n\\t```\\n\\t+ mget [key1] [key2]......    \\n\\t\\u6279\\u91cf\\u53d6key\\n\\t```shell\\n\\t127.0.0.1:6379> mget k1 k2\\n  1) \\"val1\\"\\n  2) \\"val2\\"\\n  ```\\n\\t+ expire [key] [time]    \\n\\t\\u7ed9\\u6307\\u5b9akey\\u8bbe\\u7f6e\\u8fc7\\u671f\\u65f6\\u95f4\\uff08\\u5355\\u4f4d\\u79d2\\uff09\\n\\t```shell\\n\\t127.0.0.1:6379> expire msg 1000\\n  (integer) 1\\n\\t```\\n\\t+ setex [key] [time] [value]    \\n\\t\\u7b49\\u4ef7\\u4e8e set + expire \\u547d\\u4ee4\\u7ec4\\u5408\\n\\t```shell\\n\\t127.0.0.1:6379> setex test 100 hello\\n  OK\\n\\t```\\n\\t+ setnx [key] [value]    \\n\\t\\u5982\\u679ckey\\u4e0d\\u5b58\\u5728\\u5219set\\u521b\\u5efa\\uff0c\\u5426\\u5219\\u8fd4\\u56de0\\n\\t```shell\\n\\t127.0.0.1:6379> setnx tmp temp\\n  (integer) 1\\n\\t```\\n\\t+ incr [key] \\n\\t```shell\\n\\t127.0.0.1:6379> set integer 10\\n  OK\\n  127.0.0.1:6379> incr integer\\n  (integer) 11\\n\\t```\\n\\t+ incrby [key] [number]\\n\\t```shell\\n\\t127.0.0.1:6379> incrby integer 5\\n  (integer) 16\\n\\t```\\n\\n2. \\u5e94\\u7528\\u573a\\u666f\\n\\n### Hash\\n1. \\u547d\\u4ee4\\n\\n + hset key field value [field value ...]\\n ```shell\\n 127.0.0.1:6379> hset hashKey field_1 val_1 f_2 v_2 f_3 v_3\\n (integer) 3\\n ```\\n + hget key field\\n ```shell\\n 127.0.0.1:6379> hget hashKey field_1\\n \\"val_1\\"\\n 127.0.0.1:6379> hget hashKey f_2\\n \\"v_2\\"\\n ```\\n + hgetall\\n ```shell\\n 127.0.0.1:6379> hgetall hashKey\\n 1) \\"field_1\\"\\n 2) \\"val_1\\"\\n 3) \\"f_2\\"\\n 4) \\"v_2\\"\\n 5) \\"f_3\\"\\n 6) \\"v_3\\"\\n ```\\n + hmset\\n ```shell\\n 127.0.0.1:6379> hmset myhash f1 v1 f2 v2\\n OK\\n ```\\n + hmget\\n ```shell\\n 127.0.0.1:6379> hmget hashKey field_1 f_2 f_3\\n 1) \\"val_1\\"\\n 2) \\"v_2\\"\\n 3) \\"v_3\\"\\n 127.0.0.1:6379> hmget myhash f1 f2\\n 1) \\"v1\\"\\n 2) \\"v2\\"\\n ```\\n + hkeys\\n ```shell\\n 127.0.0.1:6379> hkeys myhash\\n 1) \\"f1\\"\\n 2) \\"f2\\"\\n ```\\n + hvals\\n ```shell\\n 127.0.0.1:6379> hvals myhash\\n 1) \\"v1\\"\\n 2) \\"v2\\"\\n ```\\n + hexists\\n ```shell\\n 127.0.0.1:6379> hexists myhash f1\\n (integer) 1\\n ```\\n + hlen\\n ```shell\\n 127.0.0.1:6379> hlen myhash\\n (integer) 2\\n ```\\n + hrandfield\\n ```shell\\n 127.0.0.1:6379> hrandfield hashKey 2\\n 1) \\"f_3\\"\\n 2) \\"f_2\\"\\n 127.0.0.1:6379> hrandfield hashKey 2\\n 1) \\"field_1\\"\\n 2) \\"f_2\\"\\n ```\\n + hscan  ????  \\n \\n + hsetnx\\n ```shell\\n 127.0.0.1:6379> hsetnx myhash f1 v1\\n (integer) 0\\n ```\\n + hstrlen\\n ```shell\\n 127.0.0.1:6379> hstrlen myhash f2\\n (integer) 2\\n ```\\n\\n2. \\u5e94\\u7528\\u573a\\u666f\\n\\n### List\\n1. \\u547d\\u4ee4\\n\\n + lpush key value [value ...]\\n ```\\n 127.0.0.1:6379> lpush mylist v1 v2 v3\\n (integer) 3\\n ```\\n + rpush key value [value ...]\\n ```\\n 127.0.0.1:6379> rpush mylist v4\\n (integer) 4\\n 127.0.0.1:6379> lrange mylist 0 3\\n 1) \\"v3\\"\\n 2) \\"v2\\"\\n 3) \\"v1\\"\\n 4) \\"v4\\"\\n ```\\n + lset key index value\\n ```\\n 127.0.0.1:6379> lset mylist 3 v0\\n OK\\n 127.0.0.1:6379> lrange mylist 0 3\\n 1) \\"v3\\"\\n 2) \\"v2\\"\\n 3) \\"v1\\"\\n 4) \\"v0\\"\\n ```\\n + lindex key index\\n ```\\n 127.0.0.1:6379> lindex mylist 3\\n\\"v0\\"\\n127.0.0.1:6379> lindex mylist 0\\n\\"v3\\"\\n ```\\n + lpop key [count]\\n ```\\n 127.0.0.1:6379> rpop mylist\\n\\"v0\\"\\n127.0.0.1:6379> lrange mylist 0 3\\n1) \\"v3\\"\\n2) \\"v2\\"\\n3) \\"v1\\"\\n ```\\n + rpop key [count]\\n ```\\n 127.0.0.1:6379> lpop mylist\\n\\"v3\\"\\n127.0.0.1:6379> lrange mylist 0 3\\n1) \\"v2\\"\\n2) \\"v1\\"\\n ```\\n + linsert key BEFORE|AFTER pivot element\\n ```\\n 127.0.0.1:6379> lrange mylist 0 3\\n1) \\"v2\\"\\n2) \\"v1\\"\\n127.0.0.1:6379> linsert mylist before v1 v3\\n(integer) 3\\n127.0.0.1:6379> lrange mylist 0 3\\n1) \\"v2\\"\\n2) \\"v3\\"\\n3) \\"v1\\"\\n127.0.0.1:6379> linsert mylist before v1 v4\\n(integer) 4\\n127.0.0.1:6379> linsert mylist before v1 v4\\n(integer) 5\\n127.0.0.1:6379> lrange mylist 0 5\\n1) \\"v2\\"\\n2) \\"v3\\"\\n3) \\"v4\\"\\n4) \\"v4\\"\\n5) \\"v1\\"\\n ```\\n + lrem key count element\\n ```\\n 127.0.0.1:6379> linsert mylist before v1 v3\\n(integer) 6\\n127.0.0.1:6379> linsert mylist before v1 v3\\n(integer) 7\\n127.0.0.1:6379> linsert mylist before v1 v3\\n(integer) 8\\n127.0.0.1:6379> lrange mylist 0 9\\n1) \\"v2\\"\\n2) \\"v3\\"\\n3) \\"v4\\"\\n4) \\"v4\\"\\n5) \\"v3\\"\\n6) \\"v3\\"\\n7) \\"v3\\"\\n8) \\"v1\\"\\n127.0.0.1:6379> lrem mylist 3 v3\\n(integer) 3\\n127.0.0.1:6379> lrange mylist 0 9\\n1) \\"v2\\"\\n2) \\"v4\\"\\n3) \\"v4\\"\\n4) \\"v3\\"\\n5) \\"v1\\"\\n ```\\n + lindex key index\\n ```\\n 127.0.0.1:6379> lindex mylist 0\\n\\"v2\\"\\n ```\\n+ llen key\\n```\\n127.0.0.1:6379> llen mylist\\n(integer) 5\\n```\\n+ ltrim key start stop\\n```\\n127.0.0.1:6379> lrange mylist 0 9\\n1) \\"v2\\"\\n2) \\"v4\\"\\n3) \\"v4\\"\\n4) \\"v3\\"\\n5) \\"v1\\"\\n127.0.0.1:6379> ltrim mylist 0 3\\nOK\\n127.0.0.1:6379> lrange mylist 0 9\\n1) \\"v2\\"\\n2) \\"v4\\"\\n3) \\"v4\\"\\n4) \\"v3\\"\\n```\\n+ blpop key [key ...] timeout\\n```\\n```\\n+ brpop\\n```\\n```\\n+ brpoplpush\\n```\\n```\\n\\n2. \\u5e94\\u7528\\u573a\\u666f\\n\\n### Set\\n1. \\u547d\\u4ee4\\n\\n+ \\n```\\n```\\n+ \\n```\\n```\\n+ \\n```\\n```\\n+ \\n```\\n```\\n+ \\n```\\n```\\n2. \\u5e94\\u7528\\u573a\\u666f\\n\\n### Sort Set\\n1. \\u547d\\u4ee4\\n2. \\u5e94\\u7528\\u573a\\u666f\\n\\n### HyperLogLog\\n1. \\u547d\\u4ee4\\n2. \\u5e94\\u7528\\u573a\\u666f\\n\\n### Bit arrays\\n1. \\u547d\\u4ee4\\n2. \\u5e94\\u7528\\u573a\\u666f\\n\\n### Streams\\n1. \\u547d\\u4ee4\\n2. \\u5e94\\u7528\\u573a\\u666f","html":"<p>Redis \\u662fKey\\/Value \\u6570\\u636e\\u5e93\\uff0c\\u800c Key \\u603b\\u662f String\\uff08\\u5b57\\u7b26\\u4e32\\uff09\\u5bf9\\u8c61\\uff0cValue \\u662f9\\u79cd\\u5bf9\\u8c61\\u4e2d\\u7684\\u4e00\\u79cd\\uff1b9\\u79cd\\u5bf9\\u8c61\\u5206\\u522b\\u662f\\uff1a<\\/p>\\n<ul>\\n<li><a href=\\"#string\\">String\\uff08\\u5b57\\u7b26\\u4e32\\uff09<\\/a><\\/li>\\n<li><a href=\\"#hash\\">Hash\\uff08\\u5b57\\u5178 or \\u54c8\\u5e0c\\uff09<\\/a><\\/li>\\n<li><a href=\\"#list\\">List\\uff08\\u5217\\u8868\\uff09<\\/a><\\/li>\\n<li><a href=\\"#set\\">Set\\uff08\\u96c6\\u5408\\uff09<\\/a><\\/li>\\n<li><a href=\\"sort-set\\">Sort Set\\uff08\\u6709\\u5e8f\\u96c6\\u5408\\uff09<\\/a>  <\\/li>\\n<li><a href=\\"hyperloglog\\">HyperLogLog<\\/a> <\\/li>\\n<li><a href=\\"bit-arrays\\">Bit arrays\\uff08\\u4f4d\\u96c6\\u5408\\uff09<\\/a> <\\/li>\\n<li>[Geospatial Indexes\\uff08\\u5730\\u7406\\u7a7a\\u95f4\\u7d22\\u5f15\\uff09]() <\\/li>\\n<li><a href=\\"streams\\">Streams\\uff08\\u6d41\\u4fe1\\u606f\\uff09<\\/a> <\\/li>\\n<\\/ul>\\n<h3>String<\\/h3>\\n<ol>\\n<li>\\n<p>\\u547d\\u4ee4<\\/p>\\n<ul>\\n<li>set [key] [value]<br \\/>\\n\\u7ed9\\u6307\\u5b9akey\\u8bbe\\u7f6e\\u503c\\n<pre><code>$ redis-cli\\n127.0.0.1:6379&gt; set msg \\"hello world\\"\\nOK<\\/code><\\/pre><\\/li>\\n<li>get [key]<br \\/>\\n\\u83b7\\u53d6\\u6307\\u5b9akey\\u503c\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; get msg\\n\\"hello world\\"<\\/code><\\/pre><\\/li>\\n<li>del [key]<br \\/>\\n\\u5220\\u9664\\u6307\\u5b9akey\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; del msg\\n(integer) 1<\\/code><\\/pre><\\/li>\\n<li>exists [key]<br \\/>\\n\\u5224\\u65ad\\u662f\\u5426\\u5b58\\u5728\\u6307\\u5b9akey\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; exists msg\\n(integer) 0<\\/code><\\/pre><\\/li>\\n<li>mset [key1] [value1] [key2] [value2]......<br \\/>\\n\\u6279\\u91cf\\u8bbe\\u7f6e\\u952e\\u503c\\u5bf9\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; mset k1 val1 k2 val2\\nOK<\\/code><\\/pre><\\/li>\\n<li>mget [key1] [key2]......<br \\/>\\n\\u6279\\u91cf\\u53d6key\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; mget k1 k2\\n1) \\"val1\\"\\n2) \\"val2\\"<\\/code><\\/pre><\\/li>\\n<li>expire [key] [time]<br \\/>\\n\\u7ed9\\u6307\\u5b9akey\\u8bbe\\u7f6e\\u8fc7\\u671f\\u65f6\\u95f4\\uff08\\u5355\\u4f4d\\u79d2\\uff09\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; expire msg 1000\\n(integer) 1<\\/code><\\/pre><\\/li>\\n<li>setex [key] [time] [value]<br \\/>\\n\\u7b49\\u4ef7\\u4e8e set + expire \\u547d\\u4ee4\\u7ec4\\u5408\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; setex test 100 hello\\nOK<\\/code><\\/pre><\\/li>\\n<li>setnx [key] [value]<br \\/>\\n\\u5982\\u679ckey\\u4e0d\\u5b58\\u5728\\u5219set\\u521b\\u5efa\\uff0c\\u5426\\u5219\\u8fd4\\u56de0\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; setnx tmp temp\\n(integer) 1<\\/code><\\/pre><\\/li>\\n<li>incr [key] \\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; set integer 10\\nOK\\n127.0.0.1:6379&gt; incr integer\\n(integer) 11<\\/code><\\/pre><\\/li>\\n<li>incrby [key] [number]\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; incrby integer 5\\n(integer) 16<\\/code><\\/pre><\\/li>\\n<\\/ul>\\n<\\/li>\\n<li>\\n<p>\\u5e94\\u7528\\u573a\\u666f<\\/p>\\n<\\/li>\\n<\\/ol>\\n<h3>Hash<\\/h3>\\n<ol>\\n<li>\\n<p>\\u547d\\u4ee4<\\/p>\\n<ul>\\n<li>\\n<p>hset key field value [field value ...]<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hset hashKey field_1 val_1 f_2 v_2 f_3 v_3\\n(integer) 3<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hget key field<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hget hashKey field_1\\n\\"val_1\\"\\n127.0.0.1:6379&gt; hget hashKey f_2\\n\\"v_2\\"<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hgetall<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hgetall hashKey\\n1) \\"field_1\\"\\n2) \\"val_1\\"\\n3) \\"f_2\\"\\n4) \\"v_2\\"\\n5) \\"f_3\\"\\n6) \\"v_3\\"<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hmset<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hmset myhash f1 v1 f2 v2\\nOK<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hmget<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hmget hashKey field_1 f_2 f_3\\n1) \\"val_1\\"\\n2) \\"v_2\\"\\n3) \\"v_3\\"\\n127.0.0.1:6379&gt; hmget myhash f1 f2\\n1) \\"v1\\"\\n2) \\"v2\\"<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hkeys<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hkeys myhash\\n1) \\"f1\\"\\n2) \\"f2\\"<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hvals<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hvals myhash\\n1) \\"v1\\"\\n2) \\"v2\\"<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hexists<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hexists myhash f1\\n(integer) 1<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hlen<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hlen myhash\\n(integer) 2<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hrandfield<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hrandfield hashKey 2\\n1) \\"f_3\\"\\n2) \\"f_2\\"\\n127.0.0.1:6379&gt; hrandfield hashKey 2\\n1) \\"field_1\\"\\n2) \\"f_2\\"<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hscan  ????  <\\/p>\\n<\\/li>\\n<li>\\n<p>hsetnx<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hsetnx myhash f1 v1\\n(integer) 0<\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<p>hstrlen<\\/p>\\n<pre><code class=\\"language-shell\\">127.0.0.1:6379&gt; hstrlen myhash f2\\n(integer) 2<\\/code><\\/pre>\\n<\\/li>\\n<\\/ul>\\n<\\/li>\\n<li>\\n<p>\\u5e94\\u7528\\u573a\\u666f<\\/p>\\n<\\/li>\\n<\\/ol>\\n<h3>List<\\/h3>\\n<ol>\\n<li>\\n<p>\\u547d\\u4ee4<\\/p>\\n<ul>\\n<li>lpush key value [value ...]\\n<pre><code>127.0.0.1:6379&gt; lpush mylist v1 v2 v3\\n(integer) 3<\\/code><\\/pre><\\/li>\\n<li>rpush key value [value ...]\\n<pre><code>127.0.0.1:6379&gt; rpush mylist v4\\n(integer) 4\\n127.0.0.1:6379&gt; lrange mylist 0 3\\n1) \\"v3\\"\\n2) \\"v2\\"\\n3) \\"v1\\"\\n4) \\"v4\\"<\\/code><\\/pre><\\/li>\\n<li>lset key index value\\n<pre><code>127.0.0.1:6379&gt; lset mylist 3 v0\\nOK\\n127.0.0.1:6379&gt; lrange mylist 0 3\\n1) \\"v3\\"\\n2) \\"v2\\"\\n3) \\"v1\\"\\n4) \\"v0\\"<\\/code><\\/pre><\\/li>\\n<li>lindex key index\\n<pre><code>127.0.0.1:6379&gt; lindex mylist 3\\n\\"v0\\"\\n127.0.0.1:6379&gt; lindex mylist 0\\n\\"v3\\"<\\/code><\\/pre><\\/li>\\n<li>lpop key [count]\\n<pre><code>127.0.0.1:6379&gt; rpop mylist\\n\\"v0\\"\\n127.0.0.1:6379&gt; lrange mylist 0 3\\n1) \\"v3\\"\\n2) \\"v2\\"\\n3) \\"v1\\"<\\/code><\\/pre><\\/li>\\n<li>rpop key [count]\\n<pre><code>127.0.0.1:6379&gt; lpop mylist\\n\\"v3\\"\\n127.0.0.1:6379&gt; lrange mylist 0 3\\n1) \\"v2\\"\\n2) \\"v1\\"<\\/code><\\/pre><\\/li>\\n<li>linsert key BEFORE|AFTER pivot element\\n<pre><code>127.0.0.1:6379&gt; lrange mylist 0 3\\n1) \\"v2\\"\\n2) \\"v1\\"\\n127.0.0.1:6379&gt; linsert mylist before v1 v3\\n(integer) 3\\n127.0.0.1:6379&gt; lrange mylist 0 3\\n1) \\"v2\\"\\n2) \\"v3\\"\\n3) \\"v1\\"\\n127.0.0.1:6379&gt; linsert mylist before v1 v4\\n(integer) 4\\n127.0.0.1:6379&gt; linsert mylist before v1 v4\\n(integer) 5\\n127.0.0.1:6379&gt; lrange mylist 0 5\\n1) \\"v2\\"\\n2) \\"v3\\"\\n3) \\"v4\\"\\n4) \\"v4\\"\\n5) \\"v1\\"<\\/code><\\/pre><\\/li>\\n<li>lrem key count element\\n<pre><code>127.0.0.1:6379&gt; linsert mylist before v1 v3\\n(integer) 6\\n127.0.0.1:6379&gt; linsert mylist before v1 v3\\n(integer) 7\\n127.0.0.1:6379&gt; linsert mylist before v1 v3\\n(integer) 8\\n127.0.0.1:6379&gt; lrange mylist 0 9\\n1) \\"v2\\"\\n2) \\"v3\\"\\n3) \\"v4\\"\\n4) \\"v4\\"\\n5) \\"v3\\"\\n6) \\"v3\\"\\n7) \\"v3\\"\\n8) \\"v1\\"\\n127.0.0.1:6379&gt; lrem mylist 3 v3\\n(integer) 3\\n127.0.0.1:6379&gt; lrange mylist 0 9\\n1) \\"v2\\"\\n2) \\"v4\\"\\n3) \\"v4\\"\\n4) \\"v3\\"\\n5) \\"v1\\"<\\/code><\\/pre><\\/li>\\n<li>lindex key index\\n<pre><code>127.0.0.1:6379&gt; lindex mylist 0\\n\\"v2\\"<\\/code><\\/pre><\\/li>\\n<li>llen key\\n<pre><code>127.0.0.1:6379&gt; llen mylist\\n(integer) 5<\\/code><\\/pre><\\/li>\\n<li>ltrim key start stop\\n<pre><code>127.0.0.1:6379&gt; lrange mylist 0 9\\n1) \\"v2\\"\\n2) \\"v4\\"\\n3) \\"v4\\"\\n4) \\"v3\\"\\n5) \\"v1\\"\\n127.0.0.1:6379&gt; ltrim mylist 0 3\\nOK\\n127.0.0.1:6379&gt; lrange mylist 0 9\\n1) \\"v2\\"\\n2) \\"v4\\"\\n3) \\"v4\\"\\n4) \\"v3\\"<\\/code><\\/pre><\\/li>\\n<li>blpop key [key ...] timeout\\n<pre><code><\\/code><\\/pre><\\/li>\\n<li>brpop\\n<pre><code><\\/code><\\/pre><\\/li>\\n<li>brpoplpush\\n<pre><code><\\/code><\\/pre><\\/li>\\n<\\/ul>\\n<\\/li>\\n<li>\\n<p>\\u5e94\\u7528\\u573a\\u666f<\\/p>\\n<\\/li>\\n<\\/ol>\\n<h3>Set<\\/h3>\\n<ol>\\n<li>\\u547d\\u4ee4<\\/li>\\n<\\/ol>\\n<ul>\\n<li>\\n<pre><code><\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<pre><code><\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<pre><code><\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<pre><code><\\/code><\\/pre>\\n<\\/li>\\n<li>\\n<pre><code><\\/code><\\/pre>\\n<ol start=\\"2\\">\\n<li>\\u5e94\\u7528\\u573a\\u666f<\\/li>\\n<\\/ol>\\n<\\/li>\\n<\\/ul>\\n<h3>Sort Set<\\/h3>\\n<ol>\\n<li>\\u547d\\u4ee4<\\/li>\\n<li>\\u5e94\\u7528\\u573a\\u666f<\\/li>\\n<\\/ol>\\n<h3>HyperLogLog<\\/h3>\\n<ol>\\n<li>\\u547d\\u4ee4<\\/li>\\n<li>\\u5e94\\u7528\\u573a\\u666f<\\/li>\\n<\\/ol>\\n<h3>Bit arrays<\\/h3>\\n<ol>\\n<li>\\u547d\\u4ee4<\\/li>\\n<li>\\u5e94\\u7528\\u573a\\u666f<\\/li>\\n<\\/ol>\\n<h3>Streams<\\/h3>\\n<ol>\\n<li>\\u547d\\u4ee4<\\/li>\\n<li>\\u5e94\\u7528\\u573a\\u666f<\\/li>\\n<\\/ol>"}',
                'page_image' => NULL,
                'meta_description' => 'redis 版本不断更新，过一遍它的命令，在来研究的它数据结构为妙',
                'is_original' => 0,
                'is_draft' => 0,
                'view_count' => 12,
                'published_at' => '2022-01-03 00:00:00',
                'created_at' => '2022-01-02 21:32:15',
                'updated_at' => '2022-01-09 15:59:12',
                'deleted_at' => NULL,
            ),
        ));
        
        
    }
}